CCS PCM C Compiler, Version 5.015, 5967               15-Apr-24 09:33

               Filename:   E:\STUDY\HKII-2023-2024\DO_AN_1\PROJECT\CODE\code_do_an_1.lst

               ROM used:   4475 words (55%)
                           Largest free fragment is 2048
               RAM used:   66 (18%) at main() level
                           107 (29%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  10
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.0
002A:  GOTO   02D
002B:  BTFSC  0C.0
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   051
.................... #include <thu_vien_do_an_1.c> 
.................... /* 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................                        SU PHAM KY THUAT - TP.HCM 
....................  DO AN 1 - HIEU CHINH NHIET DO HO CA VA CHO CA AN TU DONG - KET NOI ESP 
....................  
....................    THANH VIEN: 
....................       VO MINH THUAN   - 21161366 
....................       LE QUANG THUONG - 21161367 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... */ 
.................... #include <define_pic_16f877a.c> 
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
0065:  DATA C4,37
0066:  DATA A0,30
0067:  DATA 6E,10
0068:  DATA 31,10
0069:  DATA 2D,10
006A:  DATA C8,25
006B:  DATA C9,24
006C:  DATA 00,00
006D:  DATA 53,28
006E:  DATA 4B,2A
006F:  DATA 2D,2A
0070:  DATA 50,24
0071:  DATA C3,26
0072:  DATA 00,00
0073:  DATA 2E,00
0074:  DATA 2E,00
0075:  DATA 2D,00
0076:  DATA 2D,00
0077:  DATA A0,16
0078:  DATA 20,00
0079:  DATA 20,27
007A:  DATA 20,00
007B:  DATA 47,28
007C:  DATA 47,00
007D:  DATA 4E,2A
007E:  DATA 4E,00
007F:  DATA 20,2A
0080:  DATA 20,00
0081:  DATA DF,2F
0082:  DATA 00,00
0083:  DATA DF,2F
0084:  DATA 00,00
0085:  DATA CE,27
0086:  DATA 20,22
0087:  DATA D3,18
0088:  DATA 38,21
0089:  DATA 32,18
008A:  DATA 00,00
008B:  DATA C3,27
008C:  DATA 20,22
008D:  DATA D3,18
008E:  DATA 38,21
008F:  DATA 32,18
0090:  DATA 00,00
0091:  DATA 4E,22
0092:  DATA 3A,10
0093:  DATA 00,01
0094:  DATA A0,37
0095:  DATA 43,00
0096:  DATA 4E,22
0097:  DATA 3A,10
0098:  DATA 00,01
0099:  DATA A0,37
009A:  DATA 43,00
009B:  DATA 47,24
009C:  DATA 5F,27
009D:  DATA 44,1D
009E:  DATA 20,00
009F:  DATA A0,37
00A0:  DATA 43,00
00A1:  DATA E3,30
00A2:  DATA 69,10
00A3:  DATA E4,30
00A4:  DATA 74,10
00A5:  DATA E4,37
00A6:  DATA EE,33
00A7:  DATA 20,34
00A8:  DATA 6F,00
00A9:  DATA F4,17
00AA:  DATA 67,10
00AB:  DATA 63,34
00AC:  DATA 6F,10
00AD:  DATA E3,30
00AE:  DATA A0,30
00AF:  DATA 6E,00
00B0:  DATA 63,34
00B1:  DATA E5,31
00B2:  DATA 6B,10
00B3:  DATA E3,37
00B4:  DATA 6D,10
00B5:  DATA E5,39
00B6:  DATA 70,00
00B7:  DATA 49,37
00B8:  DATA E6,37
00B9:  DATA F2,36
00BA:  DATA 61,3A
00BB:  DATA E9,37
00BC:  DATA 6E,00
00BD:  DATA D6,32
00BE:  DATA F2,39
00BF:  DATA E9,37
00C0:  DATA 6E,1D
00C1:  DATA 20,2B
00C2:  DATA 31,17
00C3:  DATA 30,17
00C4:  DATA 30,00
*
0397:  MOVF   0B,W
0398:  MOVWF  71
0399:  BCF    0B.7
039A:  BSF    03.5
039B:  BSF    03.6
039C:  BSF    0C.7
039D:  BSF    0C.0
039E:  NOP
039F:  NOP
03A0:  BTFSS  71.7
03A1:  GOTO   3A7
03A2:  BCF    03.5
03A3:  BCF    03.6
03A4:  BSF    0B.7
03A5:  BSF    03.5
03A6:  BSF    03.6
03A7:  BCF    03.5
03A8:  MOVF   0C,W
03A9:  ANDLW  7F
03AA:  BTFSC  03.2
03AB:  GOTO   3E5
03AC:  MOVWF  71
03AD:  MOVF   0D,W
03AE:  MOVWF  72
03AF:  MOVF   0F,W
03B0:  MOVWF  73
03B1:  MOVF   71,W
03B2:  MOVWF  74
03B3:  BCF    03.6
03B4:  CALL   37A
03B5:  MOVF   72,W
03B6:  BSF    03.6
03B7:  MOVWF  0D
03B8:  MOVF   73,W
03B9:  MOVWF  0F
03BA:  BCF    03.6
03BB:  MOVF   0B,W
03BC:  MOVWF  74
03BD:  BCF    0B.7
03BE:  BSF    03.5
03BF:  BSF    03.6
03C0:  BSF    0C.7
03C1:  BSF    0C.0
03C2:  NOP
03C3:  NOP
03C4:  BTFSS  74.7
03C5:  GOTO   3CB
03C6:  BCF    03.5
03C7:  BCF    03.6
03C8:  BSF    0B.7
03C9:  BSF    03.5
03CA:  BSF    03.6
03CB:  BCF    03.5
03CC:  RLF    0C,W
03CD:  RLF    0E,W
03CE:  ANDLW  7F
03CF:  BTFSC  03.2
03D0:  GOTO   3E5
03D1:  MOVWF  71
03D2:  MOVF   0D,W
03D3:  MOVWF  72
03D4:  MOVF   0F,W
03D5:  MOVWF  73
03D6:  MOVF   71,W
03D7:  MOVWF  74
03D8:  BCF    03.6
03D9:  CALL   37A
03DA:  MOVF   72,W
03DB:  BSF    03.6
03DC:  MOVWF  0D
03DD:  MOVF   73,W
03DE:  MOVWF  0F
03DF:  INCF   0D,F
03E0:  BTFSC  03.2
03E1:  INCF   0F,F
03E2:  BCF    03.6
03E3:  GOTO   397
03E4:  BSF    03.6
03E5:  BCF    03.6
03E6:  RETURN
03E7:  MOVLW  10
03E8:  MOVWF  64
03E9:  CLRF   77
03EA:  CLRF   7A
03EB:  RRF    61,F
03EC:  RRF    60,F
03ED:  BTFSS  03.0
03EE:  GOTO   3F5
03EF:  MOVF   62,W
03F0:  ADDWF  77,F
03F1:  BTFSC  03.0
03F2:  INCF   7A,F
03F3:  MOVF   63,W
03F4:  ADDWF  7A,F
03F5:  RRF    7A,F
03F6:  RRF    77,F
03F7:  RRF    79,F
03F8:  RRF    78,F
03F9:  DECFSZ 64,F
03FA:  GOTO   3EB
03FB:  RETURN
*
06BB:  CLRF   78
06BC:  CLRF   79
06BD:  CLRF   77
06BE:  CLRF   7A
06BF:  MOVF   6B,W
06C0:  BTFSS  03.2
06C1:  GOTO   6C5
06C2:  MOVF   6A,W
06C3:  BTFSC  03.2
06C4:  GOTO   6DF
06C5:  MOVLW  10
06C6:  MOVWF  6C
06C7:  BCF    03.0
06C8:  RLF    68,F
06C9:  RLF    69,F
06CA:  RLF    77,F
06CB:  RLF    7A,F
06CC:  MOVF   6B,W
06CD:  SUBWF  7A,W
06CE:  BTFSS  03.2
06CF:  GOTO   6D2
06D0:  MOVF   6A,W
06D1:  SUBWF  77,W
06D2:  BTFSS  03.0
06D3:  GOTO   6DB
06D4:  MOVF   6A,W
06D5:  SUBWF  77,F
06D6:  BTFSS  03.0
06D7:  DECF   7A,F
06D8:  MOVF   6B,W
06D9:  SUBWF  7A,F
06DA:  BSF    03.0
06DB:  RLF    78,F
06DC:  RLF    79,F
06DD:  DECFSZ 6C,F
06DE:  GOTO   6C7
06DF:  RETURN
*
076B:  MOVF   60,W
076C:  ANDLW  07
076D:  MOVWF  77
076E:  RRF    60,W
076F:  MOVWF  78
0770:  RRF    78,F
0771:  RRF    78,F
0772:  MOVLW  1F
0773:  ANDWF  78,F
0774:  MOVF   78,W
0775:  ADDWF  62,W
0776:  MOVWF  04
0777:  BCF    03.7
0778:  BTFSC  63.0
0779:  BSF    03.7
077A:  CLRF   78
077B:  INCF   78,F
077C:  INCF   77,F
077D:  GOTO   77F
077E:  RLF    78,F
077F:  DECFSZ 77,F
0780:  GOTO   77E
0781:  MOVF   61,F
0782:  BTFSC  03.2
0783:  GOTO   787
0784:  MOVF   78,W
0785:  IORWF  00,F
0786:  GOTO   78A
0787:  COMF   78,F
0788:  MOVF   78,W
0789:  ANDWF  00,F
078A:  RETURN
078B:  MOVF   60,W
078C:  ANDLW  07
078D:  MOVWF  77
078E:  RRF    60,W
078F:  MOVWF  78
0790:  RRF    78,F
0791:  RRF    78,F
0792:  MOVLW  1F
0793:  ANDWF  78,F
0794:  MOVF   78,W
0795:  ADDWF  61,W
0796:  MOVWF  04
0797:  BCF    03.7
0798:  BTFSC  62.0
0799:  BSF    03.7
079A:  MOVF   00,W
079B:  MOVWF  78
079C:  INCF   77,F
079D:  GOTO   79F
079E:  RRF    78,F
079F:  DECFSZ 77,F
07A0:  GOTO   79E
07A1:  RETURN
*
0800:  CLRF   77
0801:  CLRF   78
0802:  MOVF   63,W
0803:  BCF    03.0
0804:  BTFSC  64.0
0805:  ADDWF  77,F
0806:  RRF    77,F
0807:  RRF    78,F
0808:  BTFSC  64.1
0809:  ADDWF  77,F
080A:  RRF    77,F
080B:  RRF    78,F
080C:  BTFSC  64.2
080D:  ADDWF  77,F
080E:  RRF    77,F
080F:  RRF    78,F
0810:  BTFSC  64.3
0811:  ADDWF  77,F
0812:  RRF    77,F
0813:  RRF    78,F
0814:  BTFSC  64.4
0815:  ADDWF  77,F
0816:  RRF    77,F
0817:  RRF    78,F
0818:  BTFSC  64.5
0819:  ADDWF  77,F
081A:  RRF    77,F
081B:  RRF    78,F
081C:  BTFSC  64.6
081D:  ADDWF  77,F
081E:  RRF    77,F
081F:  RRF    78,F
0820:  BTFSC  64.7
0821:  ADDWF  77,F
0822:  RRF    77,F
0823:  RRF    78,F
0824:  RETURN
0825:  MOVF   72,W
0826:  CLRF   78
0827:  SUBWF  71,W
0828:  BTFSC  03.0
0829:  GOTO   02D
082A:  MOVF   71,W
082B:  MOVWF  77
082C:  GOTO   039
082D:  CLRF   77
082E:  MOVLW  08
082F:  MOVWF  73
0830:  RLF    71,F
0831:  RLF    77,F
0832:  MOVF   72,W
0833:  SUBWF  77,W
0834:  BTFSC  03.0
0835:  MOVWF  77
0836:  RLF    78,F
0837:  DECFSZ 73,F
0838:  GOTO   030
0839:  RETURN
*
0ADF:  MOVF   5D,W
0AE0:  XORWF  5E,W
0AE1:  ANDLW  80
0AE2:  MOVWF  60
0AE3:  BTFSS  5D.7
0AE4:  GOTO   2E7
0AE5:  COMF   5D,F
0AE6:  INCF   5D,F
0AE7:  BTFSS  5E.7
0AE8:  GOTO   2EB
0AE9:  COMF   5E,F
0AEA:  INCF   5E,F
0AEB:  MOVF   5E,W
0AEC:  CLRF   78
0AED:  SUBWF  5D,W
0AEE:  BTFSC  03.0
0AEF:  GOTO   2F3
0AF0:  MOVF   5D,W
0AF1:  MOVWF  77
0AF2:  GOTO   2FF
0AF3:  CLRF   77
0AF4:  MOVLW  08
0AF5:  MOVWF  5F
0AF6:  RLF    5D,F
0AF7:  RLF    77,F
0AF8:  MOVF   5E,W
0AF9:  SUBWF  77,W
0AFA:  BTFSC  03.0
0AFB:  MOVWF  77
0AFC:  RLF    78,F
0AFD:  DECFSZ 5F,F
0AFE:  GOTO   2F6
0AFF:  BTFSS  60.7
0B00:  GOTO   303
0B01:  COMF   78,F
0B02:  INCF   78,F
0B03:  RETURN
....................  
.................... #list 
....................  
.................... #device  adc=10 
.................... #fuses   hs, nowdt, put, noprotect, nolvp 
.................... #use     delay(clock=20MHz)  
*
0163:  MOVLW  63
0164:  MOVWF  04
0165:  BCF    03.7
0166:  MOVF   00,W
0167:  BTFSC  03.2
0168:  GOTO   176
0169:  MOVLW  06
016A:  MOVWF  78
016B:  CLRF   77
016C:  DECFSZ 77,F
016D:  GOTO   16C
016E:  DECFSZ 78,F
016F:  GOTO   16B
0170:  MOVLW  7B
0171:  MOVWF  77
0172:  DECFSZ 77,F
0173:  GOTO   172
0174:  DECFSZ 00,F
0175:  GOTO   169
0176:  RETURN
*
057D:  MOVLW  03
057E:  SUBWF  60,F
057F:  BTFSS  03.0
0580:  GOTO   58B
0581:  MOVLW  60
0582:  MOVWF  04
0583:  BCF    03.7
0584:  MOVF   00,W
0585:  BTFSC  03.2
0586:  GOTO   58B
0587:  GOTO   589
0588:  GOTO   589
0589:  DECFSZ 00,F
058A:  GOTO   588
058B:  RETURN
.................... #use     i2c(master,slow,sda=pin_c4,scl=pin_c3) 
*
0107:  MOVLW  08
0108:  MOVWF  78
0109:  MOVLW  04
010A:  MOVWF  77
010B:  DECFSZ 77,F
010C:  GOTO   10B
010D:  BCF    07.3
010E:  BCF    2B.3
010F:  MOVF   2B,W
0110:  BSF    03.5
0111:  MOVWF  07
0112:  MOVLW  03
0113:  MOVWF  77
0114:  DECFSZ 77,F
0115:  GOTO   114
0116:  RLF    29,F
0117:  BCF    03.5
0118:  BCF    07.4
0119:  BTFSS  03.0
011A:  GOTO   121
011B:  BSF    2B.4
011C:  MOVF   2B,W
011D:  BSF    03.5
011E:  MOVWF  07
011F:  GOTO   125
0120:  BCF    03.5
0121:  BCF    2B.4
0122:  MOVF   2B,W
0123:  BSF    03.5
0124:  MOVWF  07
0125:  NOP
0126:  BCF    03.5
0127:  BSF    2B.3
0128:  MOVF   2B,W
0129:  BSF    03.5
012A:  MOVWF  07
012B:  BCF    03.5
012C:  BTFSS  07.3
012D:  GOTO   12C
012E:  DECFSZ 78,F
012F:  GOTO   109
0130:  MOVLW  04
0131:  MOVWF  77
0132:  DECFSZ 77,F
0133:  GOTO   132
0134:  BCF    07.3
0135:  BCF    2B.3
0136:  MOVF   2B,W
0137:  BSF    03.5
0138:  MOVWF  07
0139:  NOP
013A:  BCF    03.5
013B:  BSF    2B.4
013C:  MOVF   2B,W
013D:  BSF    03.5
013E:  MOVWF  07
013F:  MOVLW  03
0140:  MOVWF  77
0141:  DECFSZ 77,F
0142:  GOTO   141
0143:  MOVLW  03
0144:  MOVWF  77
0145:  DECFSZ 77,F
0146:  GOTO   145
0147:  BCF    03.5
0148:  BSF    2B.3
0149:  MOVF   2B,W
014A:  BSF    03.5
014B:  MOVWF  07
014C:  BCF    03.5
014D:  BTFSS  07.3
014E:  GOTO   14D
014F:  CLRF   78
0150:  MOVLW  03
0151:  MOVWF  77
0152:  DECFSZ 77,F
0153:  GOTO   152
0154:  BTFSC  07.4
0155:  BSF    78.0
0156:  BCF    07.3
0157:  BCF    2B.3
0158:  MOVF   2B,W
0159:  BSF    03.5
015A:  MOVWF  07
015B:  BCF    03.5
015C:  BCF    07.4
015D:  BCF    2B.4
015E:  MOVF   2B,W
015F:  BSF    03.5
0160:  MOVWF  07
0161:  BCF    03.5
0162:  RETURN
*
0438:  MOVLW  08
0439:  MOVWF  62
043A:  MOVF   77,W
043B:  MOVWF  63
043C:  BSF    2B.4
043D:  MOVF   2B,W
043E:  BSF    03.5
043F:  MOVWF  07
0440:  MOVLW  03
0441:  MOVWF  77
0442:  DECFSZ 77,F
0443:  GOTO   442
0444:  BCF    03.5
0445:  BSF    2B.3
0446:  MOVF   2B,W
0447:  BSF    03.5
0448:  MOVWF  07
0449:  BCF    03.5
044A:  BTFSS  07.3
044B:  GOTO   44A
044C:  BTFSC  07.4
044D:  BSF    03.0
044E:  BTFSS  07.4
044F:  BCF    03.0
0450:  RLF    78,F
0451:  MOVLW  04
0452:  MOVWF  77
0453:  DECFSZ 77,F
0454:  GOTO   453
0455:  BCF    2B.3
0456:  MOVF   2B,W
0457:  BSF    03.5
0458:  MOVWF  07
0459:  BCF    03.5
045A:  BCF    07.3
045B:  DECFSZ 62,F
045C:  GOTO   43C
045D:  BSF    2B.4
045E:  MOVF   2B,W
045F:  BSF    03.5
0460:  MOVWF  07
0461:  MOVLW  03
0462:  MOVWF  77
0463:  DECFSZ 77,F
0464:  GOTO   463
0465:  BCF    03.5
0466:  BCF    07.4
0467:  MOVF   63,W
0468:  BTFSC  03.2
0469:  GOTO   46F
046A:  BCF    2B.4
046B:  MOVF   2B,W
046C:  BSF    03.5
046D:  MOVWF  07
046E:  BCF    03.5
046F:  NOP
0470:  BSF    2B.3
0471:  MOVF   2B,W
0472:  BSF    03.5
0473:  MOVWF  07
0474:  BCF    03.5
0475:  BTFSS  07.3
0476:  GOTO   475
0477:  MOVLW  04
0478:  MOVWF  77
0479:  DECFSZ 77,F
047A:  GOTO   479
047B:  BCF    07.3
047C:  BCF    2B.3
047D:  MOVF   2B,W
047E:  BSF    03.5
047F:  MOVWF  07
0480:  MOVLW  03
0481:  MOVWF  77
0482:  DECFSZ 77,F
0483:  GOTO   482
0484:  BCF    03.5
0485:  BCF    07.4
0486:  BCF    2B.4
0487:  MOVF   2B,W
0488:  BSF    03.5
0489:  MOVWF  07
048A:  BCF    03.5
048B:  RETURN
.................... #use     rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
....................  
.................... /* Define name again to accordant user */ 
.................... #define usi8  unsigned int8 
.................... #define usi16 unsigned int16 
.................... #define usi32 unsigned int32 
.................... #define si8   signed   int8 
.................... #define si16  signed   int16 
.................... #define si32  signed   int32 
....................  
.................... #define bool int1 
....................  
.................... #define enable  1 
.................... #define disable 0 
....................  
.................... #define on  1 
.................... #define off 0 
....................  
.................... #ifndef bt0 
.................... #define bt0    pin_b0 
.................... #endif  
....................  
.................... #ifndef bt1 
.................... #define bt1    pin_b1 
.................... #endif 
....................  
.................... #ifndef bt2 
.................... #define bt2    pin_b2 
.................... #endif 
....................  
.................... #ifndef bt3 
.................... #define bt3    pin_b3 
.................... #endif 
....................  
.................... #ifndef bt4 
.................... #define bt4    pin_b4 
.................... #endif 
....................  
.................... #ifndef pinServo 
.................... #define pinServo    pin_c1 
.................... #endif 
....................  
.................... #ifndef pinCold 
.................... #define pinCold     pin_d6 
.................... #endif 
....................  
.................... #ifndef pinHot 
.................... #define pinHot      pin_d7 
.................... #endif 
....................  
.................... usi8 gh_nd = 25; 
....................  
.................... usi8 giay_tam, bdn, tt_ht = 0; 
.................... si8 gt_mod = 0, tg_chinh = 0; 
....................  
.................... #define tang 0 
.................... #define giam 1 
....................  
.................... bool e_11, e_22, e_33; 
....................  
.................... usi8 eat_hh, eat_pp, eat_ss; 
....................  
.................... bool flag_servo; 
.................... usi8 count_servo = 0; 
....................  
.................... #int_timer1 
.................... void interrupt_timer1() 
.................... { 
....................    bdn++; 
*
0051:  INCF   2E,F
....................    set_timer1(3036); 
0052:  CLRF   0E
0053:  MOVLW  0B
0054:  MOVWF  0F
0055:  MOVLW  DC
0056:  MOVWF  0E
....................    if(flag_servo == true){ 
0057:  BTFSS  32.3
0058:  GOTO   061
....................       if(count_servo < 100) count_servo++; // 10s 
0059:  MOVF   36,W
005A:  SUBLW  63
005B:  BTFSS  03.0
005C:  GOTO   05F
005D:  INCF   36,F
005E:  GOTO   061
....................       else{ 
....................          count_servo = 0; 
005F:  CLRF   36
....................          flag_servo = false; 
0060:  BCF    32.3
....................       } 
....................    } 
0061:  BCF    0C.0
0062:  BCF    0A.3
0063:  BCF    0A.4
0064:  GOTO   02D
.................... } 
....................  
.................... void set_up_init(){ 
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
*
00C5:  MOVLW  B5
00C6:  MOVWF  10
....................    set_timer1(3036); 
00C7:  CLRF   0E
00C8:  MOVLW  0B
00C9:  MOVWF  0F
00CA:  MOVLW  DC
00CB:  MOVWF  0E
....................     
....................    enable_interrupts(global); 
00CC:  MOVLW  C0
00CD:  IORWF  0B,F
....................    enable_interrupts(int_timer1); 
00CE:  BSF    03.5
00CF:  BSF    0C.0
....................     
....................    setup_timer_2(t2_div_by_16, 249, 1); 
00D0:  MOVLW  00
00D1:  MOVWF  78
00D2:  IORLW  06
00D3:  BCF    03.5
00D4:  MOVWF  12
00D5:  MOVLW  F9
00D6:  BSF    03.5
00D7:  MOVWF  12
....................    set_pwm2_duty(0); 
00D8:  BCF    03.5
00D9:  CLRF   1B
....................     
....................    tt_ht = 0; 
00DA:  CLRF   2F
....................    bdn = 0; gt_mod = 0; 
00DB:  CLRF   2E
00DC:  CLRF   30
....................     
....................    e_11 = true; 
00DD:  BSF    32.0
....................    e_22 = true; 
00DE:  BSF    32.1
....................    e_33 = true; 
00DF:  BSF    32.2
....................     
....................    flag_servo = false; 
00E0:  BCF    32.3
....................     
....................    gh_nd = 25; 
00E1:  MOVLW  19
00E2:  MOVWF  2C
....................    eat_hh = 0x09; eat_pp = 0x34; eat_ss = 0x01; 
00E3:  MOVLW  09
00E4:  MOVWF  33
00E5:  MOVLW  34
00E6:  MOVWF  34
00E7:  MOVLW  01
00E8:  MOVWF  35
....................     
....................    set_tris_a(0xff); 
00E9:  MOVLW  FF
00EA:  BSF    03.5
00EB:  MOVWF  05
....................    set_tris_b(0xff); 
00EC:  MOVWF  06
....................    set_tris_d(0x00); output_d(0x00); 
00ED:  MOVLW  00
00EE:  MOVWF  08
00EF:  CLRF   08
00F0:  BCF    03.5
00F1:  CLRF   08
....................    set_tris_e(0x00); output_e(0x00); 
00F2:  BSF    03.5
00F3:  BCF    09.0
00F4:  BCF    09.1
00F5:  BCF    09.2
00F6:  BCF    09.0
00F7:  BCF    09.1
00F8:  BCF    09.2
00F9:  BCF    03.5
00FA:  CLRF   09
....................    set_tris_c(0x00); output_c(0x00); 
00FB:  BSF    03.5
00FC:  MOVWF  07
00FD:  BCF    03.5
00FE:  MOVWF  2B
00FF:  MOVWF  2B
0100:  BSF    03.5
0101:  CLRF   07
0102:  BCF    03.5
0103:  CLRF   07
0104:  BCF    0A.3
0105:  BSF    0A.4
0106:  GOTO   043 (RETURN)
.................... } 
....................  
....................  
....................  
.................... #include <thu_vien_btn.c> 
.................... #define level_menu 6 
....................  
.................... usi8 dl_count; 
....................  
.................... usi8 dem_menu_tong_curr = 0; 
.................... usi8 dem_menu_tong_prev = 1; 
....................  
.................... bool nhan_btn_giu(usi16 dl, usi8 pin){ 
....................    if(!input(pin)){ 
*
095E:  MOVF   5F,W
095F:  MOVWF  60
0960:  MOVLW  01
0961:  MOVWF  61
0962:  CLRF   63
0963:  MOVLW  80
0964:  MOVWF  62
0965:  BCF    0A.3
0966:  CALL   76B
0967:  BSF    0A.3
0968:  MOVF   5F,W
0969:  MOVWF  60
096A:  CLRF   62
096B:  CLRF   61
096C:  BCF    0A.3
096D:  CALL   78B
096E:  BSF    0A.3
096F:  BTFSC  78.0
0970:  GOTO   186
....................       dl_count += 1; delay_us(25); 
0971:  MOVLW  01
0972:  ADDWF  37,F
0973:  MOVLW  29
0974:  MOVWF  77
0975:  DECFSZ 77,F
0976:  GOTO   175
0977:  NOP
....................       if(dl_count >= dl){ 
0978:  MOVF   5E,F
0979:  BTFSS  03.2
097A:  GOTO   183
097B:  MOVF   5D,W
097C:  SUBWF  37,W
097D:  BTFSS  03.0
097E:  GOTO   183
....................          dl_count = 0; 
097F:  CLRF   37
....................          return true; 
0980:  MOVLW  01
0981:  MOVWF  78
0982:  GOTO   188
....................       } 
....................       return false; 
0983:  MOVLW  00
0984:  MOVWF  78
0985:  GOTO   188
....................    } 
....................    return false; 
0986:  MOVLW  00
0987:  MOVWF  78
0988:  RETURN
.................... } 
....................  
.................... bool nhan_btn_nha(bool giu_nha, usi8 pin){ 
....................    if(!input(pin)){ 
*
07A2:  MOVF   5E,W
07A3:  MOVWF  60
07A4:  MOVLW  01
07A5:  MOVWF  61
07A6:  CLRF   63
07A7:  MOVLW  80
07A8:  MOVWF  62
07A9:  CALL   76B
07AA:  MOVF   5E,W
07AB:  MOVWF  60
07AC:  CLRF   62
07AD:  CLRF   61
07AE:  CALL   78B
07AF:  BTFSC  78.0
07B0:  GOTO   7DF
....................       delay_ms(12); 
07B1:  MOVLW  0C
07B2:  MOVWF  63
07B3:  CALL   163
....................       if(!input(pin)){ 
07B4:  MOVF   5E,W
07B5:  MOVWF  60
07B6:  MOVLW  01
07B7:  MOVWF  61
07B8:  CLRF   63
07B9:  MOVLW  80
07BA:  MOVWF  62
07BB:  CALL   76B
07BC:  MOVF   5E,W
07BD:  MOVWF  60
07BE:  CLRF   62
07BF:  CLRF   61
07C0:  CALL   78B
07C1:  BTFSC  78.0
07C2:  GOTO   7DC
....................          if(giu_nha) while(!input(pin)); 
07C3:  MOVF   5D,F
07C4:  BTFSC  03.2
07C5:  GOTO   7D6
07C6:  MOVF   5E,W
07C7:  MOVWF  60
07C8:  MOVLW  01
07C9:  MOVWF  61
07CA:  CLRF   63
07CB:  MOVLW  80
07CC:  MOVWF  62
07CD:  CALL   76B
07CE:  MOVF   5E,W
07CF:  MOVWF  60
07D0:  CLRF   62
07D1:  CLRF   61
07D2:  CALL   78B
07D3:  BTFSS  78.0
07D4:  GOTO   7C6
07D5:  GOTO   7D9
....................          else delay_ms(5); 
07D6:  MOVLW  05
07D7:  MOVWF  63
07D8:  CALL   163
....................          return true;    
07D9:  MOVLW  01
07DA:  MOVWF  78
07DB:  GOTO   7E1
....................       } 
....................       return false; 
07DC:  MOVLW  00
07DD:  MOVWF  78
07DE:  GOTO   7E1
....................    } 
....................    return false; 
07DF:  MOVLW  00
07E0:  MOVWF  78
07E1:  RETURN
.................... } 
....................  
.................... #include <thu_vien_i2c_ds1307.c> 
.................... #define ds13_addr_wr 0xd0 
.................... #define ds13_addr_rd 0xd1 
....................  
.................... //cap nhat time: giay-phut-gio-thu-ngay-thang-nam-madk_msds 
.................... usi8 time_w[9]={0x31,0x15,0x15,0x04,0x25,0x10,0x23,0x90,0x92}; 
*
101E:  MOVLW  31
101F:  BCF    03.5
1020:  MOVWF  3A
1021:  MOVLW  15
1022:  MOVWF  3B
1023:  MOVWF  3C
1024:  MOVLW  04
1025:  MOVWF  3D
1026:  MOVLW  25
1027:  MOVWF  3E
1028:  MOVLW  10
1029:  MOVWF  3F
102A:  MOVLW  23
102B:  MOVWF  40
102C:  MOVLW  90
102D:  MOVWF  41
102E:  MOVLW  92
102F:  MOVWF  42
.................... usi8 time_r[9]={0x30,0x30,0x10,0x08,0x20,0x02,0x20,0x90,0x96}; 
1030:  MOVLW  30
1031:  MOVWF  43
1032:  MOVWF  44
1033:  MOVLW  10
1034:  MOVWF  45
1035:  MOVLW  08
1036:  MOVWF  46
1037:  MOVLW  20
1038:  MOVWF  47
1039:  MOVLW  02
103A:  MOVWF  48
103B:  MOVLW  20
103C:  MOVWF  49
103D:  MOVLW  90
103E:  MOVWF  4A
103F:  MOVLW  96
1040:  MOVWF  4B
....................  
.................... #define dec_giay_eat  ds1307_bcdToDec(eat_ss) 
.................... #define dec_phut_eat  ds1307_bcdToDec(eat_pp) 
.................... #define dec_gio_eat   ds1307_bcdToDec(eat_hh) 
....................  
.................... #define dec_giay_ds  ds1307_bcdToDec(time_r[0]) 
.................... #define dec_phut_ds  ds1307_bcdToDec(time_r[1]) 
.................... #define dec_gio_ds   ds1307_bcdToDec(time_r[2]) 
.................... #define dec_thu_ds   ds1307_bcdToDec(time_r[3]) 
.................... #define dec_ngay_ds  ds1307_bcdToDec(time_r[4]) 
.................... #define dec_thang_ds ds1307_bcdToDec(time_r[5]) 
.................... #define dec_nam_ds   ds1307_bcdToDec(time_r[6]) 
....................  
.................... #define giay_ds  time_r[0] 
.................... #define phut_ds  time_r[1] 
.................... #define gio_ds   time_r[2] 
.................... #define thu_ds   time_r[3] 
.................... #define ngay_ds  time_r[4] 
.................... #define thang_ds time_r[5] 
.................... #define nam_ds   time_r[6] 
....................  
.................... #define ma_qd   time_w[8] 
.................... #define ma_ds   time_r[8] 
....................  
.................... usi8 ds1307_decToBcd(usi8 val) { 
....................     return ((val / 10 * 16) + (val % 10)); 
.................... } 
....................  
.................... usi8 ds1307_bcdToDec(usi8 val) { 
....................     return ((val / 16 * 10) + (val % 16)); 
*
07E2:  SWAPF  5F,W
07E3:  MOVWF  77
07E4:  MOVLW  0F
07E5:  ANDWF  77,F
07E6:  MOVF   77,W
07E7:  MOVWF  61
07E8:  MOVWF  63
07E9:  MOVLW  0A
07EA:  MOVWF  64
07EB:  BSF    0A.3
07EC:  CALL   000
07ED:  BCF    0A.3
07EE:  MOVF   78,W
07EF:  MOVWF  60
07F0:  MOVF   5F,W
07F1:  ANDLW  0F
07F2:  ADDWF  60,W
07F3:  MOVWF  78
07F4:  RETURN
.................... } 
....................  
.................... void ds1307_read_time(usi8 j)      
.................... {    
....................    usi8 i;  
....................    i2c_start(); 
*
048C:  BSF    2B.4
048D:  MOVF   2B,W
048E:  BSF    03.5
048F:  MOVWF  07
0490:  MOVLW  04
0491:  MOVWF  77
0492:  DECFSZ 77,F
0493:  GOTO   492
0494:  BCF    03.5
0495:  BSF    2B.3
0496:  MOVF   2B,W
0497:  BSF    03.5
0498:  MOVWF  07
0499:  MOVLW  03
049A:  MOVWF  77
049B:  DECFSZ 77,F
049C:  GOTO   49B
049D:  BCF    03.5
049E:  BCF    07.4
049F:  BCF    2B.4
04A0:  MOVF   2B,W
04A1:  BSF    03.5
04A2:  MOVWF  07
04A3:  MOVLW  04
04A4:  MOVWF  77
04A5:  DECFSZ 77,F
04A6:  GOTO   4A5
04A7:  BCF    03.5
04A8:  BCF    07.3
04A9:  BCF    2B.3
04AA:  MOVF   2B,W
04AB:  BSF    03.5
04AC:  MOVWF  07
....................    i2c_write(ds13_addr_wr); 
04AD:  MOVLW  D0
04AE:  MOVWF  29
04AF:  BCF    03.5
04B0:  CALL   107
....................    i2c_write(0x00);                      
04B1:  BSF    03.5
04B2:  CLRF   29
04B3:  BCF    03.5
04B4:  CALL   107
....................    i2c_start();                
04B5:  BSF    2B.4
04B6:  MOVF   2B,W
04B7:  BSF    03.5
04B8:  MOVWF  07
04B9:  MOVLW  04
04BA:  MOVWF  77
04BB:  DECFSZ 77,F
04BC:  GOTO   4BB
04BD:  BCF    03.5
04BE:  BSF    2B.3
04BF:  MOVF   2B,W
04C0:  BSF    03.5
04C1:  MOVWF  07
04C2:  MOVLW  03
04C3:  MOVWF  77
04C4:  DECFSZ 77,F
04C5:  GOTO   4C4
04C6:  BCF    03.5
04C7:  BTFSS  07.3
04C8:  GOTO   4C7
04C9:  BCF    07.4
04CA:  BCF    2B.4
04CB:  MOVF   2B,W
04CC:  BSF    03.5
04CD:  MOVWF  07
04CE:  MOVLW  04
04CF:  MOVWF  77
04D0:  DECFSZ 77,F
04D1:  GOTO   4D0
04D2:  BCF    03.5
04D3:  BCF    07.3
04D4:  BCF    2B.3
04D5:  MOVF   2B,W
04D6:  BSF    03.5
04D7:  MOVWF  07
....................    i2c_write(ds13_addr_rd);                               
04D8:  MOVLW  D1
04D9:  MOVWF  29
04DA:  BCF    03.5
04DB:  CALL   107
....................    for(i=0;i<j;i++) time_r[i]=i2c_read(); 
04DC:  CLRF   5E
04DD:  MOVF   5D,W
04DE:  SUBWF  5E,W
04DF:  BTFSC  03.0
04E0:  GOTO   4EC
04E1:  MOVLW  43
04E2:  ADDWF  5E,W
04E3:  MOVWF  04
04E4:  BCF    03.7
04E5:  MOVLW  01
04E6:  MOVWF  77
04E7:  CALL   438
04E8:  MOVF   78,W
04E9:  MOVWF  00
04EA:  INCF   5E,F
04EB:  GOTO   4DD
....................                                   
....................    i = i2c_read(0); //not ack, don't care i   
04EC:  CLRF   77
04ED:  CALL   438
04EE:  MOVF   78,W
04EF:  MOVWF  5E
....................    i2c_stop(); 
04F0:  BCF    2B.4
04F1:  MOVF   2B,W
04F2:  BSF    03.5
04F3:  MOVWF  07
04F4:  NOP
04F5:  BCF    03.5
04F6:  BSF    2B.3
04F7:  MOVF   2B,W
04F8:  BSF    03.5
04F9:  MOVWF  07
04FA:  BCF    03.5
04FB:  BTFSS  07.3
04FC:  GOTO   4FB
04FD:  MOVLW  04
04FE:  MOVWF  77
04FF:  DECFSZ 77,F
0500:  GOTO   4FF
0501:  GOTO   502
0502:  NOP
0503:  BSF    2B.4
0504:  MOVF   2B,W
0505:  BSF    03.5
0506:  MOVWF  07
0507:  MOVLW  04
0508:  MOVWF  77
0509:  DECFSZ 77,F
050A:  GOTO   509
050B:  BCF    03.5
050C:  RETURN
.................... } 
....................  
.................... void ds1307_update_time(int1 sel)                  
.................... {          
....................    usi8 i; 
....................    i2c_start(); 
*
0516:  BSF    2B.4
0517:  MOVF   2B,W
0518:  BSF    03.5
0519:  MOVWF  07
051A:  MOVLW  04
051B:  MOVWF  77
051C:  DECFSZ 77,F
051D:  GOTO   51C
051E:  BCF    03.5
051F:  BSF    2B.3
0520:  MOVF   2B,W
0521:  BSF    03.5
0522:  MOVWF  07
0523:  MOVLW  03
0524:  MOVWF  77
0525:  DECFSZ 77,F
0526:  GOTO   525
0527:  BCF    03.5
0528:  BCF    07.4
0529:  BCF    2B.4
052A:  MOVF   2B,W
052B:  BSF    03.5
052C:  MOVWF  07
052D:  MOVLW  04
052E:  MOVWF  77
052F:  DECFSZ 77,F
0530:  GOTO   52F
0531:  BCF    03.5
0532:  BCF    07.3
0533:  BCF    2B.3
0534:  MOVF   2B,W
0535:  BSF    03.5
0536:  MOVWF  07
....................    i2c_write(ds13_addr_wr); 
0537:  MOVLW  D0
0538:  MOVWF  29
0539:  BCF    03.5
053A:  CALL   107
....................    i2c_write(0x00); 
053B:  BSF    03.5
053C:  CLRF   29
053D:  BCF    03.5
053E:  CALL   107
....................    for(i=0;i<9;i++)                           
053F:  CLRF   5E
0540:  MOVF   5E,W
0541:  SUBLW  08
0542:  BTFSS  03.0
0543:  GOTO   55E
....................    {   
....................       if(sel)  i2c_write(time_w[i]); 
0544:  MOVF   5D,F
0545:  BTFSC  03.2
0546:  GOTO   552
0547:  MOVLW  3A
0548:  ADDWF  5E,W
0549:  MOVWF  04
054A:  BCF    03.7
054B:  MOVF   00,W
054C:  MOVWF  5F
054D:  BSF    03.5
054E:  MOVWF  29
054F:  BCF    03.5
0550:  CALL   107
0551:  GOTO   55C
....................       else     i2c_write(time_r[i]); 
0552:  MOVLW  43
0553:  ADDWF  5E,W
0554:  MOVWF  04
0555:  BCF    03.7
0556:  MOVF   00,W
0557:  MOVWF  5F
0558:  BSF    03.5
0559:  MOVWF  29
055A:  BCF    03.5
055B:  CALL   107
055C:  INCF   5E,F
055D:  GOTO   540
....................    }                                  
....................    i2c_stop();         
055E:  BCF    2B.4
055F:  MOVF   2B,W
0560:  BSF    03.5
0561:  MOVWF  07
0562:  NOP
0563:  BCF    03.5
0564:  BSF    2B.3
0565:  MOVF   2B,W
0566:  BSF    03.5
0567:  MOVWF  07
0568:  BCF    03.5
0569:  BTFSS  07.3
056A:  GOTO   569
056B:  MOVLW  04
056C:  MOVWF  77
056D:  DECFSZ 77,F
056E:  GOTO   56D
056F:  GOTO   570
0570:  NOP
0571:  BSF    2B.4
0572:  MOVF   2B,W
0573:  BSF    03.5
0574:  MOVWF  07
0575:  MOVLW  04
0576:  MOVWF  77
0577:  DECFSZ 77,F
0578:  GOTO   577
0579:  BCF    03.5
.................... }   
....................  
.................... void ds1307_init()                                
.................... {                                               
....................    ds1307_read_time(9);           
*
050D:  MOVLW  09
050E:  MOVWF  5D
050F:  CALL   48C
....................    if(ma_qd!=ma_ds) 
0510:  MOVF   4B,W
0511:  SUBWF  42,W
0512:  BTFSC  03.2
0513:  GOTO   57A
....................    { 
....................       ds1307_update_time(1); 
0514:  MOVLW  01
0515:  MOVWF  5D
....................    } 
*
057A:  BCF    0A.3
057B:  BSF    0A.4
057C:  GOTO   051 (RETURN)
.................... } 
....................  
.................... void ds1307_save_ds(usi8 dcdt,dt)                  
.................... {            
....................    i2c_start(); 
*
0A8D:  BSF    2B.4
0A8E:  MOVF   2B,W
0A8F:  BSF    03.5
0A90:  MOVWF  07
0A91:  MOVLW  04
0A92:  MOVWF  77
0A93:  DECFSZ 77,F
0A94:  GOTO   293
0A95:  BCF    03.5
0A96:  BSF    2B.3
0A97:  MOVF   2B,W
0A98:  BSF    03.5
0A99:  MOVWF  07
0A9A:  MOVLW  03
0A9B:  MOVWF  77
0A9C:  DECFSZ 77,F
0A9D:  GOTO   29C
0A9E:  BCF    03.5
0A9F:  BCF    07.4
0AA0:  BCF    2B.4
0AA1:  MOVF   2B,W
0AA2:  BSF    03.5
0AA3:  MOVWF  07
0AA4:  MOVLW  04
0AA5:  MOVWF  77
0AA6:  DECFSZ 77,F
0AA7:  GOTO   2A6
0AA8:  BCF    03.5
0AA9:  BCF    07.3
0AAA:  BCF    2B.3
0AAB:  MOVF   2B,W
0AAC:  BSF    03.5
0AAD:  MOVWF  07
....................    i2c_write(ds13_addr_wr);         
0AAE:  MOVLW  D0
0AAF:  MOVWF  29
0AB0:  BCF    0A.3
0AB1:  BCF    03.5
0AB2:  CALL   107
0AB3:  BSF    0A.3
....................    i2c_write(dcdt);     
0AB4:  MOVF   5D,W
0AB5:  BSF    03.5
0AB6:  MOVWF  29
0AB7:  BCF    0A.3
0AB8:  BCF    03.5
0AB9:  CALL   107
0ABA:  BSF    0A.3
....................    i2c_write(dt); 
0ABB:  MOVF   5E,W
0ABC:  BSF    03.5
0ABD:  MOVWF  29
0ABE:  BCF    0A.3
0ABF:  BCF    03.5
0AC0:  CALL   107
0AC1:  BSF    0A.3
....................    i2c_stop(); 
0AC2:  BCF    2B.4
0AC3:  MOVF   2B,W
0AC4:  BSF    03.5
0AC5:  MOVWF  07
0AC6:  NOP
0AC7:  BCF    03.5
0AC8:  BSF    2B.3
0AC9:  MOVF   2B,W
0ACA:  BSF    03.5
0ACB:  MOVWF  07
0ACC:  BCF    03.5
0ACD:  BTFSS  07.3
0ACE:  GOTO   2CD
0ACF:  MOVLW  04
0AD0:  MOVWF  77
0AD1:  DECFSZ 77,F
0AD2:  GOTO   2D1
0AD3:  GOTO   2D4
0AD4:  NOP
0AD5:  BSF    2B.4
0AD6:  MOVF   2B,W
0AD7:  BSF    03.5
0AD8:  MOVWF  07
0AD9:  MOVLW  04
0ADA:  MOVWF  77
0ADB:  DECFSZ 77,F
0ADC:  GOTO   2DB
0ADD:  BCF    03.5
0ADE:  RETURN
.................... } 
....................  
.................... #include <thu_vien_i2c_lcd.c> 
.................... #define pcf8574_addr_wr 0x4E // 0b01001110 
.................... #define pcf8574_addr_rd 0x4F // 0b01001111 
....................  
.................... void i2c_reset() 
.................... { 
....................    i2c_start(); 
....................    i2c_stop(); 
.................... } 
....................  
.................... void i2c_setup_write() 
.................... { 
....................    i2c_start(); 
*
029F:  BSF    2B.4
02A0:  MOVF   2B,W
02A1:  BSF    03.5
02A2:  MOVWF  07
02A3:  MOVLW  04
02A4:  MOVWF  77
02A5:  DECFSZ 77,F
02A6:  GOTO   2A5
02A7:  BCF    03.5
02A8:  BSF    2B.3
02A9:  MOVF   2B,W
02AA:  BSF    03.5
02AB:  MOVWF  07
02AC:  MOVLW  03
02AD:  MOVWF  77
02AE:  DECFSZ 77,F
02AF:  GOTO   2AE
02B0:  BCF    03.5
02B1:  BCF    07.4
02B2:  BCF    2B.4
02B3:  MOVF   2B,W
02B4:  BSF    03.5
02B5:  MOVWF  07
02B6:  MOVLW  04
02B7:  MOVWF  77
02B8:  DECFSZ 77,F
02B9:  GOTO   2B8
02BA:  BCF    03.5
02BB:  BCF    07.3
02BC:  BCF    2B.3
02BD:  MOVF   2B,W
02BE:  BSF    03.5
02BF:  MOVWF  07
....................    i2c_write(pcf8574_addr_wr); 
02C0:  MOVLW  4E
02C1:  MOVWF  29
02C2:  BCF    03.5
02C3:  CALL   107
.................... } 
....................  
.................... void i2c_write_1byte(usi8 payload) 
.................... { 
....................    i2c_start(); 
*
0181:  BCF    03.5
0182:  BSF    2B.4
0183:  MOVF   2B,W
0184:  BSF    03.5
0185:  MOVWF  07
0186:  MOVLW  04
0187:  MOVWF  77
0188:  DECFSZ 77,F
0189:  GOTO   188
018A:  BCF    03.5
018B:  BSF    2B.3
018C:  MOVF   2B,W
018D:  BSF    03.5
018E:  MOVWF  07
018F:  MOVLW  03
0190:  MOVWF  77
0191:  DECFSZ 77,F
0192:  GOTO   191
0193:  BCF    03.5
0194:  BTFSS  07.3
0195:  GOTO   194
0196:  BCF    07.4
0197:  BCF    2B.4
0198:  MOVF   2B,W
0199:  BSF    03.5
019A:  MOVWF  07
019B:  MOVLW  04
019C:  MOVWF  77
019D:  DECFSZ 77,F
019E:  GOTO   19D
019F:  BCF    03.5
01A0:  BCF    07.3
01A1:  BCF    2B.3
01A2:  MOVF   2B,W
01A3:  BSF    03.5
01A4:  MOVWF  07
*
01D7:  BCF    03.5
01D8:  BSF    2B.4
01D9:  MOVF   2B,W
01DA:  BSF    03.5
01DB:  MOVWF  07
01DC:  MOVLW  04
01DD:  MOVWF  77
01DE:  DECFSZ 77,F
01DF:  GOTO   1DE
01E0:  BCF    03.5
01E1:  BSF    2B.3
01E2:  MOVF   2B,W
01E3:  BSF    03.5
01E4:  MOVWF  07
01E5:  MOVLW  03
01E6:  MOVWF  77
01E7:  DECFSZ 77,F
01E8:  GOTO   1E7
01E9:  BCF    03.5
01EA:  BTFSS  07.3
01EB:  GOTO   1EA
01EC:  BCF    07.4
01ED:  BCF    2B.4
01EE:  MOVF   2B,W
01EF:  BSF    03.5
01F0:  MOVWF  07
01F1:  MOVLW  04
01F2:  MOVWF  77
01F3:  DECFSZ 77,F
01F4:  GOTO   1F3
01F5:  BCF    03.5
01F6:  BCF    07.3
01F7:  BCF    2B.3
01F8:  MOVF   2B,W
01F9:  BSF    03.5
01FA:  MOVWF  07
*
022E:  BCF    03.5
022F:  BSF    2B.4
0230:  MOVF   2B,W
0231:  BSF    03.5
0232:  MOVWF  07
0233:  MOVLW  04
0234:  MOVWF  77
0235:  DECFSZ 77,F
0236:  GOTO   235
0237:  BCF    03.5
0238:  BSF    2B.3
0239:  MOVF   2B,W
023A:  BSF    03.5
023B:  MOVWF  07
023C:  MOVLW  03
023D:  MOVWF  77
023E:  DECFSZ 77,F
023F:  GOTO   23E
0240:  BCF    03.5
0241:  BTFSS  07.3
0242:  GOTO   241
0243:  BCF    07.4
0244:  BCF    2B.4
0245:  MOVF   2B,W
0246:  BSF    03.5
0247:  MOVWF  07
0248:  MOVLW  04
0249:  MOVWF  77
024A:  DECFSZ 77,F
024B:  GOTO   24A
024C:  BCF    03.5
024D:  BCF    07.3
024E:  BCF    2B.3
024F:  MOVF   2B,W
0250:  BSF    03.5
0251:  MOVWF  07
*
02D5:  BCF    03.5
02D6:  BSF    2B.4
02D7:  MOVF   2B,W
02D8:  BSF    03.5
02D9:  MOVWF  07
02DA:  MOVLW  04
02DB:  MOVWF  77
02DC:  DECFSZ 77,F
02DD:  GOTO   2DC
02DE:  BCF    03.5
02DF:  BSF    2B.3
02E0:  MOVF   2B,W
02E1:  BSF    03.5
02E2:  MOVWF  07
02E3:  MOVLW  03
02E4:  MOVWF  77
02E5:  DECFSZ 77,F
02E6:  GOTO   2E5
02E7:  BCF    03.5
02E8:  BTFSS  07.3
02E9:  GOTO   2E8
02EA:  BCF    07.4
02EB:  BCF    2B.4
02EC:  MOVF   2B,W
02ED:  BSF    03.5
02EE:  MOVWF  07
02EF:  MOVLW  04
02F0:  MOVWF  77
02F1:  DECFSZ 77,F
02F2:  GOTO   2F1
02F3:  BCF    03.5
02F4:  BCF    07.3
02F5:  BCF    2B.3
02F6:  MOVF   2B,W
02F7:  BSF    03.5
02F8:  MOVWF  07
....................    i2c_write(pcf8574_addr_wr); 
*
01A5:  MOVLW  4E
01A6:  MOVWF  29
01A7:  BCF    03.5
01A8:  CALL   107
*
01FB:  MOVLW  4E
01FC:  MOVWF  29
01FD:  BCF    03.5
01FE:  CALL   107
*
0252:  MOVLW  4E
0253:  MOVWF  29
0254:  BCF    03.5
0255:  CALL   107
*
02F9:  MOVLW  4E
02FA:  MOVWF  29
02FB:  BCF    03.5
02FC:  CALL   107
....................    i2c_write(payload); 
*
01A9:  BSF    03.5
01AA:  MOVF   28,W
01AB:  MOVWF  29
01AC:  BCF    03.5
01AD:  CALL   107
*
01FF:  BSF    03.5
0200:  MOVF   28,W
0201:  MOVWF  29
0202:  BCF    03.5
0203:  CALL   107
*
0256:  BSF    03.5
0257:  MOVF   28,W
0258:  MOVWF  29
0259:  BCF    03.5
025A:  CALL   107
*
02FD:  BSF    03.5
02FE:  MOVF   28,W
02FF:  MOVWF  29
0300:  BCF    03.5
0301:  CALL   107
....................    i2c_stop(); 
*
01AE:  BCF    2B.4
01AF:  MOVF   2B,W
01B0:  BSF    03.5
01B1:  MOVWF  07
01B2:  NOP
01B3:  BCF    03.5
01B4:  BSF    2B.3
01B5:  MOVF   2B,W
01B6:  BSF    03.5
01B7:  MOVWF  07
01B8:  BCF    03.5
01B9:  BTFSS  07.3
01BA:  GOTO   1B9
01BB:  MOVLW  04
01BC:  MOVWF  77
01BD:  DECFSZ 77,F
01BE:  GOTO   1BD
01BF:  GOTO   1C0
01C0:  NOP
01C1:  BSF    2B.4
01C2:  MOVF   2B,W
01C3:  BSF    03.5
01C4:  MOVWF  07
01C5:  MOVLW  04
01C6:  MOVWF  77
01C7:  DECFSZ 77,F
01C8:  GOTO   1C7
*
0204:  BCF    2B.4
0205:  MOVF   2B,W
0206:  BSF    03.5
0207:  MOVWF  07
0208:  NOP
0209:  BCF    03.5
020A:  BSF    2B.3
020B:  MOVF   2B,W
020C:  BSF    03.5
020D:  MOVWF  07
020E:  BCF    03.5
020F:  BTFSS  07.3
0210:  GOTO   20F
0211:  MOVLW  04
0212:  MOVWF  77
0213:  DECFSZ 77,F
0214:  GOTO   213
0215:  GOTO   216
0216:  NOP
0217:  BSF    2B.4
0218:  MOVF   2B,W
0219:  BSF    03.5
021A:  MOVWF  07
021B:  MOVLW  04
021C:  MOVWF  77
021D:  DECFSZ 77,F
021E:  GOTO   21D
*
025B:  BCF    2B.4
025C:  MOVF   2B,W
025D:  BSF    03.5
025E:  MOVWF  07
025F:  NOP
0260:  BCF    03.5
0261:  BSF    2B.3
0262:  MOVF   2B,W
0263:  BSF    03.5
0264:  MOVWF  07
0265:  BCF    03.5
0266:  BTFSS  07.3
0267:  GOTO   266
0268:  MOVLW  04
0269:  MOVWF  77
026A:  DECFSZ 77,F
026B:  GOTO   26A
026C:  GOTO   26D
026D:  NOP
026E:  BSF    2B.4
026F:  MOVF   2B,W
0270:  BSF    03.5
0271:  MOVWF  07
0272:  MOVLW  04
0273:  MOVWF  77
0274:  DECFSZ 77,F
0275:  GOTO   274
*
0302:  BCF    2B.4
0303:  MOVF   2B,W
0304:  BSF    03.5
0305:  MOVWF  07
0306:  NOP
0307:  BCF    03.5
0308:  BSF    2B.3
0309:  MOVF   2B,W
030A:  BSF    03.5
030B:  MOVWF  07
030C:  BCF    03.5
030D:  BTFSS  07.3
030E:  GOTO   30D
030F:  MOVLW  04
0310:  MOVWF  77
0311:  DECFSZ 77,F
0312:  GOTO   311
0313:  GOTO   314
0314:  NOP
0315:  BSF    2B.4
0316:  MOVF   2B,W
0317:  BSF    03.5
0318:  MOVWF  07
0319:  MOVLW  04
031A:  MOVWF  77
031B:  DECFSZ 77,F
031C:  GOTO   31B
.................... } 
....................  
.................... #include <thu_vien_lcd_1602.c> 
.................... #define lcd_cols 16 
.................... #define lcd_rows 2 
....................  
.................... // commands 
.................... #define LCD_CLEARDISPLAY 0x01 
.................... #define LCD_RETURNHOME 0x02 
.................... #define LCD_ENTRYMODESET 0x04 
.................... #define LCD_DISPLAYCONTROL 0x08 
.................... #define LCD_CURSORSHIFT 0x10 
.................... #define LCD_FUNCTIONSET 0x20 
.................... #define LCD_SETCGRAMADDR 0x40 
.................... #define LCD_SETDDRAMADDR 0x80 
....................  
.................... // flags for display entry mode 
.................... #define LCD_ENTRYRIGHT 0x00 
.................... #define LCD_ENTRYLEFT 0x02 
.................... #define LCD_ENTRYSHIFTINCREMENT 0x01 
.................... #define LCD_ENTRYSHIFTDECREMENT 0x00 
....................  
.................... // flags for display on/off control 
.................... #define LCD_DISPLAYON 0x04 
.................... #define LCD_DISPLAYOFF 0x00 
.................... #define LCD_CURSORON 0x02 
.................... #define LCD_CURSOROFF 0x00 
.................... #define LCD_BLINKON 0x01 
.................... #define LCD_BLINKOFF 0x00 
....................  
.................... // flags for display/cursor shift 
.................... #define LCD_DISPLAYMOVE 0x08 
.................... #define LCD_CURSORMOVE 0x00 
.................... #define LCD_MOVERIGHT 0x04 
.................... #define LCD_MOVELEFT 0x00 
....................  
.................... // flags for function set 
.................... #define LCD_8BITMODE 0x10 
.................... #define LCD_4BITMODE 0x00 
.................... #define LCD_2LINE 0x08 
.................... #define LCD_1LINE 0x00 
.................... #define LCD_5x10DOTS 0x04 
.................... #define LCD_5x8DOTS 0x00 
....................  
.................... // flags for backlight control 
.................... #define LCD_BACKLIGHT 0x08 
.................... #define LCD_NOBACKLIGHT 0x00 
....................  
.................... #define En 0B00000100  // Enable bit 
.................... #define Rw 0B00000010  // Read/Write bit 
.................... #define Rs 0B00000001  // Register select bit 
....................  
.................... void write4bits(usi8 value); 
.................... void expanderWrite(usi8 _data); 
.................... void pulseEnable(usi8 _data); 
.................... void lcd_command(usi8 value); 
.................... void lcd_display(); 
.................... void lcd_clear(); 
.................... void lcd_home(); 
.................... void lcd_send(usi8 value, usi8 mode); 
.................... void lcd_data(usi8 value); 
....................  
.................... usi8 _displayfunction; 
.................... usi8 _displaycontrol; 
.................... usi8 _displaymode; 
.................... usi8 _numlines; 
.................... usi8 _cols; 
.................... usi8 _rows; 
.................... usi8 _backlightval; 
....................  
.................... void lcd_init(){ 
....................    _cols = lcd_cols; // 16 
*
029A:  MOVLW  10
029B:  MOVWF  50
....................    _rows = lcd_rows; // 2 
029C:  MOVLW  02
029D:  MOVWF  51
....................    _backlightval = LCD_NOBACKLIGHT; // back light is off 
029E:  CLRF   52
....................     
....................    i2c_setup_write(); // setup i2c 
....................    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS; 
*
02C4:  CLRF   4C
....................     
....................    _displayfunction |= LCD_2LINE; 
02C5:  BSF    4C.3
....................    _numlines = _rows; // 2 
02C6:  MOVF   51,W
02C7:  MOVWF  4F
....................     
....................    delay_ms(40); 
02C8:  MOVLW  28
02C9:  MOVWF  63
02CA:  CALL   163
....................     
....................    expanderWrite(_backlightval); // back light is on 
02CB:  MOVF   52,W
02CC:  BSF    03.5
02CD:  MOVWF  26
....................    delay_ms(100); 
*
031D:  MOVLW  64
031E:  BCF    03.5
031F:  MOVWF  63
0320:  CALL   163
....................     
....................    //It is try to set use 4bit in 3 time 
....................    write4bits(0x03 << 4); 
0321:  MOVLW  30
0322:  BSF    03.5
0323:  MOVWF  23
0324:  BCF    03.5
0325:  CALL   177
....................    delay_ms(5); 
0326:  MOVLW  05
0327:  MOVWF  63
0328:  CALL   163
....................     
....................    write4bits(0x03 << 4); 
0329:  MOVLW  30
032A:  BSF    03.5
032B:  MOVWF  23
032C:  BCF    03.5
032D:  CALL   177
....................    delay_ms(5); 
032E:  MOVLW  05
032F:  MOVWF  63
0330:  CALL   163
....................     
....................    write4bits(0x03 << 4); 
0331:  MOVLW  30
0332:  BSF    03.5
0333:  MOVWF  23
0334:  BCF    03.5
0335:  CALL   177
....................    delay_ms(5); 
0336:  MOVLW  05
0337:  MOVWF  63
0338:  CALL   163
....................     
....................    write4bits(0x02 << 4); // set using 4bit for lcd16x2 
0339:  MOVLW  20
033A:  BSF    03.5
033B:  MOVWF  23
033C:  BCF    03.5
033D:  CALL   177
....................     
....................    lcd_command(LCD_FUNCTIONSET | _displayfunction); 
033E:  MOVF   4C,W
033F:  IORLW  20
0340:  MOVWF  5D
0341:  MOVWF  7C
0342:  CALL   27E
....................     
....................    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF; 
0343:  MOVLW  04
0344:  MOVWF  4D
....................    lcd_display(); 
....................     
....................    lcd_clear(); 
....................     
....................    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT; 
*
0351:  MOVLW  02
0352:  MOVWF  4E
....................    lcd_command(LCD_ENTRYMODESET | _displaymode); 
0353:  MOVF   4E,W
0354:  IORLW  04
0355:  MOVWF  5D
0356:  MOVWF  7C
0357:  CALL   27E
....................     
....................    lcd_home(); 
*
035E:  BCF    0A.3
035F:  BSF    0A.4
0360:  GOTO   046 (RETURN)
.................... } 
....................  
.................... void lcd_clear(){ 
....................    lcd_command(LCD_CLEARDISPLAY); 
*
034B:  MOVLW  01
034C:  MOVWF  7C
034D:  CALL   27E
*
042F:  MOVLW  01
0430:  MOVWF  7C
0431:  CALL   27E
*
107A:  MOVLW  01
107B:  MOVWF  7C
107C:  BCF    0A.4
107D:  CALL   27E
107E:  BSF    0A.4
....................    delay_ms(20); 
*
034E:  MOVLW  14
034F:  MOVWF  63
0350:  CALL   163
*
0432:  MOVLW  14
0433:  MOVWF  63
0434:  CALL   163
*
107F:  MOVLW  14
1080:  MOVWF  63
1081:  BCF    0A.4
1082:  CALL   163
1083:  BSF    0A.4
.................... } 
....................  
.................... void lcd_home(){ 
....................    lcd_command(LCD_RETURNHOME); 
*
0358:  MOVLW  02
0359:  MOVWF  7C
035A:  CALL   27E
....................    delay_ms(20); 
035B:  MOVLW  14
035C:  MOVWF  63
035D:  CALL   163
.................... } 
....................  
.................... void lcd_setCursor(usi8 col, usi8 row){ 
....................    int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 }; 
*
0361:  CLRF   73
0362:  MOVLW  40
0363:  MOVWF  74
0364:  MOVLW  14
0365:  MOVWF  75
0366:  MOVLW  54
0367:  MOVWF  76
....................    if ( row > _numlines ) { 
0368:  MOVF   72,W
0369:  SUBWF  4F,W
036A:  BTFSC  03.0
036B:  GOTO   36F
....................       row = _numlines-1; 
036C:  MOVLW  01
036D:  SUBWF  4F,W
036E:  MOVWF  72
....................    } 
....................    lcd_command(LCD_SETDDRAMADDR | (col + row_offsets[row])); 
036F:  MOVLW  73
0370:  ADDWF  72,W
0371:  MOVWF  04
0372:  BCF    03.7
0373:  MOVF   00,W
0374:  ADDWF  71,W
0375:  IORLW  80
0376:  MOVWF  7B
0377:  MOVWF  7C
0378:  CALL   27E
0379:  RETURN
.................... } 
....................  
.................... void lcd_display() { 
....................    _displaycontrol |= LCD_DISPLAYON; 
*
0345:  BSF    4D.2
....................    lcd_command(LCD_DISPLAYCONTROL | _displaycontrol); 
0346:  MOVF   4D,W
0347:  IORLW  08
0348:  MOVWF  5D
0349:  MOVWF  7C
034A:  CALL   27E
.................... } 
....................  
.................... void lcd_command(usi8 value){ 
....................    lcd_send(value,0); 
*
027E:  MOVF   7C,W
027F:  MOVWF  7D
0280:  CLRF   7E
*
0299:  RETURN
.................... } 
....................  
.................... void lcd_data(usi8 value){ 
....................    lcd_send(value,Rs); 
*
037A:  MOVF   74,W
037B:  MOVWF  7D
037C:  MOVLW  01
037D:  MOVWF  7E
*
0396:  RETURN
.................... } 
....................  
.................... void lcd_send(usi8 value, usi8 mode) { 
*
0281:  MOVF   7D,W
0282:  ANDLW  F0
0283:  BSF    03.5
0284:  MOVWF  20
0285:  SWAPF  7D,W
0286:  MOVWF  77
0287:  MOVLW  F0
0288:  ANDWF  77,F
0289:  MOVF   77,W
028A:  ANDLW  F0
028B:  MOVWF  21
*
037E:  MOVF   7D,W
037F:  ANDLW  F0
0380:  BSF    03.5
0381:  MOVWF  20
0382:  SWAPF  7D,W
0383:  MOVWF  77
0384:  MOVLW  F0
0385:  ANDWF  77,F
0386:  MOVF   77,W
0387:  ANDLW  F0
0388:  MOVWF  21
....................    usi8 highnib=value&0xf0; 
....................    usi8 lownib=(value<<4)&0xf0; 
....................    write4bits((highnib)|mode); 
*
028C:  MOVF   20,W
028D:  IORWF  7E,W
028E:  MOVWF  22
028F:  MOVWF  23
0290:  BCF    03.5
0291:  CALL   177
*
0389:  MOVF   20,W
038A:  IORWF  7E,W
038B:  MOVWF  22
038C:  MOVWF  23
038D:  BCF    03.5
038E:  CALL   177
....................    write4bits((lownib)|mode);  
*
0292:  BSF    03.5
0293:  MOVF   21,W
0294:  IORWF  7E,W
0295:  MOVWF  22
0296:  MOVWF  23
0297:  BCF    03.5
0298:  CALL   177
*
038F:  BSF    03.5
0390:  MOVF   21,W
0391:  IORWF  7E,W
0392:  MOVWF  22
0393:  MOVWF  23
0394:  BCF    03.5
0395:  CALL   177
.................... } 
....................  
.................... void write4bits(usi8 value) { 
....................    expanderWrite(value); 
*
0177:  BSF    03.5
0178:  MOVF   23,W
0179:  MOVWF  26
....................    pulseEnable(value); 
*
01C9:  MOVF   23,W
01CA:  MOVWF  24
*
027C:  BCF    03.5
027D:  RETURN
.................... } 
....................  
.................... void expanderWrite(usi8 _data){ 
....................    i2c_write_1byte(_data|_backlightval); 
*
017A:  MOVF   26,W
017B:  BCF    03.5
017C:  IORWF  52,W
017D:  BSF    03.5
017E:  MOVWF  27
017F:  MOVF   27,W
0180:  MOVWF  28
*
01D0:  MOVF   26,W
01D1:  BCF    03.5
01D2:  IORWF  52,W
01D3:  BSF    03.5
01D4:  MOVWF  27
01D5:  MOVF   27,W
01D6:  MOVWF  28
*
0227:  MOVF   26,W
0228:  BCF    03.5
0229:  IORWF  52,W
022A:  BSF    03.5
022B:  MOVWF  27
022C:  MOVF   27,W
022D:  MOVWF  28
*
02CE:  MOVF   26,W
02CF:  BCF    03.5
02D0:  IORWF  52,W
02D1:  BSF    03.5
02D2:  MOVWF  27
02D3:  MOVF   27,W
02D4:  MOVWF  28
.................... } 
....................  
.................... void pulseEnable(usi8 _data){ 
....................    expanderWrite(_data | En); 
*
01CB:  MOVF   24,W
01CC:  IORLW  04
01CD:  MOVWF  25
01CE:  MOVF   25,W
01CF:  MOVWF  26
....................    delay_us(1); 
*
021F:  GOTO   220
0220:  GOTO   221
0221:  NOP
....................    expanderWrite(_data & ~En); 
0222:  MOVF   24,W
0223:  ANDLW  FB
0224:  MOVWF  25
0225:  MOVF   25,W
0226:  MOVWF  26
....................    delay_us(50); 
*
0276:  MOVLW  52
0277:  MOVWF  77
0278:  DECFSZ 77,F
0279:  GOTO   278
027A:  GOTO   27B
027B:  NOP
.................... } 
....................  
.................... /* Library modify in User*/ 
.................... void lcd_log_info(usi16 time_s, bool ena_time){ 
....................    lcd_setCursor(1,0); 
*
03FC:  MOVLW  01
03FD:  MOVWF  71
03FE:  CLRF   72
03FF:  CALL   361
....................    lcd_data("Do an 1 - HKII"); 
0400:  MOVLW  65
0401:  BSF    03.6
0402:  MOVWF  0D
0403:  MOVLW  00
0404:  MOVWF  0F
0405:  BCF    03.6
0406:  CALL   397
....................    lcd_setCursor(3,1); 
0407:  MOVLW  03
0408:  MOVWF  71
0409:  MOVLW  01
040A:  MOVWF  72
040B:  CALL   361
....................    lcd_data("SPKT-TPHCM"); 
040C:  MOVLW  6D
040D:  BSF    03.6
040E:  MOVWF  0D
040F:  MOVLW  00
0410:  MOVWF  0F
0411:  BCF    03.6
0412:  CALL   397
....................    if(ena_time == enable){ 
0413:  DECFSZ 5F,W
0414:  GOTO   435
....................       delay_ms(time_s*1000); 
0415:  MOVF   5E,W
0416:  MOVWF  61
0417:  MOVF   5D,W
0418:  MOVWF  60
0419:  MOVLW  03
041A:  MOVWF  63
041B:  MOVLW  E8
041C:  MOVWF  62
041D:  CALL   3E7
041E:  MOVF   79,W
041F:  MOVWF  61
0420:  MOVF   78,W
0421:  MOVWF  60
0422:  MOVF   79,W
0423:  MOVWF  62
0424:  INCF   62,F
0425:  DECF   62,F
0426:  BTFSC  03.2
0427:  GOTO   42C
0428:  MOVLW  FF
0429:  MOVWF  63
042A:  CALL   163
042B:  GOTO   425
042C:  MOVF   60,W
042D:  MOVWF  63
042E:  CALL   163
....................       lcd_clear(); 
....................    } 
*
0435:  BCF    0A.3
0436:  BSF    0A.4
0437:  GOTO   04E (RETURN)
.................... } 
.................... void lcd_dis_2num_dot(usi16 dt, int8 x, int8 y, bool is_xvn, bool is_dot){ 
....................    usi8 ch, dv; 
....................    lcd_setCursor(x, y); 
*
08BA:  MOVF   5F,W
08BB:  MOVWF  71
08BC:  MOVF   60,W
08BD:  MOVWF  72
08BE:  BCF    0A.3
08BF:  CALL   361
08C0:  BSF    0A.3
....................    ch = dt/10 + 0x30; 
08C1:  MOVF   5E,W
08C2:  MOVWF  69
08C3:  MOVF   5D,W
08C4:  MOVWF  68
08C5:  CLRF   6B
08C6:  MOVLW  0A
08C7:  MOVWF  6A
08C8:  BCF    0A.3
08C9:  CALL   6BB
08CA:  BSF    0A.3
08CB:  MOVLW  30
08CC:  ADDWF  78,W
08CD:  MOVWF  63
....................    dv = dt%10 + 0x30; 
08CE:  MOVF   5E,W
08CF:  MOVWF  69
08D0:  MOVF   5D,W
08D1:  MOVWF  68
08D2:  CLRF   6B
08D3:  MOVLW  0A
08D4:  MOVWF  6A
08D5:  BCF    0A.3
08D6:  CALL   6BB
08D7:  BSF    0A.3
08D8:  MOVLW  30
08D9:  ADDWF  77,W
08DA:  MOVWF  64
....................    if(is_xvn == enable) if(ch == 0x30) ch = " "; 
08DB:  DECFSZ 61,W
08DC:  GOTO   0E3
08DD:  MOVF   63,W
08DE:  SUBLW  30
08DF:  BTFSS  03.2
08E0:  GOTO   0E3
08E1:  MOVLW  20
08E2:  MOVWF  63
....................    if(is_dot == enable) lcd_data("."); 
08E3:  DECFSZ 62,W
08E4:  GOTO   0EE
08E5:  MOVLW  73
08E6:  BSF    03.6
08E7:  MOVWF  0D
08E8:  MOVLW  00
08E9:  MOVWF  0F
08EA:  BCF    0A.3
08EB:  BCF    03.6
08EC:  CALL   397
08ED:  BSF    0A.3
....................    lcd_data(ch); lcd_data(dv); 
08EE:  MOVF   63,W
08EF:  MOVWF  74
08F0:  BCF    0A.3
08F1:  CALL   37A
08F2:  BSF    0A.3
08F3:  MOVF   64,W
08F4:  MOVWF  74
08F5:  BCF    0A.3
08F6:  CALL   37A
08F7:  BSF    0A.3
08F8:  RETURN
.................... } 
....................  
.................... void lcd_dis_3num_dot(usi16 dt, int8 x, int8 y, bool is_xvn, bool is_dot){ 
....................    usi8 tr, ch, dv; 
....................    lcd_setCursor(x, y); //xxx /10 -> xx  
08F9:  MOVF   5F,W
08FA:  MOVWF  71
08FB:  MOVF   60,W
08FC:  MOVWF  72
08FD:  BCF    0A.3
08FE:  CALL   361
08FF:  BSF    0A.3
....................    tr = dt/100 + 0x30;  
0900:  MOVF   5E,W
0901:  MOVWF  69
0902:  MOVF   5D,W
0903:  MOVWF  68
0904:  CLRF   6B
0905:  MOVLW  64
0906:  MOVWF  6A
0907:  BCF    0A.3
0908:  CALL   6BB
0909:  BSF    0A.3
090A:  MOVLW  30
090B:  ADDWF  78,W
090C:  MOVWF  63
....................    ch = dt/10%10  + 0x30; 
090D:  MOVF   5E,W
090E:  MOVWF  69
090F:  MOVF   5D,W
0910:  MOVWF  68
0911:  CLRF   6B
0912:  MOVLW  0A
0913:  MOVWF  6A
0914:  BCF    0A.3
0915:  CALL   6BB
0916:  BSF    0A.3
0917:  MOVF   79,W
0918:  MOVWF  67
0919:  MOVF   78,W
091A:  MOVWF  66
091B:  MOVF   79,W
091C:  MOVWF  69
091D:  MOVF   78,W
091E:  MOVWF  68
091F:  CLRF   6B
0920:  MOVLW  0A
0921:  MOVWF  6A
0922:  BCF    0A.3
0923:  CALL   6BB
0924:  BSF    0A.3
0925:  MOVLW  30
0926:  ADDWF  77,W
0927:  MOVWF  64
....................    dv = dt%10     + 0x30; 
0928:  MOVF   5E,W
0929:  MOVWF  69
092A:  MOVF   5D,W
092B:  MOVWF  68
092C:  CLRF   6B
092D:  MOVLW  0A
092E:  MOVWF  6A
092F:  BCF    0A.3
0930:  CALL   6BB
0931:  BSF    0A.3
0932:  MOVLW  30
0933:  ADDWF  77,W
0934:  MOVWF  65
....................    if(is_xvn == enable) if(tr == 0x30){ 
0935:  DECFSZ 61,W
0936:  GOTO   143
0937:  MOVF   63,W
0938:  SUBLW  30
0939:  BTFSS  03.2
093A:  GOTO   143
....................       tr = " "; 
093B:  MOVLW  20
093C:  MOVWF  63
....................       if(ch == 0x30) ch = " "; 
093D:  MOVF   64,W
093E:  SUBLW  30
093F:  BTFSS  03.2
0940:  GOTO   143
0941:  MOVLW  20
0942:  MOVWF  64
....................    } 
....................    if(is_dot == enable) lcd_data("."); 
0943:  DECFSZ 62,W
0944:  GOTO   14E
0945:  MOVLW  74
0946:  BSF    03.6
0947:  MOVWF  0D
0948:  MOVLW  00
0949:  MOVWF  0F
094A:  BCF    0A.3
094B:  BCF    03.6
094C:  CALL   397
094D:  BSF    0A.3
....................    lcd_data(tr); lcd_data(ch); lcd_data(dv); 
094E:  MOVF   63,W
094F:  MOVWF  74
0950:  BCF    0A.3
0951:  CALL   37A
0952:  BSF    0A.3
0953:  MOVF   64,W
0954:  MOVWF  74
0955:  BCF    0A.3
0956:  CALL   37A
0957:  BSF    0A.3
0958:  MOVF   65,W
0959:  MOVWF  74
095A:  BCF    0A.3
095B:  CALL   37A
095C:  BSF    0A.3
095D:  RETURN
.................... } 
....................  
.................... void lcd_dis_xx_yy_zz(usi8 x, usi8 y, usi8 hh, usi8 pp, usi8 ss, bool e3, bool e2, bool e1){ 
....................    usi8 hh_ch, hh_dv, pp_ch, pp_dv, ss_ch, ss_dv; 
....................    hh_ch = e3 == true ? hh/10 + 0x30 : 0x20; hh_dv = e3 == true ? hh%10 + 0x30 : 0x20; 
*
083A:  DECFSZ 68,W
083B:  GOTO   044
083C:  MOVF   65,W
083D:  MOVWF  71
083E:  MOVLW  0A
083F:  MOVWF  72
0840:  CALL   025
0841:  MOVLW  30
0842:  ADDWF  78,W
0843:  GOTO   045
0844:  MOVLW  20
0845:  MOVWF  6B
0846:  DECFSZ 68,W
0847:  GOTO   050
0848:  MOVF   65,W
0849:  MOVWF  71
084A:  MOVLW  0A
084B:  MOVWF  72
084C:  CALL   025
084D:  MOVLW  30
084E:  ADDWF  77,W
084F:  GOTO   051
0850:  MOVLW  20
0851:  MOVWF  6C
....................    pp_ch = e2 == true ? pp/10 + 0x30 : 0x20; pp_dv = e2 == true ? pp%10 + 0x30 : 0x20; 
0852:  DECFSZ 69,W
0853:  GOTO   05C
0854:  MOVF   66,W
0855:  MOVWF  71
0856:  MOVLW  0A
0857:  MOVWF  72
0858:  CALL   025
0859:  MOVLW  30
085A:  ADDWF  78,W
085B:  GOTO   05D
085C:  MOVLW  20
085D:  MOVWF  6D
085E:  DECFSZ 69,W
085F:  GOTO   068
0860:  MOVF   66,W
0861:  MOVWF  71
0862:  MOVLW  0A
0863:  MOVWF  72
0864:  CALL   025
0865:  MOVLW  30
0866:  ADDWF  77,W
0867:  GOTO   069
0868:  MOVLW  20
0869:  MOVWF  6E
....................    ss_ch = e1 == true ? ss/10 + 0x30 : 0x20; ss_dv = e1 == true ? ss%10 + 0x30 : 0x20; 
086A:  DECFSZ 6A,W
086B:  GOTO   074
086C:  MOVF   67,W
086D:  MOVWF  71
086E:  MOVLW  0A
086F:  MOVWF  72
0870:  CALL   025
0871:  MOVLW  30
0872:  ADDWF  78,W
0873:  GOTO   075
0874:  MOVLW  20
0875:  MOVWF  6F
0876:  DECFSZ 6A,W
0877:  GOTO   080
0878:  MOVF   67,W
0879:  MOVWF  71
087A:  MOVLW  0A
087B:  MOVWF  72
087C:  CALL   025
087D:  MOVLW  30
087E:  ADDWF  77,W
087F:  GOTO   081
0880:  MOVLW  20
0881:  MOVWF  70
....................    lcd_setCursor(x, y); 
0882:  MOVF   63,W
0883:  MOVWF  71
0884:  MOVF   64,W
0885:  MOVWF  72
0886:  BCF    0A.3
0887:  CALL   361
0888:  BSF    0A.3
....................    lcd_data(hh_ch); lcd_data(hh_dv); lcd_data("-"); 
0889:  MOVF   6B,W
088A:  MOVWF  74
088B:  BCF    0A.3
088C:  CALL   37A
088D:  BSF    0A.3
088E:  MOVF   6C,W
088F:  MOVWF  74
0890:  BCF    0A.3
0891:  CALL   37A
0892:  BSF    0A.3
0893:  MOVLW  75
0894:  BSF    03.6
0895:  MOVWF  0D
0896:  MOVLW  00
0897:  MOVWF  0F
0898:  BCF    0A.3
0899:  BCF    03.6
089A:  CALL   397
089B:  BSF    0A.3
....................    lcd_data(pp_ch); lcd_data(pp_dv); lcd_data("-"); 
089C:  MOVF   6D,W
089D:  MOVWF  74
089E:  BCF    0A.3
089F:  CALL   37A
08A0:  BSF    0A.3
08A1:  MOVF   6E,W
08A2:  MOVWF  74
08A3:  BCF    0A.3
08A4:  CALL   37A
08A5:  BSF    0A.3
08A6:  MOVLW  76
08A7:  BSF    03.6
08A8:  MOVWF  0D
08A9:  MOVLW  00
08AA:  MOVWF  0F
08AB:  BCF    0A.3
08AC:  BCF    03.6
08AD:  CALL   397
08AE:  BSF    0A.3
....................    lcd_data(ss_ch); lcd_data(ss_dv); 
08AF:  MOVF   6F,W
08B0:  MOVWF  74
08B1:  BCF    0A.3
08B2:  CALL   37A
08B3:  BSF    0A.3
08B4:  MOVF   70,W
08B5:  MOVWF  74
08B6:  BCF    0A.3
08B7:  CALL   37A
08B8:  BSF    0A.3
08B9:  RETURN
.................... } 
....................  
.................... void log_code_ds1307(){ 
....................    lcd_setCursor(0, 0); 
....................    lcd_data(ma_qd/10 + 0x30); lcd_data(ma_qd%10 + 0x30); lcd_data(" - "); 
....................    lcd_data(ma_ds/10 + 0x30); lcd_data(ma_ds%10 + 0x30); 
.................... } 
....................  
.................... #include <thu_vien_control_clock.c> 
....................  
.................... usi8 tang_or_giam_bcd(unsigned int8 x, int1 sel){ 
....................    usi8 y, dv, ch, v; 
....................    ch = (x>>4); 
*
0A60:  SWAPF  5D,W
0A61:  MOVWF  61
0A62:  MOVLW  0F
0A63:  ANDWF  61,F
....................    dv = x& 0x0f; 
0A64:  MOVF   5D,W
0A65:  ANDLW  0F
0A66:  MOVWF  60
....................    y = ch*10 + dv; 
0A67:  MOVF   61,W
0A68:  MOVWF  63
0A69:  MOVLW  0A
0A6A:  MOVWF  64
0A6B:  CALL   000
0A6C:  MOVF   60,W
0A6D:  ADDWF  78,W
0A6E:  MOVWF  5F
....................    if(sel == 0) y++; 
0A6F:  MOVF   5E,F
0A70:  BTFSS  03.2
0A71:  GOTO   274
0A72:  INCF   5F,F
0A73:  GOTO   275
....................    else         y--; 
0A74:  DECF   5F,F
....................    ch = y/10; dv = y%10; 
0A75:  MOVF   5F,W
0A76:  MOVWF  71
0A77:  MOVLW  0A
0A78:  MOVWF  72
0A79:  CALL   025
0A7A:  MOVF   78,W
0A7B:  MOVWF  61
0A7C:  MOVF   5F,W
0A7D:  MOVWF  71
0A7E:  MOVLW  0A
0A7F:  MOVWF  72
0A80:  CALL   025
0A81:  MOVF   77,W
0A82:  MOVWF  60
....................    v = (ch<<4)|dv; 
0A83:  SWAPF  61,W
0A84:  MOVWF  77
0A85:  MOVLW  F0
0A86:  ANDWF  77,F
0A87:  MOVF   77,W
0A88:  IORWF  60,W
0A89:  MOVWF  62
....................    return v; 
0A8A:  MOVF   62,W
0A8B:  MOVWF  78
0A8C:  RETURN
.................... } 
....................  
.................... void tat_bat_2led_chinh(){ 
....................    if(gt_mod == 1 || gt_mod == 4) { e_11 = ~e_11; e_22 = true; e_33 = true;} 
*
098C:  DECFSZ 30,W
098D:  GOTO   18F
098E:  GOTO   193
098F:  MOVF   30,W
0990:  SUBLW  04
0991:  BTFSS  03.2
0992:  GOTO   198
0993:  MOVLW  01
0994:  XORWF  32,F
0995:  BSF    32.1
0996:  BSF    32.2
0997:  GOTO   1B5
....................    else if(gt_mod == 2 || gt_mod == 5) { e_11 = true; e_22 = ~e_22; e_33 = true;} 
0998:  MOVF   30,W
0999:  SUBLW  02
099A:  BTFSC  03.2
099B:  GOTO   1A0
099C:  MOVF   30,W
099D:  SUBLW  05
099E:  BTFSS  03.2
099F:  GOTO   1A5
09A0:  BSF    32.0
09A1:  MOVLW  02
09A2:  XORWF  32,F
09A3:  BSF    32.2
09A4:  GOTO   1B5
....................    else if(gt_mod == 3 || gt_mod == 6) { e_11 = true; e_22 = true; e_33 = ~e_33;} 
09A5:  MOVF   30,W
09A6:  SUBLW  03
09A7:  BTFSC  03.2
09A8:  GOTO   1AD
09A9:  MOVF   30,W
09AA:  SUBLW  06
09AB:  BTFSS  03.2
09AC:  GOTO   1B2
09AD:  BSF    32.0
09AE:  BSF    32.1
09AF:  MOVLW  04
09B0:  XORWF  32,F
09B1:  GOTO   1B5
....................    else { e_11 = true; e_22 = true; e_33 = true;} 
09B2:  BSF    32.0
09B3:  BSF    32.1
09B4:  BSF    32.2
.................... } 
....................  
.................... void giai_ma_gpg_lcd(){ 
....................    lcd_dis_xx_yy_zz(4,1,dec_gio_ds,dec_phut_ds,dec_giay_ds,e_33, e_22, e_11); 
*
09BA:  MOVF   45,W
09BB:  MOVWF  5F
09BC:  BCF    0A.3
09BD:  CALL   7E2
09BE:  BSF    0A.3
09BF:  MOVF   78,W
09C0:  MOVWF  5D
09C1:  MOVF   44,W
09C2:  MOVWF  5F
09C3:  BCF    0A.3
09C4:  CALL   7E2
09C5:  BSF    0A.3
09C6:  MOVF   78,W
09C7:  MOVWF  5E
09C8:  MOVF   43,W
09C9:  MOVWF  5F
09CA:  BCF    0A.3
09CB:  CALL   7E2
09CC:  BSF    0A.3
09CD:  MOVF   78,W
09CE:  MOVWF  5F
09CF:  MOVLW  00
09D0:  BTFSC  32.2
09D1:  MOVLW  01
09D2:  MOVWF  60
09D3:  MOVLW  00
09D4:  BTFSC  32.1
09D5:  MOVLW  01
09D6:  MOVWF  61
09D7:  MOVLW  00
09D8:  BTFSC  32.0
09D9:  MOVLW  01
09DA:  MOVWF  62
09DB:  MOVLW  04
09DC:  MOVWF  63
09DD:  MOVLW  01
09DE:  MOVWF  64
09DF:  MOVF   5D,W
09E0:  MOVWF  65
09E1:  MOVF   5E,W
09E2:  MOVWF  66
09E3:  MOVF   78,W
09E4:  MOVWF  67
09E5:  MOVF   60,W
09E6:  MOVWF  68
09E7:  MOVF   61,W
09E8:  MOVWF  69
09E9:  MOVF   62,W
09EA:  MOVWF  6A
09EB:  CALL   03A
09EC:  RETURN
.................... } 
....................  
.................... void giai_ma_ntn_lcd(){ 
....................    lcd_dis_xx_yy_zz(4,1,dec_ngay_ds,dec_thang_ds,dec_nam_ds,e_33, e_22, e_11); 
09ED:  MOVF   47,W
09EE:  MOVWF  5F
09EF:  BCF    0A.3
09F0:  CALL   7E2
09F1:  BSF    0A.3
09F2:  MOVF   78,W
09F3:  MOVWF  5D
09F4:  MOVF   48,W
09F5:  MOVWF  5F
09F6:  BCF    0A.3
09F7:  CALL   7E2
09F8:  BSF    0A.3
09F9:  MOVF   78,W
09FA:  MOVWF  5E
09FB:  MOVF   49,W
09FC:  MOVWF  5F
09FD:  BCF    0A.3
09FE:  CALL   7E2
09FF:  BSF    0A.3
0A00:  MOVF   78,W
0A01:  MOVWF  5F
0A02:  MOVLW  00
0A03:  BTFSC  32.2
0A04:  MOVLW  01
0A05:  MOVWF  60
0A06:  MOVLW  00
0A07:  BTFSC  32.1
0A08:  MOVLW  01
0A09:  MOVWF  61
0A0A:  MOVLW  00
0A0B:  BTFSC  32.0
0A0C:  MOVLW  01
0A0D:  MOVWF  62
0A0E:  MOVLW  04
0A0F:  MOVWF  63
0A10:  MOVLW  01
0A11:  MOVWF  64
0A12:  MOVF   5D,W
0A13:  MOVWF  65
0A14:  MOVF   5E,W
0A15:  MOVWF  66
0A16:  MOVF   78,W
0A17:  MOVWF  67
0A18:  MOVF   60,W
0A19:  MOVWF  68
0A1A:  MOVF   61,W
0A1B:  MOVWF  69
0A1C:  MOVF   62,W
0A1D:  MOVWF  6A
0A1E:  CALL   03A
0A1F:  RETURN
.................... } 
....................  
.................... void giai_ma_thu_lcd(){ 
....................    lcd_dis_xx_yy_zz(4,1,0x00,dec_thu_ds,0x00,0, e_22, 0); 
0A20:  MOVF   46,W
0A21:  MOVWF  5F
0A22:  BCF    0A.3
0A23:  CALL   7E2
0A24:  BSF    0A.3
0A25:  MOVF   78,W
0A26:  MOVWF  5D
0A27:  MOVLW  00
0A28:  BTFSC  32.1
0A29:  MOVLW  01
0A2A:  MOVWF  5E
0A2B:  MOVLW  04
0A2C:  MOVWF  63
0A2D:  MOVLW  01
0A2E:  MOVWF  64
0A2F:  CLRF   65
0A30:  MOVF   78,W
0A31:  MOVWF  66
0A32:  CLRF   67
0A33:  CLRF   68
0A34:  MOVF   5E,W
0A35:  MOVWF  69
0A36:  CLRF   6A
0A37:  CALL   03A
0A38:  RETURN
.................... } 
....................  
.................... void giai_ma_gpg_ntn_thu_lcd(){ 
....................    if(gt_mod == 0){ 
0A39:  MOVF   30,F
0A3A:  BTFSS  03.2
0A3B:  GOTO   24B
....................       if(tt_ht == 0 || tt_ht == 1) giai_ma_gpg_lcd(); 
0A3C:  MOVF   2F,F
0A3D:  BTFSC  03.2
0A3E:  GOTO   241
0A3F:  DECFSZ 2F,W
0A40:  GOTO   242
0A41:  CALL   1BA
....................       if(tt_ht == 2) giai_ma_ntn_lcd(); 
0A42:  MOVF   2F,W
0A43:  SUBLW  02
0A44:  BTFSC  03.2
0A45:  CALL   1ED
....................       if(tt_ht == 3) giai_ma_thu_lcd(); 
0A46:  MOVF   2F,W
0A47:  SUBLW  03
0A48:  BTFSC  03.2
0A49:  CALL   220
....................    } 
0A4A:  GOTO   25F
....................    else{ 
....................       if(gt_mod < 4)       giai_ma_gpg_lcd(); 
0A4B:  BTFSC  30.7
0A4C:  GOTO   251
0A4D:  MOVF   30,W
0A4E:  SUBLW  03
0A4F:  BTFSS  03.0
0A50:  GOTO   253
0A51:  CALL   1BA
0A52:  GOTO   25F
....................       else if(gt_mod < 7)  giai_ma_ntn_lcd(); 
0A53:  BTFSC  30.7
0A54:  GOTO   259
0A55:  MOVF   30,W
0A56:  SUBLW  06
0A57:  BTFSS  03.0
0A58:  GOTO   25B
0A59:  CALL   1ED
0A5A:  GOTO   25F
....................       else if(gt_mod == 7) giai_ma_thu_lcd(); 
0A5B:  MOVF   30,W
0A5C:  SUBLW  07
0A5D:  BTFSC  03.2
0A5E:  CALL   220
....................    } 
0A5F:  RETURN
.................... } 
....................  
.................... void xu_ly_choptat(){ 
....................    if(gt_mod != 0){ 
*
0989:  MOVF   30,F
098A:  BTFSC  03.2
098B:  GOTO   1B6
....................       tat_bat_2led_chinh(); 
....................    } 
*
09B5:  GOTO   1B9
....................    else { e_11 = true; e_22 = true; e_33 = true;} 
09B6:  BSF    32.0
09B7:  BSF    32.1
09B8:  BSF    32.2
09B9:  RETURN
....................     
.................... } 
....................  
.................... void phim_chon_hthi_mode(){ 
....................    if(nhan_btn_giu(2, bt3)){ 
*
118C:  CLRF   5E
118D:  MOVLW  02
118E:  MOVWF  5D
118F:  MOVLW  33
1190:  MOVWF  5F
1191:  BCF    0A.4
1192:  BSF    0A.3
1193:  CALL   15E
1194:  BSF    0A.4
1195:  BCF    0A.3
1196:  MOVF   78,F
1197:  BTFSC  03.2
1198:  GOTO   1C0
....................       tt_ht = 1; 
1199:  MOVLW  01
119A:  MOVWF  2F
....................       if(tt_ht == 1){ 
119B:  DECFSZ 2F,W
119C:  GOTO   1BA
....................          gt_mod++; 
119D:  INCF   30,F
....................          if(gt_mod < 4) tt_ht = 1; 
119E:  BTFSC  30.7
119F:  GOTO   1A4
11A0:  MOVF   30,W
11A1:  SUBLW  03
11A2:  BTFSS  03.0
11A3:  GOTO   1A7
11A4:  MOVLW  01
11A5:  MOVWF  2F
11A6:  GOTO   1BA
....................          else if(gt_mod < 7) tt_ht = 2; 
11A7:  BTFSC  30.7
11A8:  GOTO   1AD
11A9:  MOVF   30,W
11AA:  SUBLW  06
11AB:  BTFSS  03.0
11AC:  GOTO   1B0
11AD:  MOVLW  02
11AE:  MOVWF  2F
11AF:  GOTO   1BA
....................          else if(gt_mod == 7) tt_ht = 3; 
11B0:  MOVF   30,W
11B1:  SUBLW  07
11B2:  BTFSS  03.2
11B3:  GOTO   1B7
11B4:  MOVLW  03
11B5:  MOVWF  2F
11B6:  GOTO   1BA
....................          else{ 
....................             gt_mod = 0; 
11B7:  CLRF   30
....................             tt_ht = 0; 
11B8:  CLRF   2F
....................             dem_menu_tong_curr = 0; 
11B9:  CLRF   38
....................          } 
....................       } 
....................       tg_chinh = 0; 
11BA:  CLRF   31
....................       giai_ma_gpg_ntn_thu_lcd(); 
11BB:  BCF    0A.4
11BC:  BSF    0A.3
11BD:  CALL   239
11BE:  BSF    0A.4
11BF:  BCF    0A.3
....................    } 
.................... } 
.................... void tang_giay(){ 
....................    if(giay_ds == 0x59) giay_ds = 0; 
*
11DF:  MOVF   43,W
11E0:  SUBLW  59
11E1:  BTFSS  03.2
11E2:  GOTO   1E5
11E3:  CLRF   43
11E4:  GOTO   1EF
....................    else giay_ds = tang_or_giam_bcd(giay_ds, tang); 
11E5:  MOVF   43,W
11E6:  MOVWF  5D
11E7:  CLRF   5E
11E8:  BCF    0A.4
11E9:  BSF    0A.3
11EA:  CALL   260
11EB:  BSF    0A.4
11EC:  BCF    0A.3
11ED:  MOVF   78,W
11EE:  MOVWF  43
....................    ds1307_save_ds(0,giay_ds); 
11EF:  CLRF   5D
11F0:  MOVF   43,W
11F1:  MOVWF  5E
11F2:  BCF    0A.4
11F3:  BSF    0A.3
11F4:  CALL   28D
11F5:  BSF    0A.4
11F6:  BCF    0A.3
.................... } 
.................... void tang_phut(){ 
....................    if(phut_ds == 0x59) phut_ds = 0; 
*
11F8:  MOVF   44,W
11F9:  SUBLW  59
11FA:  BTFSS  03.2
11FB:  GOTO   1FE
11FC:  CLRF   44
11FD:  GOTO   208
....................    else phut_ds = tang_or_giam_bcd(phut_ds, tang); 
11FE:  MOVF   44,W
11FF:  MOVWF  5D
1200:  CLRF   5E
1201:  BCF    0A.4
1202:  BSF    0A.3
1203:  CALL   260
1204:  BSF    0A.4
1205:  BCF    0A.3
1206:  MOVF   78,W
1207:  MOVWF  44
....................    ds1307_save_ds(1,phut_ds); 
1208:  MOVLW  01
1209:  MOVWF  5D
120A:  MOVF   44,W
120B:  MOVWF  5E
120C:  BCF    0A.4
120D:  BSF    0A.3
120E:  CALL   28D
120F:  BSF    0A.4
1210:  BCF    0A.3
.................... } 
.................... void tang_gio(){ 
....................    if(gio_ds == 0x23) gio_ds = 0; 
*
1212:  MOVF   45,W
1213:  SUBLW  23
1214:  BTFSS  03.2
1215:  GOTO   218
1216:  CLRF   45
1217:  GOTO   222
....................    else gio_ds = tang_or_giam_bcd(gio_ds, tang); 
1218:  MOVF   45,W
1219:  MOVWF  5D
121A:  CLRF   5E
121B:  BCF    0A.4
121C:  BSF    0A.3
121D:  CALL   260
121E:  BSF    0A.4
121F:  BCF    0A.3
1220:  MOVF   78,W
1221:  MOVWF  45
....................    ds1307_save_ds(2,gio_ds); 
1222:  MOVLW  02
1223:  MOVWF  5D
1224:  MOVF   45,W
1225:  MOVWF  5E
1226:  BCF    0A.4
1227:  BSF    0A.3
1228:  CALL   28D
1229:  BSF    0A.4
122A:  BCF    0A.3
.................... } 
.................... void chinh_tang_gpg(){ 
....................    switch(gt_mod){ 
*
11D4:  MOVF   30,W
11D5:  XORLW  01
11D6:  BTFSC  03.2
11D7:  GOTO   1DF
11D8:  XORLW  03
11D9:  BTFSC  03.2
11DA:  GOTO   1F8
11DB:  XORLW  01
11DC:  BTFSC  03.2
11DD:  GOTO   212
11DE:  GOTO   22C
....................       case 1: 
....................          tang_giay(); 
....................          break; 
*
11F7:  GOTO   22C
....................       case 2: 
....................          tang_phut(); 
....................          break; 
*
1211:  GOTO   22C
....................       case 3: 
....................          tang_gio(); 
....................          break; 
*
122B:  GOTO   22C
....................       default: break; 
....................    } 
.................... } 
.................... void tang_nam(){ 
....................    if(nam_ds == 0x99) nam_ds = 0; 
*
123E:  MOVF   49,W
123F:  SUBLW  99
1240:  BTFSS  03.2
1241:  GOTO   244
1242:  CLRF   49
1243:  GOTO   24E
....................    else nam_ds = tang_or_giam_bcd(nam_ds, tang); 
1244:  MOVF   49,W
1245:  MOVWF  5D
1246:  CLRF   5E
1247:  BCF    0A.4
1248:  BSF    0A.3
1249:  CALL   260
124A:  BSF    0A.4
124B:  BCF    0A.3
124C:  MOVF   78,W
124D:  MOVWF  49
....................    ds1307_save_ds(6,nam_ds); 
124E:  MOVLW  06
124F:  MOVWF  5D
1250:  MOVF   49,W
1251:  MOVWF  5E
1252:  BCF    0A.4
1253:  BSF    0A.3
1254:  CALL   28D
1255:  BSF    0A.4
1256:  BCF    0A.3
.................... } 
.................... void tang_thang(){ 
....................    if(thang_ds == 0x12) thang_ds = 1; 
*
1258:  MOVF   48,W
1259:  SUBLW  12
125A:  BTFSS  03.2
125B:  GOTO   25F
125C:  MOVLW  01
125D:  MOVWF  48
125E:  GOTO   269
....................    else thang_ds = tang_or_giam_bcd(thang_ds, tang); 
125F:  MOVF   48,W
1260:  MOVWF  5D
1261:  CLRF   5E
1262:  BCF    0A.4
1263:  BSF    0A.3
1264:  CALL   260
1265:  BSF    0A.4
1266:  BCF    0A.3
1267:  MOVF   78,W
1268:  MOVWF  48
....................    ds1307_save_ds(5,thang_ds); 
1269:  MOVLW  05
126A:  MOVWF  5D
126B:  MOVF   48,W
126C:  MOVWF  5E
126D:  BCF    0A.4
126E:  BSF    0A.3
126F:  CALL   28D
1270:  BSF    0A.4
1271:  BCF    0A.3
.................... } 
.................... void tang_ngay(){ 
....................    if(ngay_ds == 0x31) ngay_ds = 1; 
*
1273:  MOVF   47,W
1274:  SUBLW  31
1275:  BTFSS  03.2
1276:  GOTO   27A
1277:  MOVLW  01
1278:  MOVWF  47
1279:  GOTO   284
....................    else ngay_ds = tang_or_giam_bcd(ngay_ds, tang); 
127A:  MOVF   47,W
127B:  MOVWF  5D
127C:  CLRF   5E
127D:  BCF    0A.4
127E:  BSF    0A.3
127F:  CALL   260
1280:  BSF    0A.4
1281:  BCF    0A.3
1282:  MOVF   78,W
1283:  MOVWF  47
....................    ds1307_save_ds(4,ngay_ds); 
1284:  MOVLW  04
1285:  MOVWF  5D
1286:  MOVF   47,W
1287:  MOVWF  5E
1288:  BCF    0A.4
1289:  BSF    0A.3
128A:  CALL   28D
128B:  BSF    0A.4
128C:  BCF    0A.3
.................... } 
.................... void chinh_tang_ntn(){ 
....................    switch(gt_mod){ 
*
1233:  MOVF   30,W
1234:  XORLW  04
1235:  BTFSC  03.2
1236:  GOTO   23E
1237:  XORLW  01
1238:  BTFSC  03.2
1239:  GOTO   258
123A:  XORLW  03
123B:  BTFSC  03.2
123C:  GOTO   273
123D:  GOTO   28E
....................       case 4: 
....................          tang_nam(); 
....................          break; 
*
1257:  GOTO   28E
....................       case 5: 
....................          tang_thang(); 
....................          break; 
*
1272:  GOTO   28E
....................       case 6: 
....................          tang_ngay(); 
....................          break; 
*
128D:  GOTO   28E
....................       default: break; 
....................    } 
.................... } 
.................... void chinh_tang_thu(){ 
....................    if(thu_ds == 8) thu_ds = 2; 
*
1293:  MOVF   46,W
1294:  SUBLW  08
1295:  BTFSS  03.2
1296:  GOTO   29A
1297:  MOVLW  02
1298:  MOVWF  46
1299:  GOTO   29B
....................    else thu_ds++; 
129A:  INCF   46,F
....................    ds1307_save_ds(3,thu_ds); 
129B:  MOVLW  03
129C:  MOVWF  5D
129D:  MOVF   46,W
129E:  MOVWF  5E
129F:  BCF    0A.4
12A0:  BSF    0A.3
12A1:  CALL   28D
12A2:  BSF    0A.4
12A3:  BCF    0A.3
.................... } 
....................  
.................... void phim_up(){ 
....................    if(nhan_btn_giu(1, bt1)){ 
*
11C0:  CLRF   5E
11C1:  MOVLW  01
11C2:  MOVWF  5D
11C3:  MOVLW  31
11C4:  MOVWF  5F
11C5:  BCF    0A.4
11C6:  BSF    0A.3
11C7:  CALL   15E
11C8:  BSF    0A.4
11C9:  BCF    0A.3
11CA:  MOVF   78,F
11CB:  BTFSC  03.2
11CC:  GOTO   2AC
....................       tg_chinh = 0; 
11CD:  CLRF   31
....................       if(gt_mod<4) chinh_tang_gpg(); 
11CE:  BTFSC  30.7
11CF:  GOTO   1D4
11D0:  MOVF   30,W
11D1:  SUBLW  03
11D2:  BTFSS  03.0
11D3:  GOTO   22D
*
122C:  GOTO   2A4
....................       else if(gt_mod<7) chinh_tang_ntn(); 
122D:  BTFSC  30.7
122E:  GOTO   233
122F:  MOVF   30,W
1230:  SUBLW  06
1231:  BTFSS  03.0
1232:  GOTO   28F
*
128E:  GOTO   2A4
....................       else if(gt_mod==7) chinh_tang_thu(); 
128F:  MOVF   30,W
1290:  SUBLW  07
1291:  BTFSS  03.2
1292:  GOTO   2A4
....................       e_11 = true; e_22 = true; e_33 = true; 
*
12A4:  BSF    32.0
12A5:  BSF    32.1
12A6:  BSF    32.2
....................       giai_ma_gpg_ntn_thu_lcd(); 
12A7:  BCF    0A.4
12A8:  BSF    0A.3
12A9:  CALL   239
12AA:  BSF    0A.4
12AB:  BCF    0A.3
....................    } 
.................... } 
.................... void giam_giay(){ 
....................    if(giay_ds == 0) giay_ds = 0x59; 
*
12CB:  MOVF   43,F
12CC:  BTFSS  03.2
12CD:  GOTO   2D1
12CE:  MOVLW  59
12CF:  MOVWF  43
12D0:  GOTO   2DC
....................    else giay_ds = tang_or_giam_bcd(giay_ds,giam); 
12D1:  MOVF   43,W
12D2:  MOVWF  5D
12D3:  MOVLW  01
12D4:  MOVWF  5E
12D5:  BCF    0A.4
12D6:  BSF    0A.3
12D7:  CALL   260
12D8:  BSF    0A.4
12D9:  BCF    0A.3
12DA:  MOVF   78,W
12DB:  MOVWF  43
....................    ds1307_save_ds(0,giay_ds); 
12DC:  CLRF   5D
12DD:  MOVF   43,W
12DE:  MOVWF  5E
12DF:  BCF    0A.4
12E0:  BSF    0A.3
12E1:  CALL   28D
12E2:  BSF    0A.4
12E3:  BCF    0A.3
.................... } 
.................... void giam_phut(){ 
....................    if(phut_ds == 0) phut_ds = 0x59; 
*
12E5:  MOVF   44,F
12E6:  BTFSS  03.2
12E7:  GOTO   2EB
12E8:  MOVLW  59
12E9:  MOVWF  44
12EA:  GOTO   2F6
....................    else phut_ds = tang_or_giam_bcd(phut_ds,giam); 
12EB:  MOVF   44,W
12EC:  MOVWF  5D
12ED:  MOVLW  01
12EE:  MOVWF  5E
12EF:  BCF    0A.4
12F0:  BSF    0A.3
12F1:  CALL   260
12F2:  BSF    0A.4
12F3:  BCF    0A.3
12F4:  MOVF   78,W
12F5:  MOVWF  44
....................    ds1307_save_ds(1,phut_ds); 
12F6:  MOVLW  01
12F7:  MOVWF  5D
12F8:  MOVF   44,W
12F9:  MOVWF  5E
12FA:  BCF    0A.4
12FB:  BSF    0A.3
12FC:  CALL   28D
12FD:  BSF    0A.4
12FE:  BCF    0A.3
.................... } 
.................... void giam_gio(){ 
....................    if(gio_ds == 0) gio_ds = 0x23; 
*
1300:  MOVF   45,F
1301:  BTFSS  03.2
1302:  GOTO   306
1303:  MOVLW  23
1304:  MOVWF  45
1305:  GOTO   311
....................    else gio_ds = tang_or_giam_bcd(gio_ds,giam); 
1306:  MOVF   45,W
1307:  MOVWF  5D
1308:  MOVLW  01
1309:  MOVWF  5E
130A:  BCF    0A.4
130B:  BSF    0A.3
130C:  CALL   260
130D:  BSF    0A.4
130E:  BCF    0A.3
130F:  MOVF   78,W
1310:  MOVWF  45
....................    ds1307_save_ds(2,gio_ds); 
1311:  MOVLW  02
1312:  MOVWF  5D
1313:  MOVF   45,W
1314:  MOVWF  5E
1315:  BCF    0A.4
1316:  BSF    0A.3
1317:  CALL   28D
1318:  BSF    0A.4
1319:  BCF    0A.3
.................... } 
.................... void chinh_giam_gpg(){ 
....................    switch(gt_mod){ 
*
12C0:  MOVF   30,W
12C1:  XORLW  01
12C2:  BTFSC  03.2
12C3:  GOTO   2CB
12C4:  XORLW  03
12C5:  BTFSC  03.2
12C6:  GOTO   2E5
12C7:  XORLW  01
12C8:  BTFSC  03.2
12C9:  GOTO   300
12CA:  GOTO   31B
....................       case 1: 
....................          giam_giay(); 
....................          break; 
*
12E4:  GOTO   31B
....................       case 2: 
....................          giam_phut(); 
....................          break; 
*
12FF:  GOTO   31B
....................       case 3: 
....................          giam_gio(); 
....................          break; 
*
131A:  GOTO   31B
....................       default: break; 
....................    } 
.................... } 
.................... void giam_nam(){ 
....................    if(nam_ds == 0x0) nam_ds = 0x99; 
*
132D:  MOVF   49,F
132E:  BTFSS  03.2
132F:  GOTO   333
1330:  MOVLW  99
1331:  MOVWF  49
1332:  GOTO   33E
....................    else nam_ds = tang_or_giam_bcd(nam_ds, giam); 
1333:  MOVF   49,W
1334:  MOVWF  5D
1335:  MOVLW  01
1336:  MOVWF  5E
1337:  BCF    0A.4
1338:  BSF    0A.3
1339:  CALL   260
133A:  BSF    0A.4
133B:  BCF    0A.3
133C:  MOVF   78,W
133D:  MOVWF  49
....................    ds1307_save_ds(6,nam_ds); 
133E:  MOVLW  06
133F:  MOVWF  5D
1340:  MOVF   49,W
1341:  MOVWF  5E
1342:  BCF    0A.4
1343:  BSF    0A.3
1344:  CALL   28D
1345:  BSF    0A.4
1346:  BCF    0A.3
.................... } 
.................... void giam_thang(){ 
....................    if(thang_ds == 0x1) thang_ds = 12; 
*
1348:  DECFSZ 48,W
1349:  GOTO   34D
134A:  MOVLW  0C
134B:  MOVWF  48
134C:  GOTO   358
....................    else thang_ds = tang_or_giam_bcd(thang_ds, giam); 
134D:  MOVF   48,W
134E:  MOVWF  5D
134F:  MOVLW  01
1350:  MOVWF  5E
1351:  BCF    0A.4
1352:  BSF    0A.3
1353:  CALL   260
1354:  BSF    0A.4
1355:  BCF    0A.3
1356:  MOVF   78,W
1357:  MOVWF  48
....................    ds1307_save_ds(5,thang_ds); 
1358:  MOVLW  05
1359:  MOVWF  5D
135A:  MOVF   48,W
135B:  MOVWF  5E
135C:  BCF    0A.4
135D:  BSF    0A.3
135E:  CALL   28D
135F:  BSF    0A.4
1360:  BCF    0A.3
.................... } 
.................... void giam_ngay(){ 
....................    if(ngay_ds == 0x1) ngay_ds = 21; 
*
1362:  DECFSZ 47,W
1363:  GOTO   367
1364:  MOVLW  15
1365:  MOVWF  47
1366:  GOTO   372
....................    else ngay_ds = tang_or_giam_bcd(ngay_ds, giam); 
1367:  MOVF   47,W
1368:  MOVWF  5D
1369:  MOVLW  01
136A:  MOVWF  5E
136B:  BCF    0A.4
136C:  BSF    0A.3
136D:  CALL   260
136E:  BSF    0A.4
136F:  BCF    0A.3
1370:  MOVF   78,W
1371:  MOVWF  47
....................    ds1307_save_ds(4,ngay_ds); 
1372:  MOVLW  04
1373:  MOVWF  5D
1374:  MOVF   47,W
1375:  MOVWF  5E
1376:  BCF    0A.4
1377:  BSF    0A.3
1378:  CALL   28D
1379:  BSF    0A.4
137A:  BCF    0A.3
.................... } 
.................... void chinh_giam_ntn(){ 
....................    switch(gt_mod){ 
*
1322:  MOVF   30,W
1323:  XORLW  01
1324:  BTFSC  03.2
1325:  GOTO   32D
1326:  XORLW  03
1327:  BTFSC  03.2
1328:  GOTO   348
1329:  XORLW  01
132A:  BTFSC  03.2
132B:  GOTO   362
132C:  GOTO   37C
....................       case 1: 
....................          giam_nam(); 
....................          break; 
*
1347:  GOTO   37C
....................       case 2: 
....................          giam_thang(); 
....................          break; 
*
1361:  GOTO   37C
....................       case 3: 
....................          giam_ngay(); 
....................          break; 
*
137B:  GOTO   37C
....................       default: break; 
....................    } 
.................... } 
.................... void chinh_giam_thu(){ 
....................    if(thu_ds == 2) thu_ds = 8; 
*
1381:  MOVF   46,W
1382:  SUBLW  02
1383:  BTFSS  03.2
1384:  GOTO   388
1385:  MOVLW  08
1386:  MOVWF  46
1387:  GOTO   389
....................    else thu_ds--; 
1388:  DECF   46,F
....................    ds1307_save_ds(3,thu_ds); 
1389:  MOVLW  03
138A:  MOVWF  5D
138B:  MOVF   46,W
138C:  MOVWF  5E
138D:  BCF    0A.4
138E:  BSF    0A.3
138F:  CALL   28D
1390:  BSF    0A.4
1391:  BCF    0A.3
.................... } 
.................... void phim_dw(){ 
....................    if(nhan_btn_giu(1, bt2)){ 
*
12AC:  CLRF   5E
12AD:  MOVLW  01
12AE:  MOVWF  5D
12AF:  MOVLW  32
12B0:  MOVWF  5F
12B1:  BCF    0A.4
12B2:  BSF    0A.3
12B3:  CALL   15E
12B4:  BSF    0A.4
12B5:  BCF    0A.3
12B6:  MOVF   78,F
12B7:  BTFSC  03.2
12B8:  GOTO   39A
....................       tg_chinh = 0; 
12B9:  CLRF   31
....................       if(gt_mod<4) chinh_giam_gpg(); 
12BA:  BTFSC  30.7
12BB:  GOTO   2C0
12BC:  MOVF   30,W
12BD:  SUBLW  03
12BE:  BTFSS  03.0
12BF:  GOTO   31C
*
131B:  GOTO   392
....................       else if(gt_mod<7) chinh_giam_ntn(); 
131C:  BTFSC  30.7
131D:  GOTO   322
131E:  MOVF   30,W
131F:  SUBLW  06
1320:  BTFSS  03.0
1321:  GOTO   37D
*
137C:  GOTO   392
....................       else if(gt_mod==7) chinh_giam_thu(); 
137D:  MOVF   30,W
137E:  SUBLW  07
137F:  BTFSS  03.2
1380:  GOTO   392
....................       e_11 = true; e_22 = true; e_33 = true; 
*
1392:  BSF    32.0
1393:  BSF    32.1
1394:  BSF    32.2
....................       giai_ma_gpg_ntn_thu_lcd(); 
1395:  BCF    0A.4
1396:  BSF    0A.3
1397:  CALL   239
1398:  BSF    0A.4
1399:  BCF    0A.3
....................    } 
.................... } 
.................... void log_mode(){ 
....................    lcd_setCursor(0, 1); 
*
13B8:  CLRF   71
13B9:  MOVLW  01
13BA:  MOVWF  72
13BB:  BCF    0A.4
13BC:  CALL   361
13BD:  BSF    0A.4
....................    if(tt_ht == 0) lcd_data(" N "); 
13BE:  MOVF   2F,F
13BF:  BTFSS  03.2
13C0:  GOTO   3CB
13C1:  MOVLW  79
13C2:  BSF    03.6
13C3:  MOVWF  0D
13C4:  MOVLW  00
13C5:  MOVWF  0F
13C6:  BCF    0A.4
13C7:  BCF    03.6
13C8:  CALL   397
13C9:  BSF    0A.4
13CA:  GOTO   3F2
....................    else if(tt_ht == 1) lcd_data("GPG"); 
13CB:  DECFSZ 2F,W
13CC:  GOTO   3D7
13CD:  MOVLW  7B
13CE:  BSF    03.6
13CF:  MOVWF  0D
13D0:  MOVLW  00
13D1:  MOVWF  0F
13D2:  BCF    0A.4
13D3:  BCF    03.6
13D4:  CALL   397
13D5:  BSF    0A.4
13D6:  GOTO   3F2
....................    else if(tt_ht == 2) lcd_data("NTN"); 
13D7:  MOVF   2F,W
13D8:  SUBLW  02
13D9:  BTFSS  03.2
13DA:  GOTO   3E5
13DB:  MOVLW  7D
13DC:  BSF    03.6
13DD:  MOVWF  0D
13DE:  MOVLW  00
13DF:  MOVWF  0F
13E0:  BCF    0A.4
13E1:  BCF    03.6
13E2:  CALL   397
13E3:  BSF    0A.4
13E4:  GOTO   3F2
....................    else if(tt_ht == 3) lcd_data(" T "); 
13E5:  MOVF   2F,W
13E6:  SUBLW  03
13E7:  BTFSS  03.2
13E8:  GOTO   3F2
13E9:  MOVLW  7F
13EA:  BSF    03.6
13EB:  MOVWF  0D
13EC:  MOVLW  00
13ED:  MOVWF  0F
13EE:  BCF    0A.4
13EF:  BCF    03.6
13F0:  CALL   397
13F1:  BSF    0A.4
....................    lcd_setCursor(13, 1); 
13F2:  MOVLW  0D
13F3:  MOVWF  71
13F4:  MOVLW  01
13F5:  MOVWF  72
13F6:  BCF    0A.4
13F7:  CALL   361
13F8:  BSF    0A.4
....................    lcd_data(gt_mod + 0x30); 
13F9:  MOVLW  30
13FA:  ADDWF  30,W
13FB:  MOVWF  5D
13FC:  MOVWF  74
13FD:  BCF    0A.4
13FE:  CALL   37A
13FF:  BSF    0A.4
....................    if(gt_mod != 0){ 
1400:  MOVF   30,F
1401:  BTFSC  03.2
1402:  GOTO   424
....................       lcd_data(tg_chinh/10 + 0x30); lcd_data(tg_chinh%10 + 0x30); 
1403:  MOVF   31,W
1404:  MOVWF  5D
1405:  MOVLW  0A
1406:  MOVWF  5E
1407:  BCF    0A.4
1408:  BSF    0A.3
1409:  CALL   2DF
140A:  BSF    0A.4
140B:  BCF    0A.3
140C:  MOVLW  30
140D:  ADDWF  78,W
140E:  MOVWF  5D
140F:  MOVWF  74
1410:  BCF    0A.4
1411:  CALL   37A
1412:  BSF    0A.4
1413:  MOVF   31,W
1414:  MOVWF  5D
1415:  MOVLW  0A
1416:  MOVWF  5E
1417:  BCF    0A.4
1418:  BSF    0A.3
1419:  CALL   2DF
141A:  BSF    0A.4
141B:  BCF    0A.3
141C:  MOVLW  30
141D:  ADDWF  77,W
141E:  MOVWF  5D
141F:  MOVWF  74
1420:  BCF    0A.4
1421:  CALL   37A
1422:  BSF    0A.4
....................    } 
1423:  GOTO   42D
....................    else 
....................       lcd_data("__"); 
1424:  MOVLW  81
1425:  BSF    03.6
1426:  MOVWF  0D
1427:  MOVLW  00
1428:  MOVWF  0F
1429:  BCF    0A.4
142A:  BCF    03.6
142B:  CALL   397
142C:  BSF    0A.4
.................... } 
....................  
.................... #include <thu_vien_control_alarm.c> 
.................... void giai_ma_gpg_alarm_lcd(){ 
....................    lcd_dis_xx_yy_zz(4,1,dec_gio_eat,dec_phut_eat,dec_giay_eat,e_33, e_22, e_11); 
*
0B04:  MOVF   33,W
0B05:  MOVWF  5F
0B06:  BCF    0A.3
0B07:  CALL   7E2
0B08:  BSF    0A.3
0B09:  MOVF   78,W
0B0A:  MOVWF  5D
0B0B:  MOVF   34,W
0B0C:  MOVWF  5F
0B0D:  BCF    0A.3
0B0E:  CALL   7E2
0B0F:  BSF    0A.3
0B10:  MOVF   78,W
0B11:  MOVWF  5E
0B12:  MOVF   35,W
0B13:  MOVWF  5F
0B14:  BCF    0A.3
0B15:  CALL   7E2
0B16:  BSF    0A.3
0B17:  MOVF   78,W
0B18:  MOVWF  5F
0B19:  MOVLW  00
0B1A:  BTFSC  32.2
0B1B:  MOVLW  01
0B1C:  MOVWF  60
0B1D:  MOVLW  00
0B1E:  BTFSC  32.1
0B1F:  MOVLW  01
0B20:  MOVWF  61
0B21:  MOVLW  00
0B22:  BTFSC  32.0
0B23:  MOVLW  01
0B24:  MOVWF  62
0B25:  MOVLW  04
0B26:  MOVWF  63
0B27:  MOVLW  01
0B28:  MOVWF  64
0B29:  MOVF   5D,W
0B2A:  MOVWF  65
0B2B:  MOVF   5E,W
0B2C:  MOVWF  66
0B2D:  MOVF   78,W
0B2E:  MOVWF  67
0B2F:  MOVF   60,W
0B30:  MOVWF  68
0B31:  MOVF   61,W
0B32:  MOVWF  69
0B33:  MOVF   62,W
0B34:  MOVWF  6A
0B35:  CALL   03A
0B36:  RETURN
.................... } 
.................... void phim_chon_mode_alarm(){ 
....................    if(nhan_btn_giu(2, bt3)){ 
*
1449:  CLRF   5E
144A:  MOVLW  02
144B:  MOVWF  5D
144C:  MOVLW  33
144D:  MOVWF  5F
144E:  BCF    0A.4
144F:  BSF    0A.3
1450:  CALL   15E
1451:  BSF    0A.4
1452:  BCF    0A.3
1453:  MOVF   78,F
1454:  BTFSC  03.2
1455:  GOTO   466
....................       if(gt_mod < 3) gt_mod++; 
1456:  BTFSC  30.7
1457:  GOTO   45C
1458:  MOVF   30,W
1459:  SUBLW  02
145A:  BTFSS  03.0
145B:  GOTO   45E
145C:  INCF   30,F
145D:  GOTO   460
....................       else{ 
....................          gt_mod = 0; 
145E:  CLRF   30
....................          dem_menu_tong_curr = 0; 
145F:  CLRF   38
....................       } 
....................       tg_chinh = 0; 
1460:  CLRF   31
....................       giai_ma_gpg_alarm_lcd(); 
1461:  BCF    0A.4
1462:  BSF    0A.3
1463:  CALL   304
1464:  BSF    0A.4
1465:  BCF    0A.3
....................    } 
.................... } 
.................... void tang_giay_eat(){ 
....................    if(eat_ss == 0x59) eat_ss = 0; 
*
147F:  MOVF   35,W
1480:  SUBLW  59
1481:  BTFSS  03.2
1482:  GOTO   485
1483:  CLRF   35
1484:  GOTO   48F
....................    else eat_ss = tang_or_giam_bcd(eat_ss, tang); 
1485:  MOVF   35,W
1486:  MOVWF  5D
1487:  CLRF   5E
1488:  BCF    0A.4
1489:  BSF    0A.3
148A:  CALL   260
148B:  BSF    0A.4
148C:  BCF    0A.3
148D:  MOVF   78,W
148E:  MOVWF  35
.................... } 
.................... void tang_phut_eat(){ 
....................    if(eat_pp == 0x59) eat_pp = 0; 
*
1490:  MOVF   34,W
1491:  SUBLW  59
1492:  BTFSS  03.2
1493:  GOTO   496
1494:  CLRF   34
1495:  GOTO   4A0
....................    else eat_pp = tang_or_giam_bcd(eat_pp, tang); 
1496:  MOVF   34,W
1497:  MOVWF  5D
1498:  CLRF   5E
1499:  BCF    0A.4
149A:  BSF    0A.3
149B:  CALL   260
149C:  BSF    0A.4
149D:  BCF    0A.3
149E:  MOVF   78,W
149F:  MOVWF  34
.................... } 
.................... void tang_gio_eat(){ 
....................    if(eat_hh == 0x23) eat_hh = 0; 
*
14A1:  MOVF   33,W
14A2:  SUBLW  23
14A3:  BTFSS  03.2
14A4:  GOTO   4A7
14A5:  CLRF   33
14A6:  GOTO   4B1
....................    else eat_hh = tang_or_giam_bcd(eat_hh, tang); 
14A7:  MOVF   33,W
14A8:  MOVWF  5D
14A9:  CLRF   5E
14AA:  BCF    0A.4
14AB:  BSF    0A.3
14AC:  CALL   260
14AD:  BSF    0A.4
14AE:  BCF    0A.3
14AF:  MOVF   78,W
14B0:  MOVWF  33
.................... } 
.................... void chinh_tang_gpg_eat(){ 
....................    switch(gt_mod){ 
*
1474:  MOVF   30,W
1475:  XORLW  01
1476:  BTFSC  03.2
1477:  GOTO   47F
1478:  XORLW  03
1479:  BTFSC  03.2
147A:  GOTO   490
147B:  XORLW  01
147C:  BTFSC  03.2
147D:  GOTO   4A1
147E:  GOTO   4B2
....................       case 1: 
....................          tang_giay_eat(); 
....................          break; 
*
148F:  GOTO   4B2
....................       case 2: 
....................          tang_phut_eat(); 
....................          break; 
*
14A0:  GOTO   4B2
....................       case 3: 
....................          tang_gio_eat(); 
....................          break; 
*
14B1:  GOTO   4B2
....................       default: break; 
....................    } 
.................... } 
....................  
.................... void phim_up_eat(){ 
....................    if(nhan_btn_giu(1, bt1)){ 
*
1466:  CLRF   5E
1467:  MOVLW  01
1468:  MOVWF  5D
1469:  MOVLW  31
146A:  MOVWF  5F
146B:  BCF    0A.4
146C:  BSF    0A.3
146D:  CALL   15E
146E:  BSF    0A.4
146F:  BCF    0A.3
1470:  MOVF   78,F
1471:  BTFSC  03.2
1472:  GOTO   4BA
....................       tg_chinh = 0; 
1473:  CLRF   31
....................       chinh_tang_gpg_eat(); 
....................       e_11 = true; e_22 = true; e_33 = true; 
*
14B2:  BSF    32.0
14B3:  BSF    32.1
14B4:  BSF    32.2
....................       giai_ma_gpg_alarm_lcd(); 
14B5:  BCF    0A.4
14B6:  BSF    0A.3
14B7:  CALL   304
14B8:  BSF    0A.4
14B9:  BCF    0A.3
....................    } 
.................... } 
.................... void giam_giay_eat(){ 
....................    if(eat_ss == 0) eat_ss = 0x59; 
*
14D3:  MOVF   35,F
14D4:  BTFSS  03.2
14D5:  GOTO   4D9
14D6:  MOVLW  59
14D7:  MOVWF  35
14D8:  GOTO   4E4
....................    else eat_ss = tang_or_giam_bcd(eat_ss,giam); 
14D9:  MOVF   35,W
14DA:  MOVWF  5D
14DB:  MOVLW  01
14DC:  MOVWF  5E
14DD:  BCF    0A.4
14DE:  BSF    0A.3
14DF:  CALL   260
14E0:  BSF    0A.4
14E1:  BCF    0A.3
14E2:  MOVF   78,W
14E3:  MOVWF  35
.................... } 
.................... void giam_phut_eat(){ 
....................    if(eat_pp == 0) eat_pp = 0x59; 
*
14E5:  MOVF   34,F
14E6:  BTFSS  03.2
14E7:  GOTO   4EB
14E8:  MOVLW  59
14E9:  MOVWF  34
14EA:  GOTO   4F6
....................    else eat_pp = tang_or_giam_bcd(eat_pp,giam); 
14EB:  MOVF   34,W
14EC:  MOVWF  5D
14ED:  MOVLW  01
14EE:  MOVWF  5E
14EF:  BCF    0A.4
14F0:  BSF    0A.3
14F1:  CALL   260
14F2:  BSF    0A.4
14F3:  BCF    0A.3
14F4:  MOVF   78,W
14F5:  MOVWF  34
.................... } 
.................... void giam_gio_eat(){ 
....................    if(eat_hh == 0) eat_hh = 0x23; 
*
14F7:  MOVF   33,F
14F8:  BTFSS  03.2
14F9:  GOTO   4FD
14FA:  MOVLW  23
14FB:  MOVWF  33
14FC:  GOTO   508
....................    else eat_hh = tang_or_giam_bcd(eat_hh,giam); 
14FD:  MOVF   33,W
14FE:  MOVWF  5D
14FF:  MOVLW  01
1500:  MOVWF  5E
1501:  BCF    0A.4
1502:  BSF    0A.3
1503:  CALL   260
1504:  BSF    0A.4
1505:  BCF    0A.3
1506:  MOVF   78,W
1507:  MOVWF  33
.................... } 
.................... void chinh_giam_gpg_eat(){ 
....................    switch(gt_mod){ 
*
14C8:  MOVF   30,W
14C9:  XORLW  01
14CA:  BTFSC  03.2
14CB:  GOTO   4D3
14CC:  XORLW  03
14CD:  BTFSC  03.2
14CE:  GOTO   4E5
14CF:  XORLW  01
14D0:  BTFSC  03.2
14D1:  GOTO   4F7
14D2:  GOTO   509
....................       case 1: 
....................          giam_giay_eat(); 
....................          break; 
*
14E4:  GOTO   509
....................       case 2: 
....................          giam_phut_eat(); 
....................          break; 
*
14F6:  GOTO   509
....................       case 3: 
....................          giam_gio_eat(); 
....................          break; 
*
1508:  GOTO   509
....................       default: break; 
....................    } 
.................... } 
.................... void phim_dw_eat(){ 
....................    if(nhan_btn_giu(1, bt2)){ 
*
14BA:  CLRF   5E
14BB:  MOVLW  01
14BC:  MOVWF  5D
14BD:  MOVLW  32
14BE:  MOVWF  5F
14BF:  BCF    0A.4
14C0:  BSF    0A.3
14C1:  CALL   15E
14C2:  BSF    0A.4
14C3:  BCF    0A.3
14C4:  MOVF   78,F
14C5:  BTFSC  03.2
14C6:  GOTO   511
....................       tg_chinh = 0; 
14C7:  CLRF   31
....................       chinh_giam_gpg_eat(); 
....................       e_11 = true; e_22 = true; e_33 = true; 
*
1509:  BSF    32.0
150A:  BSF    32.1
150B:  BSF    32.2
....................       giai_ma_gpg_alarm_lcd(); 
150C:  BCF    0A.4
150D:  BSF    0A.3
150E:  CALL   304
150F:  BSF    0A.4
1510:  BCF    0A.3
....................    } 
.................... } 
.................... void log_mode_alarm(){ 
....................    lcd_setCursor(13, 1); 
*
1528:  MOVLW  0D
1529:  MOVWF  71
152A:  MOVLW  01
152B:  MOVWF  72
152C:  BCF    0A.4
152D:  CALL   361
152E:  BSF    0A.4
....................    lcd_data(gt_mod + 0x30); 
152F:  MOVLW  30
1530:  ADDWF  30,W
1531:  MOVWF  5D
1532:  MOVWF  74
1533:  BCF    0A.4
1534:  CALL   37A
1535:  BSF    0A.4
....................    if(gt_mod != 0){ 
1536:  MOVF   30,F
1537:  BTFSC  03.2
1538:  GOTO   55A
....................       lcd_data(tg_chinh/10 + 0x30); lcd_data(tg_chinh%10 + 0x30); 
1539:  MOVF   31,W
153A:  MOVWF  5D
153B:  MOVLW  0A
153C:  MOVWF  5E
153D:  BCF    0A.4
153E:  BSF    0A.3
153F:  CALL   2DF
1540:  BSF    0A.4
1541:  BCF    0A.3
1542:  MOVLW  30
1543:  ADDWF  78,W
1544:  MOVWF  5D
1545:  MOVWF  74
1546:  BCF    0A.4
1547:  CALL   37A
1548:  BSF    0A.4
1549:  MOVF   31,W
154A:  MOVWF  5D
154B:  MOVLW  0A
154C:  MOVWF  5E
154D:  BCF    0A.4
154E:  BSF    0A.3
154F:  CALL   2DF
1550:  BSF    0A.4
1551:  BCF    0A.3
1552:  MOVLW  30
1553:  ADDWF  77,W
1554:  MOVWF  5D
1555:  MOVWF  74
1556:  BCF    0A.4
1557:  CALL   37A
1558:  BSF    0A.4
....................    } 
1559:  GOTO   563
....................    else 
....................       lcd_data("__"); 
155A:  MOVLW  83
155B:  BSF    03.6
155C:  MOVWF  0D
155D:  MOVLW  00
155E:  MOVWF  0F
155F:  BCF    0A.4
1560:  BCF    03.6
1561:  CALL   397
1562:  BSF    0A.4
.................... } 
....................  
.................... #include <thu_vien_ds18b20.c> 
.................... #define touch_pin pin_a0 
.................... #define DS18B20_PIN touch_pin 
....................  
.................... #include <touch.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                        Dallas Touch Driver                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////  data = touch_read_bit()     Reads one bit from a touch device    //// 
.................... ////                                                                   //// 
.................... ////  data = touch_read_BYTE()    Reads one byte from a touch device.  //// 
.................... ////                                                                   //// 
.................... ////  ok = touch_write_bit(data)  Writes one bit to a touch device     //// 
.................... ////                              and returns true if all went ok.     //// 
.................... ////                              A false indicates a collision with   //// 
.................... ////                              another device.                      //// 
.................... ////                                                                   //// 
.................... ////  ok = touch_write_byte(data) Writes one byte to a touch device    //// 
.................... ////                              and returns true if all went ok.     //// 
.................... ////                              A false indicates a collision with   //// 
.................... ////                              another device.                      //// 
.................... ////                                                                   //// 
.................... ////  present = touch_present()   Issues a reset and returns true      //// 
.................... ////                              if the touch device is there.        //// 
.................... ////                                                                   //// 
.................... ////  reset_pulse()               Issues a reset and waits for a       //// 
.................... ////                              present pulse.                       //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef  TOUCH_C 
.................... #define  TOUCH_C 
....................  
.................... #ifndef TOUCH_PIN 
....................    #define TOUCH_PIN  PIN_B0 
.................... #endif 
....................  
.................... #define TOUCH_PIN_LOW()    output_drive(TOUCH_PIN); output_low(TOUCH_PIN) 
.................... #define TOUCH_PIN_HIGH()    output_drive(TOUCH_PIN); output_high(TOUCH_PIN) 
.................... #define TOUCH_PIN_FLOAT()  output_float(TOUCH_PIN) 
.................... #define TOUCH_PIN_READ()      input_state(TOUCH_PIN) 
....................  
.................... ///////////////////////////// 
.................... ////                     //// 
.................... //// Function Prototypes //// 
.................... ////                     //// 
.................... ///////////////////////////// 
....................  
.................... /* 
.................... int1 touch_read_bit() 
.................... This will read back a bit from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A bit from the DS1993 
.................... */ 
.................... int1 touch_read_bit(); 
....................  
.................... /* 
.................... BYTE touch_read_byte() 
.................... This will read back a byte from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A byte from the DS1993 
.................... */ 
.................... BYTE touch_read_byte(); 
....................  
.................... /* 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... This will write a bit to the DS1993 
.................... PARAMS: The bit to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_bit(int1 data); 
....................  
.................... /* 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... This will write a byte to the DS1993 
.................... PARAMS: The byte to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_byte(BYTE data); 
....................  
.................... /* 
.................... BOOLEAN touch_present() 
.................... This will evaluate whether or not there is a touch present on the DS1993 
.................... PARAMS: none 
.................... RETURNS: True if a touch is present, false if otherwise 
.................... */ 
.................... BOOLEAN touch_present(); 
....................  
.................... /* 
.................... void reset_pulse() 
.................... This will send the DS1993 a reset pulse 
.................... PARAMS: none 
.................... RETURNS: none 
.................... */ 
.................... void reset_pulse(); 
....................  
.................... ////////////////////////////////// 
.................... ////                          //// 
.................... //// Function Implementations //// 
.................... ////                          //// 
.................... ////////////////////////////////// 
....................  
.................... /* 
.................... int1 touch_read_bit() 
.................... This will read back a bit from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A bit from the DS1993 
.................... */ 
.................... int1 touch_read_bit() 
.................... { 
....................    int1 data; 
....................  
....................    TOUCH_PIN_LOW(); 
....................    delay_us(14); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................    data = TOUCH_PIN_READ(); 
....................    delay_us(100); 
....................  
....................    return data; 
.................... } 
....................  
.................... /* 
.................... BYTE touch_read_byte() 
.................... This will read back a byte from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A byte from the DS1993 
.................... */ 
.................... BYTE touch_read_byte() 
.................... { 
....................    BYTE i,data; 
....................  
....................    for(i=1; i <= 8; ++i) 
....................       shift_right(&data, 1, touch_read_bit()); 
....................  
....................    return data; 
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... This will write a bit to the DS1993 
.................... PARAMS: The bit to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... { 
....................    TOUCH_PIN_LOW(); 
*
05C5:  BSF    03.5
05C6:  BCF    05.0
05C7:  BCF    05.0
05C8:  BCF    03.5
05C9:  BCF    05.0
....................    delay_us(10); 
05CA:  MOVLW  10
05CB:  MOVWF  77
05CC:  DECFSZ 77,F
05CD:  GOTO   5CC
05CE:  NOP
....................    if(data) 
05CF:  MOVF   60,F
05D0:  BTFSC  03.2
05D1:  GOTO   5E2
....................    { 
....................       TOUCH_PIN_HIGH(); 
05D2:  BSF    03.5
05D3:  BCF    05.0
05D4:  BCF    05.0
05D5:  BCF    03.5
05D6:  BSF    05.0
....................       delay_us(10); 
05D7:  MOVLW  10
05D8:  MOVWF  77
05D9:  DECFSZ 77,F
05DA:  GOTO   5D9
05DB:  NOP
....................       if(!TOUCH_PIN_READ()) 
05DC:  BTFSC  05.0
05DD:  GOTO   5E1
....................          return FALSE; 
05DE:  MOVLW  00
05DF:  MOVWF  78
05E0:  GOTO   604
....................    } 
05E1:  GOTO   5F1
....................    else 
....................    { 
....................       TOUCH_PIN_LOW(); 
05E2:  BSF    03.5
05E3:  BCF    05.0
05E4:  BCF    05.0
05E5:  BCF    03.5
05E6:  BCF    05.0
....................       delay_us(10); 
05E7:  MOVLW  10
05E8:  MOVWF  77
05E9:  DECFSZ 77,F
05EA:  GOTO   5E9
05EB:  NOP
....................       if(TOUCH_PIN_READ()) 
05EC:  BTFSS  05.0
05ED:  GOTO   5F1
....................          return FALSE; 
05EE:  MOVLW  00
05EF:  MOVWF  78
05F0:  GOTO   604
....................    } 
....................    delay_us(50); 
05F1:  MOVLW  52
05F2:  MOVWF  77
05F3:  DECFSZ 77,F
05F4:  GOTO   5F3
05F5:  GOTO   5F6
05F6:  NOP
....................    TOUCH_PIN_HIGH(); 
05F7:  BSF    03.5
05F8:  BCF    05.0
05F9:  BCF    05.0
05FA:  BCF    03.5
05FB:  BSF    05.0
....................    delay_us(50); 
05FC:  MOVLW  52
05FD:  MOVWF  77
05FE:  DECFSZ 77,F
05FF:  GOTO   5FE
0600:  GOTO   601
0601:  NOP
....................    return TRUE; 
0602:  MOVLW  01
0603:  MOVWF  78
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... This will write a byte to the DS1993 
.................... PARAMS: The byte to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... { 
....................    BYTE i; 
....................  
....................    for(i=1; i<=8; ++i) 
*
05B7:  MOVLW  01
05B8:  MOVWF  5E
05B9:  MOVF   5E,W
05BA:  SUBLW  08
05BB:  BTFSS  03.0
05BC:  GOTO   60C
....................       if(!touch_write_bit(shift_right(&data, 1, 0))) 
05BD:  BCF    03.0
05BE:  RRF    5D,F
05BF:  MOVLW  00
05C0:  BTFSC  03.0
05C1:  MOVLW  01
05C2:  MOVWF  5F
05C3:  MOVF   5F,W
05C4:  MOVWF  60
*
0604:  MOVF   78,F
0605:  BTFSS  03.2
0606:  GOTO   60A
....................          return FALSE; 
0607:  MOVLW  00
0608:  MOVWF  78
0609:  GOTO   60E
060A:  INCF   5E,F
060B:  GOTO   5B9
....................  
....................    return TRUE; 
060C:  MOVLW  01
060D:  MOVWF  78
060E:  RETURN
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_present() 
.................... This will evaluate whether or not there is a touch present on the DS1993 
.................... PARAMS: none 
.................... RETURNS: True if a touch is present, false if otherwise 
.................... */ 
.................... BOOLEAN touch_present() 
.................... { 
....................    BOOLEAN present; 
....................    TOUCH_PIN_LOW(); 
*
058C:  BSF    03.5
058D:  BCF    05.0
058E:  BCF    05.0
058F:  BCF    03.5
0590:  BCF    05.0
....................    delay_us(500); 
0591:  MOVLW  02
0592:  MOVWF  5E
0593:  MOVLW  F9
0594:  MOVWF  60
0595:  CALL   57D
0596:  DECFSZ 5E,F
0597:  GOTO   593
....................    TOUCH_PIN_FLOAT(); 
0598:  BSF    03.5
0599:  BSF    05.0
....................    delay_us(5); 
059A:  MOVLW  07
059B:  MOVWF  77
059C:  DECFSZ 77,F
059D:  GOTO   59C
059E:  GOTO   59F
059F:  NOP
....................  
....................    if(!TOUCH_PIN_READ()) 
05A0:  BCF    03.5
05A1:  BTFSC  05.0
05A2:  GOTO   5A6
....................       return FALSE; 
05A3:  MOVLW  00
05A4:  MOVWF  78
05A5:  GOTO   5B6
....................  
....................    delay_us(65); 
05A6:  MOVLW  6B
05A7:  MOVWF  77
05A8:  DECFSZ 77,F
05A9:  GOTO   5A8
05AA:  GOTO   5AB
05AB:  NOP
....................    present = !TOUCH_PIN_READ(); 
05AC:  BCF    5D.0
05AD:  BTFSS  05.0
05AE:  BSF    5D.0
....................    delay_us(240); 
05AF:  MOVLW  F0
05B0:  MOVWF  60
05B1:  CALL   57D
....................    return present; 
05B2:  MOVLW  00
05B3:  BTFSC  5D.0
05B4:  MOVLW  01
05B5:  MOVWF  78
05B6:  RETURN
.................... } 
....................  
.................... /* 
.................... void reset_pulse() 
.................... This will send the DS1993 a reset pulse 
.................... PARAMS: none 
.................... RETURNS: none 
.................... */ 
.................... void reset_pulse() 
.................... { 
....................    TOUCH_PIN_LOW(); 
....................    delay_us(500); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................    while(!touch_present()); 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #define search_rom       0xf0 
.................... #define read_rom         0x33 
.................... #define match_rom        0x55 
.................... #define skip_rom         0xcc 
.................... #define alarm_search     0xec 
.................... #define read_scratchpad  0xbe 
.................... #define write_scratchpad 0x4e 
.................... #define copy_scratchpad  0x48 
.................... #define convert_t        0x44 
....................  
.................... si16 nhiet_do; 
.................... usi8 dt_ng, dt_ngt; 
.................... usi16 dt_tp, dt_tpt; 
.................... usi16 dt_tp_real; 
....................  
.................... /* 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................          CACH 1 SU DUNG THU VIEN TOUCH.C 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... */ 
.................... void ds18b20_no_ds18b(usi8 x, y) 
.................... { 
....................    lcd_setCursor(x, y); 
....................    lcd_data("NO DS18B20"); 
.................... } 
....................  
.................... void ds18b20_khoi_tao() 
.................... { 
....................    touch_present(); 
*
060F:  CALL   58C
....................    touch_write_byte(skip_rom); 
0610:  MOVLW  CC
0611:  MOVWF  5D
0612:  CALL   5B7
....................    touch_write_byte(write_scratchpad); 
0613:  MOVLW  4E
0614:  MOVWF  5D
0615:  CALL   5B7
....................    touch_write_byte(0x0); 
0616:  CLRF   5D
0617:  CALL   5B7
....................    touch_write_byte(0x0); 
0618:  CLRF   5D
0619:  CALL   5B7
....................    touch_write_byte(0x7f); // 12 bit 
061A:  MOVLW  7F
061B:  MOVWF  5D
061C:  CALL   5B7
....................  
....................    touch_present(); 
061D:  CALL   58C
....................    touch_write_byte(skip_rom); 
061E:  MOVLW  CC
061F:  MOVWF  5D
0620:  CALL   5B7
....................    touch_write_byte(convert_t); 
0621:  MOVLW  44
0622:  MOVWF  5D
0623:  CALL   5B7
0624:  BCF    0A.3
0625:  BSF    0A.4
0626:  GOTO   054 (RETURN)
.................... } 
....................  
.................... usi16 ds18b20_read_temp_c1() 
.................... { 
....................    usi8 bl, bh; 
....................    usi16 w; 
....................    touch_write_byte(skip_rom); 
....................    touch_write_byte(read_scratchpad); 
....................    bl = touch_read_byte(); 
....................    bh = touch_read_byte(); 
....................    w = make16(bh, bl); 
....................    touch_present(); 
....................    touch_write_byte(skip_rom); 
....................    touch_write_byte(convert_t); 
....................    return w; 
.................... } 
....................  
.................... void ds18b20_doc_rom(usi8 time_s) 
.................... { 
....................    usi8 rom_code[8]; 
....................    usi8 xh, xl; 
....................    si8 i; 
....................    if (touch_present()) 
....................    { 
....................       touch_write_byte(read_rom); 
....................       for (i = 0; i < 8; i++) 
....................          rom_code[i] = touch_read_byte(); 
....................       lcd_setCursor(0, 0); 
....................       lcd_data("CO DS18B20"); 
....................       lcd_setCursor(0, 1); 
....................       for (i = 7; i > -1; i--) 
....................       { 
....................          xh = rom_code[i] / 16; 
....................          if (xh > 9) 
....................             xh = xh + 0x37; 
....................          else 
....................             xh = xh + 0x30; 
....................          xl = rom_code[i] % 16; 
....................          if (xl > 9) 
....................             xl = xl + 0x37; 
....................          else 
....................             xl = xl + 0x30; 
....................          lcd_data(xh); 
....................          lcd_data(xl); 
....................       } 
....................    } 
....................    else 
....................       ds18b20_no_ds18b(0, 0); 
....................    delay_ms(time_s * 1000); 
....................    lcd_clear(); 
.................... } 
.................... /* 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................          CACH 2 KHONG SU DUNG THU VIEN TOUCH.C 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... */ 
.................... bool ds18b20_start(){ 
....................    output_low(DS18B20_PIN); 
0627:  BSF    03.5
0628:  BCF    05.0
0629:  BCF    03.5
062A:  BCF    05.0
....................    output_drive(DS18B20_PIN); 
062B:  BSF    03.5
062C:  BCF    05.0
....................    delay_us(500); 
062D:  MOVLW  02
062E:  BCF    03.5
062F:  MOVWF  5F
0630:  MOVLW  F9
0631:  MOVWF  60
0632:  CALL   57D
0633:  DECFSZ 5F,F
0634:  GOTO   630
....................    output_float(DS18B20_PIN); 
0635:  BSF    03.5
0636:  BSF    05.0
....................    delay_us(100); 
0637:  MOVLW  A6
0638:  MOVWF  77
0639:  DECFSZ 77,F
063A:  GOTO   639
063B:  NOP
....................    if(!input(DS18B20_PIN)){ 
063C:  BSF    05.0
063D:  BCF    03.5
063E:  BTFSC  05.0
063F:  GOTO   64A
....................       delay_us(400); 
0640:  MOVLW  02
0641:  MOVWF  5F
0642:  MOVLW  C7
0643:  MOVWF  60
0644:  CALL   57D
0645:  DECFSZ 5F,F
0646:  GOTO   642
....................       return true; 
0647:  MOVLW  01
0648:  MOVWF  78
0649:  GOTO   64C
....................    } 
....................    return false; 
064A:  MOVLW  00
064B:  MOVWF  78
064C:  RETURN
.................... } 
....................  
.................... void ds18b20_write_bit(bool value){ 
....................    output_low(DS18B20_PIN); 
*
0662:  BSF    03.5
0663:  BCF    05.0
0664:  BCF    03.5
0665:  BCF    05.0
....................    output_drive(DS18B20_PIN); 
0666:  BSF    03.5
0667:  BCF    05.0
....................    delay_us(2); 
0668:  MOVLW  02
0669:  MOVWF  77
066A:  DECFSZ 77,F
066B:  GOTO   66A
066C:  GOTO   66D
066D:  NOP
....................    output_bit(DS18B20_PIN, value); 
066E:  BCF    03.5
066F:  MOVF   62,F
0670:  BTFSS  03.2
0671:  GOTO   674
0672:  BCF    05.0
0673:  GOTO   675
0674:  BSF    05.0
0675:  BSF    03.5
0676:  BCF    05.0
....................    delay_us(80); 
0677:  MOVLW  84
0678:  MOVWF  77
0679:  DECFSZ 77,F
067A:  GOTO   679
067B:  GOTO   67C
067C:  NOP
....................    output_float(DS18B20_PIN); 
067D:  BSF    05.0
....................    delay_us(2); 
067E:  MOVLW  02
067F:  MOVWF  77
0680:  DECFSZ 77,F
0681:  GOTO   680
0682:  GOTO   683
0683:  NOP
.................... } 
....................  
.................... void ds18b20_write_byte(int8 value){ 
....................    for(int8 i = 0; i < 8; i++) 
*
064D:  CLRF   60
064E:  MOVF   60,W
064F:  SUBLW  07
0650:  BTFSS  03.0
0651:  GOTO   687
....................       ds18b20_write_bit(bit_test(value,i)); 
0652:  MOVF   5F,W
0653:  MOVWF  77
0654:  MOVF   60,W
0655:  MOVWF  78
0656:  BTFSC  03.2
0657:  GOTO   65C
0658:  BCF    03.0
0659:  RRF    77,F
065A:  DECFSZ 78,F
065B:  GOTO   658
065C:  MOVLW  00
065D:  BTFSC  77.0
065E:  MOVLW  01
065F:  MOVWF  61
0660:  MOVF   61,W
0661:  MOVWF  62
*
0684:  BCF    03.5
0685:  INCF   60,F
0686:  GOTO   64E
0687:  RETURN
.................... } 
....................  
.................... bool ds18b20_read_bit(){ 
....................    bool value; 
....................    output_low(DS18B20_PIN); 
*
068E:  BSF    03.5
068F:  BCF    05.0
0690:  BCF    03.5
0691:  BCF    05.0
....................    output_drive(DS18B20_PIN); 
0692:  BSF    03.5
0693:  BCF    05.0
....................    delay_us(2); 
0694:  MOVLW  02
0695:  MOVWF  77
0696:  DECFSZ 77,F
0697:  GOTO   696
0698:  GOTO   699
0699:  NOP
....................    output_float(DS18B20_PIN); 
069A:  BSF    05.0
....................    delay_us(5); 
069B:  MOVLW  07
069C:  MOVWF  77
069D:  DECFSZ 77,F
069E:  GOTO   69D
069F:  GOTO   6A0
06A0:  NOP
....................    value = input(DS18B20_PIN); 
06A1:  BSF    05.0
06A2:  BCF    03.5
06A3:  BCF    65.0
06A4:  BTFSC  05.0
06A5:  BSF    65.0
....................    delay_us(100); 
06A6:  MOVLW  A6
06A7:  MOVWF  77
06A8:  DECFSZ 77,F
06A9:  GOTO   6A8
06AA:  NOP
....................    return value; 
06AB:  MOVLW  00
06AC:  BTFSC  65.0
06AD:  MOVLW  01
06AE:  MOVWF  78
.................... } 
....................  
.................... int8 ds18b20_read_byte(){ 
*
0688:  CLRF   63
....................    int8 value = 0; 
....................    for(int8 i = 0; i < 8; i++) 
0689:  CLRF   64
068A:  MOVF   64,W
068B:  SUBLW  07
068C:  BTFSS  03.0
068D:  GOTO   6B8
....................       shift_right(&value,1,ds18b20_read_bit()); 
*
06AF:  MOVF   78,F
06B0:  BTFSS  03.2
06B1:  GOTO   6B4
06B2:  BCF    03.0
06B3:  GOTO   6B5
06B4:  BSF    03.0
06B5:  RRF    63,F
06B6:  INCF   64,F
06B7:  GOTO   68A
....................    return value; 
06B8:  MOVF   63,W
06B9:  MOVWF  78
06BA:  RETURN
.................... } 
....................  
.................... bool ds18b20_read_temp_c2(int16 *raw_temp_value){ 
....................    if(!ds18b20_start()) 
*
06E3:  CALL   627
06E4:  MOVF   78,F
06E5:  BTFSS  03.2
06E6:  GOTO   6EA
....................       return false; 
06E7:  MOVLW  00
06E8:  MOVWF  78
06E9:  GOTO   738
....................    ds18b20_write_byte(skip_rom); 
06EA:  MOVLW  CC
06EB:  MOVWF  5F
06EC:  CALL   64D
....................    ds18b20_write_byte(convert_t); 
06ED:  MOVLW  44
06EE:  MOVWF  5F
06EF:  CALL   64D
....................    while(ds18b20_read_byte() == 0); 
06F0:  CALL   688
06F1:  MOVF   78,F
06F2:  BTFSC  03.2
06F3:  GOTO   6F0
....................    if(!ds18b20_start()) 
06F4:  CALL   627
06F5:  MOVF   78,F
06F6:  BTFSS  03.2
06F7:  GOTO   6FB
....................       return false; 
06F8:  MOVLW  00
06F9:  MOVWF  78
06FA:  GOTO   738
....................    ds18b20_write_byte(skip_rom); 
06FB:  MOVLW  CC
06FC:  MOVWF  5F
06FD:  CALL   64D
....................    ds18b20_write_byte(read_scratchpad); 
06FE:  MOVLW  BE
06FF:  MOVWF  5F
0700:  CALL   64D
....................    *raw_temp_value = ds18b20_read_byte(); 
0701:  MOVF   5E,W
0702:  MOVWF  7A
0703:  MOVF   5D,W
0704:  MOVWF  5F
0705:  MOVF   5E,W
0706:  MOVWF  60
0707:  CALL   688
0708:  MOVF   5F,W
0709:  MOVWF  04
070A:  BCF    03.7
070B:  BTFSC  60.0
070C:  BSF    03.7
070D:  INCF   04,F
070E:  CLRF   00
070F:  DECF   04,F
0710:  MOVF   78,W
0711:  MOVWF  00
....................    *raw_temp_value |= (int16)(ds18b20_read_byte()) << 8; 
0712:  MOVF   5E,W
0713:  MOVWF  7A
0714:  MOVF   5D,W
0715:  MOVWF  5F
0716:  MOVF   5E,W
0717:  MOVWF  60
0718:  MOVF   5D,W
0719:  MOVWF  04
071A:  BCF    03.7
071B:  BTFSC  5E.0
071C:  BSF    03.7
071D:  INCF   04,F
071E:  MOVF   00,W
071F:  MOVWF  62
0720:  DECF   04,F
0721:  MOVF   00,W
0722:  MOVWF  61
0723:  CALL   688
0724:  CLRF   64
0725:  MOVLW  00
0726:  IORWF  61,W
0727:  MOVWF  77
0728:  MOVF   78,W
0729:  IORWF  62,W
072A:  MOVWF  7A
072B:  MOVF   5F,W
072C:  MOVWF  04
072D:  BCF    03.7
072E:  BTFSC  60.0
072F:  BSF    03.7
0730:  INCF   04,F
0731:  MOVF   7A,W
0732:  MOVWF  00
0733:  DECF   04,F
0734:  MOVF   77,W
0735:  MOVWF  00
....................    return true; 
0736:  MOVLW  01
0737:  MOVWF  78
.................... } 
....................  
.................... /* 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................    HIEN THI NHIET DO LEN LCD 2 SO NGUYEN VA 3 SO THAP PHAN 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... */ 
.................... void ds18b20_lcd_data(usi16 data, int8 x, int8 y){ 
....................    dt_ng = data>>4; 
....................    dt_tp = data & 0x000f; 
....................    if(dt_ngt != dt_ng){ 
....................       dt_ngt = dt_ng; 
....................       lcd_dis_2num_dot(dt_ng, x, y, enable, disable); 
....................    } 
....................    if(dt_tpt != dt_tp){ 
....................       dt_tpt = dt_tp; 
....................       dt_tp_real = (dt_tp*625)/10; 
....................       lcd_dis_3num_dot(dt_tp_real, x+2, y, enable, enable); 
....................    } 
.................... } 
....................  
.................... void ds18b20_read_temp(){ 
....................    if(ds18b20_read_temp_c2(&nhiet_do)) 
*
06E0:  CLRF   5E
06E1:  MOVLW  53
06E2:  MOVWF  5D
*
0738:  MOVF   78,F
0739:  BTFSC  03.2
073A:  GOTO   747
....................       dt_ng = nhiet_do>>4; 
073B:  RRF    54,W
073C:  MOVWF  7A
073D:  RRF    53,W
073E:  MOVWF  79
073F:  RRF    7A,F
0740:  RRF    79,F
0741:  RRF    7A,F
0742:  RRF    79,F
0743:  RRF    7A,F
0744:  RRF    79,F
0745:  MOVF   79,W
0746:  MOVWF  55
....................       dt_tp = nhiet_do & 0x000f; 
0747:  MOVF   53,W
0748:  ANDLW  0F
0749:  MOVWF  77
074A:  CLRF   7A
074B:  MOVF   77,W
074C:  MOVWF  57
074D:  MOVF   7A,W
074E:  MOVWF  58
....................       dt_tp_real = (dt_tp*625)/10; 
074F:  MOVF   58,W
0750:  MOVWF  61
0751:  MOVF   57,W
0752:  MOVWF  60
0753:  MOVLW  02
0754:  MOVWF  63
0755:  MOVLW  71
0756:  MOVWF  62
0757:  CALL   3E7
0758:  MOVF   79,W
0759:  MOVWF  5E
075A:  MOVF   78,W
075B:  MOVWF  5D
075C:  MOVF   79,W
075D:  MOVWF  69
075E:  MOVF   78,W
075F:  MOVWF  68
0760:  CLRF   6B
0761:  MOVLW  0A
0762:  MOVWF  6A
0763:  CALL   6BB
0764:  MOVF   79,W
0765:  MOVWF  5C
0766:  MOVF   78,W
0767:  MOVWF  5B
0768:  BCF    0A.3
0769:  BSF    0A.4
076A:  GOTO   05C (RETURN)
....................       //ds18b20_lcd_data(nhiet_do,0,1); 
....................    //else ds18b20_no_ds18b(0,1); 
.................... } 
....................  
.................... #include <thu_vien_control_chiler.c> 
.................... void control_temperature(int8 nd_ss, int8 gh){ 
....................    if(nd_ss > gh){ 
*
0B37:  MOVF   5D,W
0B38:  SUBWF  5E,W
0B39:  BTFSC  03.0
0B3A:  GOTO   344
....................    // water is hot 
....................       output_bit(pinCold, 1); 
0B3B:  BSF    08.6
0B3C:  BSF    03.5
0B3D:  BCF    08.6
....................       output_bit(pinHot,  0); 
0B3E:  BCF    03.5
0B3F:  BCF    08.7
0B40:  BSF    03.5
0B41:  BCF    08.7
....................    } 
0B42:  GOTO   34B
0B43:  BCF    03.5
....................    else{ 
....................    // water is cold 
....................       output_bit(pinCold, 0); 
0B44:  BCF    08.6
0B45:  BSF    03.5
0B46:  BCF    08.6
....................       output_bit(pinHot,  1); 
0B47:  BCF    03.5
0B48:  BSF    08.7
0B49:  BSF    03.5
0B4A:  BCF    08.7
....................    } 
0B4B:  BCF    03.5
0B4C:  BCF    0A.3
0B4D:  BSF    0A.4
0B4E:  GOTO   5A3 (RETURN)
.................... } 
....................  
.................... void servo_degree_0(){ 
....................    unsigned int i; 
....................    for(i = 0; i < 50; i++){ 
*
0BB1:  CLRF   5D
0BB2:  MOVF   5D,W
0BB3:  SUBLW  31
0BB4:  BTFSS  03.0
0BB5:  GOTO   3D7
....................       output_bit(pinServo, 1); 
0BB6:  BSF    07.1
0BB7:  BCF    2B.1
0BB8:  MOVF   2B,W
0BB9:  BSF    03.5
0BBA:  MOVWF  07
....................       Delay_us(800); // pulse of 800us 
0BBB:  MOVLW  04
0BBC:  BCF    03.5
0BBD:  MOVWF  5E
0BBE:  MOVLW  C7
0BBF:  MOVWF  60
0BC0:  BCF    0A.3
0BC1:  CALL   57D
0BC2:  BSF    0A.3
0BC3:  DECFSZ 5E,F
0BC4:  GOTO   3BE
....................       output_bit(pinServo, 0); 
0BC5:  BCF    07.1
0BC6:  BCF    2B.1
0BC7:  MOVF   2B,W
0BC8:  BSF    03.5
0BC9:  MOVWF  07
....................       Delay_us(19200); 
0BCA:  MOVLW  13
0BCB:  BCF    03.5
0BCC:  MOVWF  63
0BCD:  BCF    0A.3
0BCE:  CALL   163
0BCF:  BSF    0A.3
0BD0:  MOVLW  C8
0BD1:  MOVWF  60
0BD2:  BCF    0A.3
0BD3:  CALL   57D
0BD4:  BSF    0A.3
0BD5:  INCF   5D,F
0BD6:  GOTO   3B2
....................    } 
.................... } 
....................  
.................... void servo_degree_90(){ 
....................    unsigned int i; 
....................    for(i = 0; i < 50; i++){ 
*
0B81:  CLRF   5D
0B82:  MOVF   5D,W
0B83:  SUBLW  31
0B84:  BTFSS  03.0
0B85:  GOTO   3B0
....................       output_bit(pinServo, 1); 
0B86:  BSF    07.1
0B87:  BCF    2B.1
0B88:  MOVF   2B,W
0B89:  BSF    03.5
0B8A:  MOVWF  07
....................       Delay_us(1500); // pulse of 1500us 
0B8B:  MOVLW  01
0B8C:  BCF    03.5
0B8D:  MOVWF  63
0B8E:  BCF    0A.3
0B8F:  CALL   163
0B90:  BSF    0A.3
0B91:  MOVLW  02
0B92:  MOVWF  5E
0B93:  MOVLW  F9
0B94:  MOVWF  60
0B95:  BCF    0A.3
0B96:  CALL   57D
0B97:  BSF    0A.3
0B98:  DECFSZ 5E,F
0B99:  GOTO   393
....................       output_bit(pinServo, 0); 
0B9A:  BCF    07.1
0B9B:  BCF    2B.1
0B9C:  MOVF   2B,W
0B9D:  BSF    03.5
0B9E:  MOVWF  07
....................       Delay_us(18500); 
0B9F:  MOVLW  12
0BA0:  BCF    03.5
0BA1:  MOVWF  63
0BA2:  BCF    0A.3
0BA3:  CALL   163
0BA4:  BSF    0A.3
0BA5:  MOVLW  02
0BA6:  MOVWF  5E
0BA7:  MOVLW  F9
0BA8:  MOVWF  60
0BA9:  BCF    0A.3
0BAA:  CALL   57D
0BAB:  BSF    0A.3
0BAC:  DECFSZ 5E,F
0BAD:  GOTO   3A7
0BAE:  INCF   5D,F
0BAF:  GOTO   382
....................    } 
.................... } 
....................  
.................... void servo_degree_180(){ 
....................    unsigned int i; 
....................    for(i = 0; i < 50; i++){ 
....................       output_bit(pinServo, 1); 
....................       Delay_us(2200); // pulse of 2200us 
....................       output_bit(pinServo, 0); 
....................       Delay_us(17800); 
....................    } 
.................... } 
....................  
.................... void control_servo(){ 
....................    if(dec_gio_ds == dec_gio_eat && dec_phut_ds == dec_phut_eat && dec_giay_ds == dec_giay_eat){ 
*
0B4F:  MOVF   45,W
0B50:  MOVWF  5F
0B51:  BCF    0A.3
0B52:  CALL   7E2
0B53:  BSF    0A.3
0B54:  MOVF   78,W
0B55:  MOVWF  5D
0B56:  MOVF   33,W
0B57:  MOVWF  5F
0B58:  BCF    0A.3
0B59:  CALL   7E2
0B5A:  BSF    0A.3
0B5B:  MOVF   78,W
0B5C:  SUBWF  5D,W
0B5D:  BTFSS  03.2
0B5E:  GOTO   37F
0B5F:  MOVF   44,W
0B60:  MOVWF  5F
0B61:  BCF    0A.3
0B62:  CALL   7E2
0B63:  BSF    0A.3
0B64:  MOVF   78,W
0B65:  MOVWF  5D
0B66:  MOVF   34,W
0B67:  MOVWF  5F
0B68:  BCF    0A.3
0B69:  CALL   7E2
0B6A:  BSF    0A.3
0B6B:  MOVF   78,W
0B6C:  SUBWF  5D,W
0B6D:  BTFSS  03.2
0B6E:  GOTO   37F
0B6F:  MOVF   43,W
0B70:  MOVWF  5F
0B71:  BCF    0A.3
0B72:  CALL   7E2
0B73:  BSF    0A.3
0B74:  MOVF   78,W
0B75:  MOVWF  5D
0B76:  MOVF   35,W
0B77:  MOVWF  5F
0B78:  BCF    0A.3
0B79:  CALL   7E2
0B7A:  BSF    0A.3
0B7B:  MOVF   78,W
0B7C:  SUBWF  5D,W
0B7D:  BTFSC  03.2
....................       flag_servo = true; 
0B7E:  BSF    32.3
....................    } 
....................    if(flag_servo){ 
0B7F:  BTFSS  32.3
0B80:  GOTO   3B1
....................       servo_degree_90(); 
....................       //output_bit(pinServo, 1); 
....................    } 
*
0BB0:  GOTO   3D7
....................    else{ 
....................       servo_degree_0(); 
....................       //output_bit(pinServo, 0); 
....................    } 
*
0BD7:  BCF    0A.3
0BD8:  BSF    0A.4
0BD9:  GOTO   5A8 (RETURN)
.................... } 
....................  
....................  
....................  
....................  
.................... void select_menu(){ 
....................    if(nhan_btn_nha(1,bt0)){ 
*
105D:  MOVLW  01
105E:  MOVWF  5D
105F:  MOVLW  30
1060:  MOVWF  5E
1061:  BCF    0A.4
1062:  CALL   7A2
1063:  BSF    0A.4
1064:  MOVF   78,F
1065:  BTFSC  03.2
1066:  GOTO   06E
....................       dem_menu_tong_curr++; 
1067:  INCF   38,F
....................       bdn = 0; gt_mod = 0; tt_ht = 0; 
1068:  CLRF   2E
1069:  CLRF   30
106A:  CLRF   2F
....................       e_11 = true; e_22 = true; e_33 = true; 
106B:  BSF    32.0
106C:  BSF    32.1
106D:  BSF    32.2
....................    } 
....................    if(dem_menu_tong_curr >= level_menu) 
106E:  MOVF   38,W
106F:  SUBLW  05
1070:  BTFSC  03.0
1071:  GOTO   074
....................       dem_menu_tong_curr = 0; 
1072:  CLRF   38
1073:  GOTO   59C
....................    else{ 
....................       if(dem_menu_tong_curr != dem_menu_tong_prev){ 
1074:  MOVF   39,W
1075:  SUBWF  38,W
1076:  BTFSC  03.2
1077:  GOTO   084
....................          dem_menu_tong_prev = dem_menu_tong_curr; 
1078:  MOVF   38,W
1079:  MOVWF  39
....................          lcd_clear(); 
....................       } 
....................       switch(dem_menu_tong_curr){ 
*
1084:  MOVF   38,W
1085:  BTFSC  03.2
1086:  GOTO   094
1087:  XORLW  01
1088:  BTFSC  03.2
1089:  GOTO   0F2
108A:  XORLW  03
108B:  BTFSC  03.2
108C:  GOTO   171
108D:  XORLW  01
108E:  BTFSC  03.2
108F:  GOTO   42E
1090:  XORLW  07
1091:  BTFSC  03.2
1092:  GOTO   564
1093:  GOTO   574
....................          case 0: 
....................             /* hien thi man hinh chinh */ 
....................             lcd_dis_xx_yy_zz(4,0,dec_gio_ds,dec_phut_ds,dec_giay_ds,1,1,1); 
1094:  MOVF   45,W
1095:  MOVWF  5F
1096:  BCF    0A.4
1097:  CALL   7E2
1098:  BSF    0A.4
1099:  MOVF   78,W
109A:  MOVWF  5D
109B:  MOVF   44,W
109C:  MOVWF  5F
109D:  BCF    0A.4
109E:  CALL   7E2
109F:  BSF    0A.4
10A0:  MOVF   78,W
10A1:  MOVWF  5E
10A2:  MOVF   43,W
10A3:  MOVWF  5F
10A4:  BCF    0A.4
10A5:  CALL   7E2
10A6:  BSF    0A.4
10A7:  MOVF   78,W
10A8:  MOVWF  5F
10A9:  MOVLW  04
10AA:  MOVWF  63
10AB:  CLRF   64
10AC:  MOVF   5D,W
10AD:  MOVWF  65
10AE:  MOVF   5E,W
10AF:  MOVWF  66
10B0:  MOVF   78,W
10B1:  MOVWF  67
10B2:  MOVLW  01
10B3:  MOVWF  68
10B4:  MOVWF  69
10B5:  MOVWF  6A
10B6:  BCF    0A.4
10B7:  BSF    0A.3
10B8:  CALL   03A
10B9:  BSF    0A.4
10BA:  BCF    0A.3
....................             lcd_setCursor(2,1); 
10BB:  MOVLW  02
10BC:  MOVWF  71
10BD:  MOVLW  01
10BE:  MOVWF  72
10BF:  BCF    0A.4
10C0:  CALL   361
10C1:  BSF    0A.4
....................             lcd_data("ND: "); 
10C2:  MOVLW  91
10C3:  BSF    03.6
10C4:  MOVWF  0D
10C5:  MOVLW  00
10C6:  MOVWF  0F
10C7:  BCF    0A.4
10C8:  BCF    03.6
10C9:  CALL   397
10CA:  BSF    0A.4
....................             lcd_dis_2num_dot(dt_ng, 6, 1, enable, disable); 
10CB:  CLRF   5E
10CC:  MOVF   55,W
10CD:  MOVWF  5D
10CE:  MOVLW  06
10CF:  MOVWF  5F
10D0:  MOVLW  01
10D1:  MOVWF  60
10D2:  MOVWF  61
10D3:  CLRF   62
10D4:  BCF    0A.4
10D5:  BSF    0A.3
10D6:  CALL   0BA
10D7:  BSF    0A.4
10D8:  BCF    0A.3
....................             lcd_dis_3num_dot(dt_tp_real, 8, 1, enable, enable); 
10D9:  MOVF   5C,W
10DA:  MOVWF  5E
10DB:  MOVF   5B,W
10DC:  MOVWF  5D
10DD:  MOVLW  08
10DE:  MOVWF  5F
10DF:  MOVLW  01
10E0:  MOVWF  60
10E1:  MOVWF  61
10E2:  MOVWF  62
10E3:  BCF    0A.4
10E4:  BSF    0A.3
10E5:  CALL   0F9
10E6:  BSF    0A.4
10E7:  BCF    0A.3
....................             lcd_data(" oC"); 
10E8:  MOVLW  94
10E9:  BSF    03.6
10EA:  MOVWF  0D
10EB:  MOVLW  00
10EC:  MOVWF  0F
10ED:  BCF    0A.4
10EE:  BCF    03.6
10EF:  CALL   397
10F0:  BSF    0A.4
....................             break; 
10F1:  GOTO   59C
....................          case 1: 
....................             /*  
....................                hien thi nhiet do - nhiet do gioi han 
....................                chinh nhiet do gioi han  
....................             */ 
....................             //dem_menu_1 += nhan_btn_nha(1,bt1); 
....................             gh_nd += nhan_btn_giu(3, bt1); 
10F2:  CLRF   5E
10F3:  MOVLW  03
10F4:  MOVWF  5D
10F5:  MOVLW  31
10F6:  MOVWF  5F
10F7:  BCF    0A.4
10F8:  BSF    0A.3
10F9:  CALL   15E
10FA:  BSF    0A.4
10FB:  BCF    0A.3
10FC:  MOVF   78,W
10FD:  ADDWF  2C,F
....................             gh_nd -= nhan_btn_giu(3, bt2); 
10FE:  CLRF   5E
10FF:  MOVLW  03
1100:  MOVWF  5D
1101:  MOVLW  32
1102:  MOVWF  5F
1103:  BCF    0A.4
1104:  BSF    0A.3
1105:  CALL   15E
1106:  BSF    0A.4
1107:  BCF    0A.3
1108:  MOVF   78,W
1109:  SUBWF  2C,F
....................             if(nhan_btn_nha(1,bt3) == enable) dem_menu_tong_curr = 0; 
110A:  MOVLW  01
110B:  MOVWF  5D
110C:  MOVLW  33
110D:  MOVWF  5E
110E:  BCF    0A.4
110F:  CALL   7A2
1110:  BSF    0A.4
1111:  DECFSZ 78,W
1112:  GOTO   114
1113:  CLRF   38
....................             lcd_setCursor(2,0); 
1114:  MOVLW  02
1115:  MOVWF  71
1116:  CLRF   72
1117:  BCF    0A.4
1118:  CALL   361
1119:  BSF    0A.4
....................             lcd_data("ND: "); 
111A:  MOVLW  96
111B:  BSF    03.6
111C:  MOVWF  0D
111D:  MOVLW  00
111E:  MOVWF  0F
111F:  BCF    0A.4
1120:  BCF    03.6
1121:  CALL   397
1122:  BSF    0A.4
....................             lcd_dis_2num_dot(dt_ng, 6, 0, enable, disable); 
1123:  CLRF   5E
1124:  MOVF   55,W
1125:  MOVWF  5D
1126:  MOVLW  06
1127:  MOVWF  5F
1128:  CLRF   60
1129:  MOVLW  01
112A:  MOVWF  61
112B:  CLRF   62
112C:  BCF    0A.4
112D:  BSF    0A.3
112E:  CALL   0BA
112F:  BSF    0A.4
1130:  BCF    0A.3
....................             lcd_dis_3num_dot(dt_tp_real, 8, 0, disable, enable); 
1131:  MOVF   5C,W
1132:  MOVWF  5E
1133:  MOVF   5B,W
1134:  MOVWF  5D
1135:  MOVLW  08
1136:  MOVWF  5F
1137:  CLRF   60
1138:  CLRF   61
1139:  MOVLW  01
113A:  MOVWF  62
113B:  BCF    0A.4
113C:  BSF    0A.3
113D:  CALL   0F9
113E:  BSF    0A.4
113F:  BCF    0A.3
....................             lcd_data(" oC"); 
1140:  MOVLW  99
1141:  BSF    03.6
1142:  MOVWF  0D
1143:  MOVLW  00
1144:  MOVWF  0F
1145:  BCF    0A.4
1146:  BCF    03.6
1147:  CALL   397
1148:  BSF    0A.4
....................             lcd_setCursor(2,1); 
1149:  MOVLW  02
114A:  MOVWF  71
114B:  MOVLW  01
114C:  MOVWF  72
114D:  BCF    0A.4
114E:  CALL   361
114F:  BSF    0A.4
....................             lcd_data("GH_ND: "); 
1150:  MOVLW  9B
1151:  BSF    03.6
1152:  MOVWF  0D
1153:  MOVLW  00
1154:  MOVWF  0F
1155:  BCF    0A.4
1156:  BCF    03.6
1157:  CALL   397
1158:  BSF    0A.4
....................             lcd_dis_2num_dot(gh_nd, 10, 1, enable, disable); 
1159:  CLRF   5E
115A:  MOVF   2C,W
115B:  MOVWF  5D
115C:  MOVLW  0A
115D:  MOVWF  5F
115E:  MOVLW  01
115F:  MOVWF  60
1160:  MOVWF  61
1161:  CLRF   62
1162:  BCF    0A.4
1163:  BSF    0A.3
1164:  CALL   0BA
1165:  BSF    0A.4
1166:  BCF    0A.3
....................             lcd_data(" oC"); 
1167:  MOVLW  9F
1168:  BSF    03.6
1169:  MOVWF  0D
116A:  MOVLW  00
116B:  MOVWF  0F
116C:  BCF    0A.4
116D:  BCF    03.6
116E:  CALL   397
116F:  BSF    0A.4
....................             break; 
1170:  GOTO   59C
....................          case 2: 
....................             /* 
....................                hien thi thoi gian va 
....................                cai dat thoi gian - thoi gian dong bo 
....................             */ 
....................             lcd_setCursor(1,0); 
1171:  MOVLW  01
1172:  MOVWF  71
1173:  CLRF   72
1174:  BCF    0A.4
1175:  CALL   361
1176:  BSF    0A.4
....................             lcd_data("cai dat dong ho"); 
1177:  MOVLW  A1
1178:  BSF    03.6
1179:  MOVWF  0D
117A:  MOVLW  00
117B:  MOVWF  0F
117C:  BCF    0A.4
117D:  BCF    03.6
117E:  CALL   397
117F:  BSF    0A.4
....................             if(bdn < 5){ 
1180:  MOVF   2E,W
1181:  SUBLW  04
1182:  BTFSS  03.0
1183:  GOTO   39B
....................                if(gt_mod != 0) xu_ly_choptat(); 
1184:  MOVF   30,F
1185:  BTFSC  03.2
1186:  GOTO   18C
1187:  BCF    0A.4
1188:  BSF    0A.3
1189:  CALL   189
118A:  BSF    0A.4
118B:  BCF    0A.3
....................                phim_chon_hthi_mode(); 
....................                phim_up(); 
....................                phim_dw(); 
....................             } 
*
139A:  GOTO   3B3
....................             else if(bdn >= 10){ 
139B:  MOVF   2E,W
139C:  SUBLW  09
139D:  BTFSC  03.0
139E:  GOTO   3B3
....................                bdn = 0; 
139F:  CLRF   2E
....................                if(tg_chinh < 10) tg_chinh++; 
13A0:  BTFSC  31.7
13A1:  GOTO   3A6
13A2:  MOVF   31,W
13A3:  SUBLW  09
13A4:  BTFSS  03.0
13A5:  GOTO   3A8
13A6:  INCF   31,F
13A7:  GOTO   3AD
....................                else{ 
....................                   gt_mod = 0; tt_ht = 0; 
13A8:  CLRF   30
13A9:  CLRF   2F
....................                   e_11 = true; e_22 = true; e_33 = true; 
13AA:  BSF    32.0
13AB:  BSF    32.1
13AC:  BSF    32.2
....................                } 
....................                if(giay_tam!=giay_ds){ 
13AD:  MOVF   43,W
13AE:  SUBWF  2D,W
13AF:  BTFSC  03.2
13B0:  GOTO   3B3
....................                   giay_tam = giay_ds; 
13B1:  MOVF   43,W
13B2:  MOVWF  2D
....................                } 
....................             } 
....................             giai_ma_gpg_ntn_thu_lcd(); 
13B3:  BCF    0A.4
13B4:  BSF    0A.3
13B5:  CALL   239
13B6:  BSF    0A.4
13B7:  BCF    0A.3
....................             log_mode(); 
....................             break; 
*
142D:  GOTO   59C
....................           case 3: 
....................             /* cai dat thoi gian - thoi gian cho ca an*/ 
....................             lcd_setCursor(1,0); 
142E:  MOVLW  01
142F:  MOVWF  71
1430:  CLRF   72
1431:  BCF    0A.4
1432:  CALL   361
1433:  BSF    0A.4
....................             lcd_data("t/g cho ca an"); 
1434:  MOVLW  A9
1435:  BSF    03.6
1436:  MOVWF  0D
1437:  MOVLW  00
1438:  MOVWF  0F
1439:  BCF    0A.4
143A:  BCF    03.6
143B:  CALL   397
143C:  BSF    0A.4
....................             if(bdn < 2){ 
143D:  MOVF   2E,W
143E:  SUBLW  01
143F:  BTFSS  03.0
1440:  GOTO   512
....................                if(gt_mod != 0) xu_ly_choptat(); 
1441:  MOVF   30,F
1442:  BTFSC  03.2
1443:  GOTO   449
1444:  BCF    0A.4
1445:  BSF    0A.3
1446:  CALL   189
1447:  BSF    0A.4
1448:  BCF    0A.3
....................                phim_chon_mode_alarm(); 
....................                phim_up_eat(); 
....................                phim_dw_eat(); 
....................             } 
*
1511:  GOTO   523
....................             else if(bdn >= 10){ 
1512:  MOVF   2E,W
1513:  SUBLW  09
1514:  BTFSC  03.0
1515:  GOTO   523
....................                bdn = 0; 
1516:  CLRF   2E
....................                if(tg_chinh < 20) tg_chinh++; 
1517:  BTFSC  31.7
1518:  GOTO   51D
1519:  MOVF   31,W
151A:  SUBLW  13
151B:  BTFSS  03.0
151C:  GOTO   51F
151D:  INCF   31,F
151E:  GOTO   523
....................                else{ 
....................                   gt_mod = 0; 
151F:  CLRF   30
....................                   e_11 = true; e_22 = true; e_33 = true; 
1520:  BSF    32.0
1521:  BSF    32.1
1522:  BSF    32.2
....................                } 
....................             } 
....................             giai_ma_gpg_alarm_lcd(); 
1523:  BCF    0A.4
1524:  BSF    0A.3
1525:  CALL   304
1526:  BSF    0A.4
1527:  BCF    0A.3
....................             log_mode_alarm(); 
....................             break; 
*
1563:  GOTO   59C
....................           case 4: 
....................             /* kiem tra ket noi uart - wifi - esp - firebase */ 
....................             lcd_setCursor(1,0); 
1564:  MOVLW  01
1565:  MOVWF  71
1566:  CLRF   72
1567:  BCF    0A.4
1568:  CALL   361
1569:  BSF    0A.4
....................             lcd_data("check com esp"); 
156A:  MOVLW  B0
156B:  BSF    03.6
156C:  MOVWF  0D
156D:  MOVLW  00
156E:  MOVWF  0F
156F:  BCF    0A.4
1570:  BCF    03.6
1571:  CALL   397
1572:  BSF    0A.4
....................              
....................             break; 
1573:  GOTO   59C
....................           default: 
....................             /* hien thi thong tin sp */ 
....................             lcd_setCursor(2,0); 
1574:  MOVLW  02
1575:  MOVWF  71
1576:  CLRF   72
1577:  BCF    0A.4
1578:  CALL   361
1579:  BSF    0A.4
....................             lcd_data("Information"); 
157A:  MOVLW  B7
157B:  BSF    03.6
157C:  MOVWF  0D
157D:  MOVLW  00
157E:  MOVWF  0F
157F:  BCF    0A.4
1580:  BCF    03.6
1581:  CALL   397
1582:  BSF    0A.4
....................             lcd_setCursor(0,1); 
1583:  CLRF   71
1584:  MOVLW  01
1585:  MOVWF  72
1586:  BCF    0A.4
1587:  CALL   361
1588:  BSF    0A.4
....................             lcd_data("Version: V1.0.0"); 
1589:  MOVLW  BD
158A:  BSF    03.6
158B:  MOVWF  0D
158C:  MOVLW  00
158D:  MOVWF  0F
158E:  BCF    0A.4
158F:  BCF    03.6
1590:  CALL   397
1591:  BSF    0A.4
....................             if(nhan_btn_nha(1,bt3) == enable) dem_menu_tong_curr = 0; 
1592:  MOVLW  01
1593:  MOVWF  5D
1594:  MOVLW  33
1595:  MOVWF  5E
1596:  BCF    0A.4
1597:  CALL   7A2
1598:  BSF    0A.4
1599:  DECFSZ 78,W
159A:  GOTO   59C
159B:  CLRF   38
....................             break; 
....................       } 
....................    } 
.................... } 
....................  
.................... void main(){ 
*
1000:  MOVF   03,W
1001:  ANDLW  1F
1002:  MOVWF  03
1003:  MOVLW  FF
1004:  MOVWF  2B
1005:  MOVLW  81
1006:  BSF    03.5
1007:  MOVWF  19
1008:  MOVLW  A6
1009:  MOVWF  18
100A:  MOVLW  90
100B:  BCF    03.5
100C:  MOVWF  18
100D:  MOVLW  19
100E:  MOVWF  2C
100F:  CLRF   2F
1010:  CLRF   30
1011:  CLRF   31
1012:  CLRF   36
1013:  CLRF   38
1014:  MOVLW  01
1015:  MOVWF  39
1016:  BSF    03.5
1017:  BSF    1F.0
1018:  BSF    1F.1
1019:  BSF    1F.2
101A:  BCF    1F.3
101B:  MOVLW  07
101C:  MOVWF  1C
101D:  BCF    03.7
....................    set_up_init(); 
*
1041:  BCF    0A.4
1042:  GOTO   0C5
1043:  BSF    0A.4
....................    lcd_init(); 
1044:  BCF    0A.4
1045:  GOTO   29A
1046:  BSF    0A.4
....................    lcd_log_info(3,enable); 
1047:  CLRF   5E
1048:  MOVLW  03
1049:  MOVWF  5D
104A:  MOVLW  01
104B:  MOVWF  5F
104C:  BCF    0A.4
104D:  GOTO   3FC
104E:  BSF    0A.4
....................    ds1307_init(); 
104F:  BCF    0A.4
1050:  GOTO   50D
1051:  BSF    0A.4
....................    //log_code_ds1307(); 
....................    //delay_ms(2000); 
....................    ds18b20_khoi_tao(); 
1052:  BCF    0A.4
1053:  GOTO   60F
1054:  BSF    0A.4
....................    while(true){ 
....................       ds1307_read_time(8); 
1055:  MOVLW  08
1056:  MOVWF  5D
1057:  BCF    0A.4
1058:  CALL   48C
1059:  BSF    0A.4
....................       ds18b20_read_temp(); 
105A:  BCF    0A.4
105B:  GOTO   6E0
105C:  BSF    0A.4
....................       select_menu(); 
....................       control_temperature(dt_ng,gh_nd); 
*
159C:  MOVF   55,W
159D:  MOVWF  5D
159E:  MOVF   2C,W
159F:  MOVWF  5E
15A0:  BCF    0A.4
15A1:  BSF    0A.3
15A2:  GOTO   337
15A3:  BSF    0A.4
15A4:  BCF    0A.3
....................       control_servo(); 
15A5:  BCF    0A.4
15A6:  BSF    0A.3
15A7:  GOTO   34F
15A8:  BSF    0A.4
15A9:  BCF    0A.3
15AA:  GOTO   055
....................    } 
.................... }   
15AB:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
