CCS PCM C Compiler, Version 5.115, 43599               18-May-24 20:37

               Filename:   E:\STUDY\HKII-2023-2024\DO_AN_1\PROJECT\CODE\code_do_an_1.lst

               ROM used:   1332 words (16%)
                           Largest free fragment is 2048
               RAM used:   71 (19%) at main() level
                           106 (29%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4B6
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.0
002A:  GOTO   02D
002B:  BTFSC  0C.0
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   051
.................... #include <thu_vien_do_an_1.c>
.................... /*
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
....................                        SU PHAM KY THUAT - TP.HCM
....................  DO AN 1 - HIEU CHINH NHIET DO HO CA VA CHO CA AN TU DONG - KET NOI ESP
.................... 
....................    THANH VIEN:
....................       VO MINH THUAN   - 21161366
....................       LE QUANG THUONG - 21161367
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... */
.................... #include <define_pic_16f877a.c>
.................... #include <16f877a.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
*
0066:  DATA C4,37
0067:  DATA A0,30
0068:  DATA 6E,10
0069:  DATA 31,10
006A:  DATA 2D,10
006B:  DATA C8,25
006C:  DATA C9,24
006D:  DATA 00,00
006E:  DATA 53,28
006F:  DATA 4B,2A
0070:  DATA 2D,2A
0071:  DATA 50,24
0072:  DATA C3,26
0073:  DATA 00,00
0074:  DATA 2E,00
0075:  DATA 2E,00
0076:  DATA 2D,00
0077:  DATA 2D,00
0078:  DATA A0,16
0079:  DATA 20,00
007A:  DATA EE,3A
007B:  DATA 74,10
007C:  DATA 30,00
007D:  DATA EE,3A
007E:  DATA 74,10
007F:  DATA 31,00
0080:  DATA EE,3A
0081:  DATA 74,10
0082:  DATA 32,00
0083:  DATA EE,3A
0084:  DATA 74,10
0085:  DATA 33,00
0086:  DATA 20,27
0087:  DATA 20,00
0088:  DATA 47,28
0089:  DATA 47,00
008A:  DATA 4E,2A
008B:  DATA 4E,00
008C:  DATA 20,2A
008D:  DATA 20,00
008E:  DATA DF,2F
008F:  DATA 00,00
0090:  DATA DF,2F
0091:  DATA 00,00
0092:  DATA CE,27
0093:  DATA 20,22
0094:  DATA D3,18
0095:  DATA 38,21
0096:  DATA 32,18
0097:  DATA 00,00
0098:  DATA C3,27
0099:  DATA 20,22
009A:  DATA D3,18
009B:  DATA 38,21
009C:  DATA 32,18
009D:  DATA 00,00
*
01D9:  MOVF   0B,W
01DA:  MOVWF  70
01DB:  BCF    0B.7
01DC:  BSF    03.5
01DD:  BSF    03.6
01DE:  BSF    0C.7
01DF:  BSF    0C.0
01E0:  NOP
01E1:  NOP
01E2:  BTFSS  70.7
01E3:  GOTO   1E9
01E4:  BCF    03.5
01E5:  BCF    03.6
01E6:  BSF    0B.7
01E7:  BSF    03.5
01E8:  BSF    03.6
01E9:  BCF    03.5
01EA:  MOVF   0C,W
01EB:  ANDLW  7F
01EC:  BTFSC  03.2
01ED:  GOTO   227
01EE:  MOVWF  70
01EF:  MOVF   0D,W
01F0:  MOVWF  71
01F1:  MOVF   0F,W
01F2:  MOVWF  72
01F3:  MOVF   70,W
01F4:  MOVWF  73
01F5:  BCF    03.6
01F6:  CALL   1D3
01F7:  MOVF   71,W
01F8:  BSF    03.6
01F9:  MOVWF  0D
01FA:  MOVF   72,W
01FB:  MOVWF  0F
01FC:  BCF    03.6
01FD:  MOVF   0B,W
01FE:  MOVWF  73
01FF:  BCF    0B.7
0200:  BSF    03.5
0201:  BSF    03.6
0202:  BSF    0C.7
0203:  BSF    0C.0
0204:  NOP
0205:  NOP
0206:  BTFSS  73.7
0207:  GOTO   20D
0208:  BCF    03.5
0209:  BCF    03.6
020A:  BSF    0B.7
020B:  BSF    03.5
020C:  BSF    03.6
020D:  BCF    03.5
020E:  RLF    0C,W
020F:  RLF    0E,W
0210:  ANDLW  7F
0211:  BTFSC  03.2
0212:  GOTO   227
0213:  MOVWF  70
0214:  MOVF   0D,W
0215:  MOVWF  71
0216:  MOVF   0F,W
0217:  MOVWF  72
0218:  MOVF   70,W
0219:  MOVWF  73
021A:  BCF    03.6
021B:  CALL   1D3
021C:  MOVF   71,W
021D:  BSF    03.6
021E:  MOVWF  0D
021F:  MOVF   72,W
0220:  MOVWF  0F
0221:  INCF   0D,F
0222:  BTFSC  03.2
0223:  INCF   0F,F
0224:  BCF    03.6
0225:  GOTO   1D9
0226:  BSF    03.6
0227:  BCF    03.6
0228:  RETURN
0229:  MOVLW  10
022A:  MOVWF  66
022B:  CLRF   77
022C:  CLRF   7A
022D:  RRF    63,F
022E:  RRF    62,F
022F:  BTFSS  03.0
0230:  GOTO   237
0231:  MOVF   64,W
0232:  ADDWF  77,F
0233:  BTFSC  03.0
0234:  INCF   7A,F
0235:  MOVF   65,W
0236:  ADDWF  7A,F
0237:  RRF    7A,F
0238:  RRF    77,F
0239:  RRF    79,F
023A:  RRF    78,F
023B:  DECFSZ 66,F
023C:  GOTO   22D
023D:  RETURN
*
03D1:  CLRF   78
03D2:  CLRF   79
03D3:  CLRF   77
03D4:  CLRF   7A
03D5:  MOVF   64,W
03D6:  BTFSS  03.2
03D7:  GOTO   3DB
03D8:  MOVF   63,W
03D9:  BTFSC  03.2
03DA:  GOTO   3F5
03DB:  MOVLW  10
03DC:  MOVWF  65
03DD:  BCF    03.0
03DE:  RLF    61,F
03DF:  RLF    62,F
03E0:  RLF    77,F
03E1:  RLF    7A,F
03E2:  MOVF   64,W
03E3:  SUBWF  7A,W
03E4:  BTFSS  03.2
03E5:  GOTO   3E8
03E6:  MOVF   63,W
03E7:  SUBWF  77,W
03E8:  BTFSS  03.0
03E9:  GOTO   3F1
03EA:  MOVF   63,W
03EB:  SUBWF  77,F
03EC:  BTFSS  03.0
03ED:  DECF   7A,F
03EE:  MOVF   64,W
03EF:  SUBWF  7A,F
03F0:  BSF    03.0
03F1:  RLF    78,F
03F2:  RLF    79,F
03F3:  DECFSZ 65,F
03F4:  GOTO   3DD
*
0406:  CLRF   77
0407:  CLRF   78
0408:  MOVF   64,W
0409:  BCF    03.0
040A:  BTFSC  65.0
040B:  ADDWF  77,F
040C:  RRF    77,F
040D:  RRF    78,F
040E:  BTFSC  65.1
040F:  ADDWF  77,F
0410:  RRF    77,F
0411:  RRF    78,F
0412:  BTFSC  65.2
0413:  ADDWF  77,F
0414:  RRF    77,F
0415:  RRF    78,F
0416:  BTFSC  65.3
0417:  ADDWF  77,F
0418:  RRF    77,F
0419:  RRF    78,F
041A:  BTFSC  65.4
041B:  ADDWF  77,F
041C:  RRF    77,F
041D:  RRF    78,F
041E:  BTFSC  65.5
041F:  ADDWF  77,F
0420:  RRF    77,F
0421:  RRF    78,F
0422:  BTFSC  65.6
0423:  ADDWF  77,F
0424:  RRF    77,F
0425:  RRF    78,F
0426:  BTFSC  65.7
0427:  ADDWF  77,F
0428:  RRF    77,F
0429:  RRF    78,F
*
0431:  MOVF   71,W
0432:  CLRF   78
0433:  SUBWF  70,W
0434:  BTFSC  03.0
0435:  GOTO   439
0436:  MOVF   70,W
0437:  MOVWF  77
0438:  GOTO   445
0439:  CLRF   77
043A:  MOVLW  08
043B:  MOVWF  72
043C:  RLF    70,F
043D:  RLF    77,F
043E:  MOVF   71,W
043F:  SUBWF  77,W
0440:  BTFSC  03.0
0441:  MOVWF  77
0442:  RLF    78,F
0443:  DECFSZ 72,F
0444:  GOTO   43C
0445:  RETURN
.................... 
.................... #list
.................... 
.................... #device  adc=10
.................... #fuses   hs, nowdt, put, noprotect, nolvp
.................... #use     delay(clock=20MHz) 
*
00F3:  MOVLW  65
00F4:  MOVWF  04
00F5:  BCF    03.7
00F6:  MOVF   00,W
00F7:  BTFSC  03.2
00F8:  GOTO   106
00F9:  MOVLW  06
00FA:  MOVWF  78
00FB:  CLRF   77
00FC:  DECFSZ 77,F
00FD:  GOTO   0FC
00FE:  DECFSZ 78,F
00FF:  GOTO   0FB
0100:  MOVLW  7B
0101:  MOVWF  77
0102:  DECFSZ 77,F
0103:  GOTO   102
0104:  DECFSZ 00,F
0105:  GOTO   0F9
0106:  RETURN
*
02B5:  MOVLW  03
02B6:  SUBWF  62,F
02B7:  BTFSS  03.0
02B8:  GOTO   2C3
02B9:  MOVLW  62
02BA:  MOVWF  04
02BB:  BCF    03.7
02BC:  MOVF   00,W
02BD:  BTFSC  03.2
02BE:  GOTO   2C3
02BF:  GOTO   2C1
02C0:  GOTO   2C1
02C1:  DECFSZ 00,F
02C2:  GOTO   2C0
02C3:  RETURN
.................... #use     i2c(master,slow,sda=pin_c4,scl=pin_c3)
*
00E1:  BCF    14.7
00E2:  BCF    0C.3
00E3:  BSF    03.5
00E4:  MOVF   28,W
00E5:  BCF    03.5
00E6:  MOVWF  13
00E7:  MOVLW  02
00E8:  BTFSC  14.7
00E9:  GOTO   0F1
00EA:  BSF    03.5
00EB:  BTFSC  14.2
00EC:  GOTO   0EB
00ED:  MOVLW  00
00EE:  BTFSC  11.6
00EF:  MOVLW  01
00F0:  BCF    03.5
00F1:  MOVWF  78
00F2:  RETURN
*
0275:  BCF    14.6
0276:  BSF    03.5
0277:  BSF    11.3
0278:  BTFSC  11.3
0279:  GOTO   278
027A:  BTFSC  77.0
027B:  BCF    11.5
027C:  BTFSS  77.0
027D:  BSF    11.5
027E:  BSF    11.4
027F:  BTFSC  11.4
0280:  GOTO   27F
0281:  BCF    03.5
0282:  MOVF   13,W
0283:  MOVWF  78
0284:  RETURN
.................... #use     rs232(baud=9600, xmit=pin_c6,rcv=pin_c7)
.................... 
.................... /* Define name again to accordant user */
.................... #define usi8  unsigned int8
.................... #define usi16 unsigned int16
.................... #define usi32 unsigned int32
.................... #define si8   signed   int8
.................... #define si16  signed   int16
.................... #define si32  signed   int32
.................... 
.................... #define bool int1
.................... 
.................... #define enable  1
.................... #define disable 0
.................... 
.................... #define on  1
.................... #define off 0
.................... 
.................... #ifndef bt0
.................... #define bt0    pin_b0
.................... #endif 
.................... 
.................... #ifndef bt1
.................... #define bt1    pin_b1
.................... #endif
.................... 
.................... #ifndef bt2
.................... #define bt2    pin_b2
.................... #endif
.................... 
.................... #ifndef bt3
.................... #define bt3    pin_b3
.................... #endif
.................... 
.................... #ifndef pinServo
.................... #define pinServo    pin_c1
.................... #endif
.................... 
.................... #ifndef pinCold
.................... #define pinCold     pin_d6
.................... #endif
.................... 
.................... #ifndef pinHot
.................... #define pinHot      pin_d7
.................... #endif
.................... 
.................... usi8 gh_nd = 25;
.................... 
.................... usi8 giay_tam, bdn, tt_ht = 0;
.................... si8 gt_mod = 0, tg_chinh = 0;
.................... 
.................... #define tang 0
.................... #define giam 1
.................... 
.................... bool e_11, e_22, e_33;
.................... 
.................... usi8 eat_hh, eat_pp, eat_ss;
.................... 
.................... bool flag_servo;
.................... usi8 count_servo = 0;
.................... 
.................... #int_timer1
.................... void interrupt_timer1()
.................... {
....................    bdn++;
*
0051:  INCF   2E,F
....................    set_timer1(3036);
0052:  CLRF   0E
0053:  MOVLW  0B
0054:  MOVWF  0F
0055:  MOVLW  DC
0056:  MOVWF  0E
0057:  NOP
....................    if(flag_servo == true){
0058:  BTFSS  32.3
0059:  GOTO   062
....................       if(count_servo < 100) count_servo++; // 10s
005A:  MOVF   36,W
005B:  SUBLW  63
005C:  BTFSS  03.0
005D:  GOTO   060
005E:  INCF   36,F
005F:  GOTO   062
....................       else{
....................          count_servo = 0;
0060:  CLRF   36
....................          flag_servo = false;
0061:  BCF    32.3
....................       }
....................    }
0062:  BCF    0C.0
0063:  BCF    0A.3
0064:  BCF    0A.4
0065:  GOTO   02D
.................... }
.................... 
.................... void set_up_init(){
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);
*
009E:  MOVLW  B5
009F:  MOVWF  10
....................    set_timer1(3036);
00A0:  CLRF   0E
00A1:  MOVLW  0B
00A2:  MOVWF  0F
00A3:  MOVLW  DC
00A4:  MOVWF  0E
00A5:  NOP
....................    
....................    enable_interrupts(global);
00A6:  MOVLW  C0
00A7:  IORWF  0B,F
....................    enable_interrupts(int_timer1);
00A8:  BSF    03.5
00A9:  BSF    0C.0
....................    
....................    setup_timer_2(t2_div_by_16, 249, 1);
00AA:  MOVLW  00
00AB:  MOVWF  78
00AC:  IORLW  06
00AD:  BCF    03.5
00AE:  MOVWF  12
00AF:  MOVLW  F9
00B0:  BSF    03.5
00B1:  MOVWF  12
....................    set_pwm2_duty(0);
00B2:  BCF    03.5
00B3:  CLRF   1B
....................    
....................    tt_ht = 0;
00B4:  CLRF   2F
....................    bdn = 0; gt_mod = 0;
00B5:  CLRF   2E
00B6:  CLRF   30
....................    
....................    e_11 = true;
00B7:  BSF    32.0
....................    e_22 = true;
00B8:  BSF    32.1
....................    e_33 = true;
00B9:  BSF    32.2
....................    
....................    flag_servo = false;
00BA:  BCF    32.3
....................    
....................    gh_nd = 25;
00BB:  MOVLW  19
00BC:  MOVWF  2C
....................    eat_hh = 0x09; eat_pp = 0x34; eat_ss = 0x01;
00BD:  MOVLW  09
00BE:  MOVWF  33
00BF:  MOVLW  34
00C0:  MOVWF  34
00C1:  MOVLW  01
00C2:  MOVWF  35
....................    
....................    set_tris_a(0xff);
00C3:  MOVLW  FF
00C4:  BSF    03.5
00C5:  MOVWF  05
....................    set_tris_b(0xff);
00C6:  MOVWF  06
....................    set_tris_d(0x00); output_d(0x00);
00C7:  MOVLW  00
00C8:  MOVWF  08
00C9:  CLRF   08
00CA:  BCF    03.5
00CB:  CLRF   08
....................    set_tris_e(0x00); output_e(0x00);
00CC:  BSF    03.5
00CD:  BCF    09.0
00CE:  BCF    09.1
00CF:  BCF    09.2
00D0:  BCF    09.0
00D1:  BCF    09.1
00D2:  BCF    09.2
00D3:  BCF    03.5
00D4:  CLRF   09
....................    set_tris_c(0x00); output_c(0x00);
00D5:  BSF    03.5
00D6:  MOVWF  07
00D7:  BCF    03.5
00D8:  MOVWF  2B
00D9:  MOVWF  2B
00DA:  BSF    03.5
00DB:  CLRF   07
00DC:  BCF    03.5
00DD:  CLRF   07
00DE:  BCF    0A.3
00DF:  BCF    0A.4
00E0:  GOTO   50A (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #include <thu_vien_i2c_ds1307.c>
.................... #define ds13_addr_wr 0xd0
.................... #define ds13_addr_rd 0xd1
.................... 
.................... //cap nhat time: giay-phut-gio-thu-ngay-thang-nam-madk_msds
.................... usi8 time_w[9]={0x31,0x15,0x15,0x04,0x25,0x10,0x23,0x90,0x91};
*
04E6:  MOVLW  31
04E7:  BCF    03.5
04E8:  MOVWF  37
04E9:  MOVLW  15
04EA:  MOVWF  38
04EB:  MOVWF  39
04EC:  MOVLW  04
04ED:  MOVWF  3A
04EE:  MOVLW  25
04EF:  MOVWF  3B
04F0:  MOVLW  10
04F1:  MOVWF  3C
04F2:  MOVLW  23
04F3:  MOVWF  3D
04F4:  MOVLW  90
04F5:  MOVWF  3E
04F6:  MOVLW  91
04F7:  MOVWF  3F
.................... usi8 time_r[9]={0x30,0x30,0x10,0x08,0x20,0x02,0x20,0x90,0x91};
04F8:  MOVLW  30
04F9:  MOVWF  40
04FA:  MOVWF  41
04FB:  MOVLW  10
04FC:  MOVWF  42
04FD:  MOVLW  08
04FE:  MOVWF  43
04FF:  MOVLW  20
0500:  MOVWF  44
0501:  MOVLW  02
0502:  MOVWF  45
0503:  MOVLW  20
0504:  MOVWF  46
0505:  MOVLW  90
0506:  MOVWF  47
0507:  MOVLW  91
0508:  MOVWF  48
.................... 
.................... #define dec_giay_eat  ds1307_bcdToDec(eat_ss)
.................... #define dec_phut_eat  ds1307_bcdToDec(eat_pp)
.................... #define dec_gio_eat   ds1307_bcdToDec(eat_hh)
.................... 
.................... #define dec_giay_ds  ds1307_bcdToDec(time_r[0])
.................... #define dec_phut_ds  ds1307_bcdToDec(time_r[1])
.................... #define dec_gio_ds   ds1307_bcdToDec(time_r[2])
.................... #define dec_thu_ds   ds1307_bcdToDec(time_r[3])
.................... #define dec_ngay_ds  ds1307_bcdToDec(time_r[4])
.................... #define dec_thang_ds ds1307_bcdToDec(time_r[5])
.................... #define dec_nam_ds   ds1307_bcdToDec(time_r[6])
.................... 
.................... #define giay_ds  time_r[0]
.................... #define phut_ds  time_r[1]
.................... #define gio_ds   time_r[2]
.................... #define thu_ds   time_r[3]
.................... #define ngay_ds  time_r[4]
.................... #define thang_ds time_r[5]
.................... #define nam_ds   time_r[6]
.................... 
.................... #define ma_qd   time_w[8]
.................... #define ma_ds   time_r[8]
.................... 
.................... usi8 ds1307_decToBcd(usi8 val) {
....................     return ((val / 10 * 16) + (val % 10));
.................... }
.................... 
.................... usi8 ds1307_bcdToDec(usi8 val) {
....................     return ((val / 16 * 10) + (val % 16));
*
03FC:  SWAPF  61,W
03FD:  MOVWF  77
03FE:  MOVLW  0F
03FF:  ANDWF  77,F
0400:  MOVF   77,W
0401:  MOVWF  63
0402:  MOVF   63,W
0403:  MOVWF  64
0404:  MOVLW  0A
0405:  MOVWF  65
*
042A:  MOVF   78,W
042B:  MOVWF  62
042C:  MOVF   61,W
042D:  ANDLW  0F
042E:  ADDWF  78,W
042F:  MOVWF  78
0430:  RETURN
.................... }
.................... 
.................... void ds1307_read_time(usi8 j)     
.................... {   
....................    usi8 i; 
....................    i2c_start();
*
0285:  BSF    03.5
0286:  BSF    11.0
0287:  BTFSC  11.0
0288:  GOTO   287
....................    i2c_write(ds13_addr_wr);
0289:  MOVLW  D0
028A:  MOVWF  28
028B:  BCF    03.5
028C:  CALL   0E1
....................    i2c_write(0x00);                     
028D:  BSF    03.5
028E:  CLRF   28
028F:  BCF    03.5
0290:  CALL   0E1
....................    i2c_start();               
0291:  BSF    03.5
0292:  BSF    11.1
0293:  BTFSC  11.1
0294:  GOTO   293
....................    i2c_write(ds13_addr_rd);                              
0295:  MOVLW  D1
0296:  MOVWF  28
0297:  BCF    03.5
0298:  CALL   0E1
....................    for(i=0;i<j;i++) time_r[i]=i2c_read();
0299:  CLRF   60
029A:  MOVF   5F,W
029B:  SUBWF  60,W
029C:  BTFSC  03.0
029D:  GOTO   2A9
029E:  MOVLW  40
029F:  ADDWF  60,W
02A0:  MOVWF  04
02A1:  BCF    03.7
02A2:  MOVLW  01
02A3:  MOVWF  77
02A4:  CALL   275
02A5:  MOVF   78,W
02A6:  MOVWF  00
02A7:  INCF   60,F
02A8:  GOTO   29A
....................                                  
....................    i = i2c_read(0); //not ack, don't care i  
02A9:  CLRF   77
02AA:  CALL   275
02AB:  MOVF   78,W
02AC:  MOVWF  60
....................    i2c_stop();
02AD:  BSF    03.5
02AE:  BSF    11.2
02AF:  BTFSC  11.2
02B0:  GOTO   2AF
02B1:  BCF    03.5
02B2:  BCF    0A.3
02B3:  BCF    0A.4
02B4:  GOTO   514 (RETURN)
.................... }
.................... 
.................... void ds1307_update_time(int1 sel)                 
.................... {         
....................    usi8 i;
....................    i2c_start();
....................    i2c_write(ds13_addr_wr);
....................    i2c_write(0x00);
....................    for(i=0;i<9;i++)                          
....................    {  
....................       if(sel)  i2c_write(time_w[i]);
....................       else     i2c_write(time_r[i]);
....................    }                                 
....................    i2c_stop();        
.................... }  
.................... 
.................... void ds1307_init()                               
.................... {                                              
....................    ds1307_read_time(9);          
....................    if(ma_qd!=ma_ds)
....................    {
....................       ds1307_update_time(1);
....................    }
.................... }
.................... 
.................... void ds1307_save_ds(usi8 dcdt,dt)                 
.................... {           
....................    i2c_start();
....................    i2c_write(ds13_addr_wr);        
....................    i2c_write(dcdt);    
....................    i2c_write(dt);
....................    i2c_stop();
.................... }
.................... 
.................... #include <thu_vien_i2c_lcd.c>
.................... #define pcf8574_addr_wr 0x4E // 0b01001110
.................... #define pcf8574_addr_rd 0x4F // 0b01001111
.................... 
.................... void i2c_reset()
.................... {
....................    i2c_start();
....................    i2c_stop();
.................... }
.................... 
.................... void i2c_setup_write()
.................... {
....................    i2c_start();
*
0168:  BSF    03.5
0169:  BSF    11.0
016A:  BTFSC  11.0
016B:  GOTO   16A
....................    i2c_write(pcf8574_addr_wr);
016C:  MOVLW  4E
016D:  MOVWF  28
016E:  BCF    03.5
016F:  CALL   0E1
.................... }
.................... 
.................... void i2c_write_1byte(usi8 payload)
.................... {
....................    i2c_start();
*
010F:  BSF    11.1
0110:  BTFSC  11.1
0111:  GOTO   110
....................    i2c_write(pcf8574_addr_wr);
0112:  MOVLW  4E
0113:  MOVWF  28
0114:  BCF    03.5
0115:  CALL   0E1
....................    i2c_write(payload);
0116:  BSF    03.5
0117:  MOVF   27,W
0118:  MOVWF  28
0119:  BCF    03.5
011A:  CALL   0E1
....................    i2c_stop();
011B:  BSF    03.5
011C:  BSF    11.2
011D:  BTFSC  11.2
011E:  GOTO   11D
.................... }
.................... 
.................... #include <thu_vien_lcd_1602.c>
.................... #define lcd_cols 16
.................... #define lcd_rows 2
.................... 
.................... // commands
.................... #define LCD_CLEARDISPLAY 0x01
.................... #define LCD_RETURNHOME 0x02
.................... #define LCD_ENTRYMODESET 0x04
.................... #define LCD_DISPLAYCONTROL 0x08
.................... #define LCD_CURSORSHIFT 0x10
.................... #define LCD_FUNCTIONSET 0x20
.................... #define LCD_SETCGRAMADDR 0x40
.................... #define LCD_SETDDRAMADDR 0x80
.................... 
.................... // flags for display entry mode
.................... #define LCD_ENTRYRIGHT 0x00
.................... #define LCD_ENTRYLEFT 0x02
.................... #define LCD_ENTRYSHIFTINCREMENT 0x01
.................... #define LCD_ENTRYSHIFTDECREMENT 0x00
.................... 
.................... // flags for display on/off control
.................... #define LCD_DISPLAYON 0x04
.................... #define LCD_DISPLAYOFF 0x00
.................... #define LCD_CURSORON 0x02
.................... #define LCD_CURSOROFF 0x00
.................... #define LCD_BLINKON 0x01
.................... #define LCD_BLINKOFF 0x00
.................... 
.................... // flags for display/cursor shift
.................... #define LCD_DISPLAYMOVE 0x08
.................... #define LCD_CURSORMOVE 0x00
.................... #define LCD_MOVERIGHT 0x04
.................... #define LCD_MOVELEFT 0x00
.................... 
.................... // flags for function set
.................... #define LCD_8BITMODE 0x10
.................... #define LCD_4BITMODE 0x00
.................... #define LCD_2LINE 0x08
.................... #define LCD_1LINE 0x00
.................... #define LCD_5x10DOTS 0x04
.................... #define LCD_5x8DOTS 0x00
.................... 
.................... // flags for backlight control
.................... #define LCD_BACKLIGHT 0x08
.................... #define LCD_NOBACKLIGHT 0x00
.................... 
.................... #define En 0B00000100  // Enable bit
.................... #define Rw 0B00000010  // Read/Write bit
.................... #define Rs 0B00000001  // Register select bit
.................... 
.................... void write4bits(usi8 value);
.................... void expanderWrite(usi8 _data);
.................... void pulseEnable(usi8 _data);
.................... void lcd_command(usi8 value);
.................... void lcd_display();
.................... void lcd_clear();
.................... void lcd_home();
.................... void lcd_send(usi8 value, usi8 mode);
.................... void lcd_data(usi8 value);
.................... 
.................... usi8 _displayfunction;
.................... usi8 _displaycontrol;
.................... usi8 _displaymode;
.................... usi8 _numlines;
.................... usi8 _cols;
.................... usi8 _rows;
.................... usi8 _backlightval;
.................... 
.................... void lcd_init(){
....................    _cols = lcd_cols; // 16
*
0163:  MOVLW  10
0164:  MOVWF  4D
....................    _rows = lcd_rows; // 2
0165:  MOVLW  02
0166:  MOVWF  4E
....................    _backlightval = LCD_NOBACKLIGHT; // back light is off
0167:  CLRF   4F
....................    
....................    i2c_setup_write(); // setup i2c
....................    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
*
0170:  CLRF   49
....................    
....................    _displayfunction |= LCD_2LINE;
0171:  BSF    49.3
....................    _numlines = _rows; // 2
0172:  MOVF   4E,W
0173:  MOVWF  4C
....................    
....................    delay_ms(40);
0174:  MOVLW  28
0175:  MOVWF  65
0176:  CALL   0F3
....................    
....................    expanderWrite(_backlightval); // back light is on
0177:  MOVF   4F,W
0178:  BSF    03.5
0179:  MOVWF  25
017A:  BCF    03.5
017B:  CALL   107
....................    delay_ms(100);
017C:  MOVLW  64
017D:  MOVWF  65
017E:  CALL   0F3
....................    
....................    //It is try to set use 4bit in 3 time
....................    write4bits(0x03 << 4);
017F:  MOVLW  30
0180:  BSF    03.5
0181:  MOVWF  22
0182:  BCF    03.5
0183:  CALL   121
....................    delay_ms(5);
0184:  MOVLW  05
0185:  MOVWF  65
0186:  CALL   0F3
....................    
....................    write4bits(0x03 << 4);
0187:  MOVLW  30
0188:  BSF    03.5
0189:  MOVWF  22
018A:  BCF    03.5
018B:  CALL   121
....................    delay_ms(5);
018C:  MOVLW  05
018D:  MOVWF  65
018E:  CALL   0F3
....................    
....................    write4bits(0x03 << 4);
018F:  MOVLW  30
0190:  BSF    03.5
0191:  MOVWF  22
0192:  BCF    03.5
0193:  CALL   121
....................    delay_ms(5);
0194:  MOVLW  05
0195:  MOVWF  65
0196:  CALL   0F3
....................    
....................    write4bits(0x02 << 4); // set using 4bit for lcd16x2
0197:  MOVLW  20
0198:  BSF    03.5
0199:  MOVWF  22
019A:  BCF    03.5
019B:  CALL   121
....................    
....................    lcd_command(LCD_FUNCTIONSET | _displayfunction);
019C:  MOVF   49,W
019D:  IORLW  20
019E:  MOVWF  5F
019F:  MOVWF  7B
01A0:  CALL   157
....................    
....................    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
01A1:  MOVLW  04
01A2:  MOVWF  4A
....................    lcd_display();
....................    
....................    lcd_clear();
*
01A9:  CALL   15C
....................    
....................    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
01AA:  MOVLW  02
01AB:  MOVWF  4B
....................    lcd_command(LCD_ENTRYMODESET | _displaymode);
01AC:  MOVF   4B,W
01AD:  IORLW  04
01AE:  MOVWF  5F
01AF:  MOVWF  7B
01B0:  CALL   157
....................    
....................    lcd_home();
*
01B7:  BCF    0A.3
01B8:  BCF    0A.4
01B9:  GOTO   50B (RETURN)
.................... }
.................... 
.................... void lcd_clear(){
....................    lcd_command(LCD_CLEARDISPLAY);
*
015C:  MOVLW  01
015D:  MOVWF  7B
015E:  CALL   157
....................    delay_ms(20);
015F:  MOVLW  14
0160:  MOVWF  65
0161:  CALL   0F3
0162:  RETURN
.................... }
.................... 
.................... void lcd_home(){
....................    lcd_command(LCD_RETURNHOME);
*
01B1:  MOVLW  02
01B2:  MOVWF  7B
01B3:  CALL   157
....................    delay_ms(20);
01B4:  MOVLW  14
01B5:  MOVWF  65
01B6:  CALL   0F3
.................... }
.................... 
.................... void lcd_setCursor(usi8 col, usi8 row){
....................    int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
*
01BA:  CLRF   72
01BB:  MOVLW  40
01BC:  MOVWF  73
01BD:  MOVLW  14
01BE:  MOVWF  74
01BF:  MOVLW  54
01C0:  MOVWF  75
....................    if ( row > _numlines ) {
01C1:  MOVF   71,W
01C2:  SUBWF  4C,W
01C3:  BTFSC  03.0
01C4:  GOTO   1C8
....................       row = _numlines-1;
01C5:  MOVLW  01
01C6:  SUBWF  4C,W
01C7:  MOVWF  71
....................    }
....................    lcd_command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
01C8:  MOVLW  72
01C9:  ADDWF  71,W
01CA:  MOVWF  04
01CB:  BCF    03.7
01CC:  MOVF   00,W
01CD:  ADDWF  70,W
01CE:  IORLW  80
01CF:  MOVWF  76
01D0:  MOVWF  7B
01D1:  CALL   157
01D2:  RETURN
.................... }
.................... 
.................... void lcd_display() {
....................    _displaycontrol |= LCD_DISPLAYON;
*
01A3:  BSF    4A.2
....................    lcd_command(LCD_DISPLAYCONTROL | _displaycontrol);
01A4:  MOVF   4A,W
01A5:  IORLW  08
01A6:  MOVWF  5F
01A7:  MOVWF  7B
01A8:  CALL   157
.................... }
.................... 
.................... void lcd_command(usi8 value){
....................    lcd_send(value,0);
*
0157:  MOVF   7B,W
0158:  MOVWF  7C
0159:  CLRF   7D
015A:  CALL   13E
015B:  RETURN
.................... }
.................... 
.................... void lcd_data(usi8 value){
....................    lcd_send(value,Rs);
*
01D3:  MOVF   73,W
01D4:  MOVWF  7C
01D5:  MOVLW  01
01D6:  MOVWF  7D
01D7:  CALL   13E
01D8:  RETURN
.................... }
.................... 
.................... void lcd_send(usi8 value, usi8 mode) {
*
013E:  MOVF   7C,W
013F:  ANDLW  F0
0140:  MOVWF  7E
0141:  SWAPF  7C,W
0142:  MOVWF  77
0143:  MOVLW  F0
0144:  ANDWF  77,F
0145:  MOVF   77,W
0146:  ANDLW  F0
0147:  BSF    03.5
0148:  MOVWF  20
....................    usi8 highnib=value&0xf0;
....................    usi8 lownib=(value<<4)&0xf0;
....................    write4bits((highnib)|mode);
0149:  MOVF   7E,W
014A:  IORWF  7D,W
014B:  MOVWF  21
014C:  MOVWF  22
014D:  BCF    03.5
014E:  CALL   121
....................    write4bits((lownib)|mode); 
014F:  BSF    03.5
0150:  MOVF   20,W
0151:  IORWF  7D,W
0152:  MOVWF  21
0153:  MOVWF  22
0154:  BCF    03.5
0155:  CALL   121
0156:  RETURN
.................... }
.................... 
.................... void write4bits(usi8 value) {
....................    expanderWrite(value);
*
0121:  BSF    03.5
0122:  MOVF   22,W
0123:  MOVWF  25
0124:  BCF    03.5
0125:  CALL   107
....................    pulseEnable(value);
0126:  BSF    03.5
0127:  MOVF   22,W
0128:  MOVWF  23
*
013D:  RETURN
.................... }
.................... 
.................... void expanderWrite(usi8 _data){
....................    i2c_write_1byte(_data|_backlightval);
*
0107:  BSF    03.5
0108:  MOVF   25,W
0109:  BCF    03.5
010A:  IORWF  4F,W
010B:  BSF    03.5
010C:  MOVWF  26
010D:  MOVF   26,W
010E:  MOVWF  27
*
011F:  BCF    03.5
0120:  RETURN
.................... }
.................... 
.................... void pulseEnable(usi8 _data){
....................    expanderWrite(_data | En);
*
0129:  MOVF   23,W
012A:  IORLW  04
012B:  MOVWF  24
012C:  MOVWF  25
012D:  BCF    03.5
012E:  CALL   107
....................    delay_us(1);
012F:  GOTO   130
0130:  GOTO   131
0131:  NOP
....................    expanderWrite(_data & ~En);
0132:  BSF    03.5
0133:  MOVF   23,W
0134:  ANDLW  FB
0135:  MOVWF  24
0136:  MOVWF  25
0137:  BCF    03.5
0138:  CALL   107
....................    delay_us(50);
0139:  MOVLW  53
013A:  MOVWF  77
013B:  DECFSZ 77,F
013C:  GOTO   13B
.................... }
.................... 
.................... /* Library modify in User*/
.................... void lcd_log_info(usi16 time_s, bool ena_time){
....................    lcd_setCursor(1,0);
*
023E:  MOVLW  01
023F:  MOVWF  70
0240:  CLRF   71
0241:  CALL   1BA
....................    lcd_data("Do an 1 - HKII");
0242:  MOVLW  66
0243:  BSF    03.6
0244:  MOVWF  0D
0245:  MOVLW  00
0246:  MOVWF  0F
0247:  BCF    03.6
0248:  CALL   1D9
....................    lcd_setCursor(3,1);
0249:  MOVLW  03
024A:  MOVWF  70
024B:  MOVLW  01
024C:  MOVWF  71
024D:  CALL   1BA
....................    lcd_data("SPKT-TPHCM");
024E:  MOVLW  6E
024F:  BSF    03.6
0250:  MOVWF  0D
0251:  MOVLW  00
0252:  MOVWF  0F
0253:  BCF    03.6
0254:  CALL   1D9
....................    if(ena_time == enable){
0255:  DECFSZ 61,W
0256:  GOTO   272
....................       delay_ms(time_s*1000);
0257:  MOVF   60,W
0258:  MOVWF  63
0259:  MOVF   5F,W
025A:  MOVWF  62
025B:  MOVLW  03
025C:  MOVWF  65
025D:  MOVLW  E8
025E:  MOVWF  64
025F:  CALL   229
0260:  MOVF   79,W
0261:  MOVWF  63
0262:  MOVF   78,W
0263:  MOVWF  62
0264:  MOVF   79,W
0265:  MOVWF  64
0266:  INCF   64,F
0267:  DECF   64,F
0268:  BTFSC  03.2
0269:  GOTO   26E
026A:  MOVLW  FF
026B:  MOVWF  65
026C:  CALL   0F3
026D:  GOTO   267
026E:  MOVF   62,W
026F:  MOVWF  65
0270:  CALL   0F3
....................       lcd_clear();
0271:  CALL   15C
....................    }
0272:  BCF    0A.3
0273:  BCF    0A.4
0274:  GOTO   511 (RETURN)
.................... }
.................... void lcd_dis_2num_dot(usi16 dt, int8 x, int8 y, bool is_xvn, bool is_dot){
....................    usi8 ch, dv;
....................    lcd_setCursor(x, y);
....................    ch = dt/10 + 0x30;
....................    dv = dt%10 + 0x30;
....................    if(is_xvn == enable) if(ch == 0x30) ch = " ";
....................    if(is_dot == enable) lcd_data(".");
....................    lcd_data(ch); lcd_data(dv);
.................... }
.................... 
.................... void lcd_dis_3num_dot(usi16 dt, int8 x, int8 y, bool is_xvn, bool is_dot){
....................    usi8 tr, ch, dv;
....................    lcd_setCursor(x, y); //xxx /10 -> xx 
....................    tr = dt/100 + 0x30; 
....................    ch = dt/10%10  + 0x30;
....................    dv = dt%10     + 0x30;
....................    if(is_xvn == enable) if(tr == 0x30){
....................       tr = " ";
....................       if(ch == 0x30) ch = " ";
....................    }
....................    if(is_dot == enable) lcd_data(".");
....................    lcd_data(tr); lcd_data(ch); lcd_data(dv);
.................... }
.................... 
.................... void lcd_dis_xx_yy_zz(usi8 x, usi8 y, usi8 hh, usi8 pp, usi8 ss, bool e3, bool e2, bool e1){
....................    usi8 hh_ch, hh_dv, pp_ch, pp_dv, ss_ch, ss_dv;
....................    hh_ch = e3 == true ? hh/10 + 0x30 : 0x20; hh_dv = e3 == true ? hh%10 + 0x30 : 0x20;
*
0446:  DECFSZ 67,W
0447:  GOTO   450
0448:  MOVF   64,W
0449:  MOVWF  70
044A:  MOVLW  0A
044B:  MOVWF  71
044C:  CALL   431
044D:  MOVLW  30
044E:  ADDWF  78,W
044F:  GOTO   451
0450:  MOVLW  20
0451:  MOVWF  6A
0452:  DECFSZ 67,W
0453:  GOTO   45C
0454:  MOVF   64,W
0455:  MOVWF  70
0456:  MOVLW  0A
0457:  MOVWF  71
0458:  CALL   431
0459:  MOVLW  30
045A:  ADDWF  77,W
045B:  GOTO   45D
045C:  MOVLW  20
045D:  MOVWF  6B
....................    pp_ch = e2 == true ? pp/10 + 0x30 : 0x20; pp_dv = e2 == true ? pp%10 + 0x30 : 0x20;
045E:  DECFSZ 68,W
045F:  GOTO   468
0460:  MOVF   65,W
0461:  MOVWF  70
0462:  MOVLW  0A
0463:  MOVWF  71
0464:  CALL   431
0465:  MOVLW  30
0466:  ADDWF  78,W
0467:  GOTO   469
0468:  MOVLW  20
0469:  MOVWF  6C
046A:  DECFSZ 68,W
046B:  GOTO   474
046C:  MOVF   65,W
046D:  MOVWF  70
046E:  MOVLW  0A
046F:  MOVWF  71
0470:  CALL   431
0471:  MOVLW  30
0472:  ADDWF  77,W
0473:  GOTO   475
0474:  MOVLW  20
0475:  MOVWF  6D
....................    ss_ch = e1 == true ? ss/10 + 0x30 : 0x20; ss_dv = e1 == true ? ss%10 + 0x30 : 0x20;
0476:  DECFSZ 69,W
0477:  GOTO   480
0478:  MOVF   66,W
0479:  MOVWF  70
047A:  MOVLW  0A
047B:  MOVWF  71
047C:  CALL   431
047D:  MOVLW  30
047E:  ADDWF  78,W
047F:  GOTO   481
0480:  MOVLW  20
0481:  MOVWF  6E
0482:  DECFSZ 69,W
0483:  GOTO   48C
0484:  MOVF   66,W
0485:  MOVWF  70
0486:  MOVLW  0A
0487:  MOVWF  71
0488:  CALL   431
0489:  MOVLW  30
048A:  ADDWF  77,W
048B:  GOTO   48D
048C:  MOVLW  20
048D:  MOVWF  6F
....................    lcd_setCursor(x, y);
048E:  MOVF   62,W
048F:  MOVWF  70
0490:  MOVF   63,W
0491:  MOVWF  71
0492:  CALL   1BA
....................    lcd_data(hh_ch); lcd_data(hh_dv); lcd_data("-");
0493:  MOVF   6A,W
0494:  MOVWF  73
0495:  CALL   1D3
0496:  MOVF   6B,W
0497:  MOVWF  73
0498:  CALL   1D3
0499:  MOVLW  76
049A:  BSF    03.6
049B:  MOVWF  0D
049C:  MOVLW  00
049D:  MOVWF  0F
049E:  BCF    03.6
049F:  CALL   1D9
....................    lcd_data(pp_ch); lcd_data(pp_dv); lcd_data("-");
04A0:  MOVF   6C,W
04A1:  MOVWF  73
04A2:  CALL   1D3
04A3:  MOVF   6D,W
04A4:  MOVWF  73
04A5:  CALL   1D3
04A6:  MOVLW  77
04A7:  BSF    03.6
04A8:  MOVWF  0D
04A9:  MOVLW  00
04AA:  MOVWF  0F
04AB:  BCF    03.6
04AC:  CALL   1D9
....................    lcd_data(ss_ch); lcd_data(ss_dv);
04AD:  MOVF   6E,W
04AE:  MOVWF  73
04AF:  CALL   1D3
04B0:  MOVF   6F,W
04B1:  MOVWF  73
04B2:  CALL   1D3
04B3:  BCF    0A.3
04B4:  BCF    0A.4
04B5:  GOTO   532 (RETURN)
.................... }
.................... 
.................... void log_code_ds1307(){
....................    lcd_setCursor(0, 0);
....................    lcd_data(ma_qd/10 + 0x30); lcd_data(ma_qd%10 + 0x30); lcd_data(" - ");
....................    lcd_data(ma_ds/10 + 0x30); lcd_data(ma_ds%10 + 0x30);
.................... }
.................... 
.................... #include <thu_vien_btn.c>
.................... #define level_menu 6
.................... 
.................... usi8 dl_count;
.................... 
.................... usi8 dem_menu_tong_curr = 0;
.................... usi8 dem_menu_tong_prev = 1;
.................... 
.................... bool nhan_btn_giu(usi16 dl, usi8 pin){
....................    if(!input(pin)){
....................       dl_count += 1; delay_us(25);
....................       if(dl_count >= dl){
....................          dl_count = 0;
....................          return true;
....................       }
....................       return false;
....................    }
....................    return false;
.................... }
.................... 
.................... bool nhan_btn_nha(bool giu_nha, usi8 pin){
....................    if(!input(pin)){
....................       delay_ms(20);
....................       if(!input(pin)){
....................          if(giu_nha) while(!input(pin));
....................          //else delay_ms(5);
....................          return true;   
....................       }
....................       return false;
....................    }
....................    return false;
.................... }
.................... 
.................... void test_btn(){
....................    if(!input(bt0)){
....................       delay_ms(20);
....................       if(!input(bt0)){
....................          lcd_setCursor(0,0);
....................          lcd_data("nut 0");
....................          while(!input(bt0));
....................       }
....................    }
....................    
....................    if(!input(bt1)){
....................       delay_ms(20);
....................       if(!input(bt1)){
....................          lcd_setCursor(0,0);
....................          lcd_data("nut 1");
....................          while(!input(bt1));
....................       }
....................    }
....................    
....................    if(!input(bt2)){
....................       delay_ms(20);
....................       if(!input(bt2)){
....................          lcd_setCursor(0,0);
....................          lcd_data("nut 2");
....................          while(!input(bt2));
....................       }
....................    }
....................    
....................    if(!input(bt3)){
....................       delay_ms(20);
....................       if(!input(bt3)){
....................          lcd_setCursor(0,0);
....................          lcd_data("nut 3");
....................          while(!input(bt3));
....................       }
....................    }
.................... }
.................... 
.................... #include <thu_vien_control_clock.c>
.................... 
.................... usi8 tang_or_giam_bcd(unsigned int8 x, int1 sel){
....................    usi8 y, dv, ch, v;
....................    ch = (x>>4);
....................    dv = x& 0x0f;
....................    y = ch*10 + dv;
....................    if(sel == 0) y++;
....................    else         y--;
....................    ch = y/10; dv = y%10;
....................    v = (ch<<4)|dv;
....................    return v;
.................... }
.................... 
.................... void tat_bat_2led_chinh(){
....................    if(gt_mod == 1 || gt_mod == 4) { e_11 = ~e_11; e_22 = true; e_33 = true;}
....................    else if(gt_mod == 2 || gt_mod == 5) { e_11 = true; e_22 = ~e_22; e_33 = true;}
....................    else if(gt_mod == 3 || gt_mod == 6) { e_11 = true; e_22 = true; e_33 = ~e_33;}
....................    else { e_11 = true; e_22 = true; e_33 = true;}
.................... }
.................... 
.................... void giai_ma_gpg_lcd(){
....................    lcd_dis_xx_yy_zz(4,1,dec_gio_ds,dec_phut_ds,dec_giay_ds,e_33, e_22, e_11);
.................... }
.................... 
.................... void giai_ma_ntn_lcd(){
....................    lcd_dis_xx_yy_zz(4,1,dec_ngay_ds,dec_thang_ds,dec_nam_ds,e_33, e_22, e_11);
.................... }
.................... 
.................... void giai_ma_thu_lcd(){
....................    lcd_dis_xx_yy_zz(4,1,0x00,dec_thu_ds,0x00,0, e_22, 0);
.................... }
.................... 
.................... void giai_ma_gpg_ntn_thu_lcd(){
....................    if(gt_mod == 0){
....................       if(tt_ht == 0 || tt_ht == 1) giai_ma_gpg_lcd();
....................       if(tt_ht == 2) giai_ma_ntn_lcd();
....................       if(tt_ht == 3) giai_ma_thu_lcd();
....................    }
....................    else{
....................       if(gt_mod < 4)       giai_ma_gpg_lcd();
....................       else if(gt_mod < 7)  giai_ma_ntn_lcd();
....................       else if(gt_mod == 7) giai_ma_thu_lcd();
....................    }
.................... }
.................... 
.................... void xu_ly_choptat(){
....................    if(gt_mod != 0){
....................       tat_bat_2led_chinh();
....................    }
....................    else { e_11 = true; e_22 = true; e_33 = true;}
....................    
.................... }
.................... 
.................... void phim_chon_hthi_mode(){
....................    if(nhan_btn_giu(1, bt3)){
....................       tt_ht = 1;
....................       if(tt_ht == 1){
....................          gt_mod++;
....................          if(gt_mod < 4) tt_ht = 1;
....................          else if(gt_mod < 7) tt_ht = 2;
....................          else if(gt_mod == 7) tt_ht = 3;
....................          else{
....................             gt_mod = 0;
....................             tt_ht = 0;
....................             dem_menu_tong_curr = 0;
....................          }
....................       }
....................       tg_chinh = 0;
....................       giai_ma_gpg_ntn_thu_lcd();
....................    }
.................... }
.................... void tang_giay(){
....................    if(giay_ds == 0x59) giay_ds = 0;
....................    else giay_ds = tang_or_giam_bcd(giay_ds, tang);
....................    ds1307_save_ds(0,giay_ds);
.................... }
.................... void tang_phut(){
....................    if(phut_ds == 0x59) phut_ds = 0;
....................    else phut_ds = tang_or_giam_bcd(phut_ds, tang);
....................    ds1307_save_ds(1,phut_ds);
.................... }
.................... void tang_gio(){
....................    if(gio_ds == 0x23) gio_ds = 0;
....................    else gio_ds = tang_or_giam_bcd(gio_ds, tang);
....................    ds1307_save_ds(2,gio_ds);
.................... }
.................... void chinh_tang_gpg(){
....................    switch(gt_mod){
....................       case 1:
....................          tang_giay();
....................          break;
....................       case 2:
....................          tang_phut();
....................          break;
....................       case 3:
....................          tang_gio();
....................          break;
....................       default: break;
....................    }
.................... }
.................... void tang_nam(){
....................    if(nam_ds == 0x99) nam_ds = 0;
....................    else nam_ds = tang_or_giam_bcd(nam_ds, tang);
....................    ds1307_save_ds(6,nam_ds);
.................... }
.................... void tang_thang(){
....................    if(thang_ds == 0x12) thang_ds = 1;
....................    else thang_ds = tang_or_giam_bcd(thang_ds, tang);
....................    ds1307_save_ds(5,thang_ds);
.................... }
.................... void tang_ngay(){
....................    if(ngay_ds == 0x31) ngay_ds = 1;
....................    else ngay_ds = tang_or_giam_bcd(ngay_ds, tang);
....................    ds1307_save_ds(4,ngay_ds);
.................... }
.................... void chinh_tang_ntn(){
....................    switch(gt_mod){
....................       case 4:
....................          tang_nam();
....................          break;
....................       case 5:
....................          tang_thang();
....................          break;
....................       case 6:
....................          tang_ngay();
....................          break;
....................       default: break;
....................    }
.................... }
.................... void chinh_tang_thu(){
....................    if(thu_ds == 8) thu_ds = 2;
....................    else thu_ds++;
....................    ds1307_save_ds(3,thu_ds);
.................... }
.................... 
.................... void phim_up(){
....................    if(nhan_btn_giu(1, bt1)){
....................       tg_chinh = 0;
....................       if(gt_mod<4) chinh_tang_gpg();
....................       else if(gt_mod<7) chinh_tang_ntn();
....................       else if(gt_mod==7) chinh_tang_thu();
....................       e_11 = true; e_22 = true; e_33 = true;
....................       giai_ma_gpg_ntn_thu_lcd();
....................    }
.................... }
.................... void giam_giay(){
....................    if(giay_ds == 0) giay_ds = 0x59;
....................    else giay_ds = tang_or_giam_bcd(giay_ds,giam);
....................    ds1307_save_ds(0,giay_ds);
.................... }
.................... void giam_phut(){
....................    if(phut_ds == 0) phut_ds = 0x59;
....................    else phut_ds = tang_or_giam_bcd(phut_ds,giam);
....................    ds1307_save_ds(1,phut_ds);
.................... }
.................... void giam_gio(){
....................    if(gio_ds == 0) gio_ds = 0x23;
....................    else gio_ds = tang_or_giam_bcd(gio_ds,giam);
....................    ds1307_save_ds(2,gio_ds);
.................... }
.................... void chinh_giam_gpg(){
....................    switch(gt_mod){
....................       case 1:
....................          giam_giay();
....................          break;
....................       case 2:
....................          giam_phut();
....................          break;
....................       case 3:
....................          giam_gio();
....................          break;
....................       default: break;
....................    }
.................... }
.................... void giam_nam(){
....................    if(nam_ds == 0x0) nam_ds = 0x99;
....................    else nam_ds = tang_or_giam_bcd(nam_ds, giam);
....................    ds1307_save_ds(6,nam_ds);
.................... }
.................... void giam_thang(){
....................    if(thang_ds == 0x1) thang_ds = 12;
....................    else thang_ds = tang_or_giam_bcd(thang_ds, giam);
....................    ds1307_save_ds(5,thang_ds);
.................... }
.................... void giam_ngay(){
....................    if(ngay_ds == 0x1) ngay_ds = 21;
....................    else ngay_ds = tang_or_giam_bcd(ngay_ds, giam);
....................    ds1307_save_ds(4,ngay_ds);
.................... }
.................... void chinh_giam_ntn(){
....................    switch(gt_mod){
....................       case 1:
....................          giam_nam();
....................          break;
....................       case 2:
....................          giam_thang();
....................          break;
....................       case 3:
....................          giam_ngay();
....................          break;
....................       default: break;
....................    }
.................... }
.................... void chinh_giam_thu(){
....................    if(thu_ds == 2) thu_ds = 8;
....................    else thu_ds--;
....................    ds1307_save_ds(3,thu_ds);
.................... }
.................... void phim_dw(){
....................    if(nhan_btn_giu(1, bt2)){
....................       tg_chinh = 0;
....................       if(gt_mod<4) chinh_giam_gpg();
....................       else if(gt_mod<7) chinh_giam_ntn();
....................       else if(gt_mod==7) chinh_giam_thu();
....................       e_11 = true; e_22 = true; e_33 = true;
....................       giai_ma_gpg_ntn_thu_lcd();
....................    }
.................... }
.................... void log_mode(){
....................    lcd_setCursor(0, 1);
....................    if(tt_ht == 0) lcd_data(" N ");
....................    else if(tt_ht == 1) lcd_data("GPG");
....................    else if(tt_ht == 2) lcd_data("NTN");
....................    else if(tt_ht == 3) lcd_data(" T ");
....................    lcd_setCursor(13, 1);
....................    lcd_data(gt_mod + 0x30);
....................    if(gt_mod != 0){
....................       lcd_data(tg_chinh/10 + 0x30); lcd_data(tg_chinh%10 + 0x30);
....................    }
....................    else
....................       lcd_data("__");
.................... }
.................... 
.................... #include <thu_vien_control_alarm.c>
.................... void giai_ma_gpg_alarm_lcd(){
....................    lcd_dis_xx_yy_zz(4,1,dec_gio_eat,dec_phut_eat,dec_giay_eat,e_33, e_22, e_11);
.................... }
.................... void phim_chon_mode_alarm(){
....................    if(nhan_btn_giu(1, bt3)){
....................       if(gt_mod < 3) gt_mod++;
....................       else{
....................          gt_mod = 0;
....................          dem_menu_tong_curr = 0;
....................       }
....................       tg_chinh = 0;
....................       giai_ma_gpg_alarm_lcd();
....................    }
.................... }
.................... void tang_giay_eat(){
....................    if(eat_ss == 0x59) eat_ss = 0;
....................    else eat_ss = tang_or_giam_bcd(eat_ss, tang);
.................... }
.................... void tang_phut_eat(){
....................    if(eat_pp == 0x59) eat_pp = 0;
....................    else eat_pp = tang_or_giam_bcd(eat_pp, tang);
.................... }
.................... void tang_gio_eat(){
....................    if(eat_hh == 0x23) eat_hh = 0;
....................    else eat_hh = tang_or_giam_bcd(eat_hh, tang);
.................... }
.................... void chinh_tang_gpg_eat(){
....................    switch(gt_mod){
....................       case 1:
....................          tang_giay_eat();
....................          break;
....................       case 2:
....................          tang_phut_eat();
....................          break;
....................       case 3:
....................          tang_gio_eat();
....................          break;
....................       default: break;
....................    }
.................... }
.................... 
.................... void phim_up_eat(){
....................    if(nhan_btn_giu(1, bt1)){
....................       tg_chinh = 0;
....................       chinh_tang_gpg_eat();
....................       e_11 = true; e_22 = true; e_33 = true;
....................       giai_ma_gpg_alarm_lcd();
....................    }
.................... }
.................... void giam_giay_eat(){
....................    if(eat_ss == 0) eat_ss = 0x59;
....................    else eat_ss = tang_or_giam_bcd(eat_ss,giam);
.................... }
.................... void giam_phut_eat(){
....................    if(eat_pp == 0) eat_pp = 0x59;
....................    else eat_pp = tang_or_giam_bcd(eat_pp,giam);
.................... }
.................... void giam_gio_eat(){
....................    if(eat_hh == 0) eat_hh = 0x23;
....................    else eat_hh = tang_or_giam_bcd(eat_hh,giam);
.................... }
.................... void chinh_giam_gpg_eat(){
....................    switch(gt_mod){
....................       case 1:
....................          giam_giay_eat();
....................          break;
....................       case 2:
....................          giam_phut_eat();
....................          break;
....................       case 3:
....................          giam_gio_eat();
....................          break;
....................       default: break;
....................    }
.................... }
.................... void phim_dw_eat(){
....................    if(nhan_btn_giu(1, bt2)){
....................       tg_chinh = 0;
....................       chinh_giam_gpg_eat();
....................       e_11 = true; e_22 = true; e_33 = true;
....................       giai_ma_gpg_alarm_lcd();
....................    }
.................... }
.................... void log_mode_alarm(){
....................    lcd_setCursor(13, 1);
....................    lcd_data(gt_mod + 0x30);
....................    if(gt_mod != 0){
....................       lcd_data(tg_chinh/10 + 0x30); lcd_data(tg_chinh%10 + 0x30);
....................    }
....................    else
....................       lcd_data("__");
.................... }
.................... 
.................... #include <thu_vien_ds18b20.c>
.................... #define touch_pin pin_a0
.................... #define DS18B20_PIN touch_pin
.................... 
.................... #include <touch.c>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                        Dallas Touch Driver                        ////
.................... ////                                                                   ////
.................... ////                                                                   ////
.................... ////  data = touch_read_bit()     Reads one bit from a touch device    ////
.................... ////                                                                   ////
.................... ////  data = touch_read_BYTE()    Reads one byte from a touch device.  ////
.................... ////                                                                   ////
.................... ////  ok = touch_write_bit(data)  Writes one bit to a touch device     ////
.................... ////                              and returns true if all went ok.     ////
.................... ////                              A false indicates a collision with   ////
.................... ////                              another device.                      ////
.................... ////                                                                   ////
.................... ////  ok = touch_write_byte(data) Writes one byte to a touch device    ////
.................... ////                              and returns true if all went ok.     ////
.................... ////                              A false indicates a collision with   ////
.................... ////                              another device.                      ////
.................... ////                                                                   ////
.................... ////  present = touch_present()   Issues a reset and returns true      ////
.................... ////                              if the touch device is there.        ////
.................... ////                                                                   ////
.................... ////  reset_pulse()               Issues a reset and waits for a       ////
.................... ////                              present pulse.                       ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef  TOUCH_C
.................... #define  TOUCH_C
.................... 
.................... #ifndef TOUCH_PIN
....................    #define TOUCH_PIN  PIN_B0
.................... #endif
.................... 
.................... #define TOUCH_PIN_LOW()    output_drive(TOUCH_PIN); output_low(TOUCH_PIN)
.................... #define TOUCH_PIN_HIGH()    output_drive(TOUCH_PIN); output_high(TOUCH_PIN)
.................... #define TOUCH_PIN_FLOAT()  output_float(TOUCH_PIN)
.................... #define TOUCH_PIN_READ()      input_state(TOUCH_PIN)
.................... 
.................... /////////////////////////////
.................... ////                     ////
.................... //// Function Prototypes ////
.................... ////                     ////
.................... /////////////////////////////
.................... 
.................... /*
.................... int1 touch_read_bit()
.................... This will read back a bit from the DS1993
.................... PARAMS: none
.................... RETURNS: A bit from the DS1993
.................... */
.................... int1 touch_read_bit();
.................... 
.................... /*
.................... BYTE touch_read_byte()
.................... This will read back a byte from the DS1993
.................... PARAMS: none
.................... RETURNS: A byte from the DS1993
.................... */
.................... BYTE touch_read_byte();
.................... 
.................... /*
.................... BOOLEAN touch_write_bit(int1 data)
.................... This will write a bit to the DS1993
.................... PARAMS: The bit to write
.................... RETURNS: True if completed successfully, false if otherwise
.................... */
.................... BOOLEAN touch_write_bit(int1 data);
.................... 
.................... /*
.................... BOOLEAN touch_write_byte(BYTE data)
.................... This will write a byte to the DS1993
.................... PARAMS: The byte to write
.................... RETURNS: True if completed successfully, false if otherwise
.................... */
.................... BOOLEAN touch_write_byte(BYTE data);
.................... 
.................... /*
.................... BOOLEAN touch_present()
.................... This will evaluate whether or not there is a touch present on the DS1993
.................... PARAMS: none
.................... RETURNS: True if a touch is present, false if otherwise
.................... */
.................... BOOLEAN touch_present();
.................... 
.................... /*
.................... void reset_pulse()
.................... This will send the DS1993 a reset pulse
.................... PARAMS: none
.................... RETURNS: none
.................... */
.................... void reset_pulse();
.................... 
.................... //////////////////////////////////
.................... ////                          ////
.................... //// Function Implementations ////
.................... ////                          ////
.................... //////////////////////////////////
.................... 
.................... /*
.................... int1 touch_read_bit()
.................... This will read back a bit from the DS1993
.................... PARAMS: none
.................... RETURNS: A bit from the DS1993
.................... */
.................... int1 touch_read_bit()
.................... {
....................    int1 data;
.................... 
....................    TOUCH_PIN_LOW();
....................    delay_us(14);
....................    TOUCH_PIN_FLOAT();
....................    delay_us(5);
....................    data = TOUCH_PIN_READ();
....................    delay_us(100);
.................... 
....................    return data;
.................... }
.................... 
.................... /*
.................... BYTE touch_read_byte()
.................... This will read back a byte from the DS1993
.................... PARAMS: none
.................... RETURNS: A byte from the DS1993
.................... */
.................... BYTE touch_read_byte()
.................... {
....................    BYTE i,data;
.................... 
....................    for(i=1; i <= 8; ++i)
....................       shift_right(&data, 1, touch_read_bit());
.................... 
....................    return data;
.................... }
.................... 
.................... /*
.................... BOOLEAN touch_write_bit(int1 data)
.................... This will write a bit to the DS1993
.................... PARAMS: The bit to write
.................... RETURNS: True if completed successfully, false if otherwise
.................... */
.................... BOOLEAN touch_write_bit(int1 data)
.................... {
....................    TOUCH_PIN_LOW();
....................    delay_us(10);
....................    if(data)
....................    {
....................       TOUCH_PIN_HIGH();
....................       delay_us(10);
....................       if(!TOUCH_PIN_READ())
....................          return FALSE;
....................    }
....................    else
....................    {
....................       TOUCH_PIN_LOW();
....................       delay_us(10);
....................       if(TOUCH_PIN_READ())
....................          return FALSE;
....................    }
....................    delay_us(50);
....................    TOUCH_PIN_HIGH();
....................    delay_us(50);
....................    return TRUE;
.................... }
.................... 
.................... /*
.................... BOOLEAN touch_write_byte(BYTE data)
.................... This will write a byte to the DS1993
.................... PARAMS: The byte to write
.................... RETURNS: True if completed successfully, false if otherwise
.................... */
.................... BOOLEAN touch_write_byte(BYTE data)
.................... {
....................    BYTE i;
.................... 
....................    for(i=1; i<=8; ++i)
....................       if(!touch_write_bit(shift_right(&data, 1, 0)))
....................          return FALSE;
.................... 
....................    return TRUE;
.................... }
.................... 
.................... /*
.................... BOOLEAN touch_present()
.................... This will evaluate whether or not there is a touch present on the DS1993
.................... PARAMS: none
.................... RETURNS: True if a touch is present, false if otherwise
.................... */
.................... BOOLEAN touch_present()
.................... {
....................    BOOLEAN present;
....................    TOUCH_PIN_LOW();
....................    delay_us(500);
....................    TOUCH_PIN_FLOAT();
....................    delay_us(5);
.................... 
....................    if(!TOUCH_PIN_READ())
....................       return FALSE;
.................... 
....................    delay_us(65);
....................    present = !TOUCH_PIN_READ();
....................    delay_us(240);
....................    return present;
.................... }
.................... 
.................... /*
.................... void reset_pulse()
.................... This will send the DS1993 a reset pulse
.................... PARAMS: none
.................... RETURNS: none
.................... */
.................... void reset_pulse()
.................... {
....................    TOUCH_PIN_LOW();
....................    delay_us(500);
....................    TOUCH_PIN_FLOAT();
....................    delay_us(5);
....................    while(!touch_present());
.................... }
.................... 
.................... 
.................... #endif
.................... 
.................... #define search_rom       0xf0
.................... #define read_rom         0x33
.................... #define match_rom        0x55
.................... #define skip_rom         0xcc
.................... #define alarm_search     0xec
.................... #define read_scratchpad  0xbe
.................... #define write_scratchpad 0x4e
.................... #define copy_scratchpad  0x48
.................... #define convert_t        0x44
.................... 
.................... si16 nhiet_do;
.................... usi8 dt_ng, dt_ngt;
.................... usi16 dt_tp, dt_tpt;
.................... usi16 dt_tp_real;
.................... 
.................... /*
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
....................          CACH 1 SU DUNG THU VIEN TOUCH.C
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... */
.................... void ds18b20_no_ds18b(usi8 x, y)
.................... {
....................    lcd_setCursor(x, y);
....................    lcd_data("NO DS18B20");
.................... }
.................... 
.................... void ds18b20_khoi_tao()
.................... {
....................    touch_present();
....................    touch_write_byte(skip_rom);
....................    touch_write_byte(write_scratchpad);
....................    touch_write_byte(0x0);
....................    touch_write_byte(0x0);
....................    touch_write_byte(0x7f); // 12 bit
.................... 
....................    touch_present();
....................    touch_write_byte(skip_rom);
....................    touch_write_byte(convert_t);
.................... }
.................... 
.................... usi16 ds18b20_read_temp_c1()
.................... {
....................    usi8 bl, bh;
....................    usi16 w;
....................    touch_write_byte(skip_rom);
....................    touch_write_byte(read_scratchpad);
....................    bl = touch_read_byte();
....................    bh = touch_read_byte();
....................    w = make16(bh, bl);
....................    touch_present();
....................    touch_write_byte(skip_rom);
....................    touch_write_byte(convert_t);
....................    return w;
.................... }
.................... 
.................... void ds18b20_doc_rom(usi8 time_s)
.................... {
....................    usi8 rom_code[8];
....................    usi8 xh, xl;
....................    si8 i;
....................    if (touch_present())
....................    {
....................       touch_write_byte(read_rom);
....................       for (i = 0; i < 8; i++)
....................          rom_code[i] = touch_read_byte();
....................       lcd_setCursor(0, 0);
....................       lcd_data("CO DS18B20");
....................       lcd_setCursor(0, 1);
....................       for (i = 7; i > -1; i--)
....................       {
....................          xh = rom_code[i] / 16;
....................          if (xh > 9)
....................             xh = xh + 0x37;
....................          else
....................             xh = xh + 0x30;
....................          xl = rom_code[i] % 16;
....................          if (xl > 9)
....................             xl = xl + 0x37;
....................          else
....................             xl = xl + 0x30;
....................          lcd_data(xh);
....................          lcd_data(xl);
....................       }
....................    }
....................    else
....................       ds18b20_no_ds18b(0, 0);
....................    delay_ms(time_s * 1000);
....................    lcd_clear();
.................... }
.................... /*
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
....................          CACH 2 KHONG SU DUNG THU VIEN TOUCH.C
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... */
.................... bool ds18b20_start(){
....................    output_low(DS18B20_PIN);
*
02C4:  BSF    03.5
02C5:  BCF    05.0
02C6:  BCF    03.5
02C7:  BCF    05.0
....................    output_drive(DS18B20_PIN);
02C8:  BSF    03.5
02C9:  BCF    05.0
....................    delay_us(500);
02CA:  MOVLW  02
02CB:  BCF    03.5
02CC:  MOVWF  61
02CD:  MOVLW  F9
02CE:  MOVWF  62
02CF:  CALL   2B5
02D0:  DECFSZ 61,F
02D1:  GOTO   2CD
....................    output_float(DS18B20_PIN);
02D2:  BSF    03.5
02D3:  BSF    05.0
....................    delay_us(100);
02D4:  MOVLW  A6
02D5:  MOVWF  77
02D6:  DECFSZ 77,F
02D7:  GOTO   2D6
02D8:  NOP
....................    if(!input(DS18B20_PIN)){
02D9:  BSF    05.0
02DA:  BCF    03.5
02DB:  BTFSC  05.0
02DC:  GOTO   2E7
....................       delay_us(400);
02DD:  MOVLW  02
02DE:  MOVWF  61
02DF:  MOVLW  C7
02E0:  MOVWF  62
02E1:  CALL   2B5
02E2:  DECFSZ 61,F
02E3:  GOTO   2DF
....................       return true;
02E4:  MOVLW  01
02E5:  MOVWF  78
02E6:  GOTO   2E9
....................    }
....................    return false;
02E7:  MOVLW  00
02E8:  MOVWF  78
02E9:  RETURN
.................... }
.................... 
.................... void ds18b20_write_bit(bool value){
....................    output_low(DS18B20_PIN);
*
02FF:  BSF    03.5
0300:  BCF    05.0
0301:  BCF    03.5
0302:  BCF    05.0
....................    output_drive(DS18B20_PIN);
0303:  BSF    03.5
0304:  BCF    05.0
....................    delay_us(2);
0305:  MOVLW  03
0306:  MOVWF  77
0307:  DECFSZ 77,F
0308:  GOTO   307
....................    output_bit(DS18B20_PIN, value);
0309:  BCF    03.5
030A:  MOVF   64,F
030B:  BTFSS  03.2
030C:  GOTO   30F
030D:  BCF    05.0
030E:  GOTO   310
030F:  BSF    05.0
0310:  BSF    03.5
0311:  BCF    05.0
....................    delay_us(80);
0312:  MOVLW  85
0313:  MOVWF  77
0314:  DECFSZ 77,F
0315:  GOTO   314
....................    output_float(DS18B20_PIN);
0316:  BSF    05.0
....................    delay_us(2);
0317:  MOVLW  03
0318:  MOVWF  77
0319:  DECFSZ 77,F
031A:  GOTO   319
.................... }
.................... 
.................... void ds18b20_write_byte(int8 value){
....................    for(int8 i = 0; i < 8; i++)
*
02EA:  CLRF   62
02EB:  MOVF   62,W
02EC:  SUBLW  07
02ED:  BTFSS  03.0
02EE:  GOTO   31E
....................       ds18b20_write_bit(bit_test(value,i));
02EF:  MOVF   61,W
02F0:  MOVWF  77
02F1:  MOVF   62,W
02F2:  MOVWF  78
02F3:  BTFSC  03.2
02F4:  GOTO   2F9
02F5:  BCF    03.0
02F6:  RRF    77,F
02F7:  DECFSZ 78,F
02F8:  GOTO   2F5
02F9:  MOVLW  00
02FA:  BTFSC  77.0
02FB:  MOVLW  01
02FC:  MOVWF  63
02FD:  MOVF   63,W
02FE:  MOVWF  64
*
031B:  BCF    03.5
031C:  INCF   62,F
031D:  GOTO   2EB
031E:  RETURN
.................... }
.................... 
.................... bool ds18b20_read_bit(){
....................    bool value;
....................    output_low(DS18B20_PIN);
*
0325:  BSF    03.5
0326:  BCF    05.0
0327:  BCF    03.5
0328:  BCF    05.0
....................    output_drive(DS18B20_PIN);
0329:  BSF    03.5
032A:  BCF    05.0
....................    delay_us(2);
032B:  MOVLW  03
032C:  MOVWF  77
032D:  DECFSZ 77,F
032E:  GOTO   32D
....................    output_float(DS18B20_PIN);
032F:  BSF    05.0
....................    delay_us(5);
0330:  MOVLW  08
0331:  MOVWF  77
0332:  DECFSZ 77,F
0333:  GOTO   332
....................    value = input(DS18B20_PIN);
0334:  BSF    05.0
0335:  BCF    03.5
0336:  BCF    67.0
0337:  BTFSC  05.0
0338:  BSF    67.0
....................    delay_us(100);
0339:  MOVLW  A6
033A:  MOVWF  77
033B:  DECFSZ 77,F
033C:  GOTO   33B
033D:  NOP
....................    return value;
033E:  MOVLW  00
033F:  BTFSC  67.0
0340:  MOVLW  01
0341:  MOVWF  78
.................... }
.................... 
.................... int8 ds18b20_read_byte(){
*
031F:  CLRF   65
....................    int8 value = 0;
....................    for(int8 i = 0; i < 8; i++)
0320:  CLRF   66
0321:  MOVF   66,W
0322:  SUBLW  07
0323:  BTFSS  03.0
0324:  GOTO   34B
....................       shift_right(&value,1,ds18b20_read_bit());
*
0342:  MOVF   78,F
0343:  BTFSS  03.2
0344:  GOTO   347
0345:  BCF    03.0
0346:  GOTO   348
0347:  BSF    03.0
0348:  RRF    65,F
0349:  INCF   66,F
034A:  GOTO   321
....................    return value;
034B:  MOVF   65,W
034C:  MOVWF  78
034D:  RETURN
.................... }
.................... 
.................... bool ds18b20_read_temp_c2(int16 *raw_temp_value){
....................    if(!ds18b20_start())
*
0351:  CALL   2C4
0352:  MOVF   78,F
0353:  BTFSS  03.2
0354:  GOTO   358
....................       return false;
0355:  MOVLW  00
0356:  MOVWF  78
0357:  GOTO   3A6
....................    ds18b20_write_byte(skip_rom);
0358:  MOVLW  CC
0359:  MOVWF  61
035A:  CALL   2EA
....................    ds18b20_write_byte(convert_t);
035B:  MOVLW  44
035C:  MOVWF  61
035D:  CALL   2EA
....................    while(ds18b20_read_byte() == 0);
035E:  CALL   31F
035F:  MOVF   78,F
0360:  BTFSC  03.2
0361:  GOTO   35E
....................    if(!ds18b20_start())
0362:  CALL   2C4
0363:  MOVF   78,F
0364:  BTFSS  03.2
0365:  GOTO   369
....................       return false;
0366:  MOVLW  00
0367:  MOVWF  78
0368:  GOTO   3A6
....................    ds18b20_write_byte(skip_rom);
0369:  MOVLW  CC
036A:  MOVWF  61
036B:  CALL   2EA
....................    ds18b20_write_byte(read_scratchpad);
036C:  MOVLW  BE
036D:  MOVWF  61
036E:  CALL   2EA
....................    *raw_temp_value = ds18b20_read_byte();
036F:  MOVF   60,W
0370:  MOVWF  7A
0371:  MOVF   5F,W
0372:  MOVWF  61
0373:  MOVF   60,W
0374:  MOVWF  62
0375:  CALL   31F
0376:  MOVF   61,W
0377:  MOVWF  04
0378:  BCF    03.7
0379:  BTFSC  62.0
037A:  BSF    03.7
037B:  INCF   04,F
037C:  CLRF   00
037D:  DECF   04,F
037E:  MOVF   78,W
037F:  MOVWF  00
....................    *raw_temp_value |= (int16)(ds18b20_read_byte()) << 8;
0380:  MOVF   60,W
0381:  MOVWF  7A
0382:  MOVF   5F,W
0383:  MOVWF  61
0384:  MOVF   60,W
0385:  MOVWF  62
0386:  MOVF   5F,W
0387:  MOVWF  04
0388:  BCF    03.7
0389:  BTFSC  60.0
038A:  BSF    03.7
038B:  INCF   04,F
038C:  MOVF   00,W
038D:  MOVWF  64
038E:  DECF   04,F
038F:  MOVF   00,W
0390:  MOVWF  63
0391:  CALL   31F
0392:  CLRF   66
0393:  MOVLW  00
0394:  IORWF  63,W
0395:  MOVWF  77
0396:  MOVF   78,W
0397:  IORWF  64,W
0398:  MOVWF  7A
0399:  MOVF   61,W
039A:  MOVWF  04
039B:  BCF    03.7
039C:  BTFSC  62.0
039D:  BSF    03.7
039E:  INCF   04,F
039F:  MOVF   7A,W
03A0:  MOVWF  00
03A1:  DECF   04,F
03A2:  MOVF   77,W
03A3:  MOVWF  00
....................    return true;
03A4:  MOVLW  01
03A5:  MOVWF  78
.................... }
.................... 
.................... /*
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
....................    HIEN THI NHIET DO LEN LCD 2 SO NGUYEN VA 3 SO THAP PHAN
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... */
.................... void ds18b20_lcd_data(usi16 data, int8 x, int8 y){
....................    dt_ng = data>>4;
....................    dt_tp = data & 0x000f;
....................    if(dt_ngt != dt_ng){
....................       dt_ngt = dt_ng;
....................       lcd_dis_2num_dot(dt_ng, x, y, enable, disable);
....................    }
....................    if(dt_tpt != dt_tp){
....................       dt_tpt = dt_tp;
....................       dt_tp_real = (dt_tp*625)/10;
....................       lcd_dis_3num_dot(dt_tp_real, x+2, y, enable, enable);
....................    }
.................... }
.................... 
.................... void ds18b20_read_temp(){
....................    if(ds18b20_read_temp_c2(&nhiet_do))
*
034E:  CLRF   60
034F:  MOVLW  55
0350:  MOVWF  5F
*
03A6:  MOVF   78,F
03A7:  BTFSC  03.2
03A8:  GOTO   3B5
....................       dt_ng = nhiet_do>>4;
03A9:  RRF    56,W
03AA:  MOVWF  7A
03AB:  RRF    55,W
03AC:  MOVWF  79
03AD:  RRF    7A,F
03AE:  RRF    79,F
03AF:  RRF    7A,F
03B0:  RRF    79,F
03B1:  RRF    7A,F
03B2:  RRF    79,F
03B3:  MOVF   79,W
03B4:  MOVWF  57
....................       dt_tp = nhiet_do & 0x000f;
03B5:  MOVF   55,W
03B6:  ANDLW  0F
03B7:  MOVWF  77
03B8:  CLRF   7A
03B9:  MOVF   77,W
03BA:  MOVWF  59
03BB:  MOVF   7A,W
03BC:  MOVWF  5A
....................       dt_tp_real = (dt_tp*625)/10;
03BD:  MOVF   5A,W
03BE:  MOVWF  63
03BF:  MOVF   59,W
03C0:  MOVWF  62
03C1:  MOVLW  02
03C2:  MOVWF  65
03C3:  MOVLW  71
03C4:  MOVWF  64
03C5:  CALL   229
03C6:  MOVF   79,W
03C7:  MOVWF  60
03C8:  MOVF   78,W
03C9:  MOVWF  5F
03CA:  MOVF   60,W
03CB:  MOVWF  62
03CC:  MOVF   5F,W
03CD:  MOVWF  61
03CE:  CLRF   64
03CF:  MOVLW  0A
03D0:  MOVWF  63
*
03F5:  MOVF   79,W
03F6:  MOVWF  5E
03F7:  MOVF   78,W
03F8:  MOVWF  5D
03F9:  BCF    0A.3
03FA:  BCF    0A.4
03FB:  GOTO   515 (RETURN)
....................       //ds18b20_lcd_data(nhiet_do,0,1);
....................    //else ds18b20_no_ds18b(0,1);
.................... }
.................... 
.................... #include <thu_vien_control_chiler.c>
.................... void control_temperature(int8 nd_ss, int8 gh){
....................    if(nd_ss > gh){
....................    // water is hot
....................       output_bit(pinCold, 1);
....................       output_bit(pinHot,  0);
....................    }
....................    else{
....................    // water is cold
....................       output_bit(pinCold, 0);
....................       output_bit(pinHot,  1);
....................    }
.................... }
.................... 
.................... void servo_degree_0(){
....................    unsigned int i;
....................    for(i = 0; i < 50; i++){
....................       output_bit(pinServo, 1);
....................       Delay_us(800); // pulse of 800us
....................       output_bit(pinServo, 0);
....................       Delay_us(19200);
....................    }
.................... }
.................... 
.................... void servo_degree_90(){
....................    unsigned int i;
....................    for(i = 0; i < 50; i++){
....................       output_bit(pinServo, 1);
....................       Delay_us(1500); // pulse of 1500us
....................       output_bit(pinServo, 0);
....................       Delay_us(18500);
....................    }
.................... }
.................... 
.................... void servo_degree_180(){
....................    unsigned int i;
....................    for(i = 0; i < 50; i++){
....................       output_bit(pinServo, 1);
....................       Delay_us(2200); // pulse of 2200us
....................       output_bit(pinServo, 0);
....................       Delay_us(17800);
....................    }
.................... }
.................... 
.................... void control_servo(){
....................    if(dec_gio_ds == dec_gio_eat && dec_phut_ds == dec_phut_eat && dec_giay_ds == dec_giay_eat){
....................       flag_servo = true;
....................    }
....................    if(flag_servo){
....................       servo_degree_90();
....................       //output_bit(pinServo, 1);
....................    }
....................    else{
....................       servo_degree_0();
....................       //output_bit(pinServo, 0);
....................    }
.................... }
.................... 
.................... #include <thu_vien_uart.c>
.................... void read_data(){
.................... 
.................... }
.................... void write_data(){
.................... 
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void main(){
*
04B6:  MOVF   03,W
04B7:  ANDLW  1F
04B8:  MOVWF  03
04B9:  MOVLW  FF
04BA:  MOVWF  2B
04BB:  BSF    2B.3
04BC:  MOVF   2B,W
04BD:  BSF    03.5
04BE:  MOVWF  07
04BF:  BCF    03.5
04C0:  BSF    2B.4
04C1:  MOVF   2B,W
04C2:  BSF    03.5
04C3:  MOVWF  07
04C4:  MOVLW  31
04C5:  MOVWF  13
04C6:  MOVLW  28
04C7:  BCF    03.5
04C8:  MOVWF  14
04C9:  BSF    03.5
04CA:  BSF    14.7
04CB:  BCF    14.6
04CC:  MOVLW  81
04CD:  MOVWF  19
04CE:  MOVLW  A6
04CF:  MOVWF  18
04D0:  MOVLW  90
04D1:  BCF    03.5
04D2:  MOVWF  18
04D3:  MOVLW  19
04D4:  MOVWF  2C
04D5:  CLRF   2F
04D6:  CLRF   30
04D7:  CLRF   31
04D8:  CLRF   36
04D9:  CLRF   51
04DA:  CLRF   50
04DB:  CLRF   53
04DC:  MOVLW  01
04DD:  MOVWF  54
04DE:  BSF    03.5
04DF:  BSF    1F.0
04E0:  BSF    1F.1
04E1:  BSF    1F.2
04E2:  BCF    1F.3
04E3:  MOVLW  07
04E4:  MOVWF  1C
04E5:  BCF    03.7
....................    set_up_init();
*
0509:  GOTO   09E
....................    lcd_init();
050A:  GOTO   163
....................    lcd_log_info(3,enable);
050B:  CLRF   60
050C:  MOVLW  03
050D:  MOVWF  5F
050E:  MOVLW  01
050F:  MOVWF  61
0510:  GOTO   23E
....................    //ds1307_init();
....................    //log_code_ds1307();
....................    //delay_ms(2000);
....................    //ds18b20_khoi_tao();
....................    while(true){
....................       ds1307_read_time(8);
0511:  MOVLW  08
0512:  MOVWF  5F
0513:  GOTO   285
....................       ds18b20_read_temp();
0514:  GOTO   34E
....................       lcd_dis_xx_yy_zz(4,0,dec_gio_ds,dec_phut_ds,dec_giay_ds,1,1,1);
0515:  MOVF   42,W
0516:  MOVWF  61
0517:  CALL   3FC
0518:  MOVF   78,W
0519:  MOVWF  5F
051A:  MOVF   41,W
051B:  MOVWF  61
051C:  CALL   3FC
051D:  MOVF   78,W
051E:  MOVWF  60
051F:  MOVF   40,W
0520:  MOVWF  61
0521:  CALL   3FC
0522:  MOVF   78,W
0523:  MOVWF  61
0524:  MOVLW  04
0525:  MOVWF  62
0526:  CLRF   63
0527:  MOVF   5F,W
0528:  MOVWF  64
0529:  MOVF   60,W
052A:  MOVWF  65
052B:  MOVF   61,W
052C:  MOVWF  66
052D:  MOVLW  01
052E:  MOVWF  67
052F:  MOVWF  68
0530:  MOVWF  69
0531:  GOTO   446
0532:  GOTO   511
....................       //select_menu();
....................       //control_temperature(dt_ng,gh_nd);
....................       //control_servo();
....................       //test_btn();
....................    }
.................... }
0533:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
