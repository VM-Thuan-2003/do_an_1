CCS PCM C Compiler, Version 5.015, 5967               19-Mar-24 17:01

               Filename:   E:\STUDY\HKII-2023-2024\DO_AN_1\PROJECT\CODE\code_do_an_1.lst

               ROM used:   1041 words (13%)
                           Largest free fragment is 2048
               RAM used:   33 (9%) at main() level
                           56 (15%) worst case
               Stack used: 7 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   3BF
0003:  NOP
.................... #include <thu_vien_do_an_1.c> 
.................... /* 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................                        SU PHAM KY THUAT - TP.HCM 
....................  DO AN 1 - HIEU CHINH NHIET DO HO CA VA CHO CA AN TU DONG - KET NOI ESP 
....................  
....................    THANH VIEN: 
....................       VO MINH THUAN   - 21161366 
....................       LE QUANG THUONG - 21161367 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... */ 
.................... #include <define_pic_16f887.c> 
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA C4,37
0005:  DATA A0,30
0006:  DATA 6E,10
0007:  DATA 31,10
0008:  DATA 2D,10
0009:  DATA C8,25
000A:  DATA C9,24
000B:  DATA 00,00
000C:  DATA 53,28
000D:  DATA 4B,2A
000E:  DATA 2D,2A
000F:  DATA 50,24
0010:  DATA C3,26
0011:  DATA 00,00
0012:  DATA 2E,00
0013:  DATA 2E,00
0014:  DATA 2D,00
0015:  DATA 2D,00
0016:  DATA CE,27
0017:  DATA 20,22
0018:  DATA D3,18
0019:  DATA 38,21
001A:  DATA 32,18
001B:  DATA 00,00
001C:  DATA C3,27
001D:  DATA 20,22
001E:  DATA D3,18
001F:  DATA 38,21
0020:  DATA 32,18
0021:  DATA 00,00
*
01AF:  MOVF   0B,W
01B0:  MOVWF  3F
01B1:  BCF    0B.7
01B2:  BSF    03.5
01B3:  BSF    03.6
01B4:  BSF    0C.7
01B5:  BSF    0C.0
01B6:  NOP
01B7:  NOP
01B8:  BCF    03.5
01B9:  BCF    03.6
01BA:  BTFSC  3F.7
01BB:  BSF    0B.7
01BC:  BSF    03.6
01BD:  MOVF   0C,W
01BE:  ANDLW  7F
01BF:  BTFSC  03.2
01C0:  GOTO   203
01C1:  BCF    03.6
01C2:  MOVWF  3F
01C3:  BSF    03.6
01C4:  MOVF   0D,W
01C5:  BCF    03.6
01C6:  MOVWF  40
01C7:  BSF    03.6
01C8:  MOVF   0F,W
01C9:  BCF    03.6
01CA:  MOVWF  41
01CB:  MOVF   3F,W
01CC:  MOVWF  42
01CD:  CALL   1A9
01CE:  MOVF   40,W
01CF:  BSF    03.6
01D0:  MOVWF  0D
01D1:  BCF    03.6
01D2:  MOVF   41,W
01D3:  BSF    03.6
01D4:  MOVWF  0F
01D5:  BCF    03.6
01D6:  MOVF   0B,W
01D7:  MOVWF  42
01D8:  BCF    0B.7
01D9:  BSF    03.5
01DA:  BSF    03.6
01DB:  BSF    0C.7
01DC:  BSF    0C.0
01DD:  NOP
01DE:  NOP
01DF:  BCF    03.5
01E0:  BCF    03.6
01E1:  BTFSC  42.7
01E2:  BSF    0B.7
01E3:  BSF    03.6
01E4:  RLF    0C,W
01E5:  RLF    0E,W
01E6:  ANDLW  7F
01E7:  BTFSC  03.2
01E8:  GOTO   203
01E9:  BCF    03.6
01EA:  MOVWF  3F
01EB:  BSF    03.6
01EC:  MOVF   0D,W
01ED:  BCF    03.6
01EE:  MOVWF  40
01EF:  BSF    03.6
01F0:  MOVF   0F,W
01F1:  BCF    03.6
01F2:  MOVWF  41
01F3:  MOVF   3F,W
01F4:  MOVWF  42
01F5:  CALL   1A9
01F6:  MOVF   40,W
01F7:  BSF    03.6
01F8:  MOVWF  0D
01F9:  BCF    03.6
01FA:  MOVF   41,W
01FB:  BSF    03.6
01FC:  MOVWF  0F
01FD:  INCF   0D,F
01FE:  BTFSC  03.2
01FF:  INCF   0F,F
0200:  BCF    03.6
0201:  GOTO   1AF
0202:  BSF    03.6
0203:  BCF    03.6
0204:  RETURN
*
0226:  MOVLW  10
0227:  MOVWF  43
0228:  CLRF   77
0229:  CLRF   7A
022A:  RRF    40,F
022B:  RRF    3F,F
022C:  BTFSS  03.0
022D:  GOTO   234
022E:  MOVF   41,W
022F:  ADDWF  77,F
0230:  BTFSC  03.0
0231:  INCF   7A,F
0232:  MOVF   42,W
0233:  ADDWF  7A,F
0234:  RRF    7A,F
0235:  RRF    77,F
0236:  RRF    79,F
0237:  RRF    78,F
0238:  DECFSZ 43,F
0239:  GOTO   22A
*
0311:  CLRF   77
0312:  CLRF   78
0313:  MOVF   45,W
0314:  BCF    03.0
0315:  BTFSC  46.0
0316:  ADDWF  77,F
0317:  RRF    77,F
0318:  RRF    78,F
0319:  BTFSC  46.1
031A:  ADDWF  77,F
031B:  RRF    77,F
031C:  RRF    78,F
031D:  BTFSC  46.2
031E:  ADDWF  77,F
031F:  RRF    77,F
0320:  RRF    78,F
0321:  BTFSC  46.3
0322:  ADDWF  77,F
0323:  RRF    77,F
0324:  RRF    78,F
0325:  BTFSC  46.4
0326:  ADDWF  77,F
0327:  RRF    77,F
0328:  RRF    78,F
0329:  BTFSC  46.5
032A:  ADDWF  77,F
032B:  RRF    77,F
032C:  RRF    78,F
032D:  BTFSC  46.6
032E:  ADDWF  77,F
032F:  RRF    77,F
0330:  RRF    78,F
0331:  BTFSC  46.7
0332:  ADDWF  77,F
0333:  RRF    77,F
0334:  RRF    78,F
....................  
.................... #list 
....................  
.................... #device  adc=10 
.................... #fuses   hs, nowdt, put, noprotect, nolvp 
.................... #use     delay(clock=20MHz)  
*
009E:  MOVLW  42
009F:  MOVWF  04
00A0:  BCF    03.7
00A1:  MOVF   00,W
00A2:  BTFSC  03.2
00A3:  GOTO   0B1
00A4:  MOVLW  06
00A5:  MOVWF  78
00A6:  CLRF   77
00A7:  DECFSZ 77,F
00A8:  GOTO   0A7
00A9:  DECFSZ 78,F
00AA:  GOTO   0A6
00AB:  MOVLW  7B
00AC:  MOVWF  77
00AD:  DECFSZ 77,F
00AE:  GOTO   0AD
00AF:  DECFSZ 00,F
00B0:  GOTO   0A4
00B1:  RETURN
.................... #use     i2c(master,slow,sda=pin_c4,scl=pin_c3) 
*
0042:  MOVLW  08
0043:  MOVWF  78
0044:  MOVLW  04
0045:  MOVWF  77
0046:  DECFSZ 77,F
0047:  GOTO   046
0048:  BCF    07.3
0049:  BCF    20.3
004A:  MOVF   20,W
004B:  BSF    03.5
004C:  MOVWF  07
004D:  MOVLW  03
004E:  MOVWF  77
004F:  DECFSZ 77,F
0050:  GOTO   04F
0051:  BCF    03.5
0052:  RLF    52,F
0053:  BCF    07.4
0054:  BTFSS  03.0
0055:  GOTO   05C
0056:  BSF    20.4
0057:  MOVF   20,W
0058:  BSF    03.5
0059:  MOVWF  07
005A:  GOTO   060
005B:  BCF    03.5
005C:  BCF    20.4
005D:  MOVF   20,W
005E:  BSF    03.5
005F:  MOVWF  07
0060:  NOP
0061:  BCF    03.5
0062:  BSF    20.3
0063:  MOVF   20,W
0064:  BSF    03.5
0065:  MOVWF  07
0066:  BCF    03.5
0067:  BTFSS  07.3
0068:  GOTO   067
0069:  DECFSZ 78,F
006A:  GOTO   044
006B:  MOVLW  04
006C:  MOVWF  77
006D:  DECFSZ 77,F
006E:  GOTO   06D
006F:  BCF    07.3
0070:  BCF    20.3
0071:  MOVF   20,W
0072:  BSF    03.5
0073:  MOVWF  07
0074:  NOP
0075:  BCF    03.5
0076:  BSF    20.4
0077:  MOVF   20,W
0078:  BSF    03.5
0079:  MOVWF  07
007A:  MOVLW  03
007B:  MOVWF  77
007C:  DECFSZ 77,F
007D:  GOTO   07C
007E:  MOVLW  03
007F:  MOVWF  77
0080:  DECFSZ 77,F
0081:  GOTO   080
0082:  BCF    03.5
0083:  BSF    20.3
0084:  MOVF   20,W
0085:  BSF    03.5
0086:  MOVWF  07
0087:  BCF    03.5
0088:  BTFSS  07.3
0089:  GOTO   088
008A:  CLRF   78
008B:  MOVLW  03
008C:  MOVWF  77
008D:  DECFSZ 77,F
008E:  GOTO   08D
008F:  BTFSC  07.4
0090:  BSF    78.0
0091:  BCF    07.3
0092:  BCF    20.3
0093:  MOVF   20,W
0094:  BSF    03.5
0095:  MOVWF  07
0096:  BCF    03.5
0097:  BCF    07.4
0098:  BCF    20.4
0099:  MOVF   20,W
009A:  BSF    03.5
009B:  MOVWF  07
009C:  BCF    03.5
009D:  RETURN
*
024F:  MOVLW  08
0250:  MOVWF  42
0251:  MOVF   77,W
0252:  MOVWF  43
0253:  BSF    20.4
0254:  MOVF   20,W
0255:  BSF    03.5
0256:  MOVWF  07
0257:  MOVLW  03
0258:  MOVWF  77
0259:  DECFSZ 77,F
025A:  GOTO   259
025B:  BCF    03.5
025C:  BSF    20.3
025D:  MOVF   20,W
025E:  BSF    03.5
025F:  MOVWF  07
0260:  BCF    03.5
0261:  BTFSS  07.3
0262:  GOTO   261
0263:  BTFSC  07.4
0264:  BSF    03.0
0265:  BTFSS  07.4
0266:  BCF    03.0
0267:  RLF    78,F
0268:  MOVLW  04
0269:  MOVWF  77
026A:  DECFSZ 77,F
026B:  GOTO   26A
026C:  BCF    20.3
026D:  MOVF   20,W
026E:  BSF    03.5
026F:  MOVWF  07
0270:  BCF    03.5
0271:  BCF    07.3
0272:  DECFSZ 42,F
0273:  GOTO   253
0274:  BSF    20.4
0275:  MOVF   20,W
0276:  BSF    03.5
0277:  MOVWF  07
0278:  MOVLW  03
0279:  MOVWF  77
027A:  DECFSZ 77,F
027B:  GOTO   27A
027C:  BCF    03.5
027D:  BCF    07.4
027E:  MOVF   43,W
027F:  BTFSC  03.2
0280:  GOTO   286
0281:  BCF    20.4
0282:  MOVF   20,W
0283:  BSF    03.5
0284:  MOVWF  07
0285:  BCF    03.5
0286:  NOP
0287:  BSF    20.3
0288:  MOVF   20,W
0289:  BSF    03.5
028A:  MOVWF  07
028B:  BCF    03.5
028C:  BTFSS  07.3
028D:  GOTO   28C
028E:  MOVLW  04
028F:  MOVWF  77
0290:  DECFSZ 77,F
0291:  GOTO   290
0292:  BCF    07.3
0293:  BCF    20.3
0294:  MOVF   20,W
0295:  BSF    03.5
0296:  MOVWF  07
0297:  MOVLW  03
0298:  MOVWF  77
0299:  DECFSZ 77,F
029A:  GOTO   299
029B:  BCF    03.5
029C:  BCF    07.4
029D:  BCF    20.4
029E:  MOVF   20,W
029F:  BSF    03.5
02A0:  MOVWF  07
02A1:  BCF    03.5
02A2:  RETURN
.................... #use     rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
....................  
.................... /* Define name again to accordant user */ 
.................... #define usi8  unsigned int8 
.................... #define usi16 unsigned int16 
.................... #define usi32 unsigned int32 
.................... #define si8   signed   int8 
.................... #define si16  signed   int16 
.................... #define si32  signed   int32 
....................  
.................... #define bool int1 
....................  
.................... #define enable  1 
.................... #define disable 0 
....................  
.................... #define on  1 
.................... #define off 0 
....................  
.................... #ifndef bt0 
.................... #define bt0    pin_b0 
.................... #endif  
....................  
.................... #ifndef bt1 
.................... #define bt1    pin_b1 
.................... #endif 
....................  
.................... #ifndef bt2 
.................... #define bt2    pin_b2 
.................... #endif 
....................  
.................... #ifndef bt3 
.................... #define bt3    pin_b3 
.................... #endif 
....................  
.................... #ifndef pinServo 
.................... #define pinServo    pin_c1 
.................... #endif 
....................  
.................... void set_up_port(){ 
....................    set_tris_a(0xff); 
*
0022:  MOVLW  FF
0023:  BSF    03.5
0024:  MOVWF  05
....................    set_tris_b(0xff); 
0025:  MOVWF  06
....................    set_tris_d(0x00); output_d(0x00); 
0026:  MOVLW  00
0027:  MOVWF  08
0028:  CLRF   08
0029:  BCF    03.5
002A:  CLRF   08
....................    set_tris_e(0x00); output_e(0x00); 
002B:  BSF    03.5
002C:  BCF    09.0
002D:  BCF    09.1
002E:  BCF    09.2
002F:  BCF    09.3
0030:  BCF    09.0
0031:  BCF    09.1
0032:  BCF    09.2
0033:  BCF    09.3
0034:  BCF    03.5
0035:  CLRF   09
....................    set_tris_c(0x00); output_c(0x00); 
0036:  BSF    03.5
0037:  MOVWF  07
0038:  BCF    03.5
0039:  MOVWF  20
003A:  MOVWF  20
003B:  BSF    03.5
003C:  CLRF   07
003D:  BCF    03.5
003E:  CLRF   07
003F:  BCF    0A.3
0040:  BCF    0A.4
0041:  GOTO   405 (RETURN)
.................... } 
....................  
....................  
....................  
.................... #include <thu_vien_btn.c> 
.................... #include <thu_vien_i2c_ds1307.c> 
.................... #include <thu_vien_i2c_lcd.c> 
.................... #define ds13_addr_wr 0xd0 
.................... #define ds13_addr_rd 0xd1 
.................... //cap nhat time: giay-phut-gio-thu-ngay-thang-nam-madk_msds 
.................... usi8 time_w[9]={0x31,0x15,0x15,0x04,0x25,0x10,0x23,0x90,0x92}; // bcd 
*
03E1:  MOVLW  31
03E2:  BCF    03.6
03E3:  MOVWF  21
03E4:  MOVLW  15
03E5:  MOVWF  22
03E6:  MOVWF  23
03E7:  MOVLW  04
03E8:  MOVWF  24
03E9:  MOVLW  25
03EA:  MOVWF  25
03EB:  MOVLW  10
03EC:  MOVWF  26
03ED:  MOVLW  23
03EE:  MOVWF  27
03EF:  MOVLW  90
03F0:  MOVWF  28
03F1:  MOVLW  92
03F2:  MOVWF  29
.................... usi8 time_r[9]={0x30,0x30,0x10,0x08,0x20,0x02,0x20,0x90,0x96}; // dec 
03F3:  MOVLW  30
03F4:  MOVWF  2A
03F5:  MOVWF  2B
03F6:  MOVLW  10
03F7:  MOVWF  2C
03F8:  MOVLW  08
03F9:  MOVWF  2D
03FA:  MOVLW  20
03FB:  MOVWF  2E
03FC:  MOVLW  02
03FD:  MOVWF  2F
03FE:  MOVLW  20
03FF:  MOVWF  30
0400:  MOVLW  90
0401:  MOVWF  31
0402:  MOVLW  96
0403:  MOVWF  32
....................  
.................... #define dec_giay_ds  time_r[0] 
.................... #define dec_phut_ds  time_r[1] 
.................... #define dec_gio_ds   time_r[2] 
.................... #define dec_thu_ds   time_r[3] 
.................... #define dec_ngay_ds  time_r[4] 
.................... #define dec_thang_ds time_r[5] 
.................... #define dec_nam_ds   time_r[6] 
....................  
.................... #define dec_ma_qd   time_w[8]  
.................... #define dec_ma_ds   time_r[8]   
....................  
.................... usi8 ds1307_decToBcd(usi8 val) { 
....................     return ((val / 10 * 16) + (val % 10)); 
.................... } 
....................  
.................... usi8 ds1307_bcdToDec(usi8 val) { 
....................     return ((val / 16 * 10) + (val % 16)); 
*
0307:  SWAPF  42,W
0308:  MOVWF  77
0309:  MOVLW  0F
030A:  ANDWF  77,F
030B:  MOVF   77,W
030C:  MOVWF  44
030D:  MOVF   44,W
030E:  MOVWF  45
030F:  MOVLW  0A
0310:  MOVWF  46
*
0335:  MOVF   78,W
0336:  MOVWF  43
0337:  MOVF   42,W
0338:  ANDLW  0F
0339:  ADDWF  78,W
033A:  MOVWF  78
.................... } 
....................  
.................... void ds1307_read_dec_time(usi8 j){ 
....................    i2c_start(); 
*
02A3:  BSF    20.4
02A4:  MOVF   20,W
02A5:  BSF    03.5
02A6:  MOVWF  07
02A7:  MOVLW  04
02A8:  MOVWF  77
02A9:  DECFSZ 77,F
02AA:  GOTO   2A9
02AB:  BCF    03.5
02AC:  BSF    20.3
02AD:  MOVF   20,W
02AE:  BSF    03.5
02AF:  MOVWF  07
02B0:  MOVLW  03
02B1:  MOVWF  77
02B2:  DECFSZ 77,F
02B3:  GOTO   2B2
02B4:  BCF    03.5
02B5:  BCF    07.4
02B6:  BCF    20.4
02B7:  MOVF   20,W
02B8:  BSF    03.5
02B9:  MOVWF  07
02BA:  MOVLW  04
02BB:  MOVWF  77
02BC:  DECFSZ 77,F
02BD:  GOTO   2BC
02BE:  BCF    03.5
02BF:  BCF    07.3
02C0:  BCF    20.3
02C1:  MOVF   20,W
02C2:  BSF    03.5
02C3:  MOVWF  07
....................    i2c_write(ds13_addr_wr); 
02C4:  MOVLW  D0
02C5:  BCF    03.5
02C6:  MOVWF  52
02C7:  CALL   042
....................    i2c_write(0x00); 
02C8:  CLRF   52
02C9:  CALL   042
....................    i2c_start(); 
02CA:  BSF    20.4
02CB:  MOVF   20,W
02CC:  BSF    03.5
02CD:  MOVWF  07
02CE:  MOVLW  04
02CF:  MOVWF  77
02D0:  DECFSZ 77,F
02D1:  GOTO   2D0
02D2:  BCF    03.5
02D3:  BSF    20.3
02D4:  MOVF   20,W
02D5:  BSF    03.5
02D6:  MOVWF  07
02D7:  MOVLW  03
02D8:  MOVWF  77
02D9:  DECFSZ 77,F
02DA:  GOTO   2D9
02DB:  BCF    03.5
02DC:  BTFSS  07.3
02DD:  GOTO   2DC
02DE:  BCF    07.4
02DF:  BCF    20.4
02E0:  MOVF   20,W
02E1:  BSF    03.5
02E2:  MOVWF  07
02E3:  MOVLW  04
02E4:  MOVWF  77
02E5:  DECFSZ 77,F
02E6:  GOTO   2E5
02E7:  BCF    03.5
02E8:  BCF    07.3
02E9:  BCF    20.3
02EA:  MOVF   20,W
02EB:  BSF    03.5
02EC:  MOVWF  07
....................    i2c_write(ds13_addr_rd); 
02ED:  MOVLW  D1
02EE:  BCF    03.5
02EF:  MOVWF  52
02F0:  CALL   042
....................    for(usi8 i = 0; i< j; i++)  
02F1:  CLRF   3E
02F2:  MOVF   3D,W
02F3:  SUBWF  3E,W
02F4:  BTFSC  03.0
02F5:  GOTO   344
....................       time_r[i] = ds1307_bcdToDec(i2c_read()); 
02F6:  MOVLW  2A
02F7:  ADDWF  3E,W
02F8:  MOVWF  78
02F9:  CLRF   7A
02FA:  BTFSC  03.0
02FB:  INCF   7A,F
02FC:  MOVF   78,W
02FD:  MOVWF  3F
02FE:  MOVF   7A,W
02FF:  MOVWF  40
0300:  MOVLW  01
0301:  MOVWF  77
0302:  CALL   24F
0303:  MOVF   78,W
0304:  MOVWF  41
0305:  MOVF   41,W
0306:  MOVWF  42
*
033B:  MOVF   3F,W
033C:  MOVWF  04
033D:  BCF    03.7
033E:  BTFSC  40.0
033F:  BSF    03.7
0340:  MOVF   78,W
0341:  MOVWF  00
0342:  INCF   3E,F
0343:  GOTO   2F2
....................    i2c_read(0); 
0344:  CLRF   77
0345:  CALL   24F
....................    i2c_stop(); 
0346:  BCF    20.4
0347:  MOVF   20,W
0348:  BSF    03.5
0349:  MOVWF  07
034A:  NOP
034B:  BCF    03.5
034C:  BSF    20.3
034D:  MOVF   20,W
034E:  BSF    03.5
034F:  MOVWF  07
0350:  BCF    03.5
0351:  BTFSS  07.3
0352:  GOTO   351
0353:  MOVLW  04
0354:  MOVWF  77
0355:  DECFSZ 77,F
0356:  GOTO   355
0357:  GOTO   358
0358:  NOP
0359:  BSF    20.4
035A:  MOVF   20,W
035B:  BSF    03.5
035C:  MOVWF  07
035D:  MOVLW  04
035E:  MOVWF  77
035F:  DECFSZ 77,F
0360:  GOTO   35F
0361:  BCF    03.5
0362:  RETURN
.................... } 
....................  
.................... void ds1307_update_bcd_time(){ 
....................    i2c_start(); 
....................    i2c_write(ds13_addr_wr); 
....................    i2c_write(0x00); 
....................    for(usi8 i = 0; i < 9; i++) 
....................       i2c_write(ds1307_decToBcd(time_r[i])); 
....................    i2c_stop(); 
.................... } 
....................  
.................... void ds1307_init(){ 
....................    ds1307_read_dec_time(9); 
0363:  MOVLW  09
0364:  MOVWF  3D
0365:  CALL   2A3
....................    if(dec_ma_qd != dec_ma_ds) 
0366:  MOVF   32,W
0367:  SUBWF  29,W
0368:  BTFSC  03.2
0369:  GOTO   38C
....................       i2c_start(); 
036A:  BSF    20.4
036B:  MOVF   20,W
036C:  BSF    03.5
036D:  MOVWF  07
036E:  MOVLW  04
036F:  MOVWF  77
0370:  DECFSZ 77,F
0371:  GOTO   370
0372:  BCF    03.5
0373:  BSF    20.3
0374:  MOVF   20,W
0375:  BSF    03.5
0376:  MOVWF  07
0377:  MOVLW  03
0378:  MOVWF  77
0379:  DECFSZ 77,F
037A:  GOTO   379
037B:  BCF    03.5
037C:  BCF    07.4
037D:  BCF    20.4
037E:  MOVF   20,W
037F:  BSF    03.5
0380:  MOVWF  07
0381:  MOVLW  04
0382:  MOVWF  77
0383:  DECFSZ 77,F
0384:  GOTO   383
0385:  BCF    03.5
0386:  BCF    07.3
0387:  BCF    20.3
0388:  MOVF   20,W
0389:  BSF    03.5
038A:  MOVWF  07
038B:  BCF    03.5
....................       i2c_write(ds13_addr_wr); 
038C:  MOVLW  D0
038D:  MOVWF  52
038E:  CALL   042
....................       i2c_write(0x00); 
038F:  CLRF   52
0390:  CALL   042
....................       for(usi8 i = 0; i < 9; i++)  
0391:  CLRF   3C
0392:  MOVF   3C,W
0393:  SUBLW  08
0394:  BTFSS  03.0
0395:  GOTO   3A0
....................          i2c_write(time_w[i]); 
0396:  MOVLW  21
0397:  ADDWF  3C,W
0398:  MOVWF  04
0399:  BCF    03.7
039A:  MOVF   00,W
039B:  MOVWF  3D
039C:  MOVWF  52
039D:  CALL   042
039E:  INCF   3C,F
039F:  GOTO   392
....................       i2c_stop(); 
03A0:  BCF    20.4
03A1:  MOVF   20,W
03A2:  BSF    03.5
03A3:  MOVWF  07
03A4:  NOP
03A5:  BCF    03.5
03A6:  BSF    20.3
03A7:  MOVF   20,W
03A8:  BSF    03.5
03A9:  MOVWF  07
03AA:  BCF    03.5
03AB:  BTFSS  07.3
03AC:  GOTO   3AB
03AD:  MOVLW  04
03AE:  MOVWF  77
03AF:  DECFSZ 77,F
03B0:  GOTO   3AF
03B1:  GOTO   3B2
03B2:  NOP
03B3:  BSF    20.4
03B4:  MOVF   20,W
03B5:  BSF    03.5
03B6:  MOVWF  07
03B7:  MOVLW  04
03B8:  MOVWF  77
03B9:  DECFSZ 77,F
03BA:  GOTO   3B9
03BB:  BCF    03.5
03BC:  BCF    0A.3
03BD:  BCF    0A.4
03BE:  GOTO   40C (RETURN)
.................... } 
....................  
.................... #include <thu_vien_lcd_1602.c> 
.................... #define pcf8574_addr_wr 0x4E // 0b01001110 
.................... #define pcf8574_addr_rd 0x4F // 0b01001111 
....................  
.................... void i2c_reset() 
.................... { 
....................    i2c_start(); 
....................    i2c_stop(); 
.................... } 
....................  
.................... void i2c_setup_write() 
.................... { 
....................    i2c_start(); 
*
013D:  BSF    20.4
013E:  MOVF   20,W
013F:  BSF    03.5
0140:  MOVWF  07
0141:  MOVLW  04
0142:  MOVWF  77
0143:  DECFSZ 77,F
0144:  GOTO   143
0145:  BCF    03.5
0146:  BSF    20.3
0147:  MOVF   20,W
0148:  BSF    03.5
0149:  MOVWF  07
014A:  MOVLW  03
014B:  MOVWF  77
014C:  DECFSZ 77,F
014D:  GOTO   14C
014E:  BCF    03.5
014F:  BCF    07.4
0150:  BCF    20.4
0151:  MOVF   20,W
0152:  BSF    03.5
0153:  MOVWF  07
0154:  MOVLW  04
0155:  MOVWF  77
0156:  DECFSZ 77,F
0157:  GOTO   156
0158:  BCF    03.5
0159:  BCF    07.3
015A:  BCF    20.3
015B:  MOVF   20,W
015C:  BSF    03.5
015D:  MOVWF  07
....................    i2c_write(pcf8574_addr_wr); 
015E:  MOVLW  4E
015F:  BCF    03.5
0160:  MOVWF  52
0161:  CALL   042
.................... } 
....................  
.................... void i2c_write_1byte(usi8 payload) 
.................... { 
....................    i2c_start(); 
*
00B7:  BSF    20.4
00B8:  MOVF   20,W
00B9:  BSF    03.5
00BA:  MOVWF  07
00BB:  MOVLW  04
00BC:  MOVWF  77
00BD:  DECFSZ 77,F
00BE:  GOTO   0BD
00BF:  BCF    03.5
00C0:  BSF    20.3
00C1:  MOVF   20,W
00C2:  BSF    03.5
00C3:  MOVWF  07
00C4:  MOVLW  03
00C5:  MOVWF  77
00C6:  DECFSZ 77,F
00C7:  GOTO   0C6
00C8:  BCF    03.5
00C9:  BTFSS  07.3
00CA:  GOTO   0C9
00CB:  BCF    07.4
00CC:  BCF    20.4
00CD:  MOVF   20,W
00CE:  BSF    03.5
00CF:  MOVWF  07
00D0:  MOVLW  04
00D1:  MOVWF  77
00D2:  DECFSZ 77,F
00D3:  GOTO   0D2
00D4:  BCF    03.5
00D5:  BCF    07.3
00D6:  BCF    20.3
00D7:  MOVF   20,W
00D8:  BSF    03.5
00D9:  MOVWF  07
....................    i2c_write(pcf8574_addr_wr); 
00DA:  MOVLW  4E
00DB:  BCF    03.5
00DC:  MOVWF  52
00DD:  CALL   042
....................    i2c_write(payload); 
00DE:  MOVF   51,W
00DF:  MOVWF  52
00E0:  CALL   042
....................    i2c_stop(); 
00E1:  BCF    20.4
00E2:  MOVF   20,W
00E3:  BSF    03.5
00E4:  MOVWF  07
00E5:  NOP
00E6:  BCF    03.5
00E7:  BSF    20.3
00E8:  MOVF   20,W
00E9:  BSF    03.5
00EA:  MOVWF  07
00EB:  BCF    03.5
00EC:  BTFSS  07.3
00ED:  GOTO   0EC
00EE:  MOVLW  04
00EF:  MOVWF  77
00F0:  DECFSZ 77,F
00F1:  GOTO   0F0
00F2:  GOTO   0F3
00F3:  NOP
00F4:  BSF    20.4
00F5:  MOVF   20,W
00F6:  BSF    03.5
00F7:  MOVWF  07
00F8:  MOVLW  04
00F9:  MOVWF  77
00FA:  DECFSZ 77,F
00FB:  GOTO   0FA
.................... } 
....................  
.................... #include <thu_vien_ds18b20.c> 
.................... #define lcd_cols 16 
.................... #define lcd_rows 2 
....................  
.................... // commands 
.................... #define LCD_CLEARDISPLAY 0x01 
.................... #define LCD_RETURNHOME 0x02 
.................... #define LCD_ENTRYMODESET 0x04 
.................... #define LCD_DISPLAYCONTROL 0x08 
.................... #define LCD_CURSORSHIFT 0x10 
.................... #define LCD_FUNCTIONSET 0x20 
.................... #define LCD_SETCGRAMADDR 0x40 
.................... #define LCD_SETDDRAMADDR 0x80 
....................  
.................... // flags for display entry mode 
.................... #define LCD_ENTRYRIGHT 0x00 
.................... #define LCD_ENTRYLEFT 0x02 
.................... #define LCD_ENTRYSHIFTINCREMENT 0x01 
.................... #define LCD_ENTRYSHIFTDECREMENT 0x00 
....................  
.................... // flags for display on/off control 
.................... #define LCD_DISPLAYON 0x04 
.................... #define LCD_DISPLAYOFF 0x00 
.................... #define LCD_CURSORON 0x02 
.................... #define LCD_CURSOROFF 0x00 
.................... #define LCD_BLINKON 0x01 
.................... #define LCD_BLINKOFF 0x00 
....................  
.................... // flags for display/cursor shift 
.................... #define LCD_DISPLAYMOVE 0x08 
.................... #define LCD_CURSORMOVE 0x00 
.................... #define LCD_MOVERIGHT 0x04 
.................... #define LCD_MOVELEFT 0x00 
....................  
.................... // flags for function set 
.................... #define LCD_8BITMODE 0x10 
.................... #define LCD_4BITMODE 0x00 
.................... #define LCD_2LINE 0x08 
.................... #define LCD_1LINE 0x00 
.................... #define LCD_5x10DOTS 0x04 
.................... #define LCD_5x8DOTS 0x00 
....................  
.................... // flags for backlight control 
.................... #define LCD_BACKLIGHT 0x08 
.................... #define LCD_NOBACKLIGHT 0x00 
....................  
.................... #define En 0B00000100  // Enable bit 
.................... #define Rw 0B00000010  // Read/Write bit 
.................... #define Rs 0B00000001  // Register select bit 
....................  
.................... void write4bits(usi8 value); 
.................... void expanderWrite(usi8 _data); 
.................... void pulseEnable(usi8 _data); 
.................... void lcd_command(usi8 value); 
.................... void lcd_display(); 
.................... void lcd_clear(); 
.................... void lcd_home(); 
.................... void lcd_send(usi8 value, usi8 mode); 
.................... void lcd_data(usi8 value); 
....................  
.................... usi8 _displayfunction; 
.................... usi8 _displaycontrol; 
.................... usi8 _displaymode; 
.................... usi8 _numlines; 
.................... usi8 _cols; 
.................... usi8 _rows; 
.................... usi8 _backlightval; 
....................  
.................... void lcd_init(){ 
....................    _cols = lcd_cols; // 16 
*
0138:  MOVLW  10
0139:  MOVWF  37
....................    _rows = lcd_rows; // 2 
013A:  MOVLW  02
013B:  MOVWF  38
....................    _backlightval = LCD_NOBACKLIGHT; // back light is off 
013C:  CLRF   39
....................     
....................    i2c_setup_write(); // setup i2c 
....................    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS; 
*
0162:  CLRF   33
....................     
....................    _displayfunction |= LCD_2LINE; 
0163:  BSF    33.3
....................    _numlines = _rows; // 2 
0164:  MOVF   38,W
0165:  MOVWF  36
....................     
....................    delay_ms(40); 
0166:  MOVLW  28
0167:  MOVWF  42
0168:  CALL   09E
....................     
....................    expanderWrite(_backlightval); // back light is on 
0169:  MOVF   39,W
016A:  MOVWF  4F
016B:  CALL   0B2
....................    delay_ms(100); 
016C:  MOVLW  64
016D:  MOVWF  42
016E:  CALL   09E
....................     
....................    /* 
....................    It is try to set use 4bit in 3 time 
....................    write4bits(0x03 << 4); 
....................    delay_ms(5); 
....................     
....................    write4bits(0x03 << 4); 
....................    delay_ms(5); 
....................     
....................    write4bits(0x03 << 4); 
....................    delay_ms(5); 
....................    */ 
....................     
....................    write4bits(0x02 << 4); // set using 4bit for lcd16x2 
016F:  MOVLW  20
0170:  MOVWF  4C
0171:  CALL   0FE
....................     
....................    lcd_command(LCD_FUNCTIONSET | _displayfunction); 
0172:  MOVF   33,W
0173:  IORLW  20
0174:  MOVWF  3C
0175:  MOVWF  46
0176:  CALL   12C
....................     
....................    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF; 
0177:  MOVLW  04
0178:  MOVWF  34
....................    lcd_display(); 
....................     
....................    lcd_clear(); 
*
017F:  CALL   131
....................     
....................    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT; 
0180:  MOVLW  02
0181:  MOVWF  35
....................    lcd_command(LCD_ENTRYMODESET | _displaymode); 
0182:  MOVF   35,W
0183:  IORLW  04
0184:  MOVWF  3C
0185:  MOVWF  46
0186:  CALL   12C
....................     
....................    lcd_home(); 
*
018D:  BCF    0A.3
018E:  BCF    0A.4
018F:  GOTO   406 (RETURN)
.................... } 
....................  
.................... void lcd_clear(){ 
....................    lcd_command(LCD_CLEARDISPLAY); 
*
0131:  MOVLW  01
0132:  MOVWF  46
0133:  CALL   12C
....................    delay_ms(20); 
0134:  MOVLW  14
0135:  MOVWF  42
0136:  CALL   09E
0137:  RETURN
.................... } 
....................  
.................... void lcd_home(){ 
....................    lcd_command(LCD_RETURNHOME); 
*
0187:  MOVLW  02
0188:  MOVWF  46
0189:  CALL   12C
....................    delay_ms(20); 
018A:  MOVLW  14
018B:  MOVWF  42
018C:  CALL   09E
.................... } 
....................  
.................... void lcd_setCursor(usi8 col, usi8 row){ 
....................    int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 }; 
*
0190:  CLRF   41
0191:  MOVLW  40
0192:  MOVWF  42
0193:  MOVLW  14
0194:  MOVWF  43
0195:  MOVLW  54
0196:  MOVWF  44
....................    if ( row > _numlines ) { 
0197:  MOVF   40,W
0198:  SUBWF  36,W
0199:  BTFSC  03.0
019A:  GOTO   19E
....................       row = _numlines-1; 
019B:  MOVLW  01
019C:  SUBWF  36,W
019D:  MOVWF  40
....................    } 
....................    lcd_command(LCD_SETDDRAMADDR | (col + row_offsets[row])); 
019E:  MOVLW  41
019F:  ADDWF  40,W
01A0:  MOVWF  04
01A1:  BCF    03.7
01A2:  MOVF   00,W
01A3:  ADDWF  3F,W
01A4:  IORLW  80
01A5:  MOVWF  45
01A6:  MOVWF  46
01A7:  CALL   12C
01A8:  RETURN
.................... } 
....................  
.................... void lcd_display() { 
....................    _displaycontrol |= LCD_DISPLAYON; 
*
0179:  BSF    34.2
....................    lcd_command(LCD_DISPLAYCONTROL | _displaycontrol); 
017A:  MOVF   34,W
017B:  IORLW  08
017C:  MOVWF  3C
017D:  MOVWF  46
017E:  CALL   12C
.................... } 
....................  
.................... void lcd_command(usi8 value){ 
....................    lcd_send(value,0); 
*
012C:  MOVF   46,W
012D:  MOVWF  47
012E:  CLRF   48
012F:  CALL   117
0130:  RETURN
.................... } 
....................  
.................... void lcd_data(usi8 value){ 
....................    lcd_send(value,Rs); 
*
01A9:  MOVF   42,W
01AA:  MOVWF  47
01AB:  MOVLW  01
01AC:  MOVWF  48
01AD:  CALL   117
01AE:  RETURN
.................... } 
....................  
.................... void lcd_send(usi8 value, usi8 mode) { 
*
0117:  MOVF   47,W
0118:  ANDLW  F0
0119:  MOVWF  49
011A:  SWAPF  47,W
011B:  MOVWF  77
011C:  MOVLW  F0
011D:  ANDWF  77,F
011E:  MOVF   77,W
011F:  ANDLW  F0
0120:  MOVWF  4A
....................    usi8 highnib=value&0xf0; 
....................    usi8 lownib=(value<<4)&0xf0; 
....................    write4bits((highnib)|mode); 
0121:  MOVF   49,W
0122:  IORWF  48,W
0123:  MOVWF  4B
0124:  MOVWF  4C
0125:  CALL   0FE
....................    write4bits((lownib)|mode);  
0126:  MOVF   4A,W
0127:  IORWF  48,W
0128:  MOVWF  4B
0129:  MOVWF  4C
012A:  CALL   0FE
012B:  RETURN
.................... } 
....................  
.................... void write4bits(usi8 value) { 
....................    expanderWrite(value); 
*
00FE:  MOVF   4C,W
00FF:  MOVWF  4F
0100:  CALL   0B2
....................    pulseEnable(value); 
0101:  MOVF   4C,W
0102:  MOVWF  4D
*
0116:  RETURN
.................... } 
....................  
.................... void expanderWrite(usi8 _data){ 
....................    i2c_write_1byte(_data|_backlightval); 
*
00B2:  MOVF   4F,W
00B3:  IORWF  39,W
00B4:  MOVWF  50
00B5:  MOVF   50,W
00B6:  MOVWF  51
*
00FC:  BCF    03.5
00FD:  RETURN
.................... } 
....................  
.................... void pulseEnable(usi8 _data){ 
....................    expanderWrite(_data | En); 
*
0103:  MOVF   4D,W
0104:  IORLW  04
0105:  MOVWF  4E
0106:  MOVWF  4F
0107:  CALL   0B2
....................    delay_us(1); 
0108:  GOTO   109
0109:  GOTO   10A
010A:  NOP
....................    expanderWrite(_data & ~En); 
010B:  MOVF   4D,W
010C:  ANDLW  FB
010D:  MOVWF  4E
010E:  MOVWF  4F
010F:  CALL   0B2
....................    delay_us(50); 
0110:  MOVLW  52
0111:  MOVWF  77
0112:  DECFSZ 77,F
0113:  GOTO   112
0114:  GOTO   115
0115:  NOP
.................... } 
....................  
.................... /* Library modify in User*/ 
.................... void lcd_log_info(usi16 time_s, bool ena_time){ 
....................    lcd_setCursor(1,0); 
*
0205:  MOVLW  01
0206:  MOVWF  3F
0207:  CLRF   40
0208:  CALL   190
....................    lcd_data("Do an 1 - HKII"); 
0209:  MOVLW  04
020A:  BSF    03.6
020B:  MOVWF  0D
020C:  MOVLW  00
020D:  MOVWF  0F
020E:  BCF    03.6
020F:  CALL   1AF
....................    lcd_setCursor(3,1); 
0210:  MOVLW  03
0211:  MOVWF  3F
0212:  MOVLW  01
0213:  MOVWF  40
0214:  CALL   190
....................    lcd_data("SPKT-TPHCM"); 
0215:  MOVLW  0C
0216:  BSF    03.6
0217:  MOVWF  0D
0218:  MOVLW  00
0219:  MOVWF  0F
021A:  BCF    03.6
021B:  CALL   1AF
....................    if(ena_time == enable){ 
021C:  DECFSZ 3E,W
021D:  GOTO   24C
....................       delay_ms(time_s*1000); 
021E:  MOVF   3D,W
021F:  MOVWF  40
0220:  MOVF   3C,W
0221:  MOVWF  3F
0222:  MOVLW  03
0223:  MOVWF  42
0224:  MOVLW  E8
0225:  MOVWF  41
*
023A:  MOVF   79,W
023B:  MOVWF  40
023C:  MOVF   78,W
023D:  MOVWF  3F
023E:  MOVF   79,W
023F:  MOVWF  41
0240:  INCF   41,F
0241:  DECF   41,F
0242:  BTFSC  03.2
0243:  GOTO   248
0244:  MOVLW  FF
0245:  MOVWF  42
0246:  CALL   09E
0247:  GOTO   241
0248:  MOVF   3F,W
0249:  MOVWF  42
024A:  CALL   09E
....................       lcd_clear(); 
024B:  CALL   131
....................    } 
024C:  BCF    0A.3
024D:  BCF    0A.4
024E:  GOTO   40B (RETURN)
.................... } 
.................... void lcd_dis_2num_dot(usi16 dt, int8 x, int8 y, bool is_xvn, bool is_dot){ 
....................    usi8 ch, dv; 
....................    lcd_setCursor(x, y); 
....................    ch = dt/10 + 0x30; 
....................    dv = dt%10 + 0x30; 
....................    if(is_xvn = enable) if(ch == 0x30) ch = " "; 
....................    if(is_dot == enable) lcd_data("."); 
....................    lcd_data(ch); lcd_data(dv); 
.................... } 
.................... void lcd_dis_3num_dot(usi16 dt, int8 x, int8 y, bool is_xvn, bool is_dot){ 
....................    usi8 tr, ch, dv; 
....................    lcd_setCursor(x, y); //xxx /10 -> xx  
....................    tr = dt/100 + 0x30;  
....................    ch = dt/10%10  + 0x30; 
....................    dv = dt%10     + 0x30; 
....................    if(is_xvn = enable) if(tr == 0x30){ 
....................       tr = " "; 
....................       if(ch == 0x30) ch = " "; 
....................    } 
....................    if(is_dot == enable) lcd_data("."); 
....................    lcd_data(tr); lcd_data(ch); lcd_data(dv); 
.................... } 
....................  
.................... void lcd_dis_hh_pp_ss(usi8 x, usi8 y, usi8 hh, usi8 pp, usi8 ss){ 
....................    usi8 hh_ch, hh_dv, pp_ch, pp_dv, ss_ch, ss_dv; 
....................    hh_ch = hh/10 + 0x30; hh_dv = hh%10 + 0x30; 
....................    pp_ch = pp/10 + 0x30; pp_dv = pp%10 + 0x30; 
....................    ss_ch = ss/10 + 0x30; ss_dv = ss%10 + 0x30; 
....................    lcd_setCursor(x, y); 
....................    lcd_data(hh_ch); lcd_data(hh_dv); lcd_data("-"); 
....................    lcd_data(pp_ch); lcd_data(pp_dv); lcd_data("-"); 
....................    lcd_data(ss_ch); lcd_data(ss_dv); 
.................... } 
....................  
.................... //#include <thu_vien_dk_servo.c> 
.................... #define touch_pin pin_a0 
.................... #define DS18B20_PIN touch_pin 
....................  
.................... #include <touch.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                        Dallas Touch Driver                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////  data = touch_read_bit()     Reads one bit from a touch device    //// 
.................... ////                                                                   //// 
.................... ////  data = touch_read_BYTE()    Reads one byte from a touch device.  //// 
.................... ////                                                                   //// 
.................... ////  ok = touch_write_bit(data)  Writes one bit to a touch device     //// 
.................... ////                              and returns true if all went ok.     //// 
.................... ////                              A false indicates a collision with   //// 
.................... ////                              another device.                      //// 
.................... ////                                                                   //// 
.................... ////  ok = touch_write_byte(data) Writes one byte to a touch device    //// 
.................... ////                              and returns true if all went ok.     //// 
.................... ////                              A false indicates a collision with   //// 
.................... ////                              another device.                      //// 
.................... ////                                                                   //// 
.................... ////  present = touch_present()   Issues a reset and returns true      //// 
.................... ////                              if the touch device is there.        //// 
.................... ////                                                                   //// 
.................... ////  reset_pulse()               Issues a reset and waits for a       //// 
.................... ////                              present pulse.                       //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef  TOUCH_C 
.................... #define  TOUCH_C 
....................  
.................... #ifndef TOUCH_PIN 
....................    #define TOUCH_PIN  PIN_B0 
.................... #endif 
....................  
.................... #define TOUCH_PIN_LOW()    output_drive(TOUCH_PIN); output_low(TOUCH_PIN) 
.................... #define TOUCH_PIN_HIGH()    output_drive(TOUCH_PIN); output_high(TOUCH_PIN) 
.................... #define TOUCH_PIN_FLOAT()  output_float(TOUCH_PIN) 
.................... #define TOUCH_PIN_READ()      input_state(TOUCH_PIN) 
....................  
.................... ///////////////////////////// 
.................... ////                     //// 
.................... //// Function Prototypes //// 
.................... ////                     //// 
.................... ///////////////////////////// 
....................  
.................... /* 
.................... int1 touch_read_bit() 
.................... This will read back a bit from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A bit from the DS1993 
.................... */ 
.................... int1 touch_read_bit(); 
....................  
.................... /* 
.................... BYTE touch_read_byte() 
.................... This will read back a byte from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A byte from the DS1993 
.................... */ 
.................... BYTE touch_read_byte(); 
....................  
.................... /* 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... This will write a bit to the DS1993 
.................... PARAMS: The bit to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_bit(int1 data); 
....................  
.................... /* 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... This will write a byte to the DS1993 
.................... PARAMS: The byte to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_byte(BYTE data); 
....................  
.................... /* 
.................... BOOLEAN touch_present() 
.................... This will evaluate whether or not there is a touch present on the DS1993 
.................... PARAMS: none 
.................... RETURNS: True if a touch is present, false if otherwise 
.................... */ 
.................... BOOLEAN touch_present(); 
....................  
.................... /* 
.................... void reset_pulse() 
.................... This will send the DS1993 a reset pulse 
.................... PARAMS: none 
.................... RETURNS: none 
.................... */ 
.................... void reset_pulse(); 
....................  
.................... ////////////////////////////////// 
.................... ////                          //// 
.................... //// Function Implementations //// 
.................... ////                          //// 
.................... ////////////////////////////////// 
....................  
.................... /* 
.................... int1 touch_read_bit() 
.................... This will read back a bit from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A bit from the DS1993 
.................... */ 
.................... int1 touch_read_bit() 
.................... { 
....................    int1 data; 
....................  
....................    TOUCH_PIN_LOW(); 
....................    delay_us(14); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................    data = TOUCH_PIN_READ(); 
....................    delay_us(100); 
....................  
....................    return data; 
.................... } 
....................  
.................... /* 
.................... BYTE touch_read_byte() 
.................... This will read back a byte from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A byte from the DS1993 
.................... */ 
.................... BYTE touch_read_byte() 
.................... { 
....................    BYTE i,data; 
....................  
....................    for(i=1; i <= 8; ++i) 
....................       shift_right(&data, 1, touch_read_bit()); 
....................  
....................    return data; 
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... This will write a bit to the DS1993 
.................... PARAMS: The bit to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... { 
....................    TOUCH_PIN_LOW(); 
....................    delay_us(10); 
....................    if(data) 
....................    { 
....................       TOUCH_PIN_HIGH(); 
....................       delay_us(10); 
....................       if(!TOUCH_PIN_READ()) 
....................          return FALSE; 
....................    } 
....................    else 
....................    { 
....................       TOUCH_PIN_LOW(); 
....................       delay_us(10); 
....................       if(TOUCH_PIN_READ()) 
....................          return FALSE; 
....................    } 
....................    delay_us(50); 
....................    TOUCH_PIN_HIGH(); 
....................    delay_us(50); 
....................    return TRUE; 
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... This will write a byte to the DS1993 
.................... PARAMS: The byte to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... { 
....................    BYTE i; 
....................  
....................    for(i=1; i<=8; ++i) 
....................       if(!touch_write_bit(shift_right(&data, 1, 0))) 
....................          return FALSE; 
....................  
....................    return TRUE; 
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_present() 
.................... This will evaluate whether or not there is a touch present on the DS1993 
.................... PARAMS: none 
.................... RETURNS: True if a touch is present, false if otherwise 
.................... */ 
.................... BOOLEAN touch_present() 
.................... { 
....................    BOOLEAN present; 
....................    TOUCH_PIN_LOW(); 
....................    delay_us(500); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................  
....................    if(!TOUCH_PIN_READ()) 
....................       return FALSE; 
....................  
....................    delay_us(65); 
....................    present = !TOUCH_PIN_READ(); 
....................    delay_us(240); 
....................    return present; 
.................... } 
....................  
.................... /* 
.................... void reset_pulse() 
.................... This will send the DS1993 a reset pulse 
.................... PARAMS: none 
.................... RETURNS: none 
.................... */ 
.................... void reset_pulse() 
.................... { 
....................    TOUCH_PIN_LOW(); 
....................    delay_us(500); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................    while(!touch_present()); 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #define search_rom       0xf0 
.................... #define read_rom         0x33 
.................... #define match_rom        0x55 
.................... #define skip_rom         0xcc 
.................... #define alarm_search     0xec 
.................... #define read_scratchpad  0xbe 
.................... #define write_scratchpad 0x4e 
.................... #define copy_scratchpad  0x48 
.................... #define convert_t        0x44 
.................... /* 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................          CACH 1 SU DUNG THU VIEN TOUCH.C 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... */ 
.................... void ds18b20_no_ds18b(usi8 x, y) 
.................... { 
....................    lcd_setCursor(x, y); 
....................    lcd_data("NO DS18B20"); 
.................... } 
....................  
.................... void ds18b20_khoi_tao() 
.................... { 
....................    touch_present(); 
....................    touch_write_byte(skip_rom); 
....................    touch_write_byte(write_scratchpad); 
....................    touch_write_byte(0x0); 
....................    touch_write_byte(0x0); 
....................    touch_write_byte(0x7f); // 12 bit 
....................  
....................    touch_present(); 
....................    touch_write_byte(skip_rom); 
....................    touch_write_byte(convert_t); 
.................... } 
....................  
.................... usi16 ds18b20_read_temp_c1() 
.................... { 
....................    usi8 bl, bh; 
....................    usi16 w; 
....................    touch_write_byte(skip_rom); 
....................    touch_write_byte(read_scratchpad); 
....................    bl = touch_read_byte(); 
....................    bh = touch_read_byte(); 
....................    w = make16(bh, bl); 
....................    touch_present(); 
....................    touch_write_byte(skip_rom); 
....................    touch_write_byte(convert_t); 
....................    return w; 
.................... } 
....................  
.................... void ds18b20_doc_rom(usi8 time_s) 
.................... { 
....................    usi8 rom_code[8]; 
....................    usi8 xh, xl; 
....................    si8 i; 
....................    if (touch_present()) 
....................    { 
....................       touch_write_byte(read_rom); 
....................       for (i = 0; i < 8; i++) 
....................          rom_code[i] = touch_read_byte(); 
....................       lcd_setCursor(0, 0); 
....................       lcd_data("CO DS18B20"); 
....................       lcd_setCursor(0, 1); 
....................       for (i = 7; i > -1; i--) 
....................       { 
....................          xh = rom_code[i] / 16; 
....................          if (xh > 9) 
....................             xh = xh + 0x37; 
....................          else 
....................             xh = xh + 0x30; 
....................          xl = rom_code[i] % 16; 
....................          if (xl > 9) 
....................             xl = xl + 0x37; 
....................          else 
....................             xl = xl + 0x30; 
....................          lcd_data(xh); 
....................          lcd_data(xl); 
....................       } 
....................    } 
....................    else 
....................       ds18b20_no_ds18b(0, 0); 
....................    delay_ms(time_s * 1000); 
....................    lcd_clear(); 
.................... } 
.................... /* 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................          CACH 2 KHONG SU DUNG THU VIEN TOUCH.C 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... */ 
.................... bool ds18b20_start(){ 
....................    output_low(DS18B20_PIN); 
....................    output_drive(DS18B20_PIN); 
....................    delay_us(500); 
....................    output_float(DS18B20_PIN); 
....................    delay_us(100); 
....................    if(!input(DS18B20_PIN)){ 
....................       delay_us(400); 
....................       return true; 
....................    } 
....................    return false; 
.................... } 
....................  
.................... void ds18b20_write_bit(bool value){ 
....................    output_low(DS18B20_PIN); 
....................    output_drive(DS18B20_PIN); 
....................    delay_us(2); 
....................    output_bit(DS18B20_PIN, value); 
....................    delay_us(80); 
....................    output_float(DS18B20_PIN); 
....................    delay_us(2); 
.................... } 
....................  
.................... void ds18b20_write_byte(int8 value){ 
....................    for(int8 i = 0; i < 8; i++) 
....................       ds18b20_write_bit(bit_test(value,i)); 
.................... } 
....................  
.................... bool ds18b20_read_bit(){ 
....................    bool value; 
....................    output_low(DS18B20_PIN); 
....................    output_drive(DS18B20_PIN); 
....................    delay_us(2); 
....................    output_float(DS18B20_PIN); 
....................    delay_us(5); 
....................    value = input(DS18B20_PIN); 
....................    delay_us(100); 
....................    return value; 
.................... } 
....................  
.................... int8 ds18b20_read_byte(){ 
....................    int8 value = 0; 
....................    for(int8 i = 0; i < 8; i++) 
....................       shift_right(&value,1,ds18b20_read_bit()); 
....................    return value; 
.................... } 
....................  
.................... bool ds18b20_read_temp_c2(int16 *raw_temp_value){ 
....................    if(!ds18b20_start()) 
....................       return false; 
....................    ds18b20_write_byte(skip_rom); 
....................    ds18b20_write_byte(convert_t); 
....................    while(ds18b20_read_byte() == 0); 
....................    if(!ds18b20_start()) 
....................       return false; 
....................    ds18b20_write_byte(skip_rom); 
....................    ds18b20_write_byte(read_scratchpad); 
....................    *raw_temp_value = ds18b20_read_byte(); 
....................    *raw_temp_value |= (int16)(ds18b20_read_byte()) << 8; 
....................    return true; 
.................... } 
.................... /* 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................    HIEN THI NHIET DO LEN LCD 2 SO NGUYEN VA 3 SO THAP PHAN 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... */ 
.................... void ds18b20_lcd_data(usi16 data, int8 x, int8 y){ 
....................    usi8 dt_ng, dt_ngt; 
....................    usi16 dt_tp, dt_tpt; 
....................    usi16 dt_tp_real; 
....................    dt_ng = data>>4; 
....................    dt_tp = data & 0x000f; 
....................    if(dt_ngt != dt_ng){ 
....................       dt_ngt = dt_ng; 
....................       lcd_dis_2num_dot(dt_ng, x, y, enable, disable); 
....................    } 
....................    if(dt_tpt != dt_tp){ 
....................       dt_tpt = dt_tp; 
....................       dt_tp_real = (dt_tp*625)/10; 
....................       lcd_dis_3num_dot(dt_tp_real, x+2, y, enable, enable); 
....................    } 
.................... } 
....................  
....................  
....................  
.................... si16 tempt; 
.................... void main(){ 
*
03BF:  MOVF   03,W
03C0:  ANDLW  1F
03C1:  MOVWF  03
03C2:  MOVLW  FF
03C3:  MOVWF  20
03C4:  BSF    03.5
03C5:  BSF    03.6
03C6:  BSF    07.3
03C7:  MOVLW  08
03C8:  BCF    03.6
03C9:  MOVWF  19
03CA:  MOVLW  02
03CB:  MOVWF  1A
03CC:  MOVLW  A6
03CD:  MOVWF  18
03CE:  MOVLW  90
03CF:  BCF    03.5
03D0:  MOVWF  18
03D1:  BSF    03.5
03D2:  BSF    03.6
03D3:  MOVF   09,W
03D4:  ANDLW  C0
03D5:  MOVWF  09
03D6:  BCF    03.6
03D7:  BCF    1F.4
03D8:  BCF    1F.5
03D9:  MOVLW  00
03DA:  BSF    03.6
03DB:  MOVWF  08
03DC:  BCF    03.5
03DD:  CLRF   07
03DE:  CLRF   08
03DF:  CLRF   09
03E0:  BCF    03.7
....................    set_up_port(); 
*
0404:  GOTO   022
....................    lcd_init(); 
0405:  GOTO   138
....................    lcd_log_info(1,enable); 
0406:  CLRF   3D
0407:  MOVLW  01
0408:  MOVWF  3C
0409:  MOVWF  3E
040A:  GOTO   205
....................    ds1307_init(); 
040B:  GOTO   363
....................    while(true){ 
....................       // read temperature 
....................       //if(ds18b20_read_temp_c2(&tempt)) 
....................       //   ds18b20_lcd_data(tempt,0,1); 
....................       //else ds18b20_no_ds18b(0,1); 
....................        
....................       // time ds1307 
....................       ds1307_read_dec_time(8); 
040C:  MOVLW  08
040D:  MOVWF  3D
040E:  CALL   2A3
040F:  GOTO   40C
....................    } 
.................... }   
0410:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
