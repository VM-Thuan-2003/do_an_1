CCS PCM C Compiler, Version 5.115, 43599               03-May-24 07:55

               Filename:   E:\STUDY\HKII-2023-2024\DO_AN_1\PROJECT\CODE\code_do_an_1.lst

               ROM used:   3547 words (43%)
                           Largest free fragment is 2048
               RAM used:   68 (18%) at main() level
                           111 (30%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   078
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.0
002A:  GOTO   02D
002B:  BTFSC  0C.0
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   051
.................... #include <thu_vien_do_an_1.c>
.................... /*
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
....................                        SU PHAM KY THUAT - TP.HCM
....................  DO AN 1 - HIEU CHINH NHIET DO HO CA VA CHO CA AN TU DONG - KET NOI ESP
.................... 
....................    THANH VIEN:
....................       VO MINH THUAN   - 21161366
....................       LE QUANG THUONG - 21161367
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... */
.................... #include <define_pic_16f877a.c>
.................... #include <16f877a.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
*
0066:  DATA C4,37
0067:  DATA A0,30
0068:  DATA 6E,10
0069:  DATA 31,10
006A:  DATA 2D,10
006B:  DATA C8,25
006C:  DATA C9,24
006D:  DATA 00,00
006E:  DATA 53,28
006F:  DATA 4B,2A
0070:  DATA 2D,2A
0071:  DATA 50,24
0072:  DATA C3,26
0073:  DATA 00,00
0074:  DATA 2E,00
0075:  DATA 2E,00
0076:  DATA 2D,00
0077:  DATA 2D,00
0078:  DATA A0,16
0079:  DATA 20,00
007A:  DATA EE,3A
007B:  DATA 74,10
007C:  DATA 30,00
007D:  DATA EE,3A
007E:  DATA 74,10
007F:  DATA 31,00
0080:  DATA EE,3A
0081:  DATA 74,10
0082:  DATA 32,00
0083:  DATA EE,3A
0084:  DATA 74,10
0085:  DATA 33,00
0086:  DATA 20,27
0087:  DATA 20,00
0088:  DATA 47,28
0089:  DATA 47,00
008A:  DATA 4E,2A
008B:  DATA 4E,00
008C:  DATA 20,2A
008D:  DATA 20,00
008E:  DATA DF,2F
008F:  DATA 00,00
0090:  DATA DF,2F
0091:  DATA 00,00
0092:  DATA CE,27
0093:  DATA 20,22
0094:  DATA D3,18
0095:  DATA 38,21
0096:  DATA 32,18
0097:  DATA 00,00
0098:  DATA C3,27
0099:  DATA 20,22
009A:  DATA D3,18
009B:  DATA 38,21
009C:  DATA 32,18
009D:  DATA 00,00
009E:  DATA 4E,22
009F:  DATA 3A,10
00A0:  DATA 00,01
00A1:  DATA A0,37
00A2:  DATA 43,00
00A3:  DATA 4E,22
00A4:  DATA 3A,10
00A5:  DATA 00,01
00A6:  DATA A0,37
00A7:  DATA 43,00
00A8:  DATA 47,24
00A9:  DATA 5F,27
00AA:  DATA 44,1D
00AB:  DATA 20,00
00AC:  DATA A0,37
00AD:  DATA 43,00
00AE:  DATA E3,30
00AF:  DATA 69,10
00B0:  DATA E4,30
00B1:  DATA 74,10
00B2:  DATA E4,37
00B3:  DATA EE,33
00B4:  DATA 20,34
00B5:  DATA 6F,00
00B6:  DATA F4,17
00B7:  DATA 67,10
00B8:  DATA 63,34
00B9:  DATA 6F,10
00BA:  DATA E3,30
00BB:  DATA A0,30
00BC:  DATA 6E,00
00BD:  DATA 63,34
00BE:  DATA E5,31
00BF:  DATA 6B,10
00C0:  DATA E3,37
00C1:  DATA 6D,10
00C2:  DATA E5,39
00C3:  DATA 70,00
00C4:  DATA E8,32
00C5:  DATA 6C,36
00C6:  DATA 6F,05
00C7:  DATA 00,00
00C8:  DATA 49,37
00C9:  DATA E6,37
00CA:  DATA F2,36
00CB:  DATA 61,3A
00CC:  DATA E9,37
00CD:  DATA 6E,00
00CE:  DATA D6,32
00CF:  DATA F2,39
00D0:  DATA E9,37
00D1:  DATA 6E,1D
00D2:  DATA 20,2B
00D3:  DATA 31,17
00D4:  DATA 30,17
00D5:  DATA 30,00
*
03DC:  CLRF   78
03DD:  CLRF   79
03DE:  CLRF   77
03DF:  CLRF   7A
03E0:  MOVF   6D,W
03E1:  BTFSS  03.2
03E2:  GOTO   3E6
03E3:  MOVF   6C,W
03E4:  BTFSC  03.2
03E5:  GOTO   400
03E6:  MOVLW  10
03E7:  MOVWF  6E
03E8:  BCF    03.0
03E9:  RLF    6A,F
03EA:  RLF    6B,F
03EB:  RLF    77,F
03EC:  RLF    7A,F
03ED:  MOVF   6D,W
03EE:  SUBWF  7A,W
03EF:  BTFSS  03.2
03F0:  GOTO   3F3
03F1:  MOVF   6C,W
03F2:  SUBWF  77,W
03F3:  BTFSS  03.0
03F4:  GOTO   3FC
03F5:  MOVF   6C,W
03F6:  SUBWF  77,F
03F7:  BTFSS  03.0
03F8:  DECF   7A,F
03F9:  MOVF   6D,W
03FA:  SUBWF  7A,F
03FB:  BSF    03.0
03FC:  RLF    78,F
03FD:  RLF    79,F
03FE:  DECFSZ 6E,F
03FF:  GOTO   3E8
0400:  RETURN
*
0478:  MOVLW  10
0479:  MOVWF  63
047A:  CLRF   77
047B:  CLRF   7A
047C:  RRF    60,F
047D:  RRF    5F,F
047E:  BTFSS  03.0
047F:  GOTO   486
0480:  MOVF   61,W
0481:  ADDWF  77,F
0482:  BTFSC  03.0
0483:  INCF   7A,F
0484:  MOVF   62,W
0485:  ADDWF  7A,F
0486:  RRF    7A,F
0487:  RRF    77,F
0488:  RRF    79,F
0489:  RRF    78,F
048A:  DECFSZ 63,F
048B:  GOTO   47C
*
049F:  MOVF   62,W
04A0:  ANDLW  07
04A1:  MOVWF  77
04A2:  RRF    62,W
04A3:  MOVWF  78
04A4:  RRF    78,F
04A5:  RRF    78,F
04A6:  MOVLW  1F
04A7:  ANDWF  78,F
04A8:  MOVF   78,W
04A9:  ADDWF  64,W
04AA:  MOVWF  04
04AB:  BCF    03.7
04AC:  BTFSC  65.0
04AD:  BSF    03.7
04AE:  CLRF   78
04AF:  INCF   78,F
04B0:  INCF   77,F
04B1:  GOTO   4B3
04B2:  RLF    78,F
04B3:  DECFSZ 77,F
04B4:  GOTO   4B2
04B5:  MOVF   63,F
04B6:  BTFSC  03.2
04B7:  GOTO   4BB
04B8:  MOVF   78,W
04B9:  IORWF  00,F
04BA:  GOTO   4BE
04BB:  COMF   78,F
04BC:  MOVF   78,W
04BD:  ANDWF  00,F
04BE:  RETURN
04BF:  MOVF   62,W
04C0:  ANDLW  07
04C1:  MOVWF  77
04C2:  RRF    62,W
04C3:  MOVWF  78
04C4:  RRF    78,F
04C5:  RRF    78,F
04C6:  MOVLW  1F
04C7:  ANDWF  78,F
04C8:  MOVF   78,W
04C9:  ADDWF  63,W
04CA:  MOVWF  04
04CB:  BCF    03.7
04CC:  BTFSC  64.0
04CD:  BSF    03.7
04CE:  MOVF   00,W
04CF:  MOVWF  78
04D0:  INCF   77,F
04D1:  GOTO   4D3
04D2:  RRF    78,F
04D3:  DECFSZ 77,F
04D4:  GOTO   4D2
04D5:  MOVLW  01
04D6:  ANDWF  78,F
04D7:  RETURN
*
0514:  CLRF   77
0515:  CLRF   78
0516:  MOVF   65,W
0517:  BCF    03.0
0518:  BTFSC  66.0
0519:  ADDWF  77,F
051A:  RRF    77,F
051B:  RRF    78,F
051C:  BTFSC  66.1
051D:  ADDWF  77,F
051E:  RRF    77,F
051F:  RRF    78,F
0520:  BTFSC  66.2
0521:  ADDWF  77,F
0522:  RRF    77,F
0523:  RRF    78,F
0524:  BTFSC  66.3
0525:  ADDWF  77,F
0526:  RRF    77,F
0527:  RRF    78,F
0528:  BTFSC  66.4
0529:  ADDWF  77,F
052A:  RRF    77,F
052B:  RRF    78,F
052C:  BTFSC  66.5
052D:  ADDWF  77,F
052E:  RRF    77,F
052F:  RRF    78,F
0530:  BTFSC  66.6
0531:  ADDWF  77,F
0532:  RRF    77,F
0533:  RRF    78,F
0534:  BTFSC  66.7
0535:  ADDWF  77,F
0536:  RRF    77,F
0537:  RRF    78,F
0538:  RETURN
*
054A:  MOVF   74,W
054B:  CLRF   78
054C:  SUBWF  73,W
054D:  BTFSC  03.0
054E:  GOTO   552
054F:  MOVF   73,W
0550:  MOVWF  77
0551:  GOTO   55E
0552:  CLRF   77
0553:  MOVLW  08
0554:  MOVWF  75
0555:  RLF    73,F
0556:  RLF    77,F
0557:  MOVF   74,W
0558:  SUBWF  77,W
0559:  BTFSC  03.0
055A:  MOVWF  77
055B:  RLF    78,F
055C:  DECFSZ 75,F
055D:  GOTO   555
055E:  RETURN
*
0597:  MOVF   0B,W
0598:  MOVWF  73
0599:  BCF    0B.7
059A:  BSF    03.5
059B:  BSF    03.6
059C:  BSF    0C.7
059D:  BSF    0C.0
059E:  NOP
059F:  NOP
05A0:  BTFSS  73.7
05A1:  GOTO   5A7
05A2:  BCF    03.5
05A3:  BCF    03.6
05A4:  BSF    0B.7
05A5:  BSF    03.5
05A6:  BSF    03.6
05A7:  BCF    03.5
05A8:  MOVF   0C,W
05A9:  ANDLW  7F
05AA:  BTFSC  03.2
05AB:  GOTO   5E5
05AC:  MOVWF  73
05AD:  MOVF   0D,W
05AE:  MOVWF  74
05AF:  MOVF   0F,W
05B0:  MOVWF  75
05B1:  MOVF   73,W
05B2:  MOVWF  76
05B3:  BCF    03.6
05B4:  CALL   57A
05B5:  MOVF   74,W
05B6:  BSF    03.6
05B7:  MOVWF  0D
05B8:  MOVF   75,W
05B9:  MOVWF  0F
05BA:  BCF    03.6
05BB:  MOVF   0B,W
05BC:  MOVWF  76
05BD:  BCF    0B.7
05BE:  BSF    03.5
05BF:  BSF    03.6
05C0:  BSF    0C.7
05C1:  BSF    0C.0
05C2:  NOP
05C3:  NOP
05C4:  BTFSS  76.7
05C5:  GOTO   5CB
05C6:  BCF    03.5
05C7:  BCF    03.6
05C8:  BSF    0B.7
05C9:  BSF    03.5
05CA:  BSF    03.6
05CB:  BCF    03.5
05CC:  RLF    0C,W
05CD:  RLF    0E,W
05CE:  ANDLW  7F
05CF:  BTFSC  03.2
05D0:  GOTO   5E5
05D1:  MOVWF  73
05D2:  MOVF   0D,W
05D3:  MOVWF  74
05D4:  MOVF   0F,W
05D5:  MOVWF  75
05D6:  MOVF   73,W
05D7:  MOVWF  76
05D8:  BCF    03.6
05D9:  CALL   57A
05DA:  MOVF   74,W
05DB:  BSF    03.6
05DC:  MOVWF  0D
05DD:  MOVF   75,W
05DE:  MOVWF  0F
05DF:  INCF   0D,F
05E0:  BTFSC  03.2
05E1:  INCF   0F,F
05E2:  BCF    03.6
05E3:  GOTO   597
05E4:  BSF    03.6
05E5:  BCF    03.6
05E6:  RETURN
*
081E:  MOVF   5F,W
081F:  XORWF  60,W
0820:  ANDLW  80
0821:  MOVWF  62
0822:  BTFSS  5F.7
0823:  GOTO   026
0824:  COMF   5F,F
0825:  INCF   5F,F
0826:  BTFSS  60.7
0827:  GOTO   02A
0828:  COMF   60,F
0829:  INCF   60,F
082A:  MOVF   60,W
082B:  CLRF   78
082C:  SUBWF  5F,W
082D:  BTFSC  03.0
082E:  GOTO   032
082F:  MOVF   5F,W
0830:  MOVWF  77
0831:  GOTO   03E
0832:  CLRF   77
0833:  MOVLW  08
0834:  MOVWF  61
0835:  RLF    5F,F
0836:  RLF    77,F
0837:  MOVF   60,W
0838:  SUBWF  77,W
0839:  BTFSC  03.0
083A:  MOVWF  77
083B:  RLF    78,F
083C:  DECFSZ 61,F
083D:  GOTO   035
083E:  BTFSS  62.7
083F:  GOTO   042
0840:  COMF   78,F
0841:  INCF   78,F
0842:  RETURN
*
0D4F:  BCF    03.6
0D50:  MOVF   0B,W
0D51:  MOVWF  5F
0D52:  BCF    0B.7
0D53:  BSF    03.5
0D54:  BSF    03.6
0D55:  BSF    0C.7
0D56:  BSF    0C.0
0D57:  NOP
0D58:  NOP
0D59:  BCF    03.5
0D5A:  BCF    03.6
0D5B:  BTFSC  5F.7
0D5C:  BSF    0B.7
0D5D:  BSF    03.6
0D5E:  MOVF   0C,W
0D5F:  ANDLW  7F
0D60:  BTFSC  03.2
0D61:  GOTO   5A4
0D62:  BCF    03.6
0D63:  MOVWF  5F
0D64:  BSF    03.6
0D65:  MOVF   0D,W
0D66:  BCF    03.6
0D67:  MOVWF  60
0D68:  BSF    03.6
0D69:  MOVF   0F,W
0D6A:  BCF    03.6
0D6B:  MOVWF  61
0D6C:  MOVF   5F,W
0D6D:  BTFSS  0C.4
0D6E:  GOTO   56D
0D6F:  MOVWF  19
0D70:  MOVF   60,W
0D71:  BSF    03.6
0D72:  MOVWF  0D
0D73:  BCF    03.6
0D74:  MOVF   61,W
0D75:  BSF    03.6
0D76:  MOVWF  0F
0D77:  BCF    03.6
0D78:  MOVF   0B,W
0D79:  MOVWF  62
0D7A:  BCF    0B.7
0D7B:  BSF    03.5
0D7C:  BSF    03.6
0D7D:  BSF    0C.7
0D7E:  BSF    0C.0
0D7F:  NOP
0D80:  NOP
0D81:  BCF    03.5
0D82:  BCF    03.6
0D83:  BTFSC  62.7
0D84:  BSF    0B.7
0D85:  BSF    03.6
0D86:  RLF    0C,W
0D87:  RLF    0E,W
0D88:  ANDLW  7F
0D89:  BTFSC  03.2
0D8A:  GOTO   5A4
0D8B:  BCF    03.6
0D8C:  MOVWF  5F
0D8D:  BSF    03.6
0D8E:  MOVF   0D,W
0D8F:  BCF    03.6
0D90:  MOVWF  60
0D91:  BSF    03.6
0D92:  MOVF   0F,W
0D93:  BCF    03.6
0D94:  MOVWF  61
0D95:  MOVF   5F,W
0D96:  BTFSS  0C.4
0D97:  GOTO   596
0D98:  MOVWF  19
0D99:  MOVF   60,W
0D9A:  BSF    03.6
0D9B:  MOVWF  0D
0D9C:  BCF    03.6
0D9D:  MOVF   61,W
0D9E:  BSF    03.6
0D9F:  MOVWF  0F
0DA0:  INCF   0D,F
0DA1:  BTFSC  03.2
0DA2:  INCF   0F,F
0DA3:  GOTO   54F
.................... 
.................... #list
.................... 
.................... #device  adc=10
.................... #fuses   hs, nowdt, put, noprotect, nolvp
.................... #use     delay(clock=20MHz) 
*
012B:  MOVLW  61
012C:  MOVWF  04
012D:  BCF    03.7
012E:  MOVF   00,W
012F:  BTFSC  03.2
0130:  GOTO   13E
0131:  MOVLW  06
0132:  MOVWF  78
0133:  CLRF   77
0134:  DECFSZ 77,F
0135:  GOTO   134
0136:  DECFSZ 78,F
0137:  GOTO   133
0138:  MOVLW  7B
0139:  MOVWF  77
013A:  DECFSZ 77,F
013B:  GOTO   13A
013C:  DECFSZ 00,F
013D:  GOTO   131
013E:  RETURN
*
02B0:  MOVLW  03
02B1:  SUBWF  62,F
02B2:  BTFSS  03.0
02B3:  GOTO   2BE
02B4:  MOVLW  62
02B5:  MOVWF  04
02B6:  BCF    03.7
02B7:  MOVF   00,W
02B8:  BTFSC  03.2
02B9:  GOTO   2BE
02BA:  GOTO   2BC
02BB:  GOTO   2BC
02BC:  DECFSZ 00,F
02BD:  GOTO   2BB
02BE:  RETURN
.................... #use     i2c(master,slow,sda=pin_c4,scl=pin_c3)
*
0119:  BCF    14.7
011A:  BCF    0C.3
011B:  BSF    03.5
011C:  MOVF   2D,W
011D:  BCF    03.5
011E:  MOVWF  13
011F:  MOVLW  02
0120:  BTFSC  14.7
0121:  GOTO   129
0122:  BSF    03.5
0123:  BTFSC  14.2
0124:  GOTO   123
0125:  MOVLW  00
0126:  BTFSC  11.6
0127:  MOVLW  01
0128:  BCF    03.5
0129:  MOVWF  78
012A:  RETURN
*
0236:  BCF    14.6
0237:  BSF    03.5
0238:  BSF    11.3
0239:  BTFSC  11.3
023A:  GOTO   239
023B:  BTFSC  77.0
023C:  BCF    11.5
023D:  BTFSS  77.0
023E:  BSF    11.5
023F:  BSF    11.4
0240:  BTFSC  11.4
0241:  GOTO   240
0242:  BCF    03.5
0243:  MOVF   13,W
0244:  MOVWF  78
0245:  RETURN
.................... #use     rs232(baud=9600, xmit=pin_c6,rcv=pin_c7)
.................... 
.................... /* Define name again to accordant user */
.................... #define usi8  unsigned int8
.................... #define usi16 unsigned int16
.................... #define usi32 unsigned int32
.................... #define si8   signed   int8
.................... #define si16  signed   int16
.................... #define si32  signed   int32
.................... 
.................... #define bool int1
.................... 
.................... #define enable  1
.................... #define disable 0
.................... 
.................... #define on  1
.................... #define off 0
.................... 
.................... #ifndef bt0
.................... #define bt0    pin_b0
.................... #endif 
.................... 
.................... #ifndef bt1
.................... #define bt1    pin_b1
.................... #endif
.................... 
.................... #ifndef bt2
.................... #define bt2    pin_b2
.................... #endif
.................... 
.................... #ifndef bt3
.................... #define bt3    pin_b3
.................... #endif
.................... 
.................... #ifndef pinServo
.................... #define pinServo    pin_c1
.................... #endif
.................... 
.................... #ifndef pinCold
.................... #define pinCold     pin_d6
.................... #endif
.................... 
.................... #ifndef pinHot
.................... #define pinHot      pin_d7
.................... #endif
.................... 
.................... usi8 gh_nd = 25;
.................... 
.................... usi8 giay_tam, bdn, tt_ht = 0;
.................... si8 gt_mod = 0, tg_chinh = 0;
.................... 
.................... #define tang 0
.................... #define giam 1
.................... 
.................... bool e_11, e_22, e_33;
.................... 
.................... usi8 eat_hh, eat_pp, eat_ss;
.................... 
.................... bool flag_servo;
.................... usi8 count_servo = 0;
.................... 
.................... #int_timer1
.................... void interrupt_timer1()
.................... {
....................    bdn++;
*
0051:  INCF   2E,F
....................    set_timer1(3036);
0052:  CLRF   0E
0053:  MOVLW  0B
0054:  MOVWF  0F
0055:  MOVLW  DC
0056:  MOVWF  0E
0057:  NOP
....................    if(flag_servo == true){
0058:  BTFSS  32.3
0059:  GOTO   062
....................       if(count_servo < 100) count_servo++; // 10s
005A:  MOVF   36,W
005B:  SUBLW  63
005C:  BTFSS  03.0
005D:  GOTO   060
005E:  INCF   36,F
005F:  GOTO   062
....................       else{
....................          count_servo = 0;
0060:  CLRF   36
....................          flag_servo = false;
0061:  BCF    32.3
....................       }
....................    }
0062:  BCF    0C.0
0063:  BCF    0A.3
0064:  BCF    0A.4
0065:  GOTO   02D
.................... }
.................... 
.................... void set_up_init(){
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);
*
00D6:  MOVLW  B5
00D7:  MOVWF  10
....................    set_timer1(3036);
00D8:  CLRF   0E
00D9:  MOVLW  0B
00DA:  MOVWF  0F
00DB:  MOVLW  DC
00DC:  MOVWF  0E
00DD:  NOP
....................    
....................    enable_interrupts(global);
00DE:  MOVLW  C0
00DF:  IORWF  0B,F
....................    enable_interrupts(int_timer1);
00E0:  BSF    03.5
00E1:  BSF    0C.0
....................    
....................    setup_timer_2(t2_div_by_16, 249, 1);
00E2:  MOVLW  00
00E3:  MOVWF  78
00E4:  IORLW  06
00E5:  BCF    03.5
00E6:  MOVWF  12
00E7:  MOVLW  F9
00E8:  BSF    03.5
00E9:  MOVWF  12
....................    set_pwm2_duty(0);
00EA:  BCF    03.5
00EB:  CLRF   1B
....................    
....................    tt_ht = 0;
00EC:  CLRF   2F
....................    bdn = 0; gt_mod = 0;
00ED:  CLRF   2E
00EE:  CLRF   30
....................    
....................    e_11 = true;
00EF:  BSF    32.0
....................    e_22 = true;
00F0:  BSF    32.1
....................    e_33 = true;
00F1:  BSF    32.2
....................    
....................    flag_servo = false;
00F2:  BCF    32.3
....................    
....................    gh_nd = 25;
00F3:  MOVLW  19
00F4:  MOVWF  2C
....................    eat_hh = 0x09; eat_pp = 0x34; eat_ss = 0x01;
00F5:  MOVLW  09
00F6:  MOVWF  33
00F7:  MOVLW  34
00F8:  MOVWF  34
00F9:  MOVLW  01
00FA:  MOVWF  35
....................    
....................    set_tris_a(0xff);
00FB:  MOVLW  FF
00FC:  BSF    03.5
00FD:  MOVWF  05
....................    set_tris_b(0xff);
00FE:  MOVWF  06
....................    set_tris_d(0x00); output_d(0x00);
00FF:  MOVLW  00
0100:  MOVWF  08
0101:  CLRF   08
0102:  BCF    03.5
0103:  CLRF   08
....................    set_tris_e(0x00); output_e(0x00);
0104:  BSF    03.5
0105:  BCF    09.0
0106:  BCF    09.1
0107:  BCF    09.2
0108:  BCF    09.0
0109:  BCF    09.1
010A:  BCF    09.2
010B:  BCF    03.5
010C:  CLRF   09
....................    set_tris_c(0x00); output_c(0x00);
010D:  BSF    03.5
010E:  MOVWF  07
010F:  BCF    03.5
0110:  MOVWF  2B
0111:  MOVWF  2B
0112:  BSF    03.5
0113:  CLRF   07
0114:  BCF    03.5
0115:  CLRF   07
0116:  BSF    0A.3
0117:  BCF    0A.4
0118:  GOTO   0CD (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #include <thu_vien_i2c_ds1307.c>
.................... #define ds13_addr_wr 0xd0
.................... #define ds13_addr_rd 0xd1
.................... 
.................... //cap nhat time: giay-phut-gio-thu-ngay-thang-nam-madk_msds
.................... usi8 time_w[9]={0x31,0x15,0x15,0x04,0x25,0x10,0x23,0x90,0x92};
*
08A8:  MOVLW  31
08A9:  BCF    03.5
08AA:  MOVWF  37
08AB:  MOVLW  15
08AC:  MOVWF  38
08AD:  MOVWF  39
08AE:  MOVLW  04
08AF:  MOVWF  3A
08B0:  MOVLW  25
08B1:  MOVWF  3B
08B2:  MOVLW  10
08B3:  MOVWF  3C
08B4:  MOVLW  23
08B5:  MOVWF  3D
08B6:  MOVLW  90
08B7:  MOVWF  3E
08B8:  MOVLW  92
08B9:  MOVWF  3F
.................... usi8 time_r[9]={0x30,0x30,0x10,0x08,0x20,0x02,0x20,0x90,0x96};
08BA:  MOVLW  30
08BB:  MOVWF  40
08BC:  MOVWF  41
08BD:  MOVLW  10
08BE:  MOVWF  42
08BF:  MOVLW  08
08C0:  MOVWF  43
08C1:  MOVLW  20
08C2:  MOVWF  44
08C3:  MOVLW  02
08C4:  MOVWF  45
08C5:  MOVLW  20
08C6:  MOVWF  46
08C7:  MOVLW  90
08C8:  MOVWF  47
08C9:  MOVLW  96
08CA:  MOVWF  48
.................... 
.................... #define dec_giay_eat  ds1307_bcdToDec(eat_ss)
.................... #define dec_phut_eat  ds1307_bcdToDec(eat_pp)
.................... #define dec_gio_eat   ds1307_bcdToDec(eat_hh)
.................... 
.................... #define dec_giay_ds  ds1307_bcdToDec(time_r[0])
.................... #define dec_phut_ds  ds1307_bcdToDec(time_r[1])
.................... #define dec_gio_ds   ds1307_bcdToDec(time_r[2])
.................... #define dec_thu_ds   ds1307_bcdToDec(time_r[3])
.................... #define dec_ngay_ds  ds1307_bcdToDec(time_r[4])
.................... #define dec_thang_ds ds1307_bcdToDec(time_r[5])
.................... #define dec_nam_ds   ds1307_bcdToDec(time_r[6])
.................... 
.................... #define giay_ds  time_r[0]
.................... #define phut_ds  time_r[1]
.................... #define gio_ds   time_r[2]
.................... #define thu_ds   time_r[3]
.................... #define ngay_ds  time_r[4]
.................... #define thang_ds time_r[5]
.................... #define nam_ds   time_r[6]
.................... 
.................... #define ma_qd   time_w[8]
.................... #define ma_ds   time_r[8]
.................... 
.................... usi8 ds1307_decToBcd(usi8 val) {
....................     return ((val / 10 * 16) + (val % 10));
.................... }
.................... 
.................... usi8 ds1307_bcdToDec(usi8 val) {
....................     return ((val / 16 * 10) + (val % 16));
*
0539:  SWAPF  61,W
053A:  MOVWF  77
053B:  MOVLW  0F
053C:  ANDWF  77,F
053D:  MOVF   77,W
053E:  MOVWF  63
053F:  MOVWF  65
0540:  MOVLW  0A
0541:  MOVWF  66
0542:  CALL   514
0543:  MOVF   78,W
0544:  MOVWF  62
0545:  MOVF   61,W
0546:  ANDLW  0F
0547:  ADDWF  78,W
0548:  MOVWF  78
0549:  RETURN
.................... }
.................... 
.................... void ds1307_read_time(usi8 j)     
.................... {   
....................    usi8 i; 
....................    i2c_start();
*
0246:  BSF    03.5
0247:  BSF    11.0
0248:  BTFSC  11.0
0249:  GOTO   248
....................    i2c_write(ds13_addr_wr);
024A:  MOVLW  D0
024B:  MOVWF  2D
024C:  BCF    03.5
024D:  CALL   119
....................    i2c_write(0x00);                     
024E:  BSF    03.5
024F:  CLRF   2D
0250:  BCF    03.5
0251:  CALL   119
....................    i2c_start();               
0252:  BSF    03.5
0253:  BSF    11.1
0254:  BTFSC  11.1
0255:  GOTO   254
....................    i2c_write(ds13_addr_rd);                              
0256:  MOVLW  D1
0257:  MOVWF  2D
0258:  BCF    03.5
0259:  CALL   119
....................    for(i=0;i<j;i++) time_r[i]=i2c_read();
025A:  CLRF   60
025B:  MOVF   5F,W
025C:  SUBWF  60,W
025D:  BTFSC  03.0
025E:  GOTO   26A
025F:  MOVLW  40
0260:  ADDWF  60,W
0261:  MOVWF  04
0262:  BCF    03.7
0263:  MOVLW  01
0264:  MOVWF  77
0265:  CALL   236
0266:  MOVF   78,W
0267:  MOVWF  00
0268:  INCF   60,F
0269:  GOTO   25B
....................                                  
....................    i = i2c_read(0); //not ack, don't care i  
026A:  CLRF   77
026B:  CALL   236
026C:  MOVF   78,W
026D:  MOVWF  60
....................    i2c_stop();
026E:  BSF    03.5
026F:  BSF    11.2
0270:  BTFSC  11.2
0271:  GOTO   270
0272:  BCF    03.5
0273:  RETURN
.................... }
.................... 
.................... void ds1307_update_time(int1 sel)                 
.................... {         
....................    usi8 i;
....................    i2c_start();
*
027D:  BSF    03.5
027E:  BSF    11.0
027F:  BTFSC  11.0
0280:  GOTO   27F
....................    i2c_write(ds13_addr_wr);
0281:  MOVLW  D0
0282:  MOVWF  2D
0283:  BCF    03.5
0284:  CALL   119
....................    i2c_write(0x00);
0285:  BSF    03.5
0286:  CLRF   2D
0287:  BCF    03.5
0288:  CALL   119
....................    for(i=0;i<9;i++)                          
0289:  CLRF   60
028A:  MOVF   60,W
028B:  SUBLW  08
028C:  BTFSS  03.0
028D:  GOTO   2A8
....................    {  
....................       if(sel)  i2c_write(time_w[i]);
028E:  MOVF   5F,F
028F:  BTFSC  03.2
0290:  GOTO   29C
0291:  MOVLW  37
0292:  ADDWF  60,W
0293:  MOVWF  04
0294:  BCF    03.7
0295:  MOVF   00,W
0296:  MOVWF  61
0297:  BSF    03.5
0298:  MOVWF  2D
0299:  BCF    03.5
029A:  CALL   119
029B:  GOTO   2A6
....................       else     i2c_write(time_r[i]);
029C:  MOVLW  40
029D:  ADDWF  60,W
029E:  MOVWF  04
029F:  BCF    03.7
02A0:  MOVF   00,W
02A1:  MOVWF  61
02A2:  BSF    03.5
02A3:  MOVWF  2D
02A4:  BCF    03.5
02A5:  CALL   119
02A6:  INCF   60,F
02A7:  GOTO   28A
....................    }                                 
....................    i2c_stop();        
02A8:  BSF    03.5
02A9:  BSF    11.2
02AA:  BTFSC  11.2
02AB:  GOTO   2AA
02AC:  BCF    03.5
.................... }  
.................... 
.................... void ds1307_init()                               
.................... {                                              
....................    ds1307_read_time(9);          
*
0274:  MOVLW  09
0275:  MOVWF  5F
0276:  CALL   246
....................    if(ma_qd!=ma_ds)
0277:  MOVF   48,W
0278:  SUBWF  3F,W
0279:  BTFSC  03.2
027A:  GOTO   2AD
....................    {
....................       ds1307_update_time(1);
027B:  MOVLW  01
027C:  MOVWF  5F
....................    }
*
02AD:  BSF    0A.3
02AE:  BCF    0A.4
02AF:  GOTO   0D3 (RETURN)
.................... }
.................... 
.................... void ds1307_save_ds(usi8 dcdt,dt)                 
.................... {           
....................    i2c_start();
*
0800:  BSF    03.5
0801:  BSF    11.0
0802:  BTFSC  11.0
0803:  GOTO   002
....................    i2c_write(ds13_addr_wr);        
0804:  MOVLW  D0
0805:  MOVWF  2D
0806:  BCF    0A.3
0807:  BCF    03.5
0808:  CALL   119
0809:  BSF    0A.3
....................    i2c_write(dcdt);    
080A:  MOVF   5F,W
080B:  BSF    03.5
080C:  MOVWF  2D
080D:  BCF    0A.3
080E:  BCF    03.5
080F:  CALL   119
0810:  BSF    0A.3
....................    i2c_write(dt);
0811:  MOVF   60,W
0812:  BSF    03.5
0813:  MOVWF  2D
0814:  BCF    0A.3
0815:  BCF    03.5
0816:  CALL   119
0817:  BSF    0A.3
....................    i2c_stop();
0818:  BSF    03.5
0819:  BSF    11.2
081A:  BTFSC  11.2
081B:  GOTO   01A
081C:  BCF    03.5
081D:  RETURN
.................... }
.................... 
.................... #include <thu_vien_i2c_lcd.c>
.................... #define pcf8574_addr_wr 0x4E // 0b01001110
.................... #define pcf8574_addr_rd 0x4F // 0b01001111
.................... 
.................... void i2c_reset()
.................... {
....................    i2c_start();
....................    i2c_stop();
.................... }
.................... 
.................... void i2c_setup_write()
.................... {
....................    i2c_start();
*
01C6:  BSF    03.5
01C7:  BSF    11.0
01C8:  BTFSC  11.0
01C9:  GOTO   1C8
....................    i2c_write(pcf8574_addr_wr);
01CA:  MOVLW  4E
01CB:  MOVWF  2D
01CC:  BCF    03.5
01CD:  CALL   119
.................... }
.................... 
.................... void i2c_write_1byte(usi8 payload)
.................... {
....................    i2c_start();
*
0149:  BSF    11.1
014A:  BTFSC  11.1
014B:  GOTO   14A
*
0167:  BSF    11.1
0168:  BTFSC  11.1
0169:  GOTO   168
*
0186:  BSF    11.1
0187:  BTFSC  11.1
0188:  GOTO   187
*
01DF:  BSF    11.1
01E0:  BTFSC  11.1
01E1:  GOTO   1E0
....................    i2c_write(pcf8574_addr_wr);
*
014C:  MOVLW  4E
014D:  MOVWF  2D
014E:  BCF    03.5
014F:  CALL   119
*
016A:  MOVLW  4E
016B:  MOVWF  2D
016C:  BCF    03.5
016D:  CALL   119
*
0189:  MOVLW  4E
018A:  MOVWF  2D
018B:  BCF    03.5
018C:  CALL   119
*
01E2:  MOVLW  4E
01E3:  MOVWF  2D
01E4:  BCF    03.5
01E5:  CALL   119
....................    i2c_write(payload);
*
0150:  BSF    03.5
0151:  MOVF   2C,W
0152:  MOVWF  2D
0153:  BCF    03.5
0154:  CALL   119
*
016E:  BSF    03.5
016F:  MOVF   2C,W
0170:  MOVWF  2D
0171:  BCF    03.5
0172:  CALL   119
*
018D:  BSF    03.5
018E:  MOVF   2C,W
018F:  MOVWF  2D
0190:  BCF    03.5
0191:  CALL   119
*
01E6:  BSF    03.5
01E7:  MOVF   2C,W
01E8:  MOVWF  2D
01E9:  BCF    03.5
01EA:  CALL   119
....................    i2c_stop();
*
0155:  BSF    03.5
0156:  BSF    11.2
0157:  BTFSC  11.2
0158:  GOTO   157
*
0173:  BSF    03.5
0174:  BSF    11.2
0175:  BTFSC  11.2
0176:  GOTO   175
*
0192:  BSF    03.5
0193:  BSF    11.2
0194:  BTFSC  11.2
0195:  GOTO   194
*
01EB:  BSF    03.5
01EC:  BSF    11.2
01ED:  BTFSC  11.2
01EE:  GOTO   1ED
.................... }
.................... 
.................... #include <thu_vien_lcd_1602.c>
.................... #define lcd_cols 16
.................... #define lcd_rows 2
.................... 
.................... // commands
.................... #define LCD_CLEARDISPLAY 0x01
.................... #define LCD_RETURNHOME 0x02
.................... #define LCD_ENTRYMODESET 0x04
.................... #define LCD_DISPLAYCONTROL 0x08
.................... #define LCD_CURSORSHIFT 0x10
.................... #define LCD_FUNCTIONSET 0x20
.................... #define LCD_SETCGRAMADDR 0x40
.................... #define LCD_SETDDRAMADDR 0x80
.................... 
.................... // flags for display entry mode
.................... #define LCD_ENTRYRIGHT 0x00
.................... #define LCD_ENTRYLEFT 0x02
.................... #define LCD_ENTRYSHIFTINCREMENT 0x01
.................... #define LCD_ENTRYSHIFTDECREMENT 0x00
.................... 
.................... // flags for display on/off control
.................... #define LCD_DISPLAYON 0x04
.................... #define LCD_DISPLAYOFF 0x00
.................... #define LCD_CURSORON 0x02
.................... #define LCD_CURSOROFF 0x00
.................... #define LCD_BLINKON 0x01
.................... #define LCD_BLINKOFF 0x00
.................... 
.................... // flags for display/cursor shift
.................... #define LCD_DISPLAYMOVE 0x08
.................... #define LCD_CURSORMOVE 0x00
.................... #define LCD_MOVERIGHT 0x04
.................... #define LCD_MOVELEFT 0x00
.................... 
.................... // flags for function set
.................... #define LCD_8BITMODE 0x10
.................... #define LCD_4BITMODE 0x00
.................... #define LCD_2LINE 0x08
.................... #define LCD_1LINE 0x00
.................... #define LCD_5x10DOTS 0x04
.................... #define LCD_5x8DOTS 0x00
.................... 
.................... // flags for backlight control
.................... #define LCD_BACKLIGHT 0x08
.................... #define LCD_NOBACKLIGHT 0x00
.................... 
.................... #define En 0B00000100  // Enable bit
.................... #define Rw 0B00000010  // Read/Write bit
.................... #define Rs 0B00000001  // Register select bit
.................... 
.................... void write4bits(usi8 value);
.................... void expanderWrite(usi8 _data);
.................... void pulseEnable(usi8 _data);
.................... void lcd_command(usi8 value);
.................... void lcd_display();
.................... void lcd_clear();
.................... void lcd_home();
.................... void lcd_send(usi8 value, usi8 mode);
.................... void lcd_data(usi8 value);
.................... 
.................... usi8 _displayfunction;
.................... usi8 _displaycontrol;
.................... usi8 _displaymode;
.................... usi8 _numlines;
.................... usi8 _cols;
.................... usi8 _rows;
.................... usi8 _backlightval;
.................... 
.................... void lcd_init(){
....................    _cols = lcd_cols; // 16
*
01C1:  MOVLW  10
01C2:  MOVWF  4D
....................    _rows = lcd_rows; // 2
01C3:  MOVLW  02
01C4:  MOVWF  4E
....................    _backlightval = LCD_NOBACKLIGHT; // back light is off
01C5:  CLRF   4F
....................    
....................    i2c_setup_write(); // setup i2c
....................    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
*
01CE:  CLRF   49
....................    
....................    _displayfunction |= LCD_2LINE;
01CF:  BSF    49.3
....................    _numlines = _rows; // 2
01D0:  MOVF   4E,W
01D1:  MOVWF  4C
....................    
....................    delay_ms(40);
01D2:  MOVLW  28
01D3:  MOVWF  61
01D4:  CALL   12B
....................    
....................    expanderWrite(_backlightval); // back light is on
01D5:  MOVF   4F,W
01D6:  BSF    03.5
01D7:  MOVWF  2A
....................    delay_ms(100);
*
01EF:  MOVLW  64
01F0:  BCF    03.5
01F1:  MOVWF  61
01F2:  CALL   12B
....................    
....................    //It is try to set use 4bit in 3 time
....................    write4bits(0x03 << 4);
01F3:  MOVLW  30
01F4:  BSF    03.5
01F5:  MOVWF  27
01F6:  BCF    03.5
01F7:  CALL   13F
....................    delay_ms(5);
01F8:  MOVLW  05
01F9:  MOVWF  61
01FA:  CALL   12B
....................    
....................    write4bits(0x03 << 4);
01FB:  MOVLW  30
01FC:  BSF    03.5
01FD:  MOVWF  27
01FE:  BCF    03.5
01FF:  CALL   13F
....................    delay_ms(5);
0200:  MOVLW  05
0201:  MOVWF  61
0202:  CALL   12B
....................    
....................    write4bits(0x03 << 4);
0203:  MOVLW  30
0204:  BSF    03.5
0205:  MOVWF  27
0206:  BCF    03.5
0207:  CALL   13F
....................    delay_ms(5);
0208:  MOVLW  05
0209:  MOVWF  61
020A:  CALL   12B
....................    
....................    write4bits(0x02 << 4); // set using 4bit for lcd16x2
020B:  MOVLW  20
020C:  BSF    03.5
020D:  MOVWF  27
020E:  BCF    03.5
020F:  CALL   13F
....................    
....................    lcd_command(LCD_FUNCTIONSET | _displayfunction);
0210:  MOVF   49,W
0211:  IORLW  20
0212:  MOVWF  5F
0213:  BSF    03.5
0214:  MOVWF  21
0215:  BCF    03.5
0216:  CALL   19C
....................    
....................    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
0217:  MOVLW  04
0218:  MOVWF  4A
....................    lcd_display();
....................    
....................    lcd_clear();
*
0221:  CALL   1B8
....................    
....................    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
0222:  MOVLW  02
0223:  MOVWF  4B
....................    lcd_command(LCD_ENTRYMODESET | _displaymode);
0224:  MOVF   4B,W
0225:  IORLW  04
0226:  MOVWF  5F
0227:  BSF    03.5
0228:  MOVWF  21
0229:  BCF    03.5
022A:  CALL   19C
....................    
....................    lcd_home();
*
0233:  BSF    0A.3
0234:  BCF    0A.4
0235:  GOTO   0D0 (RETURN)
.................... }
.................... 
.................... void lcd_clear(){
....................    lcd_command(LCD_CLEARDISPLAY);
*
01B8:  MOVLW  01
01B9:  BSF    03.5
01BA:  MOVWF  21
01BB:  BCF    03.5
01BC:  CALL   19C
....................    delay_ms(20);
01BD:  MOVLW  14
01BE:  MOVWF  61
01BF:  CALL   12B
01C0:  RETURN
.................... }
.................... 
.................... void lcd_home(){
....................    lcd_command(LCD_RETURNHOME);
*
022B:  MOVLW  02
022C:  BSF    03.5
022D:  MOVWF  21
022E:  BCF    03.5
022F:  CALL   19C
....................    delay_ms(20);
0230:  MOVLW  14
0231:  MOVWF  61
0232:  CALL   12B
.................... }
.................... 
.................... void lcd_setCursor(usi8 col, usi8 row){
....................    int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
*
055F:  CLRF   7B
0560:  MOVLW  40
0561:  MOVWF  7C
0562:  MOVLW  14
0563:  MOVWF  7D
0564:  MOVLW  54
0565:  MOVWF  7E
....................    if ( row > _numlines ) {
0566:  MOVF   74,W
0567:  SUBWF  4C,W
0568:  BTFSC  03.0
0569:  GOTO   56D
....................       row = _numlines-1;
056A:  MOVLW  01
056B:  SUBWF  4C,W
056C:  MOVWF  74
....................    }
....................    lcd_command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
056D:  MOVLW  7B
056E:  ADDWF  74,W
056F:  MOVWF  04
0570:  BCF    03.7
0571:  MOVF   00,W
0572:  ADDWF  73,W
0573:  IORLW  80
0574:  MOVWF  75
0575:  BSF    03.5
0576:  MOVWF  21
0577:  BCF    03.5
0578:  CALL   19C
0579:  RETURN
.................... }
.................... 
.................... void lcd_display() {
....................    _displaycontrol |= LCD_DISPLAYON;
*
0219:  BSF    4A.2
....................    lcd_command(LCD_DISPLAYCONTROL | _displaycontrol);
021A:  MOVF   4A,W
021B:  IORLW  08
021C:  MOVWF  5F
021D:  BSF    03.5
021E:  MOVWF  21
021F:  BCF    03.5
0220:  CALL   19C
.................... }
.................... 
.................... void lcd_command(usi8 value){
....................    lcd_send(value,0);
*
019C:  BSF    03.5
019D:  MOVF   21,W
019E:  MOVWF  22
019F:  CLRF   23
*
01B7:  RETURN
.................... }
.................... 
.................... void lcd_data(usi8 value){
....................    lcd_send(value,Rs);
*
057A:  MOVF   76,W
057B:  BSF    03.5
057C:  MOVWF  22
057D:  MOVLW  01
057E:  MOVWF  23
*
0596:  RETURN
.................... }
.................... 
.................... void lcd_send(usi8 value, usi8 mode) {
*
01A0:  MOVF   22,W
01A1:  ANDLW  F0
01A2:  MOVWF  24
01A3:  SWAPF  22,W
01A4:  MOVWF  77
01A5:  MOVLW  F0
01A6:  ANDWF  77,F
01A7:  MOVF   77,W
01A8:  ANDLW  F0
01A9:  MOVWF  25
*
057F:  MOVF   22,W
0580:  ANDLW  F0
0581:  MOVWF  24
0582:  SWAPF  22,W
0583:  MOVWF  77
0584:  MOVLW  F0
0585:  ANDWF  77,F
0586:  MOVF   77,W
0587:  ANDLW  F0
0588:  MOVWF  25
....................    usi8 highnib=value&0xf0;
....................    usi8 lownib=(value<<4)&0xf0;
....................    write4bits((highnib)|mode);
*
01AA:  MOVF   24,W
01AB:  IORWF  23,W
01AC:  MOVWF  26
01AD:  MOVWF  27
01AE:  BCF    03.5
01AF:  CALL   13F
*
0589:  MOVF   24,W
058A:  IORWF  23,W
058B:  MOVWF  26
058C:  MOVWF  27
058D:  BCF    03.5
058E:  CALL   13F
....................    write4bits((lownib)|mode); 
*
01B0:  BSF    03.5
01B1:  MOVF   25,W
01B2:  IORWF  23,W
01B3:  MOVWF  26
01B4:  MOVWF  27
01B5:  BCF    03.5
01B6:  CALL   13F
*
058F:  BSF    03.5
0590:  MOVF   25,W
0591:  IORWF  23,W
0592:  MOVWF  26
0593:  MOVWF  27
0594:  BCF    03.5
0595:  CALL   13F
.................... }
.................... 
.................... void write4bits(usi8 value) {
....................    expanderWrite(value);
*
013F:  BSF    03.5
0140:  MOVF   27,W
0141:  MOVWF  2A
....................    pulseEnable(value);
*
0159:  MOVF   27,W
015A:  MOVWF  28
*
019A:  BCF    03.5
019B:  RETURN
.................... }
.................... 
.................... void expanderWrite(usi8 _data){
....................    i2c_write_1byte(_data|_backlightval);
*
0142:  MOVF   2A,W
0143:  BCF    03.5
0144:  IORWF  4F,W
0145:  BSF    03.5
0146:  MOVWF  2B
0147:  MOVF   2B,W
0148:  MOVWF  2C
*
0160:  MOVF   2A,W
0161:  BCF    03.5
0162:  IORWF  4F,W
0163:  BSF    03.5
0164:  MOVWF  2B
0165:  MOVF   2B,W
0166:  MOVWF  2C
*
017F:  MOVF   2A,W
0180:  BCF    03.5
0181:  IORWF  4F,W
0182:  BSF    03.5
0183:  MOVWF  2B
0184:  MOVF   2B,W
0185:  MOVWF  2C
*
01D8:  MOVF   2A,W
01D9:  BCF    03.5
01DA:  IORWF  4F,W
01DB:  BSF    03.5
01DC:  MOVWF  2B
01DD:  MOVF   2B,W
01DE:  MOVWF  2C
.................... }
.................... 
.................... void pulseEnable(usi8 _data){
....................    expanderWrite(_data | En);
*
015B:  MOVF   28,W
015C:  IORLW  04
015D:  MOVWF  29
015E:  MOVF   29,W
015F:  MOVWF  2A
....................    delay_us(1);
*
0177:  GOTO   178
0178:  GOTO   179
0179:  NOP
....................    expanderWrite(_data & ~En);
017A:  MOVF   28,W
017B:  ANDLW  FB
017C:  MOVWF  29
017D:  MOVF   29,W
017E:  MOVWF  2A
....................    delay_us(50);
*
0196:  MOVLW  53
0197:  MOVWF  77
0198:  DECFSZ 77,F
0199:  GOTO   198
.................... }
.................... 
.................... /* Library modify in User*/
.................... void lcd_log_info(usi16 time_s, bool ena_time){
....................    lcd_setCursor(1,0);
....................    lcd_data("Do an 1 - HKII");
....................    lcd_setCursor(3,1);
....................    lcd_data("SPKT-TPHCM");
....................    if(ena_time == enable){
....................       delay_ms(time_s*1000);
....................       lcd_clear();
....................    }
.................... }
.................... void lcd_dis_2num_dot(usi16 dt, int8 x, int8 y, bool is_xvn, bool is_dot){
....................    usi8 ch, dv;
....................    lcd_setCursor(x, y);
*
0655:  MOVF   61,W
0656:  MOVWF  73
0657:  MOVF   62,W
0658:  MOVWF  74
0659:  CALL   55F
....................    ch = dt/10 + 0x30;
065A:  MOVF   60,W
065B:  MOVWF  6B
065C:  MOVF   5F,W
065D:  MOVWF  6A
065E:  CLRF   6D
065F:  MOVLW  0A
0660:  MOVWF  6C
0661:  CALL   3DC
0662:  MOVLW  30
0663:  ADDWF  78,W
0664:  MOVWF  65
....................    dv = dt%10 + 0x30;
0665:  MOVF   60,W
0666:  MOVWF  6B
0667:  MOVF   5F,W
0668:  MOVWF  6A
0669:  CLRF   6D
066A:  MOVLW  0A
066B:  MOVWF  6C
066C:  CALL   3DC
066D:  MOVLW  30
066E:  ADDWF  77,W
066F:  MOVWF  66
....................    if(is_xvn == enable) if(ch == 0x30) ch = " ";
0670:  DECFSZ 63,W
0671:  GOTO   678
0672:  MOVF   65,W
0673:  SUBLW  30
0674:  BTFSS  03.2
0675:  GOTO   678
0676:  MOVLW  20
0677:  MOVWF  65
....................    if(is_dot == enable) lcd_data(".");
0678:  DECFSZ 64,W
0679:  GOTO   681
067A:  MOVLW  74
067B:  BSF    03.6
067C:  MOVWF  0D
067D:  MOVLW  00
067E:  MOVWF  0F
067F:  BCF    03.6
0680:  CALL   597
....................    lcd_data(ch); lcd_data(dv);
0681:  MOVF   65,W
0682:  MOVWF  76
0683:  CALL   57A
0684:  MOVF   66,W
0685:  MOVWF  76
0686:  CALL   57A
0687:  RETURN
.................... }
.................... 
.................... void lcd_dis_3num_dot(usi16 dt, int8 x, int8 y, bool is_xvn, bool is_dot){
....................    usi8 tr, ch, dv;
....................    lcd_setCursor(x, y); //xxx /10 -> xx 
0688:  MOVF   61,W
0689:  MOVWF  73
068A:  MOVF   62,W
068B:  MOVWF  74
068C:  CALL   55F
....................    tr = dt/100 + 0x30; 
068D:  MOVF   60,W
068E:  MOVWF  6B
068F:  MOVF   5F,W
0690:  MOVWF  6A
0691:  CLRF   6D
0692:  MOVLW  64
0693:  MOVWF  6C
0694:  CALL   3DC
0695:  MOVLW  30
0696:  ADDWF  78,W
0697:  MOVWF  65
....................    ch = dt/10%10  + 0x30;
0698:  MOVF   60,W
0699:  MOVWF  6B
069A:  MOVF   5F,W
069B:  MOVWF  6A
069C:  CLRF   6D
069D:  MOVLW  0A
069E:  MOVWF  6C
069F:  CALL   3DC
06A0:  MOVF   79,W
06A1:  MOVWF  69
06A2:  MOVF   78,W
06A3:  MOVWF  68
06A4:  MOVF   79,W
06A5:  MOVWF  6B
06A6:  MOVF   78,W
06A7:  MOVWF  6A
06A8:  CLRF   6D
06A9:  MOVLW  0A
06AA:  MOVWF  6C
06AB:  CALL   3DC
06AC:  MOVLW  30
06AD:  ADDWF  77,W
06AE:  MOVWF  66
....................    dv = dt%10     + 0x30;
06AF:  MOVF   60,W
06B0:  MOVWF  6B
06B1:  MOVF   5F,W
06B2:  MOVWF  6A
06B3:  CLRF   6D
06B4:  MOVLW  0A
06B5:  MOVWF  6C
06B6:  CALL   3DC
06B7:  MOVLW  30
06B8:  ADDWF  77,W
06B9:  MOVWF  67
....................    if(is_xvn == enable) if(tr == 0x30){
06BA:  DECFSZ 63,W
06BB:  GOTO   6C8
06BC:  MOVF   65,W
06BD:  SUBLW  30
06BE:  BTFSS  03.2
06BF:  GOTO   6C8
....................       tr = " ";
06C0:  MOVLW  20
06C1:  MOVWF  65
....................       if(ch == 0x30) ch = " ";
06C2:  MOVF   66,W
06C3:  SUBLW  30
06C4:  BTFSS  03.2
06C5:  GOTO   6C8
06C6:  MOVLW  20
06C7:  MOVWF  66
....................    }
....................    if(is_dot == enable) lcd_data(".");
06C8:  DECFSZ 64,W
06C9:  GOTO   6D1
06CA:  MOVLW  75
06CB:  BSF    03.6
06CC:  MOVWF  0D
06CD:  MOVLW  00
06CE:  MOVWF  0F
06CF:  BCF    03.6
06D0:  CALL   597
....................    lcd_data(tr); lcd_data(ch); lcd_data(dv);
06D1:  MOVF   65,W
06D2:  MOVWF  76
06D3:  CALL   57A
06D4:  MOVF   66,W
06D5:  MOVWF  76
06D6:  CALL   57A
06D7:  MOVF   67,W
06D8:  MOVWF  76
06D9:  CALL   57A
06DA:  RETURN
.................... }
.................... 
.................... void lcd_dis_xx_yy_zz(usi8 x, usi8 y, usi8 hh, usi8 pp, usi8 ss, bool e3, bool e2, bool e1){
....................    usi8 hh_ch, hh_dv, pp_ch, pp_dv, ss_ch, ss_dv;
....................    hh_ch = e3 == true ? hh/10 + 0x30 : 0x20; hh_dv = e3 == true ? hh%10 + 0x30 : 0x20;
*
05E7:  DECFSZ 6A,W
05E8:  GOTO   5F1
05E9:  MOVF   67,W
05EA:  MOVWF  73
05EB:  MOVLW  0A
05EC:  MOVWF  74
05ED:  CALL   54A
05EE:  MOVLW  30
05EF:  ADDWF  78,W
05F0:  GOTO   5F2
05F1:  MOVLW  20
05F2:  MOVWF  6D
05F3:  DECFSZ 6A,W
05F4:  GOTO   5FD
05F5:  MOVF   67,W
05F6:  MOVWF  73
05F7:  MOVLW  0A
05F8:  MOVWF  74
05F9:  CALL   54A
05FA:  MOVLW  30
05FB:  ADDWF  77,W
05FC:  GOTO   5FE
05FD:  MOVLW  20
05FE:  MOVWF  6E
....................    pp_ch = e2 == true ? pp/10 + 0x30 : 0x20; pp_dv = e2 == true ? pp%10 + 0x30 : 0x20;
05FF:  DECFSZ 6B,W
0600:  GOTO   609
0601:  MOVF   68,W
0602:  MOVWF  73
0603:  MOVLW  0A
0604:  MOVWF  74
0605:  CALL   54A
0606:  MOVLW  30
0607:  ADDWF  78,W
0608:  GOTO   60A
0609:  MOVLW  20
060A:  MOVWF  6F
060B:  DECFSZ 6B,W
060C:  GOTO   615
060D:  MOVF   68,W
060E:  MOVWF  73
060F:  MOVLW  0A
0610:  MOVWF  74
0611:  CALL   54A
0612:  MOVLW  30
0613:  ADDWF  77,W
0614:  GOTO   616
0615:  MOVLW  20
0616:  MOVWF  70
....................    ss_ch = e1 == true ? ss/10 + 0x30 : 0x20; ss_dv = e1 == true ? ss%10 + 0x30 : 0x20;
0617:  DECFSZ 6C,W
0618:  GOTO   621
0619:  MOVF   69,W
061A:  MOVWF  73
061B:  MOVLW  0A
061C:  MOVWF  74
061D:  CALL   54A
061E:  MOVLW  30
061F:  ADDWF  78,W
0620:  GOTO   622
0621:  MOVLW  20
0622:  MOVWF  71
0623:  DECFSZ 6C,W
0624:  GOTO   62D
0625:  MOVF   69,W
0626:  MOVWF  73
0627:  MOVLW  0A
0628:  MOVWF  74
0629:  CALL   54A
062A:  MOVLW  30
062B:  ADDWF  77,W
062C:  GOTO   62E
062D:  MOVLW  20
062E:  MOVWF  72
....................    lcd_setCursor(x, y);
062F:  MOVF   65,W
0630:  MOVWF  73
0631:  MOVF   66,W
0632:  MOVWF  74
0633:  CALL   55F
....................    lcd_data(hh_ch); lcd_data(hh_dv); lcd_data("-");
0634:  MOVF   6D,W
0635:  MOVWF  76
0636:  CALL   57A
0637:  MOVF   6E,W
0638:  MOVWF  76
0639:  CALL   57A
063A:  MOVLW  76
063B:  BSF    03.6
063C:  MOVWF  0D
063D:  MOVLW  00
063E:  MOVWF  0F
063F:  BCF    03.6
0640:  CALL   597
....................    lcd_data(pp_ch); lcd_data(pp_dv); lcd_data("-");
0641:  MOVF   6F,W
0642:  MOVWF  76
0643:  CALL   57A
0644:  MOVF   70,W
0645:  MOVWF  76
0646:  CALL   57A
0647:  MOVLW  77
0648:  BSF    03.6
0649:  MOVWF  0D
064A:  MOVLW  00
064B:  MOVWF  0F
064C:  BCF    03.6
064D:  CALL   597
....................    lcd_data(ss_ch); lcd_data(ss_dv);
064E:  MOVF   71,W
064F:  MOVWF  76
0650:  CALL   57A
0651:  MOVF   72,W
0652:  MOVWF  76
0653:  CALL   57A
0654:  RETURN
.................... }
.................... 
.................... void log_code_ds1307(){
....................    lcd_setCursor(0, 0);
....................    lcd_data(ma_qd/10 + 0x30); lcd_data(ma_qd%10 + 0x30); lcd_data(" - ");
....................    lcd_data(ma_ds/10 + 0x30); lcd_data(ma_ds%10 + 0x30);
.................... }
.................... 
.................... #include <thu_vien_btn.c>
.................... #define level_menu 6
.................... 
.................... usi8 dl_count;
.................... 
.................... usi8 dem_menu_tong_curr = 0;
.................... usi8 dem_menu_tong_prev = 1;
.................... 
.................... bool nhan_btn_giu(usi16 dl, usi8 pin){
....................    if(!input(pin)){
*
06DB:  MOVF   61,W
06DC:  MOVWF  62
06DD:  MOVLW  01
06DE:  MOVWF  63
06DF:  CLRF   65
06E0:  MOVLW  80
06E1:  MOVWF  64
06E2:  CALL   49F
06E3:  MOVF   61,W
06E4:  MOVWF  62
06E5:  CLRF   64
06E6:  CLRF   63
06E7:  CALL   4BF
06E8:  BTFSC  78.0
06E9:  GOTO   6FF
....................       dl_count += 1; delay_us(25);
06EA:  MOVLW  01
06EB:  ADDWF  52,F
06EC:  MOVLW  29
06ED:  MOVWF  77
06EE:  DECFSZ 77,F
06EF:  GOTO   6EE
06F0:  NOP
....................       if(dl_count >= dl){
06F1:  MOVF   60,F
06F2:  BTFSS  03.2
06F3:  GOTO   6FC
06F4:  MOVF   5F,W
06F5:  SUBWF  52,W
06F6:  BTFSS  03.0
06F7:  GOTO   6FC
....................          dl_count = 0;
06F8:  CLRF   52
....................          return true;
06F9:  MOVLW  01
06FA:  MOVWF  78
06FB:  GOTO   701
....................       }
....................       return false;
06FC:  MOVLW  00
06FD:  MOVWF  78
06FE:  GOTO   701
....................    }
....................    return false;
06FF:  MOVLW  00
0700:  MOVWF  78
0701:  RETURN
.................... }
.................... 
.................... bool nhan_btn_nha(bool giu_nha, usi8 pin){
....................    if(!input(pin)){
*
04D8:  MOVF   60,W
04D9:  MOVWF  62
04DA:  MOVLW  01
04DB:  MOVWF  63
04DC:  CLRF   65
04DD:  MOVLW  80
04DE:  MOVWF  64
04DF:  CALL   49F
04E0:  MOVF   60,W
04E1:  MOVWF  62
04E2:  CLRF   64
04E3:  CLRF   63
04E4:  CALL   4BF
04E5:  BTFSC  78.0
04E6:  GOTO   511
....................       delay_ms(20);
04E7:  MOVLW  14
04E8:  MOVWF  61
04E9:  CALL   12B
....................       if(!input(pin)){
04EA:  MOVF   60,W
04EB:  MOVWF  62
04EC:  MOVLW  01
04ED:  MOVWF  63
04EE:  CLRF   65
04EF:  MOVLW  80
04F0:  MOVWF  64
04F1:  CALL   49F
04F2:  MOVF   60,W
04F3:  MOVWF  62
04F4:  CLRF   64
04F5:  CLRF   63
04F6:  CALL   4BF
04F7:  BTFSC  78.0
04F8:  GOTO   50E
....................          if(giu_nha) while(!input(pin));
04F9:  MOVF   5F,F
04FA:  BTFSC  03.2
04FB:  GOTO   50B
04FC:  MOVF   60,W
04FD:  MOVWF  62
04FE:  MOVLW  01
04FF:  MOVWF  63
0500:  CLRF   65
0501:  MOVLW  80
0502:  MOVWF  64
0503:  CALL   49F
0504:  MOVF   60,W
0505:  MOVWF  62
0506:  CLRF   64
0507:  CLRF   63
0508:  CALL   4BF
0509:  BTFSS  78.0
050A:  GOTO   4FC
....................          //else delay_ms(5);
....................          return true;   
050B:  MOVLW  01
050C:  MOVWF  78
050D:  GOTO   513
....................       }
....................       return false;
050E:  MOVLW  00
050F:  MOVWF  78
0510:  GOTO   513
....................    }
....................    return false;
0511:  MOVLW  00
0512:  MOVWF  78
0513:  RETURN
.................... }
.................... 
.................... void test_btn(){
....................    if(!input(bt0)){
....................       delay_ms(20);
....................       if(!input(bt0)){
....................          lcd_setCursor(0,0);
....................          lcd_data("nut 0");
....................          while(!input(bt0));
....................       }
....................    }
....................    
....................    if(!input(bt1)){
....................       delay_ms(20);
....................       if(!input(bt1)){
....................          lcd_setCursor(0,0);
....................          lcd_data("nut 1");
....................          while(!input(bt1));
....................       }
....................    }
....................    
....................    if(!input(bt2)){
....................       delay_ms(20);
....................       if(!input(bt2)){
....................          lcd_setCursor(0,0);
....................          lcd_data("nut 2");
....................          while(!input(bt2));
....................       }
....................    }
....................    
....................    if(!input(bt3)){
....................       delay_ms(20);
....................       if(!input(bt3)){
....................          lcd_setCursor(0,0);
....................          lcd_data("nut 3");
....................          while(!input(bt3));
....................       }
....................    }
.................... }
.................... 
.................... #include <thu_vien_control_clock.c>
.................... 
.................... usi8 tang_or_giam_bcd(unsigned int8 x, int1 sel){
....................    usi8 y, dv, ch, v;
....................    ch = (x>>4);
*
07CB:  SWAPF  5F,W
07CC:  MOVWF  63
07CD:  MOVLW  0F
07CE:  ANDWF  63,F
....................    dv = x& 0x0f;
07CF:  MOVF   5F,W
07D0:  ANDLW  0F
07D1:  MOVWF  62
....................    y = ch*10 + dv;
07D2:  MOVF   63,W
07D3:  MOVWF  65
07D4:  MOVLW  0A
07D5:  MOVWF  66
07D6:  CALL   514
07D7:  MOVF   62,W
07D8:  ADDWF  78,W
07D9:  MOVWF  61
....................    if(sel == 0) y++;
07DA:  MOVF   60,F
07DB:  BTFSS  03.2
07DC:  GOTO   7DF
07DD:  INCF   61,F
07DE:  GOTO   7E0
....................    else         y--;
07DF:  DECF   61,F
....................    ch = y/10; dv = y%10;
07E0:  MOVF   61,W
07E1:  MOVWF  73
07E2:  MOVLW  0A
07E3:  MOVWF  74
07E4:  CALL   54A
07E5:  MOVF   78,W
07E6:  MOVWF  63
07E7:  MOVF   61,W
07E8:  MOVWF  73
07E9:  MOVLW  0A
07EA:  MOVWF  74
07EB:  CALL   54A
07EC:  MOVF   77,W
07ED:  MOVWF  62
....................    v = (ch<<4)|dv;
07EE:  SWAPF  63,W
07EF:  MOVWF  77
07F0:  MOVLW  F0
07F1:  ANDWF  77,F
07F2:  MOVF   77,W
07F3:  IORWF  62,W
07F4:  MOVWF  64
....................    return v;
07F5:  MOVF   64,W
07F6:  MOVWF  78
07F7:  RETURN
.................... }
.................... 
.................... void tat_bat_2led_chinh(){
....................    if(gt_mod == 1 || gt_mod == 4) { e_11 = ~e_11; e_22 = true; e_33 = true;}
*
0705:  DECFSZ 30,W
0706:  GOTO   708
0707:  GOTO   70C
0708:  MOVF   30,W
0709:  SUBLW  04
070A:  BTFSS  03.2
070B:  GOTO   711
070C:  MOVLW  01
070D:  XORWF  32,F
070E:  BSF    32.1
070F:  BSF    32.2
0710:  GOTO   72E
....................    else if(gt_mod == 2 || gt_mod == 5) { e_11 = true; e_22 = ~e_22; e_33 = true;}
0711:  MOVF   30,W
0712:  SUBLW  02
0713:  BTFSC  03.2
0714:  GOTO   719
0715:  MOVF   30,W
0716:  SUBLW  05
0717:  BTFSS  03.2
0718:  GOTO   71E
0719:  BSF    32.0
071A:  MOVLW  02
071B:  XORWF  32,F
071C:  BSF    32.2
071D:  GOTO   72E
....................    else if(gt_mod == 3 || gt_mod == 6) { e_11 = true; e_22 = true; e_33 = ~e_33;}
071E:  MOVF   30,W
071F:  SUBLW  03
0720:  BTFSC  03.2
0721:  GOTO   726
0722:  MOVF   30,W
0723:  SUBLW  06
0724:  BTFSS  03.2
0725:  GOTO   72B
0726:  BSF    32.0
0727:  BSF    32.1
0728:  MOVLW  04
0729:  XORWF  32,F
072A:  GOTO   72E
....................    else { e_11 = true; e_22 = true; e_33 = true;}
072B:  BSF    32.0
072C:  BSF    32.1
072D:  BSF    32.2
.................... }
.................... 
.................... void giai_ma_gpg_lcd(){
....................    lcd_dis_xx_yy_zz(4,1,dec_gio_ds,dec_phut_ds,dec_giay_ds,e_33, e_22, e_11);
*
0733:  MOVF   42,W
0734:  MOVWF  61
0735:  CALL   539
0736:  MOVF   78,W
0737:  MOVWF  5F
0738:  MOVF   41,W
0739:  MOVWF  61
073A:  CALL   539
073B:  MOVF   78,W
073C:  MOVWF  60
073D:  MOVF   40,W
073E:  MOVWF  61
073F:  CALL   539
0740:  MOVF   78,W
0741:  MOVWF  61
0742:  MOVLW  00
0743:  BTFSC  32.2
0744:  MOVLW  01
0745:  MOVWF  62
0746:  MOVLW  00
0747:  BTFSC  32.1
0748:  MOVLW  01
0749:  MOVWF  63
074A:  MOVLW  00
074B:  BTFSC  32.0
074C:  MOVLW  01
074D:  MOVWF  64
074E:  MOVLW  04
074F:  MOVWF  65
0750:  MOVLW  01
0751:  MOVWF  66
0752:  MOVF   5F,W
0753:  MOVWF  67
0754:  MOVF   60,W
0755:  MOVWF  68
0756:  MOVF   78,W
0757:  MOVWF  69
0758:  MOVF   62,W
0759:  MOVWF  6A
075A:  MOVF   63,W
075B:  MOVWF  6B
075C:  MOVF   64,W
075D:  MOVWF  6C
075E:  CALL   5E7
075F:  RETURN
.................... }
.................... 
.................... void giai_ma_ntn_lcd(){
....................    lcd_dis_xx_yy_zz(4,1,dec_ngay_ds,dec_thang_ds,dec_nam_ds,e_33, e_22, e_11);
0760:  MOVF   44,W
0761:  MOVWF  61
0762:  CALL   539
0763:  MOVF   78,W
0764:  MOVWF  5F
0765:  MOVF   45,W
0766:  MOVWF  61
0767:  CALL   539
0768:  MOVF   78,W
0769:  MOVWF  60
076A:  MOVF   46,W
076B:  MOVWF  61
076C:  CALL   539
076D:  MOVF   78,W
076E:  MOVWF  61
076F:  MOVLW  00
0770:  BTFSC  32.2
0771:  MOVLW  01
0772:  MOVWF  62
0773:  MOVLW  00
0774:  BTFSC  32.1
0775:  MOVLW  01
0776:  MOVWF  63
0777:  MOVLW  00
0778:  BTFSC  32.0
0779:  MOVLW  01
077A:  MOVWF  64
077B:  MOVLW  04
077C:  MOVWF  65
077D:  MOVLW  01
077E:  MOVWF  66
077F:  MOVF   5F,W
0780:  MOVWF  67
0781:  MOVF   60,W
0782:  MOVWF  68
0783:  MOVF   78,W
0784:  MOVWF  69
0785:  MOVF   62,W
0786:  MOVWF  6A
0787:  MOVF   63,W
0788:  MOVWF  6B
0789:  MOVF   64,W
078A:  MOVWF  6C
078B:  CALL   5E7
078C:  RETURN
.................... }
.................... 
.................... void giai_ma_thu_lcd(){
....................    lcd_dis_xx_yy_zz(4,1,0x00,dec_thu_ds,0x00,0, e_22, 0);
078D:  MOVF   43,W
078E:  MOVWF  61
078F:  CALL   539
0790:  MOVF   78,W
0791:  MOVWF  5F
0792:  MOVLW  00
0793:  BTFSC  32.1
0794:  MOVLW  01
0795:  MOVWF  60
0796:  MOVLW  04
0797:  MOVWF  65
0798:  MOVLW  01
0799:  MOVWF  66
079A:  CLRF   67
079B:  MOVF   78,W
079C:  MOVWF  68
079D:  CLRF   69
079E:  CLRF   6A
079F:  MOVF   60,W
07A0:  MOVWF  6B
07A1:  CLRF   6C
07A2:  CALL   5E7
07A3:  RETURN
.................... }
.................... 
.................... void giai_ma_gpg_ntn_thu_lcd(){
....................    if(gt_mod == 0){
07A4:  MOVF   30,F
07A5:  BTFSS  03.2
07A6:  GOTO   7B6
....................       if(tt_ht == 0 || tt_ht == 1) giai_ma_gpg_lcd();
07A7:  MOVF   2F,F
07A8:  BTFSC  03.2
07A9:  GOTO   7AC
07AA:  DECFSZ 2F,W
07AB:  GOTO   7AD
07AC:  CALL   733
....................       if(tt_ht == 2) giai_ma_ntn_lcd();
07AD:  MOVF   2F,W
07AE:  SUBLW  02
07AF:  BTFSC  03.2
07B0:  CALL   760
....................       if(tt_ht == 3) giai_ma_thu_lcd();
07B1:  MOVF   2F,W
07B2:  SUBLW  03
07B3:  BTFSC  03.2
07B4:  CALL   78D
....................    }
07B5:  GOTO   7CA
....................    else{
....................       if(gt_mod < 4)       giai_ma_gpg_lcd();
07B6:  BTFSC  30.7
07B7:  GOTO   7BC
07B8:  MOVF   30,W
07B9:  SUBLW  03
07BA:  BTFSS  03.0
07BB:  GOTO   7BE
07BC:  CALL   733
07BD:  GOTO   7CA
....................       else if(gt_mod < 7)  giai_ma_ntn_lcd();
07BE:  BTFSC  30.7
07BF:  GOTO   7C4
07C0:  MOVF   30,W
07C1:  SUBLW  06
07C2:  BTFSS  03.0
07C3:  GOTO   7C6
07C4:  CALL   760
07C5:  GOTO   7CA
....................       else if(gt_mod == 7) giai_ma_thu_lcd();
07C6:  MOVF   30,W
07C7:  SUBLW  07
07C8:  BTFSC  03.2
07C9:  CALL   78D
....................    }
07CA:  RETURN
.................... }
.................... 
.................... void xu_ly_choptat(){
....................    if(gt_mod != 0){
*
0702:  MOVF   30,F
0703:  BTFSC  03.2
0704:  GOTO   72F
....................       tat_bat_2led_chinh();
....................    }
*
072E:  GOTO   732
....................    else { e_11 = true; e_22 = true; e_33 = true;}
072F:  BSF    32.0
0730:  BSF    32.1
0731:  BSF    32.2
0732:  RETURN
....................    
.................... }
.................... 
.................... void phim_chon_hthi_mode(){
....................    if(nhan_btn_giu(1, bt3)){
*
09F5:  CLRF   60
09F6:  MOVLW  01
09F7:  MOVWF  5F
09F8:  MOVLW  33
09F9:  MOVWF  61
09FA:  BCF    0A.3
09FB:  CALL   6DB
09FC:  BSF    0A.3
09FD:  MOVF   78,F
09FE:  BTFSC  03.2
09FF:  GOTO   225
....................       tt_ht = 1;
0A00:  MOVLW  01
0A01:  MOVWF  2F
....................       if(tt_ht == 1){
0A02:  DECFSZ 2F,W
0A03:  GOTO   221
....................          gt_mod++;
0A04:  INCF   30,F
....................          if(gt_mod < 4) tt_ht = 1;
0A05:  BTFSC  30.7
0A06:  GOTO   20B
0A07:  MOVF   30,W
0A08:  SUBLW  03
0A09:  BTFSS  03.0
0A0A:  GOTO   20E
0A0B:  MOVLW  01
0A0C:  MOVWF  2F
0A0D:  GOTO   221
....................          else if(gt_mod < 7) tt_ht = 2;
0A0E:  BTFSC  30.7
0A0F:  GOTO   214
0A10:  MOVF   30,W
0A11:  SUBLW  06
0A12:  BTFSS  03.0
0A13:  GOTO   217
0A14:  MOVLW  02
0A15:  MOVWF  2F
0A16:  GOTO   221
....................          else if(gt_mod == 7) tt_ht = 3;
0A17:  MOVF   30,W
0A18:  SUBLW  07
0A19:  BTFSS  03.2
0A1A:  GOTO   21E
0A1B:  MOVLW  03
0A1C:  MOVWF  2F
0A1D:  GOTO   221
....................          else{
....................             gt_mod = 0;
0A1E:  CLRF   30
....................             tt_ht = 0;
0A1F:  CLRF   2F
....................             dem_menu_tong_curr = 0;
0A20:  CLRF   53
....................          }
....................       }
....................       tg_chinh = 0;
0A21:  CLRF   31
....................       giai_ma_gpg_ntn_thu_lcd();
0A22:  BCF    0A.3
0A23:  CALL   7A4
0A24:  BSF    0A.3
....................    }
.................... }
.................... void tang_giay(){
....................    if(giay_ds == 0x59) giay_ds = 0;
*
0A42:  MOVF   40,W
0A43:  SUBLW  59
0A44:  BTFSS  03.2
0A45:  GOTO   248
0A46:  CLRF   40
0A47:  GOTO   250
....................    else giay_ds = tang_or_giam_bcd(giay_ds, tang);
0A48:  MOVF   40,W
0A49:  MOVWF  5F
0A4A:  CLRF   60
0A4B:  BCF    0A.3
0A4C:  CALL   7CB
0A4D:  BSF    0A.3
0A4E:  MOVF   78,W
0A4F:  MOVWF  40
....................    ds1307_save_ds(0,giay_ds);
0A50:  CLRF   5F
0A51:  MOVF   40,W
0A52:  MOVWF  60
0A53:  CALL   000
.................... }
.................... void tang_phut(){
....................    if(phut_ds == 0x59) phut_ds = 0;
*
0A55:  MOVF   41,W
0A56:  SUBLW  59
0A57:  BTFSS  03.2
0A58:  GOTO   25B
0A59:  CLRF   41
0A5A:  GOTO   263
....................    else phut_ds = tang_or_giam_bcd(phut_ds, tang);
0A5B:  MOVF   41,W
0A5C:  MOVWF  5F
0A5D:  CLRF   60
0A5E:  BCF    0A.3
0A5F:  CALL   7CB
0A60:  BSF    0A.3
0A61:  MOVF   78,W
0A62:  MOVWF  41
....................    ds1307_save_ds(1,phut_ds);
0A63:  MOVLW  01
0A64:  MOVWF  5F
0A65:  MOVF   41,W
0A66:  MOVWF  60
0A67:  CALL   000
.................... }
.................... void tang_gio(){
....................    if(gio_ds == 0x23) gio_ds = 0;
*
0A69:  MOVF   42,W
0A6A:  SUBLW  23
0A6B:  BTFSS  03.2
0A6C:  GOTO   26F
0A6D:  CLRF   42
0A6E:  GOTO   277
....................    else gio_ds = tang_or_giam_bcd(gio_ds, tang);
0A6F:  MOVF   42,W
0A70:  MOVWF  5F
0A71:  CLRF   60
0A72:  BCF    0A.3
0A73:  CALL   7CB
0A74:  BSF    0A.3
0A75:  MOVF   78,W
0A76:  MOVWF  42
....................    ds1307_save_ds(2,gio_ds);
0A77:  MOVLW  02
0A78:  MOVWF  5F
0A79:  MOVF   42,W
0A7A:  MOVWF  60
0A7B:  CALL   000
.................... }
.................... void chinh_tang_gpg(){
....................    switch(gt_mod){
*
0A37:  MOVF   30,W
0A38:  XORLW  01
0A39:  BTFSC  03.2
0A3A:  GOTO   242
0A3B:  XORLW  03
0A3C:  BTFSC  03.2
0A3D:  GOTO   255
0A3E:  XORLW  01
0A3F:  BTFSC  03.2
0A40:  GOTO   269
0A41:  GOTO   27D
....................       case 1:
....................          tang_giay();
....................          break;
*
0A54:  GOTO   27D
....................       case 2:
....................          tang_phut();
....................          break;
*
0A68:  GOTO   27D
....................       case 3:
....................          tang_gio();
....................          break;
*
0A7C:  GOTO   27D
....................       default: break;
....................    }
.................... }
.................... void tang_nam(){
....................    if(nam_ds == 0x99) nam_ds = 0;
*
0A8F:  MOVF   46,W
0A90:  SUBLW  99
0A91:  BTFSS  03.2
0A92:  GOTO   295
0A93:  CLRF   46
0A94:  GOTO   29D
....................    else nam_ds = tang_or_giam_bcd(nam_ds, tang);
0A95:  MOVF   46,W
0A96:  MOVWF  5F
0A97:  CLRF   60
0A98:  BCF    0A.3
0A99:  CALL   7CB
0A9A:  BSF    0A.3
0A9B:  MOVF   78,W
0A9C:  MOVWF  46
....................    ds1307_save_ds(6,nam_ds);
0A9D:  MOVLW  06
0A9E:  MOVWF  5F
0A9F:  MOVF   46,W
0AA0:  MOVWF  60
0AA1:  CALL   000
.................... }
.................... void tang_thang(){
....................    if(thang_ds == 0x12) thang_ds = 1;
*
0AA3:  MOVF   45,W
0AA4:  SUBLW  12
0AA5:  BTFSS  03.2
0AA6:  GOTO   2AA
0AA7:  MOVLW  01
0AA8:  MOVWF  45
0AA9:  GOTO   2B2
....................    else thang_ds = tang_or_giam_bcd(thang_ds, tang);
0AAA:  MOVF   45,W
0AAB:  MOVWF  5F
0AAC:  CLRF   60
0AAD:  BCF    0A.3
0AAE:  CALL   7CB
0AAF:  BSF    0A.3
0AB0:  MOVF   78,W
0AB1:  MOVWF  45
....................    ds1307_save_ds(5,thang_ds);
0AB2:  MOVLW  05
0AB3:  MOVWF  5F
0AB4:  MOVF   45,W
0AB5:  MOVWF  60
0AB6:  CALL   000
.................... }
.................... void tang_ngay(){
....................    if(ngay_ds == 0x31) ngay_ds = 1;
*
0AB8:  MOVF   44,W
0AB9:  SUBLW  31
0ABA:  BTFSS  03.2
0ABB:  GOTO   2BF
0ABC:  MOVLW  01
0ABD:  MOVWF  44
0ABE:  GOTO   2C7
....................    else ngay_ds = tang_or_giam_bcd(ngay_ds, tang);
0ABF:  MOVF   44,W
0AC0:  MOVWF  5F
0AC1:  CLRF   60
0AC2:  BCF    0A.3
0AC3:  CALL   7CB
0AC4:  BSF    0A.3
0AC5:  MOVF   78,W
0AC6:  MOVWF  44
....................    ds1307_save_ds(4,ngay_ds);
0AC7:  MOVLW  04
0AC8:  MOVWF  5F
0AC9:  MOVF   44,W
0ACA:  MOVWF  60
0ACB:  CALL   000
.................... }
.................... void chinh_tang_ntn(){
....................    switch(gt_mod){
*
0A84:  MOVF   30,W
0A85:  XORLW  04
0A86:  BTFSC  03.2
0A87:  GOTO   28F
0A88:  XORLW  01
0A89:  BTFSC  03.2
0A8A:  GOTO   2A3
0A8B:  XORLW  03
0A8C:  BTFSC  03.2
0A8D:  GOTO   2B8
0A8E:  GOTO   2CD
....................       case 4:
....................          tang_nam();
....................          break;
*
0AA2:  GOTO   2CD
....................       case 5:
....................          tang_thang();
....................          break;
*
0AB7:  GOTO   2CD
....................       case 6:
....................          tang_ngay();
....................          break;
*
0ACC:  GOTO   2CD
....................       default: break;
....................    }
.................... }
.................... void chinh_tang_thu(){
....................    if(thu_ds == 8) thu_ds = 2;
*
0AD2:  MOVF   43,W
0AD3:  SUBLW  08
0AD4:  BTFSS  03.2
0AD5:  GOTO   2D9
0AD6:  MOVLW  02
0AD7:  MOVWF  43
0AD8:  GOTO   2DA
....................    else thu_ds++;
0AD9:  INCF   43,F
....................    ds1307_save_ds(3,thu_ds);
0ADA:  MOVLW  03
0ADB:  MOVWF  5F
0ADC:  MOVF   43,W
0ADD:  MOVWF  60
0ADE:  CALL   000
.................... }
.................... 
.................... void phim_up(){
....................    if(nhan_btn_giu(1, bt1)){
*
0A25:  CLRF   60
0A26:  MOVLW  01
0A27:  MOVWF  5F
0A28:  MOVLW  31
0A29:  MOVWF  61
0A2A:  BCF    0A.3
0A2B:  CALL   6DB
0A2C:  BSF    0A.3
0A2D:  MOVF   78,F
0A2E:  BTFSC  03.2
0A2F:  GOTO   2E5
....................       tg_chinh = 0;
0A30:  CLRF   31
....................       if(gt_mod<4) chinh_tang_gpg();
0A31:  BTFSC  30.7
0A32:  GOTO   237
0A33:  MOVF   30,W
0A34:  SUBLW  03
0A35:  BTFSS  03.0
0A36:  GOTO   27E
*
0A7D:  GOTO   2DF
....................       else if(gt_mod<7) chinh_tang_ntn();
0A7E:  BTFSC  30.7
0A7F:  GOTO   284
0A80:  MOVF   30,W
0A81:  SUBLW  06
0A82:  BTFSS  03.0
0A83:  GOTO   2CE
*
0ACD:  GOTO   2DF
....................       else if(gt_mod==7) chinh_tang_thu();
0ACE:  MOVF   30,W
0ACF:  SUBLW  07
0AD0:  BTFSS  03.2
0AD1:  GOTO   2DF
....................       e_11 = true; e_22 = true; e_33 = true;
*
0ADF:  BSF    32.0
0AE0:  BSF    32.1
0AE1:  BSF    32.2
....................       giai_ma_gpg_ntn_thu_lcd();
0AE2:  BCF    0A.3
0AE3:  CALL   7A4
0AE4:  BSF    0A.3
....................    }
.................... }
.................... void giam_giay(){
....................    if(giay_ds == 0) giay_ds = 0x59;
*
0B02:  MOVF   40,F
0B03:  BTFSS  03.2
0B04:  GOTO   308
0B05:  MOVLW  59
0B06:  MOVWF  40
0B07:  GOTO   311
....................    else giay_ds = tang_or_giam_bcd(giay_ds,giam);
0B08:  MOVF   40,W
0B09:  MOVWF  5F
0B0A:  MOVLW  01
0B0B:  MOVWF  60
0B0C:  BCF    0A.3
0B0D:  CALL   7CB
0B0E:  BSF    0A.3
0B0F:  MOVF   78,W
0B10:  MOVWF  40
....................    ds1307_save_ds(0,giay_ds);
0B11:  CLRF   5F
0B12:  MOVF   40,W
0B13:  MOVWF  60
0B14:  CALL   000
.................... }
.................... void giam_phut(){
....................    if(phut_ds == 0) phut_ds = 0x59;
*
0B16:  MOVF   41,F
0B17:  BTFSS  03.2
0B18:  GOTO   31C
0B19:  MOVLW  59
0B1A:  MOVWF  41
0B1B:  GOTO   325
....................    else phut_ds = tang_or_giam_bcd(phut_ds,giam);
0B1C:  MOVF   41,W
0B1D:  MOVWF  5F
0B1E:  MOVLW  01
0B1F:  MOVWF  60
0B20:  BCF    0A.3
0B21:  CALL   7CB
0B22:  BSF    0A.3
0B23:  MOVF   78,W
0B24:  MOVWF  41
....................    ds1307_save_ds(1,phut_ds);
0B25:  MOVLW  01
0B26:  MOVWF  5F
0B27:  MOVF   41,W
0B28:  MOVWF  60
0B29:  CALL   000
.................... }
.................... void giam_gio(){
....................    if(gio_ds == 0) gio_ds = 0x23;
*
0B2B:  MOVF   42,F
0B2C:  BTFSS  03.2
0B2D:  GOTO   331
0B2E:  MOVLW  23
0B2F:  MOVWF  42
0B30:  GOTO   33A
....................    else gio_ds = tang_or_giam_bcd(gio_ds,giam);
0B31:  MOVF   42,W
0B32:  MOVWF  5F
0B33:  MOVLW  01
0B34:  MOVWF  60
0B35:  BCF    0A.3
0B36:  CALL   7CB
0B37:  BSF    0A.3
0B38:  MOVF   78,W
0B39:  MOVWF  42
....................    ds1307_save_ds(2,gio_ds);
0B3A:  MOVLW  02
0B3B:  MOVWF  5F
0B3C:  MOVF   42,W
0B3D:  MOVWF  60
0B3E:  CALL   000
.................... }
.................... void chinh_giam_gpg(){
....................    switch(gt_mod){
*
0AF7:  MOVF   30,W
0AF8:  XORLW  01
0AF9:  BTFSC  03.2
0AFA:  GOTO   302
0AFB:  XORLW  03
0AFC:  BTFSC  03.2
0AFD:  GOTO   316
0AFE:  XORLW  01
0AFF:  BTFSC  03.2
0B00:  GOTO   32B
0B01:  GOTO   340
....................       case 1:
....................          giam_giay();
....................          break;
*
0B15:  GOTO   340
....................       case 2:
....................          giam_phut();
....................          break;
*
0B2A:  GOTO   340
....................       case 3:
....................          giam_gio();
....................          break;
*
0B3F:  GOTO   340
....................       default: break;
....................    }
.................... }
.................... void giam_nam(){
....................    if(nam_ds == 0x0) nam_ds = 0x99;
*
0B52:  MOVF   46,F
0B53:  BTFSS  03.2
0B54:  GOTO   358
0B55:  MOVLW  99
0B56:  MOVWF  46
0B57:  GOTO   361
....................    else nam_ds = tang_or_giam_bcd(nam_ds, giam);
0B58:  MOVF   46,W
0B59:  MOVWF  5F
0B5A:  MOVLW  01
0B5B:  MOVWF  60
0B5C:  BCF    0A.3
0B5D:  CALL   7CB
0B5E:  BSF    0A.3
0B5F:  MOVF   78,W
0B60:  MOVWF  46
....................    ds1307_save_ds(6,nam_ds);
0B61:  MOVLW  06
0B62:  MOVWF  5F
0B63:  MOVF   46,W
0B64:  MOVWF  60
0B65:  CALL   000
.................... }
.................... void giam_thang(){
....................    if(thang_ds == 0x1) thang_ds = 12;
*
0B67:  DECFSZ 45,W
0B68:  GOTO   36C
0B69:  MOVLW  0C
0B6A:  MOVWF  45
0B6B:  GOTO   375
....................    else thang_ds = tang_or_giam_bcd(thang_ds, giam);
0B6C:  MOVF   45,W
0B6D:  MOVWF  5F
0B6E:  MOVLW  01
0B6F:  MOVWF  60
0B70:  BCF    0A.3
0B71:  CALL   7CB
0B72:  BSF    0A.3
0B73:  MOVF   78,W
0B74:  MOVWF  45
....................    ds1307_save_ds(5,thang_ds);
0B75:  MOVLW  05
0B76:  MOVWF  5F
0B77:  MOVF   45,W
0B78:  MOVWF  60
0B79:  CALL   000
.................... }
.................... void giam_ngay(){
....................    if(ngay_ds == 0x1) ngay_ds = 21;
*
0B7B:  DECFSZ 44,W
0B7C:  GOTO   380
0B7D:  MOVLW  15
0B7E:  MOVWF  44
0B7F:  GOTO   389
....................    else ngay_ds = tang_or_giam_bcd(ngay_ds, giam);
0B80:  MOVF   44,W
0B81:  MOVWF  5F
0B82:  MOVLW  01
0B83:  MOVWF  60
0B84:  BCF    0A.3
0B85:  CALL   7CB
0B86:  BSF    0A.3
0B87:  MOVF   78,W
0B88:  MOVWF  44
....................    ds1307_save_ds(4,ngay_ds);
0B89:  MOVLW  04
0B8A:  MOVWF  5F
0B8B:  MOVF   44,W
0B8C:  MOVWF  60
0B8D:  CALL   000
.................... }
.................... void chinh_giam_ntn(){
....................    switch(gt_mod){
*
0B47:  MOVF   30,W
0B48:  XORLW  01
0B49:  BTFSC  03.2
0B4A:  GOTO   352
0B4B:  XORLW  03
0B4C:  BTFSC  03.2
0B4D:  GOTO   367
0B4E:  XORLW  01
0B4F:  BTFSC  03.2
0B50:  GOTO   37B
0B51:  GOTO   38F
....................       case 1:
....................          giam_nam();
....................          break;
*
0B66:  GOTO   38F
....................       case 2:
....................          giam_thang();
....................          break;
*
0B7A:  GOTO   38F
....................       case 3:
....................          giam_ngay();
....................          break;
*
0B8E:  GOTO   38F
....................       default: break;
....................    }
.................... }
.................... void chinh_giam_thu(){
....................    if(thu_ds == 2) thu_ds = 8;
*
0B94:  MOVF   43,W
0B95:  SUBLW  02
0B96:  BTFSS  03.2
0B97:  GOTO   39B
0B98:  MOVLW  08
0B99:  MOVWF  43
0B9A:  GOTO   39C
....................    else thu_ds--;
0B9B:  DECF   43,F
....................    ds1307_save_ds(3,thu_ds);
0B9C:  MOVLW  03
0B9D:  MOVWF  5F
0B9E:  MOVF   43,W
0B9F:  MOVWF  60
0BA0:  CALL   000
.................... }
.................... void phim_dw(){
....................    if(nhan_btn_giu(1, bt2)){
*
0AE5:  CLRF   60
0AE6:  MOVLW  01
0AE7:  MOVWF  5F
0AE8:  MOVLW  32
0AE9:  MOVWF  61
0AEA:  BCF    0A.3
0AEB:  CALL   6DB
0AEC:  BSF    0A.3
0AED:  MOVF   78,F
0AEE:  BTFSC  03.2
0AEF:  GOTO   3A7
....................       tg_chinh = 0;
0AF0:  CLRF   31
....................       if(gt_mod<4) chinh_giam_gpg();
0AF1:  BTFSC  30.7
0AF2:  GOTO   2F7
0AF3:  MOVF   30,W
0AF4:  SUBLW  03
0AF5:  BTFSS  03.0
0AF6:  GOTO   341
*
0B40:  GOTO   3A1
....................       else if(gt_mod<7) chinh_giam_ntn();
0B41:  BTFSC  30.7
0B42:  GOTO   347
0B43:  MOVF   30,W
0B44:  SUBLW  06
0B45:  BTFSS  03.0
0B46:  GOTO   390
*
0B8F:  GOTO   3A1
....................       else if(gt_mod==7) chinh_giam_thu();
0B90:  MOVF   30,W
0B91:  SUBLW  07
0B92:  BTFSS  03.2
0B93:  GOTO   3A1
....................       e_11 = true; e_22 = true; e_33 = true;
*
0BA1:  BSF    32.0
0BA2:  BSF    32.1
0BA3:  BSF    32.2
....................       giai_ma_gpg_ntn_thu_lcd();
0BA4:  BCF    0A.3
0BA5:  CALL   7A4
0BA6:  BSF    0A.3
....................    }
.................... }
.................... void log_mode(){
....................    lcd_setCursor(0, 1);
*
0BC3:  CLRF   73
0BC4:  MOVLW  01
0BC5:  MOVWF  74
0BC6:  BCF    0A.3
0BC7:  CALL   55F
0BC8:  BSF    0A.3
....................    if(tt_ht == 0) lcd_data(" N ");
0BC9:  MOVF   2F,F
0BCA:  BTFSS  03.2
0BCB:  GOTO   3D6
0BCC:  MOVLW  86
0BCD:  BSF    03.6
0BCE:  MOVWF  0D
0BCF:  MOVLW  00
0BD0:  MOVWF  0F
0BD1:  BCF    0A.3
0BD2:  BCF    03.6
0BD3:  CALL   597
0BD4:  BSF    0A.3
0BD5:  GOTO   3FD
....................    else if(tt_ht == 1) lcd_data("GPG");
0BD6:  DECFSZ 2F,W
0BD7:  GOTO   3E2
0BD8:  MOVLW  88
0BD9:  BSF    03.6
0BDA:  MOVWF  0D
0BDB:  MOVLW  00
0BDC:  MOVWF  0F
0BDD:  BCF    0A.3
0BDE:  BCF    03.6
0BDF:  CALL   597
0BE0:  BSF    0A.3
0BE1:  GOTO   3FD
....................    else if(tt_ht == 2) lcd_data("NTN");
0BE2:  MOVF   2F,W
0BE3:  SUBLW  02
0BE4:  BTFSS  03.2
0BE5:  GOTO   3F0
0BE6:  MOVLW  8A
0BE7:  BSF    03.6
0BE8:  MOVWF  0D
0BE9:  MOVLW  00
0BEA:  MOVWF  0F
0BEB:  BCF    0A.3
0BEC:  BCF    03.6
0BED:  CALL   597
0BEE:  BSF    0A.3
0BEF:  GOTO   3FD
....................    else if(tt_ht == 3) lcd_data(" T ");
0BF0:  MOVF   2F,W
0BF1:  SUBLW  03
0BF2:  BTFSS  03.2
0BF3:  GOTO   3FD
0BF4:  MOVLW  8C
0BF5:  BSF    03.6
0BF6:  MOVWF  0D
0BF7:  MOVLW  00
0BF8:  MOVWF  0F
0BF9:  BCF    0A.3
0BFA:  BCF    03.6
0BFB:  CALL   597
0BFC:  BSF    0A.3
....................    lcd_setCursor(13, 1);
0BFD:  MOVLW  0D
0BFE:  MOVWF  73
0BFF:  MOVLW  01
0C00:  MOVWF  74
0C01:  BCF    0A.3
0C02:  CALL   55F
0C03:  BSF    0A.3
....................    lcd_data(gt_mod + 0x30);
0C04:  MOVLW  30
0C05:  ADDWF  30,W
0C06:  MOVWF  5F
0C07:  MOVWF  76
0C08:  BCF    0A.3
0C09:  CALL   57A
0C0A:  BSF    0A.3
....................    if(gt_mod != 0){
0C0B:  MOVF   30,F
0C0C:  BTFSC  03.2
0C0D:  GOTO   427
....................       lcd_data(tg_chinh/10 + 0x30); lcd_data(tg_chinh%10 + 0x30);
0C0E:  MOVF   31,W
0C0F:  MOVWF  5F
0C10:  MOVLW  0A
0C11:  MOVWF  60
0C12:  CALL   01E
0C13:  MOVLW  30
0C14:  ADDWF  78,W
0C15:  MOVWF  5F
0C16:  MOVWF  76
0C17:  BCF    0A.3
0C18:  CALL   57A
0C19:  BSF    0A.3
0C1A:  MOVF   31,W
0C1B:  MOVWF  5F
0C1C:  MOVLW  0A
0C1D:  MOVWF  60
0C1E:  CALL   01E
0C1F:  MOVLW  30
0C20:  ADDWF  77,W
0C21:  MOVWF  5F
0C22:  MOVWF  76
0C23:  BCF    0A.3
0C24:  CALL   57A
0C25:  BSF    0A.3
....................    }
0C26:  GOTO   430
....................    else
....................       lcd_data("__");
0C27:  MOVLW  8E
0C28:  BSF    03.6
0C29:  MOVWF  0D
0C2A:  MOVLW  00
0C2B:  MOVWF  0F
0C2C:  BCF    0A.3
0C2D:  BCF    03.6
0C2E:  CALL   597
0C2F:  BSF    0A.3
.................... }
.................... 
.................... #include <thu_vien_control_alarm.c>
.................... void giai_ma_gpg_alarm_lcd(){
....................    lcd_dis_xx_yy_zz(4,1,dec_gio_eat,dec_phut_eat,dec_giay_eat,e_33, e_22, e_11);
*
0843:  MOVF   33,W
0844:  MOVWF  61
0845:  BCF    0A.3
0846:  CALL   539
0847:  BSF    0A.3
0848:  MOVF   78,W
0849:  MOVWF  5F
084A:  MOVF   34,W
084B:  MOVWF  61
084C:  BCF    0A.3
084D:  CALL   539
084E:  BSF    0A.3
084F:  MOVF   78,W
0850:  MOVWF  60
0851:  MOVF   35,W
0852:  MOVWF  61
0853:  BCF    0A.3
0854:  CALL   539
0855:  BSF    0A.3
0856:  MOVF   78,W
0857:  MOVWF  61
0858:  MOVLW  00
0859:  BTFSC  32.2
085A:  MOVLW  01
085B:  MOVWF  62
085C:  MOVLW  00
085D:  BTFSC  32.1
085E:  MOVLW  01
085F:  MOVWF  63
0860:  MOVLW  00
0861:  BTFSC  32.0
0862:  MOVLW  01
0863:  MOVWF  64
0864:  MOVLW  04
0865:  MOVWF  65
0866:  MOVLW  01
0867:  MOVWF  66
0868:  MOVF   5F,W
0869:  MOVWF  67
086A:  MOVF   60,W
086B:  MOVWF  68
086C:  MOVF   78,W
086D:  MOVWF  69
086E:  MOVF   62,W
086F:  MOVWF  6A
0870:  MOVF   63,W
0871:  MOVWF  6B
0872:  MOVF   64,W
0873:  MOVWF  6C
0874:  BCF    0A.3
0875:  CALL   5E7
0876:  BSF    0A.3
0877:  RETURN
.................... }
.................... void phim_chon_mode_alarm(){
....................    if(nhan_btn_giu(1, bt3)){
*
0C4A:  CLRF   60
0C4B:  MOVLW  01
0C4C:  MOVWF  5F
0C4D:  MOVLW  33
0C4E:  MOVWF  61
0C4F:  BCF    0A.3
0C50:  CALL   6DB
0C51:  BSF    0A.3
0C52:  MOVF   78,F
0C53:  BTFSC  03.2
0C54:  GOTO   461
....................       if(gt_mod < 3) gt_mod++;
0C55:  BTFSC  30.7
0C56:  GOTO   45B
0C57:  MOVF   30,W
0C58:  SUBLW  02
0C59:  BTFSS  03.0
0C5A:  GOTO   45D
0C5B:  INCF   30,F
0C5C:  GOTO   45F
....................       else{
....................          gt_mod = 0;
0C5D:  CLRF   30
....................          dem_menu_tong_curr = 0;
0C5E:  CLRF   53
....................       }
....................       tg_chinh = 0;
0C5F:  CLRF   31
....................       giai_ma_gpg_alarm_lcd();
0C60:  CALL   043
....................    }
.................... }
.................... void tang_giay_eat(){
....................    if(eat_ss == 0x59) eat_ss = 0;
*
0C78:  MOVF   35,W
0C79:  SUBLW  59
0C7A:  BTFSS  03.2
0C7B:  GOTO   47E
0C7C:  CLRF   35
0C7D:  GOTO   486
....................    else eat_ss = tang_or_giam_bcd(eat_ss, tang);
0C7E:  MOVF   35,W
0C7F:  MOVWF  5F
0C80:  CLRF   60
0C81:  BCF    0A.3
0C82:  CALL   7CB
0C83:  BSF    0A.3
0C84:  MOVF   78,W
0C85:  MOVWF  35
.................... }
.................... void tang_phut_eat(){
....................    if(eat_pp == 0x59) eat_pp = 0;
*
0C87:  MOVF   34,W
0C88:  SUBLW  59
0C89:  BTFSS  03.2
0C8A:  GOTO   48D
0C8B:  CLRF   34
0C8C:  GOTO   495
....................    else eat_pp = tang_or_giam_bcd(eat_pp, tang);
0C8D:  MOVF   34,W
0C8E:  MOVWF  5F
0C8F:  CLRF   60
0C90:  BCF    0A.3
0C91:  CALL   7CB
0C92:  BSF    0A.3
0C93:  MOVF   78,W
0C94:  MOVWF  34
.................... }
.................... void tang_gio_eat(){
....................    if(eat_hh == 0x23) eat_hh = 0;
*
0C96:  MOVF   33,W
0C97:  SUBLW  23
0C98:  BTFSS  03.2
0C99:  GOTO   49C
0C9A:  CLRF   33
0C9B:  GOTO   4A4
....................    else eat_hh = tang_or_giam_bcd(eat_hh, tang);
0C9C:  MOVF   33,W
0C9D:  MOVWF  5F
0C9E:  CLRF   60
0C9F:  BCF    0A.3
0CA0:  CALL   7CB
0CA1:  BSF    0A.3
0CA2:  MOVF   78,W
0CA3:  MOVWF  33
.................... }
.................... void chinh_tang_gpg_eat(){
....................    switch(gt_mod){
*
0C6D:  MOVF   30,W
0C6E:  XORLW  01
0C6F:  BTFSC  03.2
0C70:  GOTO   478
0C71:  XORLW  03
0C72:  BTFSC  03.2
0C73:  GOTO   487
0C74:  XORLW  01
0C75:  BTFSC  03.2
0C76:  GOTO   496
0C77:  GOTO   4A5
....................       case 1:
....................          tang_giay_eat();
....................          break;
*
0C86:  GOTO   4A5
....................       case 2:
....................          tang_phut_eat();
....................          break;
*
0C95:  GOTO   4A5
....................       case 3:
....................          tang_gio_eat();
....................          break;
*
0CA4:  GOTO   4A5
....................       default: break;
....................    }
.................... }
.................... 
.................... void phim_up_eat(){
....................    if(nhan_btn_giu(1, bt1)){
*
0C61:  CLRF   60
0C62:  MOVLW  01
0C63:  MOVWF  5F
0C64:  MOVLW  31
0C65:  MOVWF  61
0C66:  BCF    0A.3
0C67:  CALL   6DB
0C68:  BSF    0A.3
0C69:  MOVF   78,F
0C6A:  BTFSC  03.2
0C6B:  GOTO   4A9
....................       tg_chinh = 0;
0C6C:  CLRF   31
....................       chinh_tang_gpg_eat();
....................       e_11 = true; e_22 = true; e_33 = true;
*
0CA5:  BSF    32.0
0CA6:  BSF    32.1
0CA7:  BSF    32.2
....................       giai_ma_gpg_alarm_lcd();
0CA8:  CALL   043
....................    }
.................... }
.................... void giam_giay_eat(){
....................    if(eat_ss == 0) eat_ss = 0x59;
*
0CC0:  MOVF   35,F
0CC1:  BTFSS  03.2
0CC2:  GOTO   4C6
0CC3:  MOVLW  59
0CC4:  MOVWF  35
0CC5:  GOTO   4CF
....................    else eat_ss = tang_or_giam_bcd(eat_ss,giam);
0CC6:  MOVF   35,W
0CC7:  MOVWF  5F
0CC8:  MOVLW  01
0CC9:  MOVWF  60
0CCA:  BCF    0A.3
0CCB:  CALL   7CB
0CCC:  BSF    0A.3
0CCD:  MOVF   78,W
0CCE:  MOVWF  35
.................... }
.................... void giam_phut_eat(){
....................    if(eat_pp == 0) eat_pp = 0x59;
*
0CD0:  MOVF   34,F
0CD1:  BTFSS  03.2
0CD2:  GOTO   4D6
0CD3:  MOVLW  59
0CD4:  MOVWF  34
0CD5:  GOTO   4DF
....................    else eat_pp = tang_or_giam_bcd(eat_pp,giam);
0CD6:  MOVF   34,W
0CD7:  MOVWF  5F
0CD8:  MOVLW  01
0CD9:  MOVWF  60
0CDA:  BCF    0A.3
0CDB:  CALL   7CB
0CDC:  BSF    0A.3
0CDD:  MOVF   78,W
0CDE:  MOVWF  34
.................... }
.................... void giam_gio_eat(){
....................    if(eat_hh == 0) eat_hh = 0x23;
*
0CE0:  MOVF   33,F
0CE1:  BTFSS  03.2
0CE2:  GOTO   4E6
0CE3:  MOVLW  23
0CE4:  MOVWF  33
0CE5:  GOTO   4EF
....................    else eat_hh = tang_or_giam_bcd(eat_hh,giam);
0CE6:  MOVF   33,W
0CE7:  MOVWF  5F
0CE8:  MOVLW  01
0CE9:  MOVWF  60
0CEA:  BCF    0A.3
0CEB:  CALL   7CB
0CEC:  BSF    0A.3
0CED:  MOVF   78,W
0CEE:  MOVWF  33
.................... }
.................... void chinh_giam_gpg_eat(){
....................    switch(gt_mod){
*
0CB5:  MOVF   30,W
0CB6:  XORLW  01
0CB7:  BTFSC  03.2
0CB8:  GOTO   4C0
0CB9:  XORLW  03
0CBA:  BTFSC  03.2
0CBB:  GOTO   4D0
0CBC:  XORLW  01
0CBD:  BTFSC  03.2
0CBE:  GOTO   4E0
0CBF:  GOTO   4F0
....................       case 1:
....................          giam_giay_eat();
....................          break;
*
0CCF:  GOTO   4F0
....................       case 2:
....................          giam_phut_eat();
....................          break;
*
0CDF:  GOTO   4F0
....................       case 3:
....................          giam_gio_eat();
....................          break;
*
0CEF:  GOTO   4F0
....................       default: break;
....................    }
.................... }
.................... void phim_dw_eat(){
....................    if(nhan_btn_giu(1, bt2)){
*
0CA9:  CLRF   60
0CAA:  MOVLW  01
0CAB:  MOVWF  5F
0CAC:  MOVLW  32
0CAD:  MOVWF  61
0CAE:  BCF    0A.3
0CAF:  CALL   6DB
0CB0:  BSF    0A.3
0CB1:  MOVF   78,F
0CB2:  BTFSC  03.2
0CB3:  GOTO   4F4
....................       tg_chinh = 0;
0CB4:  CLRF   31
....................       chinh_giam_gpg_eat();
....................       e_11 = true; e_22 = true; e_33 = true;
*
0CF0:  BSF    32.0
0CF1:  BSF    32.1
0CF2:  BSF    32.2
....................       giai_ma_gpg_alarm_lcd();
0CF3:  CALL   043
....................    }
.................... }
.................... void log_mode_alarm(){
....................    lcd_setCursor(13, 1);
*
0D07:  MOVLW  0D
0D08:  MOVWF  73
0D09:  MOVLW  01
0D0A:  MOVWF  74
0D0B:  BCF    0A.3
0D0C:  CALL   55F
0D0D:  BSF    0A.3
....................    lcd_data(gt_mod + 0x30);
0D0E:  MOVLW  30
0D0F:  ADDWF  30,W
0D10:  MOVWF  5F
0D11:  MOVWF  76
0D12:  BCF    0A.3
0D13:  CALL   57A
0D14:  BSF    0A.3
....................    if(gt_mod != 0){
0D15:  MOVF   30,F
0D16:  BTFSC  03.2
0D17:  GOTO   531
....................       lcd_data(tg_chinh/10 + 0x30); lcd_data(tg_chinh%10 + 0x30);
0D18:  MOVF   31,W
0D19:  MOVWF  5F
0D1A:  MOVLW  0A
0D1B:  MOVWF  60
0D1C:  CALL   01E
0D1D:  MOVLW  30
0D1E:  ADDWF  78,W
0D1F:  MOVWF  5F
0D20:  MOVWF  76
0D21:  BCF    0A.3
0D22:  CALL   57A
0D23:  BSF    0A.3
0D24:  MOVF   31,W
0D25:  MOVWF  5F
0D26:  MOVLW  0A
0D27:  MOVWF  60
0D28:  CALL   01E
0D29:  MOVLW  30
0D2A:  ADDWF  77,W
0D2B:  MOVWF  5F
0D2C:  MOVWF  76
0D2D:  BCF    0A.3
0D2E:  CALL   57A
0D2F:  BSF    0A.3
....................    }
0D30:  GOTO   53A
....................    else
....................       lcd_data("__");
0D31:  MOVLW  90
0D32:  BSF    03.6
0D33:  MOVWF  0D
0D34:  MOVLW  00
0D35:  MOVWF  0F
0D36:  BCF    0A.3
0D37:  BCF    03.6
0D38:  CALL   597
0D39:  BSF    0A.3
.................... }
.................... 
.................... #include <thu_vien_ds18b20.c>
.................... #define touch_pin pin_a0
.................... #define DS18B20_PIN touch_pin
.................... 
.................... #include <touch.c>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                        Dallas Touch Driver                        ////
.................... ////                                                                   ////
.................... ////                                                                   ////
.................... ////  data = touch_read_bit()     Reads one bit from a touch device    ////
.................... ////                                                                   ////
.................... ////  data = touch_read_BYTE()    Reads one byte from a touch device.  ////
.................... ////                                                                   ////
.................... ////  ok = touch_write_bit(data)  Writes one bit to a touch device     ////
.................... ////                              and returns true if all went ok.     ////
.................... ////                              A false indicates a collision with   ////
.................... ////                              another device.                      ////
.................... ////                                                                   ////
.................... ////  ok = touch_write_byte(data) Writes one byte to a touch device    ////
.................... ////                              and returns true if all went ok.     ////
.................... ////                              A false indicates a collision with   ////
.................... ////                              another device.                      ////
.................... ////                                                                   ////
.................... ////  present = touch_present()   Issues a reset and returns true      ////
.................... ////                              if the touch device is there.        ////
.................... ////                                                                   ////
.................... ////  reset_pulse()               Issues a reset and waits for a       ////
.................... ////                              present pulse.                       ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef  TOUCH_C
.................... #define  TOUCH_C
.................... 
.................... #ifndef TOUCH_PIN
....................    #define TOUCH_PIN  PIN_B0
.................... #endif
.................... 
.................... #define TOUCH_PIN_LOW()    output_drive(TOUCH_PIN); output_low(TOUCH_PIN)
.................... #define TOUCH_PIN_HIGH()    output_drive(TOUCH_PIN); output_high(TOUCH_PIN)
.................... #define TOUCH_PIN_FLOAT()  output_float(TOUCH_PIN)
.................... #define TOUCH_PIN_READ()      input_state(TOUCH_PIN)
.................... 
.................... /////////////////////////////
.................... ////                     ////
.................... //// Function Prototypes ////
.................... ////                     ////
.................... /////////////////////////////
.................... 
.................... /*
.................... int1 touch_read_bit()
.................... This will read back a bit from the DS1993
.................... PARAMS: none
.................... RETURNS: A bit from the DS1993
.................... */
.................... int1 touch_read_bit();
.................... 
.................... /*
.................... BYTE touch_read_byte()
.................... This will read back a byte from the DS1993
.................... PARAMS: none
.................... RETURNS: A byte from the DS1993
.................... */
.................... BYTE touch_read_byte();
.................... 
.................... /*
.................... BOOLEAN touch_write_bit(int1 data)
.................... This will write a bit to the DS1993
.................... PARAMS: The bit to write
.................... RETURNS: True if completed successfully, false if otherwise
.................... */
.................... BOOLEAN touch_write_bit(int1 data);
.................... 
.................... /*
.................... BOOLEAN touch_write_byte(BYTE data)
.................... This will write a byte to the DS1993
.................... PARAMS: The byte to write
.................... RETURNS: True if completed successfully, false if otherwise
.................... */
.................... BOOLEAN touch_write_byte(BYTE data);
.................... 
.................... /*
.................... BOOLEAN touch_present()
.................... This will evaluate whether or not there is a touch present on the DS1993
.................... PARAMS: none
.................... RETURNS: True if a touch is present, false if otherwise
.................... */
.................... BOOLEAN touch_present();
.................... 
.................... /*
.................... void reset_pulse()
.................... This will send the DS1993 a reset pulse
.................... PARAMS: none
.................... RETURNS: none
.................... */
.................... void reset_pulse();
.................... 
.................... //////////////////////////////////
.................... ////                          ////
.................... //// Function Implementations ////
.................... ////                          ////
.................... //////////////////////////////////
.................... 
.................... /*
.................... int1 touch_read_bit()
.................... This will read back a bit from the DS1993
.................... PARAMS: none
.................... RETURNS: A bit from the DS1993
.................... */
.................... int1 touch_read_bit()
.................... {
....................    int1 data;
.................... 
....................    TOUCH_PIN_LOW();
....................    delay_us(14);
....................    TOUCH_PIN_FLOAT();
....................    delay_us(5);
....................    data = TOUCH_PIN_READ();
....................    delay_us(100);
.................... 
....................    return data;
.................... }
.................... 
.................... /*
.................... BYTE touch_read_byte()
.................... This will read back a byte from the DS1993
.................... PARAMS: none
.................... RETURNS: A byte from the DS1993
.................... */
.................... BYTE touch_read_byte()
.................... {
....................    BYTE i,data;
.................... 
....................    for(i=1; i <= 8; ++i)
....................       shift_right(&data, 1, touch_read_bit());
.................... 
....................    return data;
.................... }
.................... 
.................... /*
.................... BOOLEAN touch_write_bit(int1 data)
.................... This will write a bit to the DS1993
.................... PARAMS: The bit to write
.................... RETURNS: True if completed successfully, false if otherwise
.................... */
.................... BOOLEAN touch_write_bit(int1 data)
.................... {
....................    TOUCH_PIN_LOW();
*
02F4:  BSF    03.5
02F5:  BCF    05.0
02F6:  BCF    05.0
02F7:  BCF    03.5
02F8:  BCF    05.0
....................    delay_us(10);
02F9:  MOVLW  10
02FA:  MOVWF  77
02FB:  DECFSZ 77,F
02FC:  GOTO   2FB
02FD:  NOP
....................    if(data)
02FE:  MOVF   62,F
02FF:  BTFSC  03.2
0300:  GOTO   311
....................    {
....................       TOUCH_PIN_HIGH();
0301:  BSF    03.5
0302:  BCF    05.0
0303:  BCF    05.0
0304:  BCF    03.5
0305:  BSF    05.0
....................       delay_us(10);
0306:  MOVLW  10
0307:  MOVWF  77
0308:  DECFSZ 77,F
0309:  GOTO   308
030A:  NOP
....................       if(!TOUCH_PIN_READ())
030B:  BTFSC  05.0
030C:  GOTO   310
....................          return FALSE;
030D:  MOVLW  00
030E:  MOVWF  78
030F:  GOTO   32F
....................    }
0310:  GOTO   320
....................    else
....................    {
....................       TOUCH_PIN_LOW();
0311:  BSF    03.5
0312:  BCF    05.0
0313:  BCF    05.0
0314:  BCF    03.5
0315:  BCF    05.0
....................       delay_us(10);
0316:  MOVLW  10
0317:  MOVWF  77
0318:  DECFSZ 77,F
0319:  GOTO   318
031A:  NOP
....................       if(TOUCH_PIN_READ())
031B:  BTFSS  05.0
031C:  GOTO   320
....................          return FALSE;
031D:  MOVLW  00
031E:  MOVWF  78
031F:  GOTO   32F
....................    }
....................    delay_us(50);
0320:  MOVLW  53
0321:  MOVWF  77
0322:  DECFSZ 77,F
0323:  GOTO   322
....................    TOUCH_PIN_HIGH();
0324:  BSF    03.5
0325:  BCF    05.0
0326:  BCF    05.0
0327:  BCF    03.5
0328:  BSF    05.0
....................    delay_us(50);
0329:  MOVLW  53
032A:  MOVWF  77
032B:  DECFSZ 77,F
032C:  GOTO   32B
....................    return TRUE;
032D:  MOVLW  01
032E:  MOVWF  78
.................... }
.................... 
.................... /*
.................... BOOLEAN touch_write_byte(BYTE data)
.................... This will write a byte to the DS1993
.................... PARAMS: The byte to write
.................... RETURNS: True if completed successfully, false if otherwise
.................... */
.................... BOOLEAN touch_write_byte(BYTE data)
.................... {
....................    BYTE i;
.................... 
....................    for(i=1; i<=8; ++i)
*
02E6:  MOVLW  01
02E7:  MOVWF  60
02E8:  MOVF   60,W
02E9:  SUBLW  08
02EA:  BTFSS  03.0
02EB:  GOTO   337
....................       if(!touch_write_bit(shift_right(&data, 1, 0)))
02EC:  BCF    03.0
02ED:  RRF    5F,F
02EE:  MOVLW  00
02EF:  BTFSC  03.0
02F0:  MOVLW  01
02F1:  MOVWF  61
02F2:  MOVF   61,W
02F3:  MOVWF  62
*
032F:  MOVF   78,F
0330:  BTFSS  03.2
0331:  GOTO   335
....................          return FALSE;
0332:  MOVLW  00
0333:  MOVWF  78
0334:  GOTO   339
0335:  INCF   60,F
0336:  GOTO   2E8
.................... 
....................    return TRUE;
0337:  MOVLW  01
0338:  MOVWF  78
0339:  RETURN
.................... }
.................... 
.................... /*
.................... BOOLEAN touch_present()
.................... This will evaluate whether or not there is a touch present on the DS1993
.................... PARAMS: none
.................... RETURNS: True if a touch is present, false if otherwise
.................... */
.................... BOOLEAN touch_present()
.................... {
....................    BOOLEAN present;
....................    TOUCH_PIN_LOW();
*
02BF:  BSF    03.5
02C0:  BCF    05.0
02C1:  BCF    05.0
02C2:  BCF    03.5
02C3:  BCF    05.0
....................    delay_us(500);
02C4:  MOVLW  02
02C5:  MOVWF  60
02C6:  MOVLW  F9
02C7:  MOVWF  62
02C8:  CALL   2B0
02C9:  DECFSZ 60,F
02CA:  GOTO   2C6
....................    TOUCH_PIN_FLOAT();
02CB:  BSF    03.5
02CC:  BSF    05.0
....................    delay_us(5);
02CD:  MOVLW  08
02CE:  MOVWF  77
02CF:  DECFSZ 77,F
02D0:  GOTO   2CF
.................... 
....................    if(!TOUCH_PIN_READ())
02D1:  BCF    03.5
02D2:  BTFSC  05.0
02D3:  GOTO   2D7
....................       return FALSE;
02D4:  MOVLW  00
02D5:  MOVWF  78
02D6:  GOTO   2E5
.................... 
....................    delay_us(65);
02D7:  MOVLW  6C
02D8:  MOVWF  77
02D9:  DECFSZ 77,F
02DA:  GOTO   2D9
....................    present = !TOUCH_PIN_READ();
02DB:  BCF    5F.0
02DC:  BTFSS  05.0
02DD:  BSF    5F.0
....................    delay_us(240);
02DE:  MOVLW  F0
02DF:  MOVWF  62
02E0:  CALL   2B0
....................    return present;
02E1:  MOVLW  00
02E2:  BTFSC  5F.0
02E3:  MOVLW  01
02E4:  MOVWF  78
02E5:  RETURN
.................... }
.................... 
.................... /*
.................... void reset_pulse()
.................... This will send the DS1993 a reset pulse
.................... PARAMS: none
.................... RETURNS: none
.................... */
.................... void reset_pulse()
.................... {
....................    TOUCH_PIN_LOW();
....................    delay_us(500);
....................    TOUCH_PIN_FLOAT();
....................    delay_us(5);
....................    while(!touch_present());
.................... }
.................... 
.................... 
.................... #endif
.................... 
.................... #define search_rom       0xf0
.................... #define read_rom         0x33
.................... #define match_rom        0x55
.................... #define skip_rom         0xcc
.................... #define alarm_search     0xec
.................... #define read_scratchpad  0xbe
.................... #define write_scratchpad 0x4e
.................... #define copy_scratchpad  0x48
.................... #define convert_t        0x44
.................... 
.................... si16 nhiet_do;
.................... usi8 dt_ng, dt_ngt;
.................... usi16 dt_tp, dt_tpt;
.................... usi16 dt_tp_real;
.................... 
.................... /*
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
....................          CACH 1 SU DUNG THU VIEN TOUCH.C
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... */
.................... void ds18b20_no_ds18b(usi8 x, y)
.................... {
....................    lcd_setCursor(x, y);
....................    lcd_data("NO DS18B20");
.................... }
.................... 
.................... void ds18b20_khoi_tao()
.................... {
....................    touch_present();
*
033A:  CALL   2BF
....................    touch_write_byte(skip_rom);
033B:  MOVLW  CC
033C:  MOVWF  5F
033D:  CALL   2E6
....................    touch_write_byte(write_scratchpad);
033E:  MOVLW  4E
033F:  MOVWF  5F
0340:  CALL   2E6
....................    touch_write_byte(0x0);
0341:  CLRF   5F
0342:  CALL   2E6
....................    touch_write_byte(0x0);
0343:  CLRF   5F
0344:  CALL   2E6
....................    touch_write_byte(0x7f); // 12 bit
0345:  MOVLW  7F
0346:  MOVWF  5F
0347:  CALL   2E6
.................... 
....................    touch_present();
0348:  CALL   2BF
....................    touch_write_byte(skip_rom);
0349:  MOVLW  CC
034A:  MOVWF  5F
034B:  CALL   2E6
....................    touch_write_byte(convert_t);
034C:  MOVLW  44
034D:  MOVWF  5F
034E:  CALL   2E6
034F:  BSF    0A.3
0350:  BCF    0A.4
0351:  GOTO   0D6 (RETURN)
.................... }
.................... 
.................... usi16 ds18b20_read_temp_c1()
.................... {
....................    usi8 bl, bh;
....................    usi16 w;
....................    touch_write_byte(skip_rom);
....................    touch_write_byte(read_scratchpad);
....................    bl = touch_read_byte();
....................    bh = touch_read_byte();
....................    w = make16(bh, bl);
....................    touch_present();
....................    touch_write_byte(skip_rom);
....................    touch_write_byte(convert_t);
....................    return w;
.................... }
.................... 
.................... void ds18b20_doc_rom(usi8 time_s)
.................... {
....................    usi8 rom_code[8];
....................    usi8 xh, xl;
....................    si8 i;
....................    if (touch_present())
....................    {
....................       touch_write_byte(read_rom);
....................       for (i = 0; i < 8; i++)
....................          rom_code[i] = touch_read_byte();
....................       lcd_setCursor(0, 0);
....................       lcd_data("CO DS18B20");
....................       lcd_setCursor(0, 1);
....................       for (i = 7; i > -1; i--)
....................       {
....................          xh = rom_code[i] / 16;
....................          if (xh > 9)
....................             xh = xh + 0x37;
....................          else
....................             xh = xh + 0x30;
....................          xl = rom_code[i] % 16;
....................          if (xl > 9)
....................             xl = xl + 0x37;
....................          else
....................             xl = xl + 0x30;
....................          lcd_data(xh);
....................          lcd_data(xl);
....................       }
....................    }
....................    else
....................       ds18b20_no_ds18b(0, 0);
....................    delay_ms(time_s * 1000);
....................    lcd_clear();
.................... }
.................... /*
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
....................          CACH 2 KHONG SU DUNG THU VIEN TOUCH.C
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... */
.................... bool ds18b20_start(){
....................    output_low(DS18B20_PIN);
0352:  BSF    03.5
0353:  BCF    05.0
0354:  BCF    03.5
0355:  BCF    05.0
....................    output_drive(DS18B20_PIN);
0356:  BSF    03.5
0357:  BCF    05.0
....................    delay_us(500);
0358:  MOVLW  02
0359:  BCF    03.5
035A:  MOVWF  61
035B:  MOVLW  F9
035C:  MOVWF  62
035D:  CALL   2B0
035E:  DECFSZ 61,F
035F:  GOTO   35B
....................    output_float(DS18B20_PIN);
0360:  BSF    03.5
0361:  BSF    05.0
....................    delay_us(100);
0362:  MOVLW  A6
0363:  MOVWF  77
0364:  DECFSZ 77,F
0365:  GOTO   364
0366:  NOP
....................    if(!input(DS18B20_PIN)){
0367:  BSF    05.0
0368:  BCF    03.5
0369:  BTFSC  05.0
036A:  GOTO   375
....................       delay_us(400);
036B:  MOVLW  02
036C:  MOVWF  61
036D:  MOVLW  C7
036E:  MOVWF  62
036F:  CALL   2B0
0370:  DECFSZ 61,F
0371:  GOTO   36D
....................       return true;
0372:  MOVLW  01
0373:  MOVWF  78
0374:  GOTO   377
....................    }
....................    return false;
0375:  MOVLW  00
0376:  MOVWF  78
0377:  RETURN
.................... }
.................... 
.................... void ds18b20_write_bit(bool value){
....................    output_low(DS18B20_PIN);
*
038D:  BSF    03.5
038E:  BCF    05.0
038F:  BCF    03.5
0390:  BCF    05.0
....................    output_drive(DS18B20_PIN);
0391:  BSF    03.5
0392:  BCF    05.0
....................    delay_us(2);
0393:  MOVLW  03
0394:  MOVWF  77
0395:  DECFSZ 77,F
0396:  GOTO   395
....................    output_bit(DS18B20_PIN, value);
0397:  BCF    03.5
0398:  MOVF   64,F
0399:  BTFSS  03.2
039A:  GOTO   39D
039B:  BCF    05.0
039C:  GOTO   39E
039D:  BSF    05.0
039E:  BSF    03.5
039F:  BCF    05.0
....................    delay_us(80);
03A0:  MOVLW  85
03A1:  MOVWF  77
03A2:  DECFSZ 77,F
03A3:  GOTO   3A2
....................    output_float(DS18B20_PIN);
03A4:  BSF    05.0
....................    delay_us(2);
03A5:  MOVLW  03
03A6:  MOVWF  77
03A7:  DECFSZ 77,F
03A8:  GOTO   3A7
.................... }
.................... 
.................... void ds18b20_write_byte(int8 value){
....................    for(int8 i = 0; i < 8; i++)
*
0378:  CLRF   62
0379:  MOVF   62,W
037A:  SUBLW  07
037B:  BTFSS  03.0
037C:  GOTO   3AC
....................       ds18b20_write_bit(bit_test(value,i));
037D:  MOVF   61,W
037E:  MOVWF  77
037F:  MOVF   62,W
0380:  MOVWF  78
0381:  BTFSC  03.2
0382:  GOTO   387
0383:  BCF    03.0
0384:  RRF    77,F
0385:  DECFSZ 78,F
0386:  GOTO   383
0387:  MOVLW  00
0388:  BTFSC  77.0
0389:  MOVLW  01
038A:  MOVWF  63
038B:  MOVF   63,W
038C:  MOVWF  64
*
03A9:  BCF    03.5
03AA:  INCF   62,F
03AB:  GOTO   379
03AC:  RETURN
.................... }
.................... 
.................... bool ds18b20_read_bit(){
....................    bool value;
....................    output_low(DS18B20_PIN);
*
03B3:  BSF    03.5
03B4:  BCF    05.0
03B5:  BCF    03.5
03B6:  BCF    05.0
....................    output_drive(DS18B20_PIN);
03B7:  BSF    03.5
03B8:  BCF    05.0
....................    delay_us(2);
03B9:  MOVLW  03
03BA:  MOVWF  77
03BB:  DECFSZ 77,F
03BC:  GOTO   3BB
....................    output_float(DS18B20_PIN);
03BD:  BSF    05.0
....................    delay_us(5);
03BE:  MOVLW  08
03BF:  MOVWF  77
03C0:  DECFSZ 77,F
03C1:  GOTO   3C0
....................    value = input(DS18B20_PIN);
03C2:  BSF    05.0
03C3:  BCF    03.5
03C4:  BCF    67.0
03C5:  BTFSC  05.0
03C6:  BSF    67.0
....................    delay_us(100);
03C7:  MOVLW  A6
03C8:  MOVWF  77
03C9:  DECFSZ 77,F
03CA:  GOTO   3C9
03CB:  NOP
....................    return value;
03CC:  MOVLW  00
03CD:  BTFSC  67.0
03CE:  MOVLW  01
03CF:  MOVWF  78
.................... }
.................... 
.................... int8 ds18b20_read_byte(){
*
03AD:  CLRF   65
....................    int8 value = 0;
....................    for(int8 i = 0; i < 8; i++)
03AE:  CLRF   66
03AF:  MOVF   66,W
03B0:  SUBLW  07
03B1:  BTFSS  03.0
03B2:  GOTO   3D9
....................       shift_right(&value,1,ds18b20_read_bit());
*
03D0:  MOVF   78,F
03D1:  BTFSS  03.2
03D2:  GOTO   3D5
03D3:  BCF    03.0
03D4:  GOTO   3D6
03D5:  BSF    03.0
03D6:  RRF    65,F
03D7:  INCF   66,F
03D8:  GOTO   3AF
....................    return value;
03D9:  MOVF   65,W
03DA:  MOVWF  78
03DB:  RETURN
.................... }
.................... 
.................... bool ds18b20_read_temp_c2(int16 *raw_temp_value){
....................    if(!ds18b20_start())
*
0404:  CALL   352
0405:  MOVF   78,F
0406:  BTFSS  03.2
0407:  GOTO   40B
....................       return false;
0408:  MOVLW  00
0409:  MOVWF  78
040A:  GOTO   459
....................    ds18b20_write_byte(skip_rom);
040B:  MOVLW  CC
040C:  MOVWF  61
040D:  CALL   378
....................    ds18b20_write_byte(convert_t);
040E:  MOVLW  44
040F:  MOVWF  61
0410:  CALL   378
....................    while(ds18b20_read_byte() == 0);
0411:  CALL   3AD
0412:  MOVF   78,F
0413:  BTFSC  03.2
0414:  GOTO   411
....................    if(!ds18b20_start())
0415:  CALL   352
0416:  MOVF   78,F
0417:  BTFSS  03.2
0418:  GOTO   41C
....................       return false;
0419:  MOVLW  00
041A:  MOVWF  78
041B:  GOTO   459
....................    ds18b20_write_byte(skip_rom);
041C:  MOVLW  CC
041D:  MOVWF  61
041E:  CALL   378
....................    ds18b20_write_byte(read_scratchpad);
041F:  MOVLW  BE
0420:  MOVWF  61
0421:  CALL   378
....................    *raw_temp_value = ds18b20_read_byte();
0422:  MOVF   60,W
0423:  MOVWF  7A
0424:  MOVF   5F,W
0425:  MOVWF  61
0426:  MOVF   60,W
0427:  MOVWF  62
0428:  CALL   3AD
0429:  MOVF   61,W
042A:  MOVWF  04
042B:  BCF    03.7
042C:  BTFSC  62.0
042D:  BSF    03.7
042E:  INCF   04,F
042F:  CLRF   00
0430:  DECF   04,F
0431:  MOVF   78,W
0432:  MOVWF  00
....................    *raw_temp_value |= (int16)(ds18b20_read_byte()) << 8;
0433:  MOVF   60,W
0434:  MOVWF  7A
0435:  MOVF   5F,W
0436:  MOVWF  61
0437:  MOVF   60,W
0438:  MOVWF  62
0439:  MOVF   5F,W
043A:  MOVWF  04
043B:  BCF    03.7
043C:  BTFSC  60.0
043D:  BSF    03.7
043E:  INCF   04,F
043F:  MOVF   00,W
0440:  MOVWF  64
0441:  DECF   04,F
0442:  MOVF   00,W
0443:  MOVWF  63
0444:  CALL   3AD
0445:  CLRF   66
0446:  MOVLW  00
0447:  IORWF  63,W
0448:  MOVWF  77
0449:  MOVF   78,W
044A:  IORWF  64,W
044B:  MOVWF  7A
044C:  MOVF   61,W
044D:  MOVWF  04
044E:  BCF    03.7
044F:  BTFSC  62.0
0450:  BSF    03.7
0451:  INCF   04,F
0452:  MOVF   7A,W
0453:  MOVWF  00
0454:  DECF   04,F
0455:  MOVF   77,W
0456:  MOVWF  00
....................    return true;
0457:  MOVLW  01
0458:  MOVWF  78
.................... }
.................... 
.................... /*
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
....................    HIEN THI NHIET DO LEN LCD 2 SO NGUYEN VA 3 SO THAP PHAN
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... */
.................... void ds18b20_lcd_data(usi16 data, int8 x, int8 y){
....................    dt_ng = data>>4;
....................    dt_tp = data & 0x000f;
....................    if(dt_ngt != dt_ng){
....................       dt_ngt = dt_ng;
....................       lcd_dis_2num_dot(dt_ng, x, y, enable, disable);
....................    }
....................    if(dt_tpt != dt_tp){
....................       dt_tpt = dt_tp;
....................       dt_tp_real = (dt_tp*625)/10;
....................       lcd_dis_3num_dot(dt_tp_real, x+2, y, enable, enable);
....................    }
.................... }
.................... 
.................... void ds18b20_read_temp(){
....................    if(ds18b20_read_temp_c2(&nhiet_do))
*
0401:  CLRF   60
0402:  MOVLW  55
0403:  MOVWF  5F
*
0459:  MOVF   78,F
045A:  BTFSC  03.2
045B:  GOTO   468
....................       dt_ng = nhiet_do>>4;
045C:  RRF    56,W
045D:  MOVWF  7A
045E:  RRF    55,W
045F:  MOVWF  79
0460:  RRF    7A,F
0461:  RRF    79,F
0462:  RRF    7A,F
0463:  RRF    79,F
0464:  RRF    7A,F
0465:  RRF    79,F
0466:  MOVF   79,W
0467:  MOVWF  57
....................       dt_tp = nhiet_do & 0x000f;
0468:  MOVF   55,W
0469:  ANDLW  0F
046A:  MOVWF  77
046B:  CLRF   7A
046C:  MOVF   77,W
046D:  MOVWF  59
046E:  MOVF   7A,W
046F:  MOVWF  5A
....................       dt_tp_real = (dt_tp*625)/10;
0470:  MOVF   5A,W
0471:  MOVWF  60
0472:  MOVF   59,W
0473:  MOVWF  5F
0474:  MOVLW  02
0475:  MOVWF  62
0476:  MOVLW  71
0477:  MOVWF  61
*
048C:  MOVF   79,W
048D:  MOVWF  60
048E:  MOVF   78,W
048F:  MOVWF  5F
0490:  MOVF   79,W
0491:  MOVWF  6B
0492:  MOVF   78,W
0493:  MOVWF  6A
0494:  CLRF   6D
0495:  MOVLW  0A
0496:  MOVWF  6C
0497:  CALL   3DC
0498:  MOVF   79,W
0499:  MOVWF  5E
049A:  MOVF   78,W
049B:  MOVWF  5D
049C:  BSF    0A.3
049D:  BCF    0A.4
049E:  GOTO   0DE (RETURN)
....................       //ds18b20_lcd_data(nhiet_do,0,1);
....................    //else ds18b20_no_ds18b(0,1);
.................... }
.................... 
.................... #include <thu_vien_control_chiler.c>
.................... void control_temperature(int8 nd_ss, int8 gh){
....................    if(nd_ss > gh){
....................    // water is hot
....................       output_bit(pinCold, 1);
....................       output_bit(pinHot,  0);
....................    }
....................    else{
....................    // water is cold
....................       output_bit(pinCold, 0);
....................       output_bit(pinHot,  1);
....................    }
.................... }
.................... 
.................... void servo_degree_0(){
....................    unsigned int i;
....................    for(i = 0; i < 50; i++){
....................       output_bit(pinServo, 1);
....................       Delay_us(800); // pulse of 800us
....................       output_bit(pinServo, 0);
....................       Delay_us(19200);
....................    }
.................... }
.................... 
.................... void servo_degree_90(){
....................    unsigned int i;
....................    for(i = 0; i < 50; i++){
....................       output_bit(pinServo, 1);
....................       Delay_us(1500); // pulse of 1500us
....................       output_bit(pinServo, 0);
....................       Delay_us(18500);
....................    }
.................... }
.................... 
.................... void servo_degree_180(){
....................    unsigned int i;
....................    for(i = 0; i < 50; i++){
....................       output_bit(pinServo, 1);
....................       Delay_us(2200); // pulse of 2200us
....................       output_bit(pinServo, 0);
....................       Delay_us(17800);
....................    }
.................... }
.................... 
.................... void control_servo(){
....................    if(dec_gio_ds == dec_gio_eat && dec_phut_ds == dec_phut_eat && dec_giay_ds == dec_giay_eat){
....................       flag_servo = true;
....................    }
....................    if(flag_servo){
....................       servo_degree_90();
....................       //output_bit(pinServo, 1);
....................    }
....................    else{
....................       servo_degree_0();
....................       //output_bit(pinServo, 0);
....................    }
.................... }
.................... 
.................... #include <thu_vien_uart.c>
.................... void read_data(){
.................... 
.................... }
.................... void write_data(){
.................... 
.................... }
.................... 
.................... 
.................... 
.................... 
.................... void select_menu(){
....................    if(nhan_btn_nha(true, bt0)){
*
08DF:  MOVLW  01
08E0:  MOVWF  5F
08E1:  MOVLW  30
08E2:  MOVWF  60
08E3:  BCF    0A.3
08E4:  CALL   4D8
08E5:  BSF    0A.3
08E6:  MOVF   78,F
08E7:  BTFSC  03.2
08E8:  GOTO   0F0
....................       dem_menu_tong_curr++;
08E9:  INCF   53,F
....................       bdn = 0; gt_mod = 0; tt_ht = 0;
08EA:  CLRF   2E
08EB:  CLRF   30
08EC:  CLRF   2F
....................       e_11 = true; e_22 = true; e_33 = true;
08ED:  BSF    32.0
08EE:  BSF    32.1
08EF:  BSF    32.2
....................    }
....................    
....................    if(dem_menu_tong_curr >= level_menu)
08F0:  MOVF   53,W
08F1:  SUBLW  05
08F2:  BTFSC  03.0
08F3:  GOTO   0F6
....................       dem_menu_tong_curr = 0;
08F4:  CLRF   53
08F5:  GOTO   0FF
....................    else{
....................       if(dem_menu_tong_curr != dem_menu_tong_prev){
08F6:  MOVF   54,W
08F7:  SUBWF  53,W
08F8:  BTFSC  03.2
08F9:  GOTO   0FF
....................          dem_menu_tong_prev = dem_menu_tong_curr;
08FA:  MOVF   53,W
08FB:  MOVWF  54
....................          lcd_clear();
08FC:  BCF    0A.3
08FD:  CALL   1B8
08FE:  BSF    0A.3
....................       }
....................    }
....................    
....................    switch(dem_menu_tong_curr){
08FF:  MOVF   53,W
0900:  BTFSC  03.2
0901:  GOTO   10F
0902:  XORLW  01
0903:  BTFSC  03.2
0904:  GOTO   167
0905:  XORLW  03
0906:  BTFSC  03.2
0907:  GOTO   1DC
0908:  XORLW  01
0909:  BTFSC  03.2
090A:  GOTO   431
090B:  XORLW  07
090C:  BTFSC  03.2
090D:  GOTO   53B
090E:  GOTO   5B9
....................       case 0:
....................          /* hien thi man hinh chinh */
....................          lcd_dis_xx_yy_zz(4,0,dec_gio_ds,dec_phut_ds,dec_giay_ds,1,1,1);
090F:  MOVF   42,W
0910:  MOVWF  61
0911:  BCF    0A.3
0912:  CALL   539
0913:  BSF    0A.3
0914:  MOVF   78,W
0915:  MOVWF  5F
0916:  MOVF   41,W
0917:  MOVWF  61
0918:  BCF    0A.3
0919:  CALL   539
091A:  BSF    0A.3
091B:  MOVF   78,W
091C:  MOVWF  60
091D:  MOVF   40,W
091E:  MOVWF  61
091F:  BCF    0A.3
0920:  CALL   539
0921:  BSF    0A.3
0922:  MOVF   78,W
0923:  MOVWF  61
0924:  MOVLW  04
0925:  MOVWF  65
0926:  CLRF   66
0927:  MOVF   5F,W
0928:  MOVWF  67
0929:  MOVF   60,W
092A:  MOVWF  68
092B:  MOVF   78,W
092C:  MOVWF  69
092D:  MOVLW  01
092E:  MOVWF  6A
092F:  MOVWF  6B
0930:  MOVWF  6C
0931:  BCF    0A.3
0932:  CALL   5E7
0933:  BSF    0A.3
....................          lcd_setCursor(2,1);
0934:  MOVLW  02
0935:  MOVWF  73
0936:  MOVLW  01
0937:  MOVWF  74
0938:  BCF    0A.3
0939:  CALL   55F
093A:  BSF    0A.3
....................          lcd_data("ND: ");
093B:  MOVLW  9E
093C:  BSF    03.6
093D:  MOVWF  0D
093E:  MOVLW  00
093F:  MOVWF  0F
0940:  BCF    0A.3
0941:  BCF    03.6
0942:  CALL   597
0943:  BSF    0A.3
....................          lcd_dis_2num_dot(dt_ng, 6, 1, enable, disable);
0944:  CLRF   60
0945:  MOVF   57,W
0946:  MOVWF  5F
0947:  MOVLW  06
0948:  MOVWF  61
0949:  MOVLW  01
094A:  MOVWF  62
094B:  MOVWF  63
094C:  CLRF   64
094D:  BCF    0A.3
094E:  CALL   655
094F:  BSF    0A.3
....................          lcd_dis_3num_dot(dt_tp_real, 8, 1, enable, enable);
0950:  MOVF   5E,W
0951:  MOVWF  60
0952:  MOVF   5D,W
0953:  MOVWF  5F
0954:  MOVLW  08
0955:  MOVWF  61
0956:  MOVLW  01
0957:  MOVWF  62
0958:  MOVWF  63
0959:  MOVWF  64
095A:  BCF    0A.3
095B:  CALL   688
095C:  BSF    0A.3
....................          lcd_data(" oC");
095D:  MOVLW  A1
095E:  BSF    03.6
095F:  MOVWF  0D
0960:  MOVLW  00
0961:  MOVWF  0F
0962:  BCF    0A.3
0963:  BCF    03.6
0964:  CALL   597
0965:  BSF    0A.3
....................          break;
0966:  GOTO   5E1
....................       case 1:
....................          /* 
....................             hien thi nhiet do - nhiet do gioi han
....................             chinh nhiet do gioi han 
....................          */
....................          gh_nd += nhan_btn_giu(2, bt1);
0967:  CLRF   60
0968:  MOVLW  02
0969:  MOVWF  5F
096A:  MOVLW  31
096B:  MOVWF  61
096C:  BCF    0A.3
096D:  CALL   6DB
096E:  BSF    0A.3
096F:  MOVF   78,W
0970:  ADDWF  2C,F
....................          gh_nd -= nhan_btn_giu(2, bt2);
0971:  CLRF   60
0972:  MOVLW  02
0973:  MOVWF  5F
0974:  MOVLW  32
0975:  MOVWF  61
0976:  BCF    0A.3
0977:  CALL   6DB
0978:  BSF    0A.3
0979:  MOVF   78,W
097A:  SUBWF  2C,F
....................          if(nhan_btn_nha(1,bt3) == enable) dem_menu_tong_curr = 0;
097B:  MOVLW  01
097C:  MOVWF  5F
097D:  MOVLW  33
097E:  MOVWF  60
097F:  BCF    0A.3
0980:  CALL   4D8
0981:  BSF    0A.3
0982:  DECFSZ 78,W
0983:  GOTO   185
0984:  CLRF   53
....................          lcd_setCursor(2,0);
0985:  MOVLW  02
0986:  MOVWF  73
0987:  CLRF   74
0988:  BCF    0A.3
0989:  CALL   55F
098A:  BSF    0A.3
....................          lcd_data("ND: ");
098B:  MOVLW  A3
098C:  BSF    03.6
098D:  MOVWF  0D
098E:  MOVLW  00
098F:  MOVWF  0F
0990:  BCF    0A.3
0991:  BCF    03.6
0992:  CALL   597
0993:  BSF    0A.3
....................          lcd_dis_2num_dot(dt_ng, 6, 0, enable, disable);
0994:  CLRF   60
0995:  MOVF   57,W
0996:  MOVWF  5F
0997:  MOVLW  06
0998:  MOVWF  61
0999:  CLRF   62
099A:  MOVLW  01
099B:  MOVWF  63
099C:  CLRF   64
099D:  BCF    0A.3
099E:  CALL   655
099F:  BSF    0A.3
....................          lcd_dis_3num_dot(dt_tp_real, 8, 0, disable, enable);
09A0:  MOVF   5E,W
09A1:  MOVWF  60
09A2:  MOVF   5D,W
09A3:  MOVWF  5F
09A4:  MOVLW  08
09A5:  MOVWF  61
09A6:  CLRF   62
09A7:  CLRF   63
09A8:  MOVLW  01
09A9:  MOVWF  64
09AA:  BCF    0A.3
09AB:  CALL   688
09AC:  BSF    0A.3
....................          lcd_data(" oC");
09AD:  MOVLW  A6
09AE:  BSF    03.6
09AF:  MOVWF  0D
09B0:  MOVLW  00
09B1:  MOVWF  0F
09B2:  BCF    0A.3
09B3:  BCF    03.6
09B4:  CALL   597
09B5:  BSF    0A.3
....................          lcd_setCursor(2,1);
09B6:  MOVLW  02
09B7:  MOVWF  73
09B8:  MOVLW  01
09B9:  MOVWF  74
09BA:  BCF    0A.3
09BB:  CALL   55F
09BC:  BSF    0A.3
....................          lcd_data("GH_ND: ");
09BD:  MOVLW  A8
09BE:  BSF    03.6
09BF:  MOVWF  0D
09C0:  MOVLW  00
09C1:  MOVWF  0F
09C2:  BCF    0A.3
09C3:  BCF    03.6
09C4:  CALL   597
09C5:  BSF    0A.3
....................          lcd_dis_2num_dot(gh_nd, 10, 1, enable, disable);
09C6:  CLRF   60
09C7:  MOVF   2C,W
09C8:  MOVWF  5F
09C9:  MOVLW  0A
09CA:  MOVWF  61
09CB:  MOVLW  01
09CC:  MOVWF  62
09CD:  MOVWF  63
09CE:  CLRF   64
09CF:  BCF    0A.3
09D0:  CALL   655
09D1:  BSF    0A.3
....................          lcd_data(" oC");
09D2:  MOVLW  AC
09D3:  BSF    03.6
09D4:  MOVWF  0D
09D5:  MOVLW  00
09D6:  MOVWF  0F
09D7:  BCF    0A.3
09D8:  BCF    03.6
09D9:  CALL   597
09DA:  BSF    0A.3
....................          break;
09DB:  GOTO   5E1
....................       case 2:
....................          /*
....................             hien thi thoi gian va
....................             cai dat thoi gian - thoi gian dong bo
....................          */
....................          lcd_setCursor(1,0);
09DC:  MOVLW  01
09DD:  MOVWF  73
09DE:  CLRF   74
09DF:  BCF    0A.3
09E0:  CALL   55F
09E1:  BSF    0A.3
....................          lcd_data("cai dat dong ho");
09E2:  MOVLW  AE
09E3:  BSF    03.6
09E4:  MOVWF  0D
09E5:  MOVLW  00
09E6:  MOVWF  0F
09E7:  BCF    0A.3
09E8:  BCF    03.6
09E9:  CALL   597
09EA:  BSF    0A.3
....................          if(bdn < 5){
09EB:  MOVF   2E,W
09EC:  SUBLW  04
09ED:  BTFSS  03.0
09EE:  GOTO   3A8
....................             if(gt_mod != 0) xu_ly_choptat();
09EF:  MOVF   30,F
09F0:  BTFSC  03.2
09F1:  GOTO   1F5
09F2:  BCF    0A.3
09F3:  CALL   702
09F4:  BSF    0A.3
....................             phim_chon_hthi_mode();
....................             phim_up();
....................             phim_dw();
....................          }
*
0BA7:  GOTO   3C0
....................          else if(bdn >= 10){
0BA8:  MOVF   2E,W
0BA9:  SUBLW  09
0BAA:  BTFSC  03.0
0BAB:  GOTO   3C0
....................             bdn = 0;
0BAC:  CLRF   2E
....................             if(tg_chinh < 10) tg_chinh++;
0BAD:  BTFSC  31.7
0BAE:  GOTO   3B3
0BAF:  MOVF   31,W
0BB0:  SUBLW  09
0BB1:  BTFSS  03.0
0BB2:  GOTO   3B5
0BB3:  INCF   31,F
0BB4:  GOTO   3BA
....................             else{
....................                gt_mod = 0; tt_ht = 0;
0BB5:  CLRF   30
0BB6:  CLRF   2F
....................                e_11 = true; e_22 = true; e_33 = true;
0BB7:  BSF    32.0
0BB8:  BSF    32.1
0BB9:  BSF    32.2
....................             }
....................             if(giay_tam!=giay_ds){
0BBA:  MOVF   40,W
0BBB:  SUBWF  2D,W
0BBC:  BTFSC  03.2
0BBD:  GOTO   3C0
....................                giay_tam = giay_ds;
0BBE:  MOVF   40,W
0BBF:  MOVWF  2D
....................             }
....................          }
....................          giai_ma_gpg_ntn_thu_lcd();
0BC0:  BCF    0A.3
0BC1:  CALL   7A4
0BC2:  BSF    0A.3
....................          log_mode();
....................          break;
*
0C30:  GOTO   5E1
....................       case 3:
....................          /* cai dat thoi gian - thoi gian cho ca an*/
....................          lcd_setCursor(1,0);
0C31:  MOVLW  01
0C32:  MOVWF  73
0C33:  CLRF   74
0C34:  BCF    0A.3
0C35:  CALL   55F
0C36:  BSF    0A.3
....................          lcd_data("t/g cho ca an");
0C37:  MOVLW  B6
0C38:  BSF    03.6
0C39:  MOVWF  0D
0C3A:  MOVLW  00
0C3B:  MOVWF  0F
0C3C:  BCF    0A.3
0C3D:  BCF    03.6
0C3E:  CALL   597
0C3F:  BSF    0A.3
....................          if(bdn < 2){
0C40:  MOVF   2E,W
0C41:  SUBLW  01
0C42:  BTFSS  03.0
0C43:  GOTO   4F5
....................             if(gt_mod != 0) xu_ly_choptat();
0C44:  MOVF   30,F
0C45:  BTFSC  03.2
0C46:  GOTO   44A
0C47:  BCF    0A.3
0C48:  CALL   702
0C49:  BSF    0A.3
....................             phim_chon_mode_alarm();
....................             phim_up_eat();
....................             phim_dw_eat();
....................          }
*
0CF4:  GOTO   506
....................          else if(bdn >= 10){
0CF5:  MOVF   2E,W
0CF6:  SUBLW  09
0CF7:  BTFSC  03.0
0CF8:  GOTO   506
....................             bdn = 0;
0CF9:  CLRF   2E
....................             if(tg_chinh < 20) tg_chinh++;
0CFA:  BTFSC  31.7
0CFB:  GOTO   500
0CFC:  MOVF   31,W
0CFD:  SUBLW  13
0CFE:  BTFSS  03.0
0CFF:  GOTO   502
0D00:  INCF   31,F
0D01:  GOTO   506
....................             else{
....................                gt_mod = 0;
0D02:  CLRF   30
....................                e_11 = true; e_22 = true; e_33 = true;
0D03:  BSF    32.0
0D04:  BSF    32.1
0D05:  BSF    32.2
....................             }
....................          }
....................          giai_ma_gpg_alarm_lcd();
0D06:  CALL   043
....................          log_mode_alarm();
....................          break;
*
0D3A:  GOTO   5E1
....................       case 4:
....................          /* kiem tra ket noi uart - wifi - esp - firebase */
....................          lcd_setCursor(1,0);
0D3B:  MOVLW  01
0D3C:  MOVWF  73
0D3D:  CLRF   74
0D3E:  BCF    0A.3
0D3F:  CALL   55F
0D40:  BSF    0A.3
....................          lcd_data("check com esp");
0D41:  MOVLW  BD
0D42:  BSF    03.6
0D43:  MOVWF  0D
0D44:  MOVLW  00
0D45:  MOVWF  0F
0D46:  BCF    0A.3
0D47:  BCF    03.6
0D48:  CALL   597
0D49:  BSF    0A.3
....................          
....................          
....................          printf("hello\n");
0D4A:  MOVLW  C4
0D4B:  BSF    03.6
0D4C:  MOVWF  0D
0D4D:  MOVLW  00
0D4E:  MOVWF  0F
....................          delay_ms(1000);
*
0DA4:  MOVLW  04
0DA5:  BCF    03.6
0DA6:  MOVWF  5F
0DA7:  MOVLW  FA
0DA8:  MOVWF  61
0DA9:  BCF    0A.3
0DAA:  CALL   12B
0DAB:  BSF    0A.3
0DAC:  DECFSZ 5F,F
0DAD:  GOTO   5A7
....................          
....................          if(nhan_btn_nha(1,bt3)) dem_menu_tong_curr = 0;
0DAE:  MOVLW  01
0DAF:  MOVWF  5F
0DB0:  MOVLW  33
0DB1:  MOVWF  60
0DB2:  BCF    0A.3
0DB3:  CALL   4D8
0DB4:  BSF    0A.3
0DB5:  MOVF   78,F
0DB6:  BTFSS  03.2
0DB7:  CLRF   53
....................          break;
0DB8:  GOTO   5E1
....................       default:
....................          /* hien thi thong tin sp */
....................          lcd_setCursor(2,0);
0DB9:  MOVLW  02
0DBA:  MOVWF  73
0DBB:  CLRF   74
0DBC:  BCF    0A.3
0DBD:  CALL   55F
0DBE:  BSF    0A.3
....................          lcd_data("Information");
0DBF:  MOVLW  C8
0DC0:  BSF    03.6
0DC1:  MOVWF  0D
0DC2:  MOVLW  00
0DC3:  MOVWF  0F
0DC4:  BCF    0A.3
0DC5:  BCF    03.6
0DC6:  CALL   597
0DC7:  BSF    0A.3
....................          lcd_setCursor(0,1);
0DC8:  CLRF   73
0DC9:  MOVLW  01
0DCA:  MOVWF  74
0DCB:  BCF    0A.3
0DCC:  CALL   55F
0DCD:  BSF    0A.3
....................          lcd_data("Version: V1.0.0");
0DCE:  MOVLW  CE
0DCF:  BSF    03.6
0DD0:  MOVWF  0D
0DD1:  MOVLW  00
0DD2:  MOVWF  0F
0DD3:  BCF    0A.3
0DD4:  BCF    03.6
0DD5:  CALL   597
0DD6:  BSF    0A.3
....................          if(nhan_btn_nha(1,bt3)) dem_menu_tong_curr = 0;
0DD7:  MOVLW  01
0DD8:  MOVWF  5F
0DD9:  MOVLW  33
0DDA:  MOVWF  60
0DDB:  BCF    0A.3
0DDC:  CALL   4D8
0DDD:  BSF    0A.3
0DDE:  MOVF   78,F
0DDF:  BTFSS  03.2
0DE0:  CLRF   53
....................          break;
....................    }
.................... }
.................... 
.................... void main(){
*
0878:  MOVF   03,W
0879:  ANDLW  1F
087A:  MOVWF  03
087B:  MOVLW  FF
087C:  MOVWF  2B
087D:  BSF    2B.3
087E:  MOVF   2B,W
087F:  BSF    03.5
0880:  MOVWF  07
0881:  BCF    03.5
0882:  BSF    2B.4
0883:  MOVF   2B,W
0884:  BSF    03.5
0885:  MOVWF  07
0886:  MOVLW  31
0887:  MOVWF  13
0888:  MOVLW  28
0889:  BCF    03.5
088A:  MOVWF  14
088B:  BSF    03.5
088C:  BSF    14.7
088D:  BCF    14.6
088E:  MOVLW  81
088F:  MOVWF  19
0890:  MOVLW  A6
0891:  MOVWF  18
0892:  MOVLW  90
0893:  BCF    03.5
0894:  MOVWF  18
0895:  MOVLW  19
0896:  MOVWF  2C
0897:  CLRF   2F
0898:  CLRF   30
0899:  CLRF   31
089A:  CLRF   36
089B:  CLRF   51
089C:  CLRF   50
089D:  CLRF   53
089E:  MOVLW  01
089F:  MOVWF  54
08A0:  BSF    03.5
08A1:  BSF    1F.0
08A2:  BSF    1F.1
08A3:  BSF    1F.2
08A4:  BCF    1F.3
08A5:  MOVLW  07
08A6:  MOVWF  1C
08A7:  BCF    03.7
....................    set_up_init();
*
08CB:  BCF    0A.3
08CC:  GOTO   0D6
08CD:  BSF    0A.3
....................    lcd_init();
08CE:  BCF    0A.3
08CF:  GOTO   1C1
08D0:  BSF    0A.3
....................    //lcd_log_info(3,enable);
....................    ds1307_init();
08D1:  BCF    0A.3
08D2:  GOTO   274
08D3:  BSF    0A.3
....................    //log_code_ds1307();
....................    //delay_ms(2000);
....................    ds18b20_khoi_tao();
08D4:  BCF    0A.3
08D5:  GOTO   33A
08D6:  BSF    0A.3
....................    while(true){
....................       ds1307_read_time(8);
08D7:  MOVLW  08
08D8:  MOVWF  5F
08D9:  BCF    0A.3
08DA:  CALL   246
08DB:  BSF    0A.3
....................       ds18b20_read_temp();
08DC:  BCF    0A.3
08DD:  GOTO   401
08DE:  BSF    0A.3
....................       select_menu();
*
0DE1:  GOTO   0D7
....................       //control_temperature(dt_ng,gh_nd);
....................       //control_servo();
....................       //test_btn();
....................       
....................    }
.................... }
0DE2:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
