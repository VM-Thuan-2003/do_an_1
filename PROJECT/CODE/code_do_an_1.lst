CCS PCM C Compiler, Version 5.015, 5967               27-Apr-24 16:44

               Filename:   E:\STUDY\HKII-2023-2024\DO_AN_1\PROJECT\CODE\code_do_an_1.lst

               ROM used:   4366 words (53%)
                           Largest free fragment is 2048
               RAM used:   66 (18%) at main() level
                           107 (29%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  10
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.0
002A:  GOTO   02D
002B:  BTFSC  0C.0
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   051
.................... #include <thu_vien_do_an_1.c> 
.................... /* 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................                        SU PHAM KY THUAT - TP.HCM 
....................  DO AN 1 - HIEU CHINH NHIET DO HO CA VA CHO CA AN TU DONG - KET NOI ESP 
....................  
....................    THANH VIEN: 
....................       VO MINH THUAN   - 21161366 
....................       LE QUANG THUONG - 21161367 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... */ 
.................... #include <define_pic_16f877a.c> 
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
0065:  DATA C4,37
0066:  DATA A0,30
0067:  DATA 6E,10
0068:  DATA 31,10
0069:  DATA 2D,10
006A:  DATA C8,25
006B:  DATA C9,24
006C:  DATA 00,00
006D:  DATA 53,28
006E:  DATA 4B,2A
006F:  DATA 2D,2A
0070:  DATA 50,24
0071:  DATA C3,26
0072:  DATA 00,00
0073:  DATA 2E,00
0074:  DATA 2E,00
0075:  DATA 2D,00
0076:  DATA 2D,00
0077:  DATA A0,16
0078:  DATA 20,00
0079:  DATA EE,3A
007A:  DATA 74,10
007B:  DATA 30,00
007C:  DATA EE,3A
007D:  DATA 74,10
007E:  DATA 31,00
007F:  DATA EE,3A
0080:  DATA 74,10
0081:  DATA 32,00
0082:  DATA EE,3A
0083:  DATA 74,10
0084:  DATA 33,00
0085:  DATA 20,27
0086:  DATA 20,00
0087:  DATA 47,28
0088:  DATA 47,00
0089:  DATA 4E,2A
008A:  DATA 4E,00
008B:  DATA 20,2A
008C:  DATA 20,00
008D:  DATA DF,2F
008E:  DATA 00,00
008F:  DATA DF,2F
0090:  DATA 00,00
0091:  DATA CE,27
0092:  DATA 20,22
0093:  DATA D3,18
0094:  DATA 38,21
0095:  DATA 32,18
0096:  DATA 00,00
0097:  DATA C3,27
0098:  DATA 20,22
0099:  DATA D3,18
009A:  DATA 38,21
009B:  DATA 32,18
009C:  DATA 00,00
009D:  DATA 4E,22
009E:  DATA 3A,10
009F:  DATA 00,01
00A0:  DATA A0,37
00A1:  DATA 43,00
00A2:  DATA 4E,22
00A3:  DATA 3A,10
00A4:  DATA 00,01
00A5:  DATA A0,37
00A6:  DATA 43,00
00A7:  DATA 47,24
00A8:  DATA 5F,27
00A9:  DATA 44,1D
00AA:  DATA 20,00
00AB:  DATA A0,37
00AC:  DATA 43,00
00AD:  DATA E3,30
00AE:  DATA 69,10
00AF:  DATA E4,30
00B0:  DATA 74,10
00B1:  DATA E4,37
00B2:  DATA EE,33
00B3:  DATA 20,34
00B4:  DATA 6F,00
00B5:  DATA F4,17
00B6:  DATA 67,10
00B7:  DATA 63,34
00B8:  DATA 6F,10
00B9:  DATA E3,30
00BA:  DATA A0,30
00BB:  DATA 6E,00
00BC:  DATA 63,34
00BD:  DATA E5,31
00BE:  DATA 6B,10
00BF:  DATA E3,37
00C0:  DATA 6D,10
00C1:  DATA E5,39
00C2:  DATA 70,00
00C3:  DATA E8,32
00C4:  DATA 6C,36
00C5:  DATA 6F,05
00C6:  DATA 00,00
00C7:  DATA 49,37
00C8:  DATA E6,37
00C9:  DATA F2,36
00CA:  DATA 61,3A
00CB:  DATA E9,37
00CC:  DATA 6E,00
00CD:  DATA D6,32
00CE:  DATA F2,39
00CF:  DATA E9,37
00D0:  DATA 6E,1D
00D1:  DATA 20,2B
00D2:  DATA 31,17
00D3:  DATA 30,17
00D4:  DATA 30,00
*
05F4:  CLRF   78
05F5:  CLRF   79
05F6:  CLRF   77
05F7:  CLRF   7A
05F8:  MOVF   6B,W
05F9:  BTFSS  03.2
05FA:  GOTO   5FE
05FB:  MOVF   6A,W
05FC:  BTFSC  03.2
05FD:  GOTO   618
05FE:  MOVLW  10
05FF:  MOVWF  6C
0600:  BCF    03.0
0601:  RLF    68,F
0602:  RLF    69,F
0603:  RLF    77,F
0604:  RLF    7A,F
0605:  MOVF   6B,W
0606:  SUBWF  7A,W
0607:  BTFSS  03.2
0608:  GOTO   60B
0609:  MOVF   6A,W
060A:  SUBWF  77,W
060B:  BTFSS  03.0
060C:  GOTO   614
060D:  MOVF   6A,W
060E:  SUBWF  77,F
060F:  BTFSS  03.0
0610:  DECF   7A,F
0611:  MOVF   6B,W
0612:  SUBWF  7A,F
0613:  BSF    03.0
0614:  RLF    78,F
0615:  RLF    79,F
0616:  DECFSZ 6C,F
0617:  GOTO   600
0618:  RETURN
*
0690:  MOVLW  10
0691:  MOVWF  61
0692:  CLRF   77
0693:  CLRF   7A
0694:  RRF    5E,F
0695:  RRF    5D,F
0696:  BTFSS  03.0
0697:  GOTO   69E
0698:  MOVF   5F,W
0699:  ADDWF  77,F
069A:  BTFSC  03.0
069B:  INCF   7A,F
069C:  MOVF   60,W
069D:  ADDWF  7A,F
069E:  RRF    7A,F
069F:  RRF    77,F
06A0:  RRF    79,F
06A1:  RRF    78,F
06A2:  DECFSZ 61,F
06A3:  GOTO   694
*
06B7:  MOVF   60,W
06B8:  ANDLW  07
06B9:  MOVWF  77
06BA:  RRF    60,W
06BB:  MOVWF  78
06BC:  RRF    78,F
06BD:  RRF    78,F
06BE:  MOVLW  1F
06BF:  ANDWF  78,F
06C0:  MOVF   78,W
06C1:  ADDWF  62,W
06C2:  MOVWF  04
06C3:  BCF    03.7
06C4:  BTFSC  63.0
06C5:  BSF    03.7
06C6:  CLRF   78
06C7:  INCF   78,F
06C8:  INCF   77,F
06C9:  GOTO   6CB
06CA:  RLF    78,F
06CB:  DECFSZ 77,F
06CC:  GOTO   6CA
06CD:  MOVF   61,F
06CE:  BTFSC  03.2
06CF:  GOTO   6D3
06D0:  MOVF   78,W
06D1:  IORWF  00,F
06D2:  GOTO   6D6
06D3:  COMF   78,F
06D4:  MOVF   78,W
06D5:  ANDWF  00,F
06D6:  RETURN
06D7:  MOVF   60,W
06D8:  ANDLW  07
06D9:  MOVWF  77
06DA:  RRF    60,W
06DB:  MOVWF  78
06DC:  RRF    78,F
06DD:  RRF    78,F
06DE:  MOVLW  1F
06DF:  ANDWF  78,F
06E0:  MOVF   78,W
06E1:  ADDWF  61,W
06E2:  MOVWF  04
06E3:  BCF    03.7
06E4:  BTFSC  62.0
06E5:  BSF    03.7
06E6:  MOVF   00,W
06E7:  MOVWF  78
06E8:  INCF   77,F
06E9:  GOTO   6EB
06EA:  RRF    78,F
06EB:  DECFSZ 77,F
06EC:  GOTO   6EA
06ED:  RETURN
*
072A:  CLRF   77
072B:  CLRF   78
072C:  MOVF   63,W
072D:  BCF    03.0
072E:  BTFSC  64.0
072F:  ADDWF  77,F
0730:  RRF    77,F
0731:  RRF    78,F
0732:  BTFSC  64.1
0733:  ADDWF  77,F
0734:  RRF    77,F
0735:  RRF    78,F
0736:  BTFSC  64.2
0737:  ADDWF  77,F
0738:  RRF    77,F
0739:  RRF    78,F
073A:  BTFSC  64.3
073B:  ADDWF  77,F
073C:  RRF    77,F
073D:  RRF    78,F
073E:  BTFSC  64.4
073F:  ADDWF  77,F
0740:  RRF    77,F
0741:  RRF    78,F
0742:  BTFSC  64.5
0743:  ADDWF  77,F
0744:  RRF    77,F
0745:  RRF    78,F
0746:  BTFSC  64.6
0747:  ADDWF  77,F
0748:  RRF    77,F
0749:  RRF    78,F
074A:  BTFSC  64.7
074B:  ADDWF  77,F
074C:  RRF    77,F
074D:  RRF    78,F
074E:  RETURN
*
0760:  MOVF   72,W
0761:  CLRF   78
0762:  SUBWF  71,W
0763:  BTFSC  03.0
0764:  GOTO   768
0765:  MOVF   71,W
0766:  MOVWF  77
0767:  GOTO   774
0768:  CLRF   77
0769:  MOVLW  08
076A:  MOVWF  73
076B:  RLF    71,F
076C:  RLF    77,F
076D:  MOVF   72,W
076E:  SUBWF  77,W
076F:  BTFSC  03.0
0770:  MOVWF  77
0771:  RLF    78,F
0772:  DECFSZ 73,F
0773:  GOTO   76B
0774:  RETURN
*
07AB:  MOVF   0B,W
07AC:  MOVWF  71
07AD:  BCF    0B.7
07AE:  BSF    03.5
07AF:  BSF    03.6
07B0:  BSF    0C.7
07B1:  BSF    0C.0
07B2:  NOP
07B3:  NOP
07B4:  BTFSS  71.7
07B5:  GOTO   7BB
07B6:  BCF    03.5
07B7:  BCF    03.6
07B8:  BSF    0B.7
07B9:  BSF    03.5
07BA:  BSF    03.6
07BB:  BCF    03.5
07BC:  MOVF   0C,W
07BD:  ANDLW  7F
07BE:  BTFSC  03.2
07BF:  GOTO   7F9
07C0:  MOVWF  71
07C1:  MOVF   0D,W
07C2:  MOVWF  72
07C3:  MOVF   0F,W
07C4:  MOVWF  73
07C5:  MOVF   71,W
07C6:  MOVWF  74
07C7:  BCF    03.6
07C8:  CALL   78E
07C9:  MOVF   72,W
07CA:  BSF    03.6
07CB:  MOVWF  0D
07CC:  MOVF   73,W
07CD:  MOVWF  0F
07CE:  BCF    03.6
07CF:  MOVF   0B,W
07D0:  MOVWF  74
07D1:  BCF    0B.7
07D2:  BSF    03.5
07D3:  BSF    03.6
07D4:  BSF    0C.7
07D5:  BSF    0C.0
07D6:  NOP
07D7:  NOP
07D8:  BTFSS  74.7
07D9:  GOTO   7DF
07DA:  BCF    03.5
07DB:  BCF    03.6
07DC:  BSF    0B.7
07DD:  BSF    03.5
07DE:  BSF    03.6
07DF:  BCF    03.5
07E0:  RLF    0C,W
07E1:  RLF    0E,W
07E2:  ANDLW  7F
07E3:  BTFSC  03.2
07E4:  GOTO   7F9
07E5:  MOVWF  71
07E6:  MOVF   0D,W
07E7:  MOVWF  72
07E8:  MOVF   0F,W
07E9:  MOVWF  73
07EA:  MOVF   71,W
07EB:  MOVWF  74
07EC:  BCF    03.6
07ED:  CALL   78E
07EE:  MOVF   72,W
07EF:  BSF    03.6
07F0:  MOVWF  0D
07F1:  MOVF   73,W
07F2:  MOVWF  0F
07F3:  INCF   0D,F
07F4:  BTFSC  03.2
07F5:  INCF   0F,F
07F6:  BCF    03.6
07F7:  GOTO   7AB
07F8:  BSF    03.6
07F9:  BCF    03.6
07FA:  RETURN
*
0AB7:  MOVF   5D,W
0AB8:  XORWF  5E,W
0AB9:  ANDLW  80
0ABA:  MOVWF  60
0ABB:  BTFSS  5D.7
0ABC:  GOTO   2BF
0ABD:  COMF   5D,F
0ABE:  INCF   5D,F
0ABF:  BTFSS  5E.7
0AC0:  GOTO   2C3
0AC1:  COMF   5E,F
0AC2:  INCF   5E,F
0AC3:  MOVF   5E,W
0AC4:  CLRF   78
0AC5:  SUBWF  5D,W
0AC6:  BTFSC  03.0
0AC7:  GOTO   2CB
0AC8:  MOVF   5D,W
0AC9:  MOVWF  77
0ACA:  GOTO   2D7
0ACB:  CLRF   77
0ACC:  MOVLW  08
0ACD:  MOVWF  5F
0ACE:  RLF    5D,F
0ACF:  RLF    77,F
0AD0:  MOVF   5E,W
0AD1:  SUBWF  77,W
0AD2:  BTFSC  03.0
0AD3:  MOVWF  77
0AD4:  RLF    78,F
0AD5:  DECFSZ 5F,F
0AD6:  GOTO   2CE
0AD7:  BTFSS  60.7
0AD8:  GOTO   2DB
0AD9:  COMF   78,F
0ADA:  INCF   78,F
0ADB:  RETURN
*
1570:  BCF    03.6
1571:  MOVF   0B,W
1572:  MOVWF  5D
1573:  BCF    0B.7
1574:  BSF    03.5
1575:  BSF    03.6
1576:  BSF    0C.7
1577:  BSF    0C.0
1578:  NOP
1579:  NOP
157A:  BCF    03.5
157B:  BCF    03.6
157C:  BTFSC  5D.7
157D:  BSF    0B.7
157E:  BSF    03.6
157F:  MOVF   0C,W
1580:  ANDLW  7F
1581:  BTFSC  03.2
1582:  GOTO   5C5
1583:  BCF    03.6
1584:  MOVWF  5D
1585:  BSF    03.6
1586:  MOVF   0D,W
1587:  BCF    03.6
1588:  MOVWF  5E
1589:  BSF    03.6
158A:  MOVF   0F,W
158B:  BCF    03.6
158C:  MOVWF  5F
158D:  MOVF   5D,W
158E:  BTFSS  0C.4
158F:  GOTO   58E
1590:  MOVWF  19
1591:  MOVF   5E,W
1592:  BSF    03.6
1593:  MOVWF  0D
1594:  BCF    03.6
1595:  MOVF   5F,W
1596:  BSF    03.6
1597:  MOVWF  0F
1598:  BCF    03.6
1599:  MOVF   0B,W
159A:  MOVWF  60
159B:  BCF    0B.7
159C:  BSF    03.5
159D:  BSF    03.6
159E:  BSF    0C.7
159F:  BSF    0C.0
15A0:  NOP
15A1:  NOP
15A2:  BCF    03.5
15A3:  BCF    03.6
15A4:  BTFSC  60.7
15A5:  BSF    0B.7
15A6:  BSF    03.6
15A7:  RLF    0C,W
15A8:  RLF    0E,W
15A9:  ANDLW  7F
15AA:  BTFSC  03.2
15AB:  GOTO   5C5
15AC:  BCF    03.6
15AD:  MOVWF  5D
15AE:  BSF    03.6
15AF:  MOVF   0D,W
15B0:  BCF    03.6
15B1:  MOVWF  5E
15B2:  BSF    03.6
15B3:  MOVF   0F,W
15B4:  BCF    03.6
15B5:  MOVWF  5F
15B6:  MOVF   5D,W
15B7:  BTFSS  0C.4
15B8:  GOTO   5B7
15B9:  MOVWF  19
15BA:  MOVF   5E,W
15BB:  BSF    03.6
15BC:  MOVWF  0D
15BD:  BCF    03.6
15BE:  MOVF   5F,W
15BF:  BSF    03.6
15C0:  MOVWF  0F
15C1:  INCF   0D,F
15C2:  BTFSC  03.2
15C3:  INCF   0F,F
15C4:  GOTO   570
....................  
.................... #list 
....................  
.................... #device  adc=10 
.................... #fuses   hs, nowdt, put, noprotect, nolvp 
.................... #use     delay(clock=20MHz)  
*
0173:  MOVLW  5F
0174:  MOVWF  04
0175:  BCF    03.7
0176:  MOVF   00,W
0177:  BTFSC  03.2
0178:  GOTO   186
0179:  MOVLW  06
017A:  MOVWF  78
017B:  CLRF   77
017C:  DECFSZ 77,F
017D:  GOTO   17C
017E:  DECFSZ 78,F
017F:  GOTO   17B
0180:  MOVLW  7B
0181:  MOVWF  77
0182:  DECFSZ 77,F
0183:  GOTO   182
0184:  DECFSZ 00,F
0185:  GOTO   179
0186:  RETURN
*
04B6:  MOVLW  03
04B7:  SUBWF  60,F
04B8:  BTFSS  03.0
04B9:  GOTO   4C4
04BA:  MOVLW  60
04BB:  MOVWF  04
04BC:  BCF    03.7
04BD:  MOVF   00,W
04BE:  BTFSC  03.2
04BF:  GOTO   4C4
04C0:  GOTO   4C2
04C1:  GOTO   4C2
04C2:  DECFSZ 00,F
04C3:  GOTO   4C1
04C4:  RETURN
.................... #use     i2c(master,slow,sda=pin_c4,scl=pin_c3) 
*
0117:  MOVLW  08
0118:  MOVWF  78
0119:  MOVLW  04
011A:  MOVWF  77
011B:  DECFSZ 77,F
011C:  GOTO   11B
011D:  BCF    07.3
011E:  BCF    2B.3
011F:  MOVF   2B,W
0120:  BSF    03.5
0121:  MOVWF  07
0122:  MOVLW  03
0123:  MOVWF  77
0124:  DECFSZ 77,F
0125:  GOTO   124
0126:  RLF    29,F
0127:  BCF    03.5
0128:  BCF    07.4
0129:  BTFSS  03.0
012A:  GOTO   131
012B:  BSF    2B.4
012C:  MOVF   2B,W
012D:  BSF    03.5
012E:  MOVWF  07
012F:  GOTO   135
0130:  BCF    03.5
0131:  BCF    2B.4
0132:  MOVF   2B,W
0133:  BSF    03.5
0134:  MOVWF  07
0135:  NOP
0136:  BCF    03.5
0137:  BSF    2B.3
0138:  MOVF   2B,W
0139:  BSF    03.5
013A:  MOVWF  07
013B:  BCF    03.5
013C:  BTFSS  07.3
013D:  GOTO   13C
013E:  DECFSZ 78,F
013F:  GOTO   119
0140:  MOVLW  04
0141:  MOVWF  77
0142:  DECFSZ 77,F
0143:  GOTO   142
0144:  BCF    07.3
0145:  BCF    2B.3
0146:  MOVF   2B,W
0147:  BSF    03.5
0148:  MOVWF  07
0149:  NOP
014A:  BCF    03.5
014B:  BSF    2B.4
014C:  MOVF   2B,W
014D:  BSF    03.5
014E:  MOVWF  07
014F:  MOVLW  03
0150:  MOVWF  77
0151:  DECFSZ 77,F
0152:  GOTO   151
0153:  MOVLW  03
0154:  MOVWF  77
0155:  DECFSZ 77,F
0156:  GOTO   155
0157:  BCF    03.5
0158:  BSF    2B.3
0159:  MOVF   2B,W
015A:  BSF    03.5
015B:  MOVWF  07
015C:  BCF    03.5
015D:  BTFSS  07.3
015E:  GOTO   15D
015F:  CLRF   78
0160:  MOVLW  03
0161:  MOVWF  77
0162:  DECFSZ 77,F
0163:  GOTO   162
0164:  BTFSC  07.4
0165:  BSF    78.0
0166:  BCF    07.3
0167:  BCF    2B.3
0168:  MOVF   2B,W
0169:  BSF    03.5
016A:  MOVWF  07
016B:  BCF    03.5
016C:  BCF    07.4
016D:  BCF    2B.4
016E:  MOVF   2B,W
016F:  BSF    03.5
0170:  MOVWF  07
0171:  BCF    03.5
0172:  RETURN
*
0371:  MOVLW  08
0372:  MOVWF  62
0373:  MOVF   77,W
0374:  MOVWF  63
0375:  BSF    2B.4
0376:  MOVF   2B,W
0377:  BSF    03.5
0378:  MOVWF  07
0379:  MOVLW  03
037A:  MOVWF  77
037B:  DECFSZ 77,F
037C:  GOTO   37B
037D:  BCF    03.5
037E:  BSF    2B.3
037F:  MOVF   2B,W
0380:  BSF    03.5
0381:  MOVWF  07
0382:  BCF    03.5
0383:  BTFSS  07.3
0384:  GOTO   383
0385:  BTFSC  07.4
0386:  BSF    03.0
0387:  BTFSS  07.4
0388:  BCF    03.0
0389:  RLF    78,F
038A:  MOVLW  04
038B:  MOVWF  77
038C:  DECFSZ 77,F
038D:  GOTO   38C
038E:  BCF    2B.3
038F:  MOVF   2B,W
0390:  BSF    03.5
0391:  MOVWF  07
0392:  BCF    03.5
0393:  BCF    07.3
0394:  DECFSZ 62,F
0395:  GOTO   375
0396:  BSF    2B.4
0397:  MOVF   2B,W
0398:  BSF    03.5
0399:  MOVWF  07
039A:  MOVLW  03
039B:  MOVWF  77
039C:  DECFSZ 77,F
039D:  GOTO   39C
039E:  BCF    03.5
039F:  BCF    07.4
03A0:  MOVF   63,W
03A1:  BTFSC  03.2
03A2:  GOTO   3A8
03A3:  BCF    2B.4
03A4:  MOVF   2B,W
03A5:  BSF    03.5
03A6:  MOVWF  07
03A7:  BCF    03.5
03A8:  NOP
03A9:  BSF    2B.3
03AA:  MOVF   2B,W
03AB:  BSF    03.5
03AC:  MOVWF  07
03AD:  BCF    03.5
03AE:  BTFSS  07.3
03AF:  GOTO   3AE
03B0:  MOVLW  04
03B1:  MOVWF  77
03B2:  DECFSZ 77,F
03B3:  GOTO   3B2
03B4:  BCF    07.3
03B5:  BCF    2B.3
03B6:  MOVF   2B,W
03B7:  BSF    03.5
03B8:  MOVWF  07
03B9:  MOVLW  03
03BA:  MOVWF  77
03BB:  DECFSZ 77,F
03BC:  GOTO   3BB
03BD:  BCF    03.5
03BE:  BCF    07.4
03BF:  BCF    2B.4
03C0:  MOVF   2B,W
03C1:  BSF    03.5
03C2:  MOVWF  07
03C3:  BCF    03.5
03C4:  RETURN
.................... #use     rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
....................  
.................... /* Define name again to accordant user */ 
.................... #define usi8  unsigned int8 
.................... #define usi16 unsigned int16 
.................... #define usi32 unsigned int32 
.................... #define si8   signed   int8 
.................... #define si16  signed   int16 
.................... #define si32  signed   int32 
....................  
.................... #define bool int1 
....................  
.................... #define enable  1 
.................... #define disable 0 
....................  
.................... #define on  1 
.................... #define off 0 
....................  
.................... #ifndef bt0 
.................... #define bt0    pin_b0 
.................... #endif  
....................  
.................... #ifndef bt1 
.................... #define bt1    pin_b1 
.................... #endif 
....................  
.................... #ifndef bt2 
.................... #define bt2    pin_b2 
.................... #endif 
....................  
.................... #ifndef bt3 
.................... #define bt3    pin_b3 
.................... #endif 
....................  
.................... #ifndef pinServo 
.................... #define pinServo    pin_c1 
.................... #endif 
....................  
.................... #ifndef pinCold 
.................... #define pinCold     pin_d6 
.................... #endif 
....................  
.................... #ifndef pinHot 
.................... #define pinHot      pin_d7 
.................... #endif 
....................  
.................... usi8 gh_nd = 25; 
....................  
.................... usi8 giay_tam, bdn, tt_ht = 0; 
.................... si8 gt_mod = 0, tg_chinh = 0; 
....................  
.................... #define tang 0 
.................... #define giam 1 
....................  
.................... bool e_11, e_22, e_33; 
....................  
.................... usi8 eat_hh, eat_pp, eat_ss; 
....................  
.................... bool flag_servo; 
.................... usi8 count_servo = 0; 
....................  
.................... #int_timer1 
.................... void interrupt_timer1() 
.................... { 
....................    bdn++; 
*
0051:  INCF   2E,F
....................    set_timer1(3036); 
0052:  CLRF   0E
0053:  MOVLW  0B
0054:  MOVWF  0F
0055:  MOVLW  DC
0056:  MOVWF  0E
....................    if(flag_servo == true){ 
0057:  BTFSS  32.3
0058:  GOTO   061
....................       if(count_servo < 100) count_servo++; // 10s 
0059:  MOVF   36,W
005A:  SUBLW  63
005B:  BTFSS  03.0
005C:  GOTO   05F
005D:  INCF   36,F
005E:  GOTO   061
....................       else{ 
....................          count_servo = 0; 
005F:  CLRF   36
....................          flag_servo = false; 
0060:  BCF    32.3
....................       } 
....................    } 
0061:  BCF    0C.0
0062:  BCF    0A.3
0063:  BCF    0A.4
0064:  GOTO   02D
.................... } 
....................  
.................... void set_up_init(){ 
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
*
00D5:  MOVLW  B5
00D6:  MOVWF  10
....................    set_timer1(3036); 
00D7:  CLRF   0E
00D8:  MOVLW  0B
00D9:  MOVWF  0F
00DA:  MOVLW  DC
00DB:  MOVWF  0E
....................     
....................    enable_interrupts(global); 
00DC:  MOVLW  C0
00DD:  IORWF  0B,F
....................    enable_interrupts(int_timer1); 
00DE:  BSF    03.5
00DF:  BSF    0C.0
....................     
....................    setup_timer_2(t2_div_by_16, 249, 1); 
00E0:  MOVLW  00
00E1:  MOVWF  78
00E2:  IORLW  06
00E3:  BCF    03.5
00E4:  MOVWF  12
00E5:  MOVLW  F9
00E6:  BSF    03.5
00E7:  MOVWF  12
....................    set_pwm2_duty(0); 
00E8:  BCF    03.5
00E9:  CLRF   1B
....................     
....................    tt_ht = 0; 
00EA:  CLRF   2F
....................    bdn = 0; gt_mod = 0; 
00EB:  CLRF   2E
00EC:  CLRF   30
....................     
....................    e_11 = true; 
00ED:  BSF    32.0
....................    e_22 = true; 
00EE:  BSF    32.1
....................    e_33 = true; 
00EF:  BSF    32.2
....................     
....................    flag_servo = false; 
00F0:  BCF    32.3
....................     
....................    gh_nd = 25; 
00F1:  MOVLW  19
00F2:  MOVWF  2C
....................    eat_hh = 0x09; eat_pp = 0x34; eat_ss = 0x01; 
00F3:  MOVLW  09
00F4:  MOVWF  33
00F5:  MOVLW  34
00F6:  MOVWF  34
00F7:  MOVLW  01
00F8:  MOVWF  35
....................     
....................    set_tris_a(0xff); 
00F9:  MOVLW  FF
00FA:  BSF    03.5
00FB:  MOVWF  05
....................    set_tris_b(0xff); 
00FC:  MOVWF  06
....................    set_tris_d(0x00); output_d(0x00); 
00FD:  MOVLW  00
00FE:  MOVWF  08
00FF:  CLRF   08
0100:  BCF    03.5
0101:  CLRF   08
....................    set_tris_e(0x00); output_e(0x00); 
0102:  BSF    03.5
0103:  BCF    09.0
0104:  BCF    09.1
0105:  BCF    09.2
0106:  BCF    09.0
0107:  BCF    09.1
0108:  BCF    09.2
0109:  BCF    03.5
010A:  CLRF   09
....................    set_tris_c(0x00); output_c(0x00); 
010B:  BSF    03.5
010C:  MOVWF  07
010D:  BCF    03.5
010E:  MOVWF  2B
010F:  MOVWF  2B
0110:  BSF    03.5
0111:  CLRF   07
0112:  BCF    03.5
0113:  CLRF   07
0114:  BCF    0A.3
0115:  BSF    0A.4
0116:  GOTO   043 (RETURN)
.................... } 
....................  
....................  
....................  
.................... #include <thu_vien_i2c_ds1307.c> 
.................... #define ds13_addr_wr 0xd0 
.................... #define ds13_addr_rd 0xd1 
....................  
.................... //cap nhat time: giay-phut-gio-thu-ngay-thang-nam-madk_msds 
.................... usi8 time_w[9]={0x31,0x15,0x15,0x04,0x25,0x10,0x23,0x90,0x92}; 
*
101E:  MOVLW  31
101F:  BCF    03.5
1020:  MOVWF  37
1021:  MOVLW  15
1022:  MOVWF  38
1023:  MOVWF  39
1024:  MOVLW  04
1025:  MOVWF  3A
1026:  MOVLW  25
1027:  MOVWF  3B
1028:  MOVLW  10
1029:  MOVWF  3C
102A:  MOVLW  23
102B:  MOVWF  3D
102C:  MOVLW  90
102D:  MOVWF  3E
102E:  MOVLW  92
102F:  MOVWF  3F
.................... usi8 time_r[9]={0x30,0x30,0x10,0x08,0x20,0x02,0x20,0x90,0x96}; 
1030:  MOVLW  30
1031:  MOVWF  40
1032:  MOVWF  41
1033:  MOVLW  10
1034:  MOVWF  42
1035:  MOVLW  08
1036:  MOVWF  43
1037:  MOVLW  20
1038:  MOVWF  44
1039:  MOVLW  02
103A:  MOVWF  45
103B:  MOVLW  20
103C:  MOVWF  46
103D:  MOVLW  90
103E:  MOVWF  47
103F:  MOVLW  96
1040:  MOVWF  48
....................  
.................... #define dec_giay_eat  ds1307_bcdToDec(eat_ss) 
.................... #define dec_phut_eat  ds1307_bcdToDec(eat_pp) 
.................... #define dec_gio_eat   ds1307_bcdToDec(eat_hh) 
....................  
.................... #define dec_giay_ds  ds1307_bcdToDec(time_r[0]) 
.................... #define dec_phut_ds  ds1307_bcdToDec(time_r[1]) 
.................... #define dec_gio_ds   ds1307_bcdToDec(time_r[2]) 
.................... #define dec_thu_ds   ds1307_bcdToDec(time_r[3]) 
.................... #define dec_ngay_ds  ds1307_bcdToDec(time_r[4]) 
.................... #define dec_thang_ds ds1307_bcdToDec(time_r[5]) 
.................... #define dec_nam_ds   ds1307_bcdToDec(time_r[6]) 
....................  
.................... #define giay_ds  time_r[0] 
.................... #define phut_ds  time_r[1] 
.................... #define gio_ds   time_r[2] 
.................... #define thu_ds   time_r[3] 
.................... #define ngay_ds  time_r[4] 
.................... #define thang_ds time_r[5] 
.................... #define nam_ds   time_r[6] 
....................  
.................... #define ma_qd   time_w[8] 
.................... #define ma_ds   time_r[8] 
....................  
.................... usi8 ds1307_decToBcd(usi8 val) { 
....................     return ((val / 10 * 16) + (val % 10)); 
.................... } 
....................  
.................... usi8 ds1307_bcdToDec(usi8 val) { 
....................     return ((val / 16 * 10) + (val % 16)); 
*
074F:  SWAPF  5F,W
0750:  MOVWF  77
0751:  MOVLW  0F
0752:  ANDWF  77,F
0753:  MOVF   77,W
0754:  MOVWF  61
0755:  MOVWF  63
0756:  MOVLW  0A
0757:  MOVWF  64
0758:  CALL   72A
0759:  MOVF   78,W
075A:  MOVWF  60
075B:  MOVF   5F,W
075C:  ANDLW  0F
075D:  ADDWF  78,W
075E:  MOVWF  78
075F:  RETURN
.................... } 
....................  
.................... void ds1307_read_time(usi8 j)      
.................... {    
....................    usi8 i;  
....................    i2c_start(); 
*
03C5:  BSF    2B.4
03C6:  MOVF   2B,W
03C7:  BSF    03.5
03C8:  MOVWF  07
03C9:  MOVLW  04
03CA:  MOVWF  77
03CB:  DECFSZ 77,F
03CC:  GOTO   3CB
03CD:  BCF    03.5
03CE:  BSF    2B.3
03CF:  MOVF   2B,W
03D0:  BSF    03.5
03D1:  MOVWF  07
03D2:  MOVLW  03
03D3:  MOVWF  77
03D4:  DECFSZ 77,F
03D5:  GOTO   3D4
03D6:  BCF    03.5
03D7:  BCF    07.4
03D8:  BCF    2B.4
03D9:  MOVF   2B,W
03DA:  BSF    03.5
03DB:  MOVWF  07
03DC:  MOVLW  04
03DD:  MOVWF  77
03DE:  DECFSZ 77,F
03DF:  GOTO   3DE
03E0:  BCF    03.5
03E1:  BCF    07.3
03E2:  BCF    2B.3
03E3:  MOVF   2B,W
03E4:  BSF    03.5
03E5:  MOVWF  07
....................    i2c_write(ds13_addr_wr); 
03E6:  MOVLW  D0
03E7:  MOVWF  29
03E8:  BCF    03.5
03E9:  CALL   117
....................    i2c_write(0x00);                      
03EA:  BSF    03.5
03EB:  CLRF   29
03EC:  BCF    03.5
03ED:  CALL   117
....................    i2c_start();                
03EE:  BSF    2B.4
03EF:  MOVF   2B,W
03F0:  BSF    03.5
03F1:  MOVWF  07
03F2:  MOVLW  04
03F3:  MOVWF  77
03F4:  DECFSZ 77,F
03F5:  GOTO   3F4
03F6:  BCF    03.5
03F7:  BSF    2B.3
03F8:  MOVF   2B,W
03F9:  BSF    03.5
03FA:  MOVWF  07
03FB:  MOVLW  03
03FC:  MOVWF  77
03FD:  DECFSZ 77,F
03FE:  GOTO   3FD
03FF:  BCF    03.5
0400:  BTFSS  07.3
0401:  GOTO   400
0402:  BCF    07.4
0403:  BCF    2B.4
0404:  MOVF   2B,W
0405:  BSF    03.5
0406:  MOVWF  07
0407:  MOVLW  04
0408:  MOVWF  77
0409:  DECFSZ 77,F
040A:  GOTO   409
040B:  BCF    03.5
040C:  BCF    07.3
040D:  BCF    2B.3
040E:  MOVF   2B,W
040F:  BSF    03.5
0410:  MOVWF  07
....................    i2c_write(ds13_addr_rd);                               
0411:  MOVLW  D1
0412:  MOVWF  29
0413:  BCF    03.5
0414:  CALL   117
....................    for(i=0;i<j;i++) time_r[i]=i2c_read(); 
0415:  CLRF   5E
0416:  MOVF   5D,W
0417:  SUBWF  5E,W
0418:  BTFSC  03.0
0419:  GOTO   425
041A:  MOVLW  40
041B:  ADDWF  5E,W
041C:  MOVWF  04
041D:  BCF    03.7
041E:  MOVLW  01
041F:  MOVWF  77
0420:  CALL   371
0421:  MOVF   78,W
0422:  MOVWF  00
0423:  INCF   5E,F
0424:  GOTO   416
....................                                   
....................    i = i2c_read(0); //not ack, don't care i   
0425:  CLRF   77
0426:  CALL   371
0427:  MOVF   78,W
0428:  MOVWF  5E
....................    i2c_stop(); 
0429:  BCF    2B.4
042A:  MOVF   2B,W
042B:  BSF    03.5
042C:  MOVWF  07
042D:  NOP
042E:  BCF    03.5
042F:  BSF    2B.3
0430:  MOVF   2B,W
0431:  BSF    03.5
0432:  MOVWF  07
0433:  BCF    03.5
0434:  BTFSS  07.3
0435:  GOTO   434
0436:  MOVLW  04
0437:  MOVWF  77
0438:  DECFSZ 77,F
0439:  GOTO   438
043A:  GOTO   43B
043B:  NOP
043C:  BSF    2B.4
043D:  MOVF   2B,W
043E:  BSF    03.5
043F:  MOVWF  07
0440:  MOVLW  04
0441:  MOVWF  77
0442:  DECFSZ 77,F
0443:  GOTO   442
0444:  BCF    03.5
0445:  RETURN
.................... } 
....................  
.................... void ds1307_update_time(int1 sel)                  
.................... {          
....................    usi8 i; 
....................    i2c_start(); 
*
044F:  BSF    2B.4
0450:  MOVF   2B,W
0451:  BSF    03.5
0452:  MOVWF  07
0453:  MOVLW  04
0454:  MOVWF  77
0455:  DECFSZ 77,F
0456:  GOTO   455
0457:  BCF    03.5
0458:  BSF    2B.3
0459:  MOVF   2B,W
045A:  BSF    03.5
045B:  MOVWF  07
045C:  MOVLW  03
045D:  MOVWF  77
045E:  DECFSZ 77,F
045F:  GOTO   45E
0460:  BCF    03.5
0461:  BCF    07.4
0462:  BCF    2B.4
0463:  MOVF   2B,W
0464:  BSF    03.5
0465:  MOVWF  07
0466:  MOVLW  04
0467:  MOVWF  77
0468:  DECFSZ 77,F
0469:  GOTO   468
046A:  BCF    03.5
046B:  BCF    07.3
046C:  BCF    2B.3
046D:  MOVF   2B,W
046E:  BSF    03.5
046F:  MOVWF  07
....................    i2c_write(ds13_addr_wr); 
0470:  MOVLW  D0
0471:  MOVWF  29
0472:  BCF    03.5
0473:  CALL   117
....................    i2c_write(0x00); 
0474:  BSF    03.5
0475:  CLRF   29
0476:  BCF    03.5
0477:  CALL   117
....................    for(i=0;i<9;i++)                           
0478:  CLRF   5E
0479:  MOVF   5E,W
047A:  SUBLW  08
047B:  BTFSS  03.0
047C:  GOTO   497
....................    {   
....................       if(sel)  i2c_write(time_w[i]); 
047D:  MOVF   5D,F
047E:  BTFSC  03.2
047F:  GOTO   48B
0480:  MOVLW  37
0481:  ADDWF  5E,W
0482:  MOVWF  04
0483:  BCF    03.7
0484:  MOVF   00,W
0485:  MOVWF  5F
0486:  BSF    03.5
0487:  MOVWF  29
0488:  BCF    03.5
0489:  CALL   117
048A:  GOTO   495
....................       else     i2c_write(time_r[i]); 
048B:  MOVLW  40
048C:  ADDWF  5E,W
048D:  MOVWF  04
048E:  BCF    03.7
048F:  MOVF   00,W
0490:  MOVWF  5F
0491:  BSF    03.5
0492:  MOVWF  29
0493:  BCF    03.5
0494:  CALL   117
0495:  INCF   5E,F
0496:  GOTO   479
....................    }                                  
....................    i2c_stop();         
0497:  BCF    2B.4
0498:  MOVF   2B,W
0499:  BSF    03.5
049A:  MOVWF  07
049B:  NOP
049C:  BCF    03.5
049D:  BSF    2B.3
049E:  MOVF   2B,W
049F:  BSF    03.5
04A0:  MOVWF  07
04A1:  BCF    03.5
04A2:  BTFSS  07.3
04A3:  GOTO   4A2
04A4:  MOVLW  04
04A5:  MOVWF  77
04A6:  DECFSZ 77,F
04A7:  GOTO   4A6
04A8:  GOTO   4A9
04A9:  NOP
04AA:  BSF    2B.4
04AB:  MOVF   2B,W
04AC:  BSF    03.5
04AD:  MOVWF  07
04AE:  MOVLW  04
04AF:  MOVWF  77
04B0:  DECFSZ 77,F
04B1:  GOTO   4B0
04B2:  BCF    03.5
.................... }   
....................  
.................... void ds1307_init()                                
.................... {                                               
....................    ds1307_read_time(9);           
*
0446:  MOVLW  09
0447:  MOVWF  5D
0448:  CALL   3C5
....................    if(ma_qd!=ma_ds) 
0449:  MOVF   48,W
044A:  SUBWF  3F,W
044B:  BTFSC  03.2
044C:  GOTO   4B3
....................    { 
....................       ds1307_update_time(1); 
044D:  MOVLW  01
044E:  MOVWF  5D
....................    } 
*
04B3:  BCF    0A.3
04B4:  BSF    0A.4
04B5:  GOTO   049 (RETURN)
.................... } 
....................  
.................... void ds1307_save_ds(usi8 dcdt,dt)                  
.................... {            
....................    i2c_start(); 
*
0A65:  BSF    2B.4
0A66:  MOVF   2B,W
0A67:  BSF    03.5
0A68:  MOVWF  07
0A69:  MOVLW  04
0A6A:  MOVWF  77
0A6B:  DECFSZ 77,F
0A6C:  GOTO   26B
0A6D:  BCF    03.5
0A6E:  BSF    2B.3
0A6F:  MOVF   2B,W
0A70:  BSF    03.5
0A71:  MOVWF  07
0A72:  MOVLW  03
0A73:  MOVWF  77
0A74:  DECFSZ 77,F
0A75:  GOTO   274
0A76:  BCF    03.5
0A77:  BCF    07.4
0A78:  BCF    2B.4
0A79:  MOVF   2B,W
0A7A:  BSF    03.5
0A7B:  MOVWF  07
0A7C:  MOVLW  04
0A7D:  MOVWF  77
0A7E:  DECFSZ 77,F
0A7F:  GOTO   27E
0A80:  BCF    03.5
0A81:  BCF    07.3
0A82:  BCF    2B.3
0A83:  MOVF   2B,W
0A84:  BSF    03.5
0A85:  MOVWF  07
....................    i2c_write(ds13_addr_wr);         
0A86:  MOVLW  D0
0A87:  MOVWF  29
0A88:  BCF    0A.3
0A89:  BCF    03.5
0A8A:  CALL   117
0A8B:  BSF    0A.3
....................    i2c_write(dcdt);     
0A8C:  MOVF   5D,W
0A8D:  BSF    03.5
0A8E:  MOVWF  29
0A8F:  BCF    0A.3
0A90:  BCF    03.5
0A91:  CALL   117
0A92:  BSF    0A.3
....................    i2c_write(dt); 
0A93:  MOVF   5E,W
0A94:  BSF    03.5
0A95:  MOVWF  29
0A96:  BCF    0A.3
0A97:  BCF    03.5
0A98:  CALL   117
0A99:  BSF    0A.3
....................    i2c_stop(); 
0A9A:  BCF    2B.4
0A9B:  MOVF   2B,W
0A9C:  BSF    03.5
0A9D:  MOVWF  07
0A9E:  NOP
0A9F:  BCF    03.5
0AA0:  BSF    2B.3
0AA1:  MOVF   2B,W
0AA2:  BSF    03.5
0AA3:  MOVWF  07
0AA4:  BCF    03.5
0AA5:  BTFSS  07.3
0AA6:  GOTO   2A5
0AA7:  MOVLW  04
0AA8:  MOVWF  77
0AA9:  DECFSZ 77,F
0AAA:  GOTO   2A9
0AAB:  GOTO   2AC
0AAC:  NOP
0AAD:  BSF    2B.4
0AAE:  MOVF   2B,W
0AAF:  BSF    03.5
0AB0:  MOVWF  07
0AB1:  MOVLW  04
0AB2:  MOVWF  77
0AB3:  DECFSZ 77,F
0AB4:  GOTO   2B3
0AB5:  BCF    03.5
0AB6:  RETURN
.................... } 
....................  
.................... #include <thu_vien_i2c_lcd.c> 
.................... #define pcf8574_addr_wr 0x4E // 0b01001110 
.................... #define pcf8574_addr_rd 0x4F // 0b01001111 
....................  
.................... void i2c_reset() 
.................... { 
....................    i2c_start(); 
....................    i2c_stop(); 
.................... } 
....................  
.................... void i2c_setup_write() 
.................... { 
....................    i2c_start(); 
*
02AF:  BSF    2B.4
02B0:  MOVF   2B,W
02B1:  BSF    03.5
02B2:  MOVWF  07
02B3:  MOVLW  04
02B4:  MOVWF  77
02B5:  DECFSZ 77,F
02B6:  GOTO   2B5
02B7:  BCF    03.5
02B8:  BSF    2B.3
02B9:  MOVF   2B,W
02BA:  BSF    03.5
02BB:  MOVWF  07
02BC:  MOVLW  03
02BD:  MOVWF  77
02BE:  DECFSZ 77,F
02BF:  GOTO   2BE
02C0:  BCF    03.5
02C1:  BCF    07.4
02C2:  BCF    2B.4
02C3:  MOVF   2B,W
02C4:  BSF    03.5
02C5:  MOVWF  07
02C6:  MOVLW  04
02C7:  MOVWF  77
02C8:  DECFSZ 77,F
02C9:  GOTO   2C8
02CA:  BCF    03.5
02CB:  BCF    07.3
02CC:  BCF    2B.3
02CD:  MOVF   2B,W
02CE:  BSF    03.5
02CF:  MOVWF  07
....................    i2c_write(pcf8574_addr_wr); 
02D0:  MOVLW  4E
02D1:  MOVWF  29
02D2:  BCF    03.5
02D3:  CALL   117
.................... } 
....................  
.................... void i2c_write_1byte(usi8 payload) 
.................... { 
....................    i2c_start(); 
*
0191:  BCF    03.5
0192:  BSF    2B.4
0193:  MOVF   2B,W
0194:  BSF    03.5
0195:  MOVWF  07
0196:  MOVLW  04
0197:  MOVWF  77
0198:  DECFSZ 77,F
0199:  GOTO   198
019A:  BCF    03.5
019B:  BSF    2B.3
019C:  MOVF   2B,W
019D:  BSF    03.5
019E:  MOVWF  07
019F:  MOVLW  03
01A0:  MOVWF  77
01A1:  DECFSZ 77,F
01A2:  GOTO   1A1
01A3:  BCF    03.5
01A4:  BTFSS  07.3
01A5:  GOTO   1A4
01A6:  BCF    07.4
01A7:  BCF    2B.4
01A8:  MOVF   2B,W
01A9:  BSF    03.5
01AA:  MOVWF  07
01AB:  MOVLW  04
01AC:  MOVWF  77
01AD:  DECFSZ 77,F
01AE:  GOTO   1AD
01AF:  BCF    03.5
01B0:  BCF    07.3
01B1:  BCF    2B.3
01B2:  MOVF   2B,W
01B3:  BSF    03.5
01B4:  MOVWF  07
*
01E7:  BCF    03.5
01E8:  BSF    2B.4
01E9:  MOVF   2B,W
01EA:  BSF    03.5
01EB:  MOVWF  07
01EC:  MOVLW  04
01ED:  MOVWF  77
01EE:  DECFSZ 77,F
01EF:  GOTO   1EE
01F0:  BCF    03.5
01F1:  BSF    2B.3
01F2:  MOVF   2B,W
01F3:  BSF    03.5
01F4:  MOVWF  07
01F5:  MOVLW  03
01F6:  MOVWF  77
01F7:  DECFSZ 77,F
01F8:  GOTO   1F7
01F9:  BCF    03.5
01FA:  BTFSS  07.3
01FB:  GOTO   1FA
01FC:  BCF    07.4
01FD:  BCF    2B.4
01FE:  MOVF   2B,W
01FF:  BSF    03.5
0200:  MOVWF  07
0201:  MOVLW  04
0202:  MOVWF  77
0203:  DECFSZ 77,F
0204:  GOTO   203
0205:  BCF    03.5
0206:  BCF    07.3
0207:  BCF    2B.3
0208:  MOVF   2B,W
0209:  BSF    03.5
020A:  MOVWF  07
*
023E:  BCF    03.5
023F:  BSF    2B.4
0240:  MOVF   2B,W
0241:  BSF    03.5
0242:  MOVWF  07
0243:  MOVLW  04
0244:  MOVWF  77
0245:  DECFSZ 77,F
0246:  GOTO   245
0247:  BCF    03.5
0248:  BSF    2B.3
0249:  MOVF   2B,W
024A:  BSF    03.5
024B:  MOVWF  07
024C:  MOVLW  03
024D:  MOVWF  77
024E:  DECFSZ 77,F
024F:  GOTO   24E
0250:  BCF    03.5
0251:  BTFSS  07.3
0252:  GOTO   251
0253:  BCF    07.4
0254:  BCF    2B.4
0255:  MOVF   2B,W
0256:  BSF    03.5
0257:  MOVWF  07
0258:  MOVLW  04
0259:  MOVWF  77
025A:  DECFSZ 77,F
025B:  GOTO   25A
025C:  BCF    03.5
025D:  BCF    07.3
025E:  BCF    2B.3
025F:  MOVF   2B,W
0260:  BSF    03.5
0261:  MOVWF  07
*
02E5:  BCF    03.5
02E6:  BSF    2B.4
02E7:  MOVF   2B,W
02E8:  BSF    03.5
02E9:  MOVWF  07
02EA:  MOVLW  04
02EB:  MOVWF  77
02EC:  DECFSZ 77,F
02ED:  GOTO   2EC
02EE:  BCF    03.5
02EF:  BSF    2B.3
02F0:  MOVF   2B,W
02F1:  BSF    03.5
02F2:  MOVWF  07
02F3:  MOVLW  03
02F4:  MOVWF  77
02F5:  DECFSZ 77,F
02F6:  GOTO   2F5
02F7:  BCF    03.5
02F8:  BTFSS  07.3
02F9:  GOTO   2F8
02FA:  BCF    07.4
02FB:  BCF    2B.4
02FC:  MOVF   2B,W
02FD:  BSF    03.5
02FE:  MOVWF  07
02FF:  MOVLW  04
0300:  MOVWF  77
0301:  DECFSZ 77,F
0302:  GOTO   301
0303:  BCF    03.5
0304:  BCF    07.3
0305:  BCF    2B.3
0306:  MOVF   2B,W
0307:  BSF    03.5
0308:  MOVWF  07
....................    i2c_write(pcf8574_addr_wr); 
*
01B5:  MOVLW  4E
01B6:  MOVWF  29
01B7:  BCF    03.5
01B8:  CALL   117
*
020B:  MOVLW  4E
020C:  MOVWF  29
020D:  BCF    03.5
020E:  CALL   117
*
0262:  MOVLW  4E
0263:  MOVWF  29
0264:  BCF    03.5
0265:  CALL   117
*
0309:  MOVLW  4E
030A:  MOVWF  29
030B:  BCF    03.5
030C:  CALL   117
....................    i2c_write(payload); 
*
01B9:  BSF    03.5
01BA:  MOVF   28,W
01BB:  MOVWF  29
01BC:  BCF    03.5
01BD:  CALL   117
*
020F:  BSF    03.5
0210:  MOVF   28,W
0211:  MOVWF  29
0212:  BCF    03.5
0213:  CALL   117
*
0266:  BSF    03.5
0267:  MOVF   28,W
0268:  MOVWF  29
0269:  BCF    03.5
026A:  CALL   117
*
030D:  BSF    03.5
030E:  MOVF   28,W
030F:  MOVWF  29
0310:  BCF    03.5
0311:  CALL   117
....................    i2c_stop(); 
*
01BE:  BCF    2B.4
01BF:  MOVF   2B,W
01C0:  BSF    03.5
01C1:  MOVWF  07
01C2:  NOP
01C3:  BCF    03.5
01C4:  BSF    2B.3
01C5:  MOVF   2B,W
01C6:  BSF    03.5
01C7:  MOVWF  07
01C8:  BCF    03.5
01C9:  BTFSS  07.3
01CA:  GOTO   1C9
01CB:  MOVLW  04
01CC:  MOVWF  77
01CD:  DECFSZ 77,F
01CE:  GOTO   1CD
01CF:  GOTO   1D0
01D0:  NOP
01D1:  BSF    2B.4
01D2:  MOVF   2B,W
01D3:  BSF    03.5
01D4:  MOVWF  07
01D5:  MOVLW  04
01D6:  MOVWF  77
01D7:  DECFSZ 77,F
01D8:  GOTO   1D7
*
0214:  BCF    2B.4
0215:  MOVF   2B,W
0216:  BSF    03.5
0217:  MOVWF  07
0218:  NOP
0219:  BCF    03.5
021A:  BSF    2B.3
021B:  MOVF   2B,W
021C:  BSF    03.5
021D:  MOVWF  07
021E:  BCF    03.5
021F:  BTFSS  07.3
0220:  GOTO   21F
0221:  MOVLW  04
0222:  MOVWF  77
0223:  DECFSZ 77,F
0224:  GOTO   223
0225:  GOTO   226
0226:  NOP
0227:  BSF    2B.4
0228:  MOVF   2B,W
0229:  BSF    03.5
022A:  MOVWF  07
022B:  MOVLW  04
022C:  MOVWF  77
022D:  DECFSZ 77,F
022E:  GOTO   22D
*
026B:  BCF    2B.4
026C:  MOVF   2B,W
026D:  BSF    03.5
026E:  MOVWF  07
026F:  NOP
0270:  BCF    03.5
0271:  BSF    2B.3
0272:  MOVF   2B,W
0273:  BSF    03.5
0274:  MOVWF  07
0275:  BCF    03.5
0276:  BTFSS  07.3
0277:  GOTO   276
0278:  MOVLW  04
0279:  MOVWF  77
027A:  DECFSZ 77,F
027B:  GOTO   27A
027C:  GOTO   27D
027D:  NOP
027E:  BSF    2B.4
027F:  MOVF   2B,W
0280:  BSF    03.5
0281:  MOVWF  07
0282:  MOVLW  04
0283:  MOVWF  77
0284:  DECFSZ 77,F
0285:  GOTO   284
*
0312:  BCF    2B.4
0313:  MOVF   2B,W
0314:  BSF    03.5
0315:  MOVWF  07
0316:  NOP
0317:  BCF    03.5
0318:  BSF    2B.3
0319:  MOVF   2B,W
031A:  BSF    03.5
031B:  MOVWF  07
031C:  BCF    03.5
031D:  BTFSS  07.3
031E:  GOTO   31D
031F:  MOVLW  04
0320:  MOVWF  77
0321:  DECFSZ 77,F
0322:  GOTO   321
0323:  GOTO   324
0324:  NOP
0325:  BSF    2B.4
0326:  MOVF   2B,W
0327:  BSF    03.5
0328:  MOVWF  07
0329:  MOVLW  04
032A:  MOVWF  77
032B:  DECFSZ 77,F
032C:  GOTO   32B
.................... } 
....................  
.................... #include <thu_vien_lcd_1602.c> 
.................... #define lcd_cols 16 
.................... #define lcd_rows 2 
....................  
.................... // commands 
.................... #define LCD_CLEARDISPLAY 0x01 
.................... #define LCD_RETURNHOME 0x02 
.................... #define LCD_ENTRYMODESET 0x04 
.................... #define LCD_DISPLAYCONTROL 0x08 
.................... #define LCD_CURSORSHIFT 0x10 
.................... #define LCD_FUNCTIONSET 0x20 
.................... #define LCD_SETCGRAMADDR 0x40 
.................... #define LCD_SETDDRAMADDR 0x80 
....................  
.................... // flags for display entry mode 
.................... #define LCD_ENTRYRIGHT 0x00 
.................... #define LCD_ENTRYLEFT 0x02 
.................... #define LCD_ENTRYSHIFTINCREMENT 0x01 
.................... #define LCD_ENTRYSHIFTDECREMENT 0x00 
....................  
.................... // flags for display on/off control 
.................... #define LCD_DISPLAYON 0x04 
.................... #define LCD_DISPLAYOFF 0x00 
.................... #define LCD_CURSORON 0x02 
.................... #define LCD_CURSOROFF 0x00 
.................... #define LCD_BLINKON 0x01 
.................... #define LCD_BLINKOFF 0x00 
....................  
.................... // flags for display/cursor shift 
.................... #define LCD_DISPLAYMOVE 0x08 
.................... #define LCD_CURSORMOVE 0x00 
.................... #define LCD_MOVERIGHT 0x04 
.................... #define LCD_MOVELEFT 0x00 
....................  
.................... // flags for function set 
.................... #define LCD_8BITMODE 0x10 
.................... #define LCD_4BITMODE 0x00 
.................... #define LCD_2LINE 0x08 
.................... #define LCD_1LINE 0x00 
.................... #define LCD_5x10DOTS 0x04 
.................... #define LCD_5x8DOTS 0x00 
....................  
.................... // flags for backlight control 
.................... #define LCD_BACKLIGHT 0x08 
.................... #define LCD_NOBACKLIGHT 0x00 
....................  
.................... #define En 0B00000100  // Enable bit 
.................... #define Rw 0B00000010  // Read/Write bit 
.................... #define Rs 0B00000001  // Register select bit 
....................  
.................... void write4bits(usi8 value); 
.................... void expanderWrite(usi8 _data); 
.................... void pulseEnable(usi8 _data); 
.................... void lcd_command(usi8 value); 
.................... void lcd_display(); 
.................... void lcd_clear(); 
.................... void lcd_home(); 
.................... void lcd_send(usi8 value, usi8 mode); 
.................... void lcd_data(usi8 value); 
....................  
.................... usi8 _displayfunction; 
.................... usi8 _displaycontrol; 
.................... usi8 _displaymode; 
.................... usi8 _numlines; 
.................... usi8 _cols; 
.................... usi8 _rows; 
.................... usi8 _backlightval; 
....................  
.................... void lcd_init(){ 
....................    _cols = lcd_cols; // 16 
*
02AA:  MOVLW  10
02AB:  MOVWF  4D
....................    _rows = lcd_rows; // 2 
02AC:  MOVLW  02
02AD:  MOVWF  4E
....................    _backlightval = LCD_NOBACKLIGHT; // back light is off 
02AE:  CLRF   4F
....................     
....................    i2c_setup_write(); // setup i2c 
....................    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS; 
*
02D4:  CLRF   49
....................     
....................    _displayfunction |= LCD_2LINE; 
02D5:  BSF    49.3
....................    _numlines = _rows; // 2 
02D6:  MOVF   4E,W
02D7:  MOVWF  4C
....................     
....................    delay_ms(40); 
02D8:  MOVLW  28
02D9:  MOVWF  5F
02DA:  CALL   173
....................     
....................    expanderWrite(_backlightval); // back light is on 
02DB:  MOVF   4F,W
02DC:  BSF    03.5
02DD:  MOVWF  26
....................    delay_ms(100); 
*
032D:  MOVLW  64
032E:  BCF    03.5
032F:  MOVWF  5F
0330:  CALL   173
....................     
....................    //It is try to set use 4bit in 3 time 
....................    write4bits(0x03 << 4); 
0331:  MOVLW  30
0332:  BSF    03.5
0333:  MOVWF  23
0334:  BCF    03.5
0335:  CALL   187
....................    delay_ms(5); 
0336:  MOVLW  05
0337:  MOVWF  5F
0338:  CALL   173
....................     
....................    write4bits(0x03 << 4); 
0339:  MOVLW  30
033A:  BSF    03.5
033B:  MOVWF  23
033C:  BCF    03.5
033D:  CALL   187
....................    delay_ms(5); 
033E:  MOVLW  05
033F:  MOVWF  5F
0340:  CALL   173
....................     
....................    write4bits(0x03 << 4); 
0341:  MOVLW  30
0342:  BSF    03.5
0343:  MOVWF  23
0344:  BCF    03.5
0345:  CALL   187
....................    delay_ms(5); 
0346:  MOVLW  05
0347:  MOVWF  5F
0348:  CALL   173
....................     
....................    write4bits(0x02 << 4); // set using 4bit for lcd16x2 
0349:  MOVLW  20
034A:  BSF    03.5
034B:  MOVWF  23
034C:  BCF    03.5
034D:  CALL   187
....................     
....................    lcd_command(LCD_FUNCTIONSET | _displayfunction); 
034E:  MOVF   49,W
034F:  IORLW  20
0350:  MOVWF  5D
0351:  MOVWF  7C
0352:  CALL   28E
....................     
....................    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF; 
0353:  MOVLW  04
0354:  MOVWF  4A
....................    lcd_display(); 
....................     
....................    lcd_clear(); 
....................     
....................    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT; 
*
0361:  MOVLW  02
0362:  MOVWF  4B
....................    lcd_command(LCD_ENTRYMODESET | _displaymode); 
0363:  MOVF   4B,W
0364:  IORLW  04
0365:  MOVWF  5D
0366:  MOVWF  7C
0367:  CALL   28E
....................     
....................    lcd_home(); 
*
036E:  BCF    0A.3
036F:  BSF    0A.4
0370:  GOTO   046 (RETURN)
.................... } 
....................  
.................... void lcd_clear(){ 
....................    lcd_command(LCD_CLEARDISPLAY); 
*
035B:  MOVLW  01
035C:  MOVWF  7C
035D:  CALL   28E
*
1072:  MOVLW  01
1073:  MOVWF  7C
1074:  BCF    0A.4
1075:  CALL   28E
1076:  BSF    0A.4
....................    delay_ms(20); 
*
035E:  MOVLW  14
035F:  MOVWF  5F
0360:  CALL   173
*
1077:  MOVLW  14
1078:  MOVWF  5F
1079:  BCF    0A.4
107A:  CALL   173
107B:  BSF    0A.4
.................... } 
....................  
.................... void lcd_home(){ 
....................    lcd_command(LCD_RETURNHOME); 
*
0368:  MOVLW  02
0369:  MOVWF  7C
036A:  CALL   28E
....................    delay_ms(20); 
036B:  MOVLW  14
036C:  MOVWF  5F
036D:  CALL   173
.................... } 
....................  
.................... void lcd_setCursor(usi8 col, usi8 row){ 
....................    int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 }; 
*
0775:  CLRF   73
0776:  MOVLW  40
0777:  MOVWF  74
0778:  MOVLW  14
0779:  MOVWF  75
077A:  MOVLW  54
077B:  MOVWF  76
....................    if ( row > _numlines ) { 
077C:  MOVF   72,W
077D:  SUBWF  4C,W
077E:  BTFSC  03.0
077F:  GOTO   783
....................       row = _numlines-1; 
0780:  MOVLW  01
0781:  SUBWF  4C,W
0782:  MOVWF  72
....................    } 
....................    lcd_command(LCD_SETDDRAMADDR | (col + row_offsets[row])); 
0783:  MOVLW  73
0784:  ADDWF  72,W
0785:  MOVWF  04
0786:  BCF    03.7
0787:  MOVF   00,W
0788:  ADDWF  71,W
0789:  IORLW  80
078A:  MOVWF  7B
078B:  MOVWF  7C
078C:  CALL   28E
078D:  RETURN
.................... } 
....................  
.................... void lcd_display() { 
....................    _displaycontrol |= LCD_DISPLAYON; 
*
0355:  BSF    4A.2
....................    lcd_command(LCD_DISPLAYCONTROL | _displaycontrol); 
0356:  MOVF   4A,W
0357:  IORLW  08
0358:  MOVWF  5D
0359:  MOVWF  7C
035A:  CALL   28E
.................... } 
....................  
.................... void lcd_command(usi8 value){ 
....................    lcd_send(value,0); 
*
028E:  MOVF   7C,W
028F:  MOVWF  7D
0290:  CLRF   7E
*
02A9:  RETURN
.................... } 
....................  
.................... void lcd_data(usi8 value){ 
....................    lcd_send(value,Rs); 
*
078E:  MOVF   74,W
078F:  MOVWF  7D
0790:  MOVLW  01
0791:  MOVWF  7E
*
07AA:  RETURN
.................... } 
....................  
.................... void lcd_send(usi8 value, usi8 mode) { 
*
0291:  MOVF   7D,W
0292:  ANDLW  F0
0293:  BSF    03.5
0294:  MOVWF  20
0295:  SWAPF  7D,W
0296:  MOVWF  77
0297:  MOVLW  F0
0298:  ANDWF  77,F
0299:  MOVF   77,W
029A:  ANDLW  F0
029B:  MOVWF  21
*
0792:  MOVF   7D,W
0793:  ANDLW  F0
0794:  BSF    03.5
0795:  MOVWF  20
0796:  SWAPF  7D,W
0797:  MOVWF  77
0798:  MOVLW  F0
0799:  ANDWF  77,F
079A:  MOVF   77,W
079B:  ANDLW  F0
079C:  MOVWF  21
....................    usi8 highnib=value&0xf0; 
....................    usi8 lownib=(value<<4)&0xf0; 
....................    write4bits((highnib)|mode); 
*
029C:  MOVF   20,W
029D:  IORWF  7E,W
029E:  MOVWF  22
029F:  MOVWF  23
02A0:  BCF    03.5
02A1:  CALL   187
*
079D:  MOVF   20,W
079E:  IORWF  7E,W
079F:  MOVWF  22
07A0:  MOVWF  23
07A1:  BCF    03.5
07A2:  CALL   187
....................    write4bits((lownib)|mode);  
*
02A2:  BSF    03.5
02A3:  MOVF   21,W
02A4:  IORWF  7E,W
02A5:  MOVWF  22
02A6:  MOVWF  23
02A7:  BCF    03.5
02A8:  CALL   187
*
07A3:  BSF    03.5
07A4:  MOVF   21,W
07A5:  IORWF  7E,W
07A6:  MOVWF  22
07A7:  MOVWF  23
07A8:  BCF    03.5
07A9:  CALL   187
.................... } 
....................  
.................... void write4bits(usi8 value) { 
....................    expanderWrite(value); 
*
0187:  BSF    03.5
0188:  MOVF   23,W
0189:  MOVWF  26
....................    pulseEnable(value); 
*
01D9:  MOVF   23,W
01DA:  MOVWF  24
*
028C:  BCF    03.5
028D:  RETURN
.................... } 
....................  
.................... void expanderWrite(usi8 _data){ 
....................    i2c_write_1byte(_data|_backlightval); 
*
018A:  MOVF   26,W
018B:  BCF    03.5
018C:  IORWF  4F,W
018D:  BSF    03.5
018E:  MOVWF  27
018F:  MOVF   27,W
0190:  MOVWF  28
*
01E0:  MOVF   26,W
01E1:  BCF    03.5
01E2:  IORWF  4F,W
01E3:  BSF    03.5
01E4:  MOVWF  27
01E5:  MOVF   27,W
01E6:  MOVWF  28
*
0237:  MOVF   26,W
0238:  BCF    03.5
0239:  IORWF  4F,W
023A:  BSF    03.5
023B:  MOVWF  27
023C:  MOVF   27,W
023D:  MOVWF  28
*
02DE:  MOVF   26,W
02DF:  BCF    03.5
02E0:  IORWF  4F,W
02E1:  BSF    03.5
02E2:  MOVWF  27
02E3:  MOVF   27,W
02E4:  MOVWF  28
.................... } 
....................  
.................... void pulseEnable(usi8 _data){ 
....................    expanderWrite(_data | En); 
*
01DB:  MOVF   24,W
01DC:  IORLW  04
01DD:  MOVWF  25
01DE:  MOVF   25,W
01DF:  MOVWF  26
....................    delay_us(1); 
*
022F:  GOTO   230
0230:  GOTO   231
0231:  NOP
....................    expanderWrite(_data & ~En); 
0232:  MOVF   24,W
0233:  ANDLW  FB
0234:  MOVWF  25
0235:  MOVF   25,W
0236:  MOVWF  26
....................    delay_us(50); 
*
0286:  MOVLW  52
0287:  MOVWF  77
0288:  DECFSZ 77,F
0289:  GOTO   288
028A:  GOTO   28B
028B:  NOP
.................... } 
....................  
.................... /* Library modify in User*/ 
.................... void lcd_log_info(usi16 time_s, bool ena_time){ 
....................    lcd_setCursor(1,0); 
....................    lcd_data("Do an 1 - HKII"); 
....................    lcd_setCursor(3,1); 
....................    lcd_data("SPKT-TPHCM"); 
....................    if(ena_time == enable){ 
....................       delay_ms(time_s*1000); 
....................       lcd_clear(); 
....................    } 
.................... } 
.................... void lcd_dis_2num_dot(usi16 dt, int8 x, int8 y, bool is_xvn, bool is_dot){ 
....................    usi8 ch, dv; 
....................    lcd_setCursor(x, y); 
*
088C:  MOVF   5F,W
088D:  MOVWF  71
088E:  MOVF   60,W
088F:  MOVWF  72
0890:  BCF    0A.3
0891:  CALL   775
0892:  BSF    0A.3
....................    ch = dt/10 + 0x30; 
0893:  MOVF   5E,W
0894:  MOVWF  69
0895:  MOVF   5D,W
0896:  MOVWF  68
0897:  CLRF   6B
0898:  MOVLW  0A
0899:  MOVWF  6A
089A:  BCF    0A.3
089B:  CALL   5F4
089C:  BSF    0A.3
089D:  MOVLW  30
089E:  ADDWF  78,W
089F:  MOVWF  63
....................    dv = dt%10 + 0x30; 
08A0:  MOVF   5E,W
08A1:  MOVWF  69
08A2:  MOVF   5D,W
08A3:  MOVWF  68
08A4:  CLRF   6B
08A5:  MOVLW  0A
08A6:  MOVWF  6A
08A7:  BCF    0A.3
08A8:  CALL   5F4
08A9:  BSF    0A.3
08AA:  MOVLW  30
08AB:  ADDWF  77,W
08AC:  MOVWF  64
....................    if(is_xvn == enable) if(ch == 0x30) ch = " "; 
08AD:  DECFSZ 61,W
08AE:  GOTO   0B5
08AF:  MOVF   63,W
08B0:  SUBLW  30
08B1:  BTFSS  03.2
08B2:  GOTO   0B5
08B3:  MOVLW  20
08B4:  MOVWF  63
....................    if(is_dot == enable) lcd_data("."); 
08B5:  DECFSZ 62,W
08B6:  GOTO   0C0
08B7:  MOVLW  73
08B8:  BSF    03.6
08B9:  MOVWF  0D
08BA:  MOVLW  00
08BB:  MOVWF  0F
08BC:  BCF    0A.3
08BD:  BCF    03.6
08BE:  CALL   7AB
08BF:  BSF    0A.3
....................    lcd_data(ch); lcd_data(dv); 
08C0:  MOVF   63,W
08C1:  MOVWF  74
08C2:  BCF    0A.3
08C3:  CALL   78E
08C4:  BSF    0A.3
08C5:  MOVF   64,W
08C6:  MOVWF  74
08C7:  BCF    0A.3
08C8:  CALL   78E
08C9:  BSF    0A.3
08CA:  RETURN
.................... } 
....................  
.................... void lcd_dis_3num_dot(usi16 dt, int8 x, int8 y, bool is_xvn, bool is_dot){ 
....................    usi8 tr, ch, dv; 
....................    lcd_setCursor(x, y); //xxx /10 -> xx  
08CB:  MOVF   5F,W
08CC:  MOVWF  71
08CD:  MOVF   60,W
08CE:  MOVWF  72
08CF:  BCF    0A.3
08D0:  CALL   775
08D1:  BSF    0A.3
....................    tr = dt/100 + 0x30;  
08D2:  MOVF   5E,W
08D3:  MOVWF  69
08D4:  MOVF   5D,W
08D5:  MOVWF  68
08D6:  CLRF   6B
08D7:  MOVLW  64
08D8:  MOVWF  6A
08D9:  BCF    0A.3
08DA:  CALL   5F4
08DB:  BSF    0A.3
08DC:  MOVLW  30
08DD:  ADDWF  78,W
08DE:  MOVWF  63
....................    ch = dt/10%10  + 0x30; 
08DF:  MOVF   5E,W
08E0:  MOVWF  69
08E1:  MOVF   5D,W
08E2:  MOVWF  68
08E3:  CLRF   6B
08E4:  MOVLW  0A
08E5:  MOVWF  6A
08E6:  BCF    0A.3
08E7:  CALL   5F4
08E8:  BSF    0A.3
08E9:  MOVF   79,W
08EA:  MOVWF  67
08EB:  MOVF   78,W
08EC:  MOVWF  66
08ED:  MOVF   79,W
08EE:  MOVWF  69
08EF:  MOVF   78,W
08F0:  MOVWF  68
08F1:  CLRF   6B
08F2:  MOVLW  0A
08F3:  MOVWF  6A
08F4:  BCF    0A.3
08F5:  CALL   5F4
08F6:  BSF    0A.3
08F7:  MOVLW  30
08F8:  ADDWF  77,W
08F9:  MOVWF  64
....................    dv = dt%10     + 0x30; 
08FA:  MOVF   5E,W
08FB:  MOVWF  69
08FC:  MOVF   5D,W
08FD:  MOVWF  68
08FE:  CLRF   6B
08FF:  MOVLW  0A
0900:  MOVWF  6A
0901:  BCF    0A.3
0902:  CALL   5F4
0903:  BSF    0A.3
0904:  MOVLW  30
0905:  ADDWF  77,W
0906:  MOVWF  65
....................    if(is_xvn == enable) if(tr == 0x30){ 
0907:  DECFSZ 61,W
0908:  GOTO   115
0909:  MOVF   63,W
090A:  SUBLW  30
090B:  BTFSS  03.2
090C:  GOTO   115
....................       tr = " "; 
090D:  MOVLW  20
090E:  MOVWF  63
....................       if(ch == 0x30) ch = " "; 
090F:  MOVF   64,W
0910:  SUBLW  30
0911:  BTFSS  03.2
0912:  GOTO   115
0913:  MOVLW  20
0914:  MOVWF  64
....................    } 
....................    if(is_dot == enable) lcd_data("."); 
0915:  DECFSZ 62,W
0916:  GOTO   120
0917:  MOVLW  74
0918:  BSF    03.6
0919:  MOVWF  0D
091A:  MOVLW  00
091B:  MOVWF  0F
091C:  BCF    0A.3
091D:  BCF    03.6
091E:  CALL   7AB
091F:  BSF    0A.3
....................    lcd_data(tr); lcd_data(ch); lcd_data(dv); 
0920:  MOVF   63,W
0921:  MOVWF  74
0922:  BCF    0A.3
0923:  CALL   78E
0924:  BSF    0A.3
0925:  MOVF   64,W
0926:  MOVWF  74
0927:  BCF    0A.3
0928:  CALL   78E
0929:  BSF    0A.3
092A:  MOVF   65,W
092B:  MOVWF  74
092C:  BCF    0A.3
092D:  CALL   78E
092E:  BSF    0A.3
092F:  RETURN
.................... } 
....................  
.................... void lcd_dis_xx_yy_zz(usi8 x, usi8 y, usi8 hh, usi8 pp, usi8 ss, bool e3, bool e2, bool e1){ 
....................    usi8 hh_ch, hh_dv, pp_ch, pp_dv, ss_ch, ss_dv; 
....................    hh_ch = e3 == true ? hh/10 + 0x30 : 0x20; hh_dv = e3 == true ? hh%10 + 0x30 : 0x20; 
*
0800:  DECFSZ 68,W
0801:  GOTO   00C
0802:  MOVF   65,W
0803:  MOVWF  71
0804:  MOVLW  0A
0805:  MOVWF  72
0806:  BCF    0A.3
0807:  CALL   760
0808:  BSF    0A.3
0809:  MOVLW  30
080A:  ADDWF  78,W
080B:  GOTO   00D
080C:  MOVLW  20
080D:  MOVWF  6B
080E:  DECFSZ 68,W
080F:  GOTO   01A
0810:  MOVF   65,W
0811:  MOVWF  71
0812:  MOVLW  0A
0813:  MOVWF  72
0814:  BCF    0A.3
0815:  CALL   760
0816:  BSF    0A.3
0817:  MOVLW  30
0818:  ADDWF  77,W
0819:  GOTO   01B
081A:  MOVLW  20
081B:  MOVWF  6C
....................    pp_ch = e2 == true ? pp/10 + 0x30 : 0x20; pp_dv = e2 == true ? pp%10 + 0x30 : 0x20; 
081C:  DECFSZ 69,W
081D:  GOTO   028
081E:  MOVF   66,W
081F:  MOVWF  71
0820:  MOVLW  0A
0821:  MOVWF  72
0822:  BCF    0A.3
0823:  CALL   760
0824:  BSF    0A.3
0825:  MOVLW  30
0826:  ADDWF  78,W
0827:  GOTO   029
0828:  MOVLW  20
0829:  MOVWF  6D
082A:  DECFSZ 69,W
082B:  GOTO   036
082C:  MOVF   66,W
082D:  MOVWF  71
082E:  MOVLW  0A
082F:  MOVWF  72
0830:  BCF    0A.3
0831:  CALL   760
0832:  BSF    0A.3
0833:  MOVLW  30
0834:  ADDWF  77,W
0835:  GOTO   037
0836:  MOVLW  20
0837:  MOVWF  6E
....................    ss_ch = e1 == true ? ss/10 + 0x30 : 0x20; ss_dv = e1 == true ? ss%10 + 0x30 : 0x20; 
0838:  DECFSZ 6A,W
0839:  GOTO   044
083A:  MOVF   67,W
083B:  MOVWF  71
083C:  MOVLW  0A
083D:  MOVWF  72
083E:  BCF    0A.3
083F:  CALL   760
0840:  BSF    0A.3
0841:  MOVLW  30
0842:  ADDWF  78,W
0843:  GOTO   045
0844:  MOVLW  20
0845:  MOVWF  6F
0846:  DECFSZ 6A,W
0847:  GOTO   052
0848:  MOVF   67,W
0849:  MOVWF  71
084A:  MOVLW  0A
084B:  MOVWF  72
084C:  BCF    0A.3
084D:  CALL   760
084E:  BSF    0A.3
084F:  MOVLW  30
0850:  ADDWF  77,W
0851:  GOTO   053
0852:  MOVLW  20
0853:  MOVWF  70
....................    lcd_setCursor(x, y); 
0854:  MOVF   63,W
0855:  MOVWF  71
0856:  MOVF   64,W
0857:  MOVWF  72
0858:  BCF    0A.3
0859:  CALL   775
085A:  BSF    0A.3
....................    lcd_data(hh_ch); lcd_data(hh_dv); lcd_data("-"); 
085B:  MOVF   6B,W
085C:  MOVWF  74
085D:  BCF    0A.3
085E:  CALL   78E
085F:  BSF    0A.3
0860:  MOVF   6C,W
0861:  MOVWF  74
0862:  BCF    0A.3
0863:  CALL   78E
0864:  BSF    0A.3
0865:  MOVLW  75
0866:  BSF    03.6
0867:  MOVWF  0D
0868:  MOVLW  00
0869:  MOVWF  0F
086A:  BCF    0A.3
086B:  BCF    03.6
086C:  CALL   7AB
086D:  BSF    0A.3
....................    lcd_data(pp_ch); lcd_data(pp_dv); lcd_data("-"); 
086E:  MOVF   6D,W
086F:  MOVWF  74
0870:  BCF    0A.3
0871:  CALL   78E
0872:  BSF    0A.3
0873:  MOVF   6E,W
0874:  MOVWF  74
0875:  BCF    0A.3
0876:  CALL   78E
0877:  BSF    0A.3
0878:  MOVLW  76
0879:  BSF    03.6
087A:  MOVWF  0D
087B:  MOVLW  00
087C:  MOVWF  0F
087D:  BCF    0A.3
087E:  BCF    03.6
087F:  CALL   7AB
0880:  BSF    0A.3
....................    lcd_data(ss_ch); lcd_data(ss_dv); 
0881:  MOVF   6F,W
0882:  MOVWF  74
0883:  BCF    0A.3
0884:  CALL   78E
0885:  BSF    0A.3
0886:  MOVF   70,W
0887:  MOVWF  74
0888:  BCF    0A.3
0889:  CALL   78E
088A:  BSF    0A.3
088B:  RETURN
.................... } 
....................  
.................... void log_code_ds1307(){ 
....................    lcd_setCursor(0, 0); 
....................    lcd_data(ma_qd/10 + 0x30); lcd_data(ma_qd%10 + 0x30); lcd_data(" - "); 
....................    lcd_data(ma_ds/10 + 0x30); lcd_data(ma_ds%10 + 0x30); 
.................... } 
....................  
.................... #include <thu_vien_btn.c> 
.................... #define level_menu 6 
....................  
.................... usi8 dl_count; 
....................  
.................... usi8 dem_menu_tong_curr = 0; 
.................... usi8 dem_menu_tong_prev = 1; 
....................  
.................... bool nhan_btn_giu(usi16 dl, usi8 pin){ 
....................    if(!input(pin)){ 
*
0930:  MOVF   5F,W
0931:  MOVWF  60
0932:  MOVLW  01
0933:  MOVWF  61
0934:  CLRF   63
0935:  MOVLW  80
0936:  MOVWF  62
0937:  BCF    0A.3
0938:  CALL   6B7
0939:  BSF    0A.3
093A:  MOVF   5F,W
093B:  MOVWF  60
093C:  CLRF   62
093D:  CLRF   61
093E:  BCF    0A.3
093F:  CALL   6D7
0940:  BSF    0A.3
0941:  BTFSC  78.0
0942:  GOTO   158
....................       dl_count += 1; delay_us(25); 
0943:  MOVLW  01
0944:  ADDWF  50,F
0945:  MOVLW  29
0946:  MOVWF  77
0947:  DECFSZ 77,F
0948:  GOTO   147
0949:  NOP
....................       if(dl_count >= dl){ 
094A:  MOVF   5E,F
094B:  BTFSS  03.2
094C:  GOTO   155
094D:  MOVF   5D,W
094E:  SUBWF  50,W
094F:  BTFSS  03.0
0950:  GOTO   155
....................          dl_count = 0; 
0951:  CLRF   50
....................          return true; 
0952:  MOVLW  01
0953:  MOVWF  78
0954:  GOTO   15A
....................       } 
....................       return false; 
0955:  MOVLW  00
0956:  MOVWF  78
0957:  GOTO   15A
....................    } 
....................    return false; 
0958:  MOVLW  00
0959:  MOVWF  78
095A:  RETURN
.................... } 
....................  
.................... bool nhan_btn_nha(bool giu_nha, usi8 pin){ 
....................    if(!input(pin)){ 
*
06EE:  MOVF   5E,W
06EF:  MOVWF  60
06F0:  MOVLW  01
06F1:  MOVWF  61
06F2:  CLRF   63
06F3:  MOVLW  80
06F4:  MOVWF  62
06F5:  CALL   6B7
06F6:  MOVF   5E,W
06F7:  MOVWF  60
06F8:  CLRF   62
06F9:  CLRF   61
06FA:  CALL   6D7
06FB:  BTFSC  78.0
06FC:  GOTO   727
....................       delay_ms(20); 
06FD:  MOVLW  14
06FE:  MOVWF  5F
06FF:  CALL   173
....................       if(!input(pin)){ 
0700:  MOVF   5E,W
0701:  MOVWF  60
0702:  MOVLW  01
0703:  MOVWF  61
0704:  CLRF   63
0705:  MOVLW  80
0706:  MOVWF  62
0707:  CALL   6B7
0708:  MOVF   5E,W
0709:  MOVWF  60
070A:  CLRF   62
070B:  CLRF   61
070C:  CALL   6D7
070D:  BTFSC  78.0
070E:  GOTO   724
....................          if(giu_nha) while(!input(pin)); 
070F:  MOVF   5D,F
0710:  BTFSC  03.2
0711:  GOTO   721
0712:  MOVF   5E,W
0713:  MOVWF  60
0714:  MOVLW  01
0715:  MOVWF  61
0716:  CLRF   63
0717:  MOVLW  80
0718:  MOVWF  62
0719:  CALL   6B7
071A:  MOVF   5E,W
071B:  MOVWF  60
071C:  CLRF   62
071D:  CLRF   61
071E:  CALL   6D7
071F:  BTFSS  78.0
0720:  GOTO   712
....................          //else delay_ms(5); 
....................          return true;    
0721:  MOVLW  01
0722:  MOVWF  78
0723:  GOTO   729
....................       } 
....................       return false; 
0724:  MOVLW  00
0725:  MOVWF  78
0726:  GOTO   729
....................    } 
....................    return false; 
0727:  MOVLW  00
0728:  MOVWF  78
0729:  RETURN
.................... } 
....................  
.................... void test_btn(){ 
....................    if(!input(bt0)){ 
....................       delay_ms(20); 
....................       if(!input(bt0)){ 
....................          lcd_setCursor(0,0); 
....................          lcd_data("nut 0"); 
....................          while(!input(bt0)); 
....................       } 
....................    } 
....................     
....................    if(!input(bt1)){ 
....................       delay_ms(20); 
....................       if(!input(bt1)){ 
....................          lcd_setCursor(0,0); 
....................          lcd_data("nut 1"); 
....................          while(!input(bt1)); 
....................       } 
....................    } 
....................     
....................    if(!input(bt2)){ 
....................       delay_ms(20); 
....................       if(!input(bt2)){ 
....................          lcd_setCursor(0,0); 
....................          lcd_data("nut 2"); 
....................          while(!input(bt2)); 
....................       } 
....................    } 
....................     
....................    if(!input(bt3)){ 
....................       delay_ms(20); 
....................       if(!input(bt3)){ 
....................          lcd_setCursor(0,0); 
....................          lcd_data("nut 3"); 
....................          while(!input(bt3)); 
....................       } 
....................    } 
.................... } 
....................  
.................... #include <thu_vien_control_clock.c> 
....................  
.................... usi8 tang_or_giam_bcd(unsigned int8 x, int1 sel){ 
....................    usi8 y, dv, ch, v; 
....................    ch = (x>>4); 
*
0A32:  SWAPF  5D,W
0A33:  MOVWF  61
0A34:  MOVLW  0F
0A35:  ANDWF  61,F
....................    dv = x& 0x0f; 
0A36:  MOVF   5D,W
0A37:  ANDLW  0F
0A38:  MOVWF  60
....................    y = ch*10 + dv; 
0A39:  MOVF   61,W
0A3A:  MOVWF  63
0A3B:  MOVLW  0A
0A3C:  MOVWF  64
0A3D:  BCF    0A.3
0A3E:  CALL   72A
0A3F:  BSF    0A.3
0A40:  MOVF   60,W
0A41:  ADDWF  78,W
0A42:  MOVWF  5F
....................    if(sel == 0) y++; 
0A43:  MOVF   5E,F
0A44:  BTFSS  03.2
0A45:  GOTO   248
0A46:  INCF   5F,F
0A47:  GOTO   249
....................    else         y--; 
0A48:  DECF   5F,F
....................    ch = y/10; dv = y%10; 
0A49:  MOVF   5F,W
0A4A:  MOVWF  71
0A4B:  MOVLW  0A
0A4C:  MOVWF  72
0A4D:  BCF    0A.3
0A4E:  CALL   760
0A4F:  BSF    0A.3
0A50:  MOVF   78,W
0A51:  MOVWF  61
0A52:  MOVF   5F,W
0A53:  MOVWF  71
0A54:  MOVLW  0A
0A55:  MOVWF  72
0A56:  BCF    0A.3
0A57:  CALL   760
0A58:  BSF    0A.3
0A59:  MOVF   77,W
0A5A:  MOVWF  60
....................    v = (ch<<4)|dv; 
0A5B:  SWAPF  61,W
0A5C:  MOVWF  77
0A5D:  MOVLW  F0
0A5E:  ANDWF  77,F
0A5F:  MOVF   77,W
0A60:  IORWF  60,W
0A61:  MOVWF  62
....................    return v; 
0A62:  MOVF   62,W
0A63:  MOVWF  78
0A64:  RETURN
.................... } 
....................  
.................... void tat_bat_2led_chinh(){ 
....................    if(gt_mod == 1 || gt_mod == 4) { e_11 = ~e_11; e_22 = true; e_33 = true;} 
*
095E:  DECFSZ 30,W
095F:  GOTO   161
0960:  GOTO   165
0961:  MOVF   30,W
0962:  SUBLW  04
0963:  BTFSS  03.2
0964:  GOTO   16A
0965:  MOVLW  01
0966:  XORWF  32,F
0967:  BSF    32.1
0968:  BSF    32.2
0969:  GOTO   187
....................    else if(gt_mod == 2 || gt_mod == 5) { e_11 = true; e_22 = ~e_22; e_33 = true;} 
096A:  MOVF   30,W
096B:  SUBLW  02
096C:  BTFSC  03.2
096D:  GOTO   172
096E:  MOVF   30,W
096F:  SUBLW  05
0970:  BTFSS  03.2
0971:  GOTO   177
0972:  BSF    32.0
0973:  MOVLW  02
0974:  XORWF  32,F
0975:  BSF    32.2
0976:  GOTO   187
....................    else if(gt_mod == 3 || gt_mod == 6) { e_11 = true; e_22 = true; e_33 = ~e_33;} 
0977:  MOVF   30,W
0978:  SUBLW  03
0979:  BTFSC  03.2
097A:  GOTO   17F
097B:  MOVF   30,W
097C:  SUBLW  06
097D:  BTFSS  03.2
097E:  GOTO   184
097F:  BSF    32.0
0980:  BSF    32.1
0981:  MOVLW  04
0982:  XORWF  32,F
0983:  GOTO   187
....................    else { e_11 = true; e_22 = true; e_33 = true;} 
0984:  BSF    32.0
0985:  BSF    32.1
0986:  BSF    32.2
.................... } 
....................  
.................... void giai_ma_gpg_lcd(){ 
....................    lcd_dis_xx_yy_zz(4,1,dec_gio_ds,dec_phut_ds,dec_giay_ds,e_33, e_22, e_11); 
*
098C:  MOVF   42,W
098D:  MOVWF  5F
098E:  BCF    0A.3
098F:  CALL   74F
0990:  BSF    0A.3
0991:  MOVF   78,W
0992:  MOVWF  5D
0993:  MOVF   41,W
0994:  MOVWF  5F
0995:  BCF    0A.3
0996:  CALL   74F
0997:  BSF    0A.3
0998:  MOVF   78,W
0999:  MOVWF  5E
099A:  MOVF   40,W
099B:  MOVWF  5F
099C:  BCF    0A.3
099D:  CALL   74F
099E:  BSF    0A.3
099F:  MOVF   78,W
09A0:  MOVWF  5F
09A1:  MOVLW  00
09A2:  BTFSC  32.2
09A3:  MOVLW  01
09A4:  MOVWF  60
09A5:  MOVLW  00
09A6:  BTFSC  32.1
09A7:  MOVLW  01
09A8:  MOVWF  61
09A9:  MOVLW  00
09AA:  BTFSC  32.0
09AB:  MOVLW  01
09AC:  MOVWF  62
09AD:  MOVLW  04
09AE:  MOVWF  63
09AF:  MOVLW  01
09B0:  MOVWF  64
09B1:  MOVF   5D,W
09B2:  MOVWF  65
09B3:  MOVF   5E,W
09B4:  MOVWF  66
09B5:  MOVF   78,W
09B6:  MOVWF  67
09B7:  MOVF   60,W
09B8:  MOVWF  68
09B9:  MOVF   61,W
09BA:  MOVWF  69
09BB:  MOVF   62,W
09BC:  MOVWF  6A
09BD:  CALL   000
09BE:  RETURN
.................... } 
....................  
.................... void giai_ma_ntn_lcd(){ 
....................    lcd_dis_xx_yy_zz(4,1,dec_ngay_ds,dec_thang_ds,dec_nam_ds,e_33, e_22, e_11); 
09BF:  MOVF   44,W
09C0:  MOVWF  5F
09C1:  BCF    0A.3
09C2:  CALL   74F
09C3:  BSF    0A.3
09C4:  MOVF   78,W
09C5:  MOVWF  5D
09C6:  MOVF   45,W
09C7:  MOVWF  5F
09C8:  BCF    0A.3
09C9:  CALL   74F
09CA:  BSF    0A.3
09CB:  MOVF   78,W
09CC:  MOVWF  5E
09CD:  MOVF   46,W
09CE:  MOVWF  5F
09CF:  BCF    0A.3
09D0:  CALL   74F
09D1:  BSF    0A.3
09D2:  MOVF   78,W
09D3:  MOVWF  5F
09D4:  MOVLW  00
09D5:  BTFSC  32.2
09D6:  MOVLW  01
09D7:  MOVWF  60
09D8:  MOVLW  00
09D9:  BTFSC  32.1
09DA:  MOVLW  01
09DB:  MOVWF  61
09DC:  MOVLW  00
09DD:  BTFSC  32.0
09DE:  MOVLW  01
09DF:  MOVWF  62
09E0:  MOVLW  04
09E1:  MOVWF  63
09E2:  MOVLW  01
09E3:  MOVWF  64
09E4:  MOVF   5D,W
09E5:  MOVWF  65
09E6:  MOVF   5E,W
09E7:  MOVWF  66
09E8:  MOVF   78,W
09E9:  MOVWF  67
09EA:  MOVF   60,W
09EB:  MOVWF  68
09EC:  MOVF   61,W
09ED:  MOVWF  69
09EE:  MOVF   62,W
09EF:  MOVWF  6A
09F0:  CALL   000
09F1:  RETURN
.................... } 
....................  
.................... void giai_ma_thu_lcd(){ 
....................    lcd_dis_xx_yy_zz(4,1,0x00,dec_thu_ds,0x00,0, e_22, 0); 
09F2:  MOVF   43,W
09F3:  MOVWF  5F
09F4:  BCF    0A.3
09F5:  CALL   74F
09F6:  BSF    0A.3
09F7:  MOVF   78,W
09F8:  MOVWF  5D
09F9:  MOVLW  00
09FA:  BTFSC  32.1
09FB:  MOVLW  01
09FC:  MOVWF  5E
09FD:  MOVLW  04
09FE:  MOVWF  63
09FF:  MOVLW  01
0A00:  MOVWF  64
0A01:  CLRF   65
0A02:  MOVF   78,W
0A03:  MOVWF  66
0A04:  CLRF   67
0A05:  CLRF   68
0A06:  MOVF   5E,W
0A07:  MOVWF  69
0A08:  CLRF   6A
0A09:  CALL   000
0A0A:  RETURN
.................... } 
....................  
.................... void giai_ma_gpg_ntn_thu_lcd(){ 
....................    if(gt_mod == 0){ 
0A0B:  MOVF   30,F
0A0C:  BTFSS  03.2
0A0D:  GOTO   21D
....................       if(tt_ht == 0 || tt_ht == 1) giai_ma_gpg_lcd(); 
0A0E:  MOVF   2F,F
0A0F:  BTFSC  03.2
0A10:  GOTO   213
0A11:  DECFSZ 2F,W
0A12:  GOTO   214
0A13:  CALL   18C
....................       if(tt_ht == 2) giai_ma_ntn_lcd(); 
0A14:  MOVF   2F,W
0A15:  SUBLW  02
0A16:  BTFSC  03.2
0A17:  CALL   1BF
....................       if(tt_ht == 3) giai_ma_thu_lcd(); 
0A18:  MOVF   2F,W
0A19:  SUBLW  03
0A1A:  BTFSC  03.2
0A1B:  CALL   1F2
....................    } 
0A1C:  GOTO   231
....................    else{ 
....................       if(gt_mod < 4)       giai_ma_gpg_lcd(); 
0A1D:  BTFSC  30.7
0A1E:  GOTO   223
0A1F:  MOVF   30,W
0A20:  SUBLW  03
0A21:  BTFSS  03.0
0A22:  GOTO   225
0A23:  CALL   18C
0A24:  GOTO   231
....................       else if(gt_mod < 7)  giai_ma_ntn_lcd(); 
0A25:  BTFSC  30.7
0A26:  GOTO   22B
0A27:  MOVF   30,W
0A28:  SUBLW  06
0A29:  BTFSS  03.0
0A2A:  GOTO   22D
0A2B:  CALL   1BF
0A2C:  GOTO   231
....................       else if(gt_mod == 7) giai_ma_thu_lcd(); 
0A2D:  MOVF   30,W
0A2E:  SUBLW  07
0A2F:  BTFSC  03.2
0A30:  CALL   1F2
....................    } 
0A31:  RETURN
.................... } 
....................  
.................... void xu_ly_choptat(){ 
....................    if(gt_mod != 0){ 
*
095B:  MOVF   30,F
095C:  BTFSC  03.2
095D:  GOTO   188
....................       tat_bat_2led_chinh(); 
....................    } 
*
0987:  GOTO   18B
....................    else { e_11 = true; e_22 = true; e_33 = true;} 
0988:  BSF    32.0
0989:  BSF    32.1
098A:  BSF    32.2
098B:  RETURN
....................     
.................... } 
....................  
.................... void phim_chon_hthi_mode(){ 
....................    if(nhan_btn_giu(1, bt3)){ 
*
1184:  CLRF   5E
1185:  MOVLW  01
1186:  MOVWF  5D
1187:  MOVLW  33
1188:  MOVWF  5F
1189:  BCF    0A.4
118A:  BSF    0A.3
118B:  CALL   130
118C:  BSF    0A.4
118D:  BCF    0A.3
118E:  MOVF   78,F
118F:  BTFSC  03.2
1190:  GOTO   1B8
....................       tt_ht = 1; 
1191:  MOVLW  01
1192:  MOVWF  2F
....................       if(tt_ht == 1){ 
1193:  DECFSZ 2F,W
1194:  GOTO   1B2
....................          gt_mod++; 
1195:  INCF   30,F
....................          if(gt_mod < 4) tt_ht = 1; 
1196:  BTFSC  30.7
1197:  GOTO   19C
1198:  MOVF   30,W
1199:  SUBLW  03
119A:  BTFSS  03.0
119B:  GOTO   19F
119C:  MOVLW  01
119D:  MOVWF  2F
119E:  GOTO   1B2
....................          else if(gt_mod < 7) tt_ht = 2; 
119F:  BTFSC  30.7
11A0:  GOTO   1A5
11A1:  MOVF   30,W
11A2:  SUBLW  06
11A3:  BTFSS  03.0
11A4:  GOTO   1A8
11A5:  MOVLW  02
11A6:  MOVWF  2F
11A7:  GOTO   1B2
....................          else if(gt_mod == 7) tt_ht = 3; 
11A8:  MOVF   30,W
11A9:  SUBLW  07
11AA:  BTFSS  03.2
11AB:  GOTO   1AF
11AC:  MOVLW  03
11AD:  MOVWF  2F
11AE:  GOTO   1B2
....................          else{ 
....................             gt_mod = 0; 
11AF:  CLRF   30
....................             tt_ht = 0; 
11B0:  CLRF   2F
....................             dem_menu_tong_curr = 0; 
11B1:  CLRF   51
....................          } 
....................       } 
....................       tg_chinh = 0; 
11B2:  CLRF   31
....................       giai_ma_gpg_ntn_thu_lcd(); 
11B3:  BCF    0A.4
11B4:  BSF    0A.3
11B5:  CALL   20B
11B6:  BSF    0A.4
11B7:  BCF    0A.3
....................    } 
.................... } 
.................... void tang_giay(){ 
....................    if(giay_ds == 0x59) giay_ds = 0; 
*
11D7:  MOVF   40,W
11D8:  SUBLW  59
11D9:  BTFSS  03.2
11DA:  GOTO   1DD
11DB:  CLRF   40
11DC:  GOTO   1E7
....................    else giay_ds = tang_or_giam_bcd(giay_ds, tang); 
11DD:  MOVF   40,W
11DE:  MOVWF  5D
11DF:  CLRF   5E
11E0:  BCF    0A.4
11E1:  BSF    0A.3
11E2:  CALL   232
11E3:  BSF    0A.4
11E4:  BCF    0A.3
11E5:  MOVF   78,W
11E6:  MOVWF  40
....................    ds1307_save_ds(0,giay_ds); 
11E7:  CLRF   5D
11E8:  MOVF   40,W
11E9:  MOVWF  5E
11EA:  BCF    0A.4
11EB:  BSF    0A.3
11EC:  CALL   265
11ED:  BSF    0A.4
11EE:  BCF    0A.3
.................... } 
.................... void tang_phut(){ 
....................    if(phut_ds == 0x59) phut_ds = 0; 
*
11F0:  MOVF   41,W
11F1:  SUBLW  59
11F2:  BTFSS  03.2
11F3:  GOTO   1F6
11F4:  CLRF   41
11F5:  GOTO   200
....................    else phut_ds = tang_or_giam_bcd(phut_ds, tang); 
11F6:  MOVF   41,W
11F7:  MOVWF  5D
11F8:  CLRF   5E
11F9:  BCF    0A.4
11FA:  BSF    0A.3
11FB:  CALL   232
11FC:  BSF    0A.4
11FD:  BCF    0A.3
11FE:  MOVF   78,W
11FF:  MOVWF  41
....................    ds1307_save_ds(1,phut_ds); 
1200:  MOVLW  01
1201:  MOVWF  5D
1202:  MOVF   41,W
1203:  MOVWF  5E
1204:  BCF    0A.4
1205:  BSF    0A.3
1206:  CALL   265
1207:  BSF    0A.4
1208:  BCF    0A.3
.................... } 
.................... void tang_gio(){ 
....................    if(gio_ds == 0x23) gio_ds = 0; 
*
120A:  MOVF   42,W
120B:  SUBLW  23
120C:  BTFSS  03.2
120D:  GOTO   210
120E:  CLRF   42
120F:  GOTO   21A
....................    else gio_ds = tang_or_giam_bcd(gio_ds, tang); 
1210:  MOVF   42,W
1211:  MOVWF  5D
1212:  CLRF   5E
1213:  BCF    0A.4
1214:  BSF    0A.3
1215:  CALL   232
1216:  BSF    0A.4
1217:  BCF    0A.3
1218:  MOVF   78,W
1219:  MOVWF  42
....................    ds1307_save_ds(2,gio_ds); 
121A:  MOVLW  02
121B:  MOVWF  5D
121C:  MOVF   42,W
121D:  MOVWF  5E
121E:  BCF    0A.4
121F:  BSF    0A.3
1220:  CALL   265
1221:  BSF    0A.4
1222:  BCF    0A.3
.................... } 
.................... void chinh_tang_gpg(){ 
....................    switch(gt_mod){ 
*
11CC:  MOVF   30,W
11CD:  XORLW  01
11CE:  BTFSC  03.2
11CF:  GOTO   1D7
11D0:  XORLW  03
11D1:  BTFSC  03.2
11D2:  GOTO   1F0
11D3:  XORLW  01
11D4:  BTFSC  03.2
11D5:  GOTO   20A
11D6:  GOTO   224
....................       case 1: 
....................          tang_giay(); 
....................          break; 
*
11EF:  GOTO   224
....................       case 2: 
....................          tang_phut(); 
....................          break; 
*
1209:  GOTO   224
....................       case 3: 
....................          tang_gio(); 
....................          break; 
*
1223:  GOTO   224
....................       default: break; 
....................    } 
.................... } 
.................... void tang_nam(){ 
....................    if(nam_ds == 0x99) nam_ds = 0; 
*
1236:  MOVF   46,W
1237:  SUBLW  99
1238:  BTFSS  03.2
1239:  GOTO   23C
123A:  CLRF   46
123B:  GOTO   246
....................    else nam_ds = tang_or_giam_bcd(nam_ds, tang); 
123C:  MOVF   46,W
123D:  MOVWF  5D
123E:  CLRF   5E
123F:  BCF    0A.4
1240:  BSF    0A.3
1241:  CALL   232
1242:  BSF    0A.4
1243:  BCF    0A.3
1244:  MOVF   78,W
1245:  MOVWF  46
....................    ds1307_save_ds(6,nam_ds); 
1246:  MOVLW  06
1247:  MOVWF  5D
1248:  MOVF   46,W
1249:  MOVWF  5E
124A:  BCF    0A.4
124B:  BSF    0A.3
124C:  CALL   265
124D:  BSF    0A.4
124E:  BCF    0A.3
.................... } 
.................... void tang_thang(){ 
....................    if(thang_ds == 0x12) thang_ds = 1; 
*
1250:  MOVF   45,W
1251:  SUBLW  12
1252:  BTFSS  03.2
1253:  GOTO   257
1254:  MOVLW  01
1255:  MOVWF  45
1256:  GOTO   261
....................    else thang_ds = tang_or_giam_bcd(thang_ds, tang); 
1257:  MOVF   45,W
1258:  MOVWF  5D
1259:  CLRF   5E
125A:  BCF    0A.4
125B:  BSF    0A.3
125C:  CALL   232
125D:  BSF    0A.4
125E:  BCF    0A.3
125F:  MOVF   78,W
1260:  MOVWF  45
....................    ds1307_save_ds(5,thang_ds); 
1261:  MOVLW  05
1262:  MOVWF  5D
1263:  MOVF   45,W
1264:  MOVWF  5E
1265:  BCF    0A.4
1266:  BSF    0A.3
1267:  CALL   265
1268:  BSF    0A.4
1269:  BCF    0A.3
.................... } 
.................... void tang_ngay(){ 
....................    if(ngay_ds == 0x31) ngay_ds = 1; 
*
126B:  MOVF   44,W
126C:  SUBLW  31
126D:  BTFSS  03.2
126E:  GOTO   272
126F:  MOVLW  01
1270:  MOVWF  44
1271:  GOTO   27C
....................    else ngay_ds = tang_or_giam_bcd(ngay_ds, tang); 
1272:  MOVF   44,W
1273:  MOVWF  5D
1274:  CLRF   5E
1275:  BCF    0A.4
1276:  BSF    0A.3
1277:  CALL   232
1278:  BSF    0A.4
1279:  BCF    0A.3
127A:  MOVF   78,W
127B:  MOVWF  44
....................    ds1307_save_ds(4,ngay_ds); 
127C:  MOVLW  04
127D:  MOVWF  5D
127E:  MOVF   44,W
127F:  MOVWF  5E
1280:  BCF    0A.4
1281:  BSF    0A.3
1282:  CALL   265
1283:  BSF    0A.4
1284:  BCF    0A.3
.................... } 
.................... void chinh_tang_ntn(){ 
....................    switch(gt_mod){ 
*
122B:  MOVF   30,W
122C:  XORLW  04
122D:  BTFSC  03.2
122E:  GOTO   236
122F:  XORLW  01
1230:  BTFSC  03.2
1231:  GOTO   250
1232:  XORLW  03
1233:  BTFSC  03.2
1234:  GOTO   26B
1235:  GOTO   286
....................       case 4: 
....................          tang_nam(); 
....................          break; 
*
124F:  GOTO   286
....................       case 5: 
....................          tang_thang(); 
....................          break; 
*
126A:  GOTO   286
....................       case 6: 
....................          tang_ngay(); 
....................          break; 
*
1285:  GOTO   286
....................       default: break; 
....................    } 
.................... } 
.................... void chinh_tang_thu(){ 
....................    if(thu_ds == 8) thu_ds = 2; 
*
128B:  MOVF   43,W
128C:  SUBLW  08
128D:  BTFSS  03.2
128E:  GOTO   292
128F:  MOVLW  02
1290:  MOVWF  43
1291:  GOTO   293
....................    else thu_ds++; 
1292:  INCF   43,F
....................    ds1307_save_ds(3,thu_ds); 
1293:  MOVLW  03
1294:  MOVWF  5D
1295:  MOVF   43,W
1296:  MOVWF  5E
1297:  BCF    0A.4
1298:  BSF    0A.3
1299:  CALL   265
129A:  BSF    0A.4
129B:  BCF    0A.3
.................... } 
....................  
.................... void phim_up(){ 
....................    if(nhan_btn_giu(1, bt1)){ 
*
11B8:  CLRF   5E
11B9:  MOVLW  01
11BA:  MOVWF  5D
11BB:  MOVLW  31
11BC:  MOVWF  5F
11BD:  BCF    0A.4
11BE:  BSF    0A.3
11BF:  CALL   130
11C0:  BSF    0A.4
11C1:  BCF    0A.3
11C2:  MOVF   78,F
11C3:  BTFSC  03.2
11C4:  GOTO   2A4
....................       tg_chinh = 0; 
11C5:  CLRF   31
....................       if(gt_mod<4) chinh_tang_gpg(); 
11C6:  BTFSC  30.7
11C7:  GOTO   1CC
11C8:  MOVF   30,W
11C9:  SUBLW  03
11CA:  BTFSS  03.0
11CB:  GOTO   225
*
1224:  GOTO   29C
....................       else if(gt_mod<7) chinh_tang_ntn(); 
1225:  BTFSC  30.7
1226:  GOTO   22B
1227:  MOVF   30,W
1228:  SUBLW  06
1229:  BTFSS  03.0
122A:  GOTO   287
*
1286:  GOTO   29C
....................       else if(gt_mod==7) chinh_tang_thu(); 
1287:  MOVF   30,W
1288:  SUBLW  07
1289:  BTFSS  03.2
128A:  GOTO   29C
....................       e_11 = true; e_22 = true; e_33 = true; 
*
129C:  BSF    32.0
129D:  BSF    32.1
129E:  BSF    32.2
....................       giai_ma_gpg_ntn_thu_lcd(); 
129F:  BCF    0A.4
12A0:  BSF    0A.3
12A1:  CALL   20B
12A2:  BSF    0A.4
12A3:  BCF    0A.3
....................    } 
.................... } 
.................... void giam_giay(){ 
....................    if(giay_ds == 0) giay_ds = 0x59; 
*
12C3:  MOVF   40,F
12C4:  BTFSS  03.2
12C5:  GOTO   2C9
12C6:  MOVLW  59
12C7:  MOVWF  40
12C8:  GOTO   2D4
....................    else giay_ds = tang_or_giam_bcd(giay_ds,giam); 
12C9:  MOVF   40,W
12CA:  MOVWF  5D
12CB:  MOVLW  01
12CC:  MOVWF  5E
12CD:  BCF    0A.4
12CE:  BSF    0A.3
12CF:  CALL   232
12D0:  BSF    0A.4
12D1:  BCF    0A.3
12D2:  MOVF   78,W
12D3:  MOVWF  40
....................    ds1307_save_ds(0,giay_ds); 
12D4:  CLRF   5D
12D5:  MOVF   40,W
12D6:  MOVWF  5E
12D7:  BCF    0A.4
12D8:  BSF    0A.3
12D9:  CALL   265
12DA:  BSF    0A.4
12DB:  BCF    0A.3
.................... } 
.................... void giam_phut(){ 
....................    if(phut_ds == 0) phut_ds = 0x59; 
*
12DD:  MOVF   41,F
12DE:  BTFSS  03.2
12DF:  GOTO   2E3
12E0:  MOVLW  59
12E1:  MOVWF  41
12E2:  GOTO   2EE
....................    else phut_ds = tang_or_giam_bcd(phut_ds,giam); 
12E3:  MOVF   41,W
12E4:  MOVWF  5D
12E5:  MOVLW  01
12E6:  MOVWF  5E
12E7:  BCF    0A.4
12E8:  BSF    0A.3
12E9:  CALL   232
12EA:  BSF    0A.4
12EB:  BCF    0A.3
12EC:  MOVF   78,W
12ED:  MOVWF  41
....................    ds1307_save_ds(1,phut_ds); 
12EE:  MOVLW  01
12EF:  MOVWF  5D
12F0:  MOVF   41,W
12F1:  MOVWF  5E
12F2:  BCF    0A.4
12F3:  BSF    0A.3
12F4:  CALL   265
12F5:  BSF    0A.4
12F6:  BCF    0A.3
.................... } 
.................... void giam_gio(){ 
....................    if(gio_ds == 0) gio_ds = 0x23; 
*
12F8:  MOVF   42,F
12F9:  BTFSS  03.2
12FA:  GOTO   2FE
12FB:  MOVLW  23
12FC:  MOVWF  42
12FD:  GOTO   309
....................    else gio_ds = tang_or_giam_bcd(gio_ds,giam); 
12FE:  MOVF   42,W
12FF:  MOVWF  5D
1300:  MOVLW  01
1301:  MOVWF  5E
1302:  BCF    0A.4
1303:  BSF    0A.3
1304:  CALL   232
1305:  BSF    0A.4
1306:  BCF    0A.3
1307:  MOVF   78,W
1308:  MOVWF  42
....................    ds1307_save_ds(2,gio_ds); 
1309:  MOVLW  02
130A:  MOVWF  5D
130B:  MOVF   42,W
130C:  MOVWF  5E
130D:  BCF    0A.4
130E:  BSF    0A.3
130F:  CALL   265
1310:  BSF    0A.4
1311:  BCF    0A.3
.................... } 
.................... void chinh_giam_gpg(){ 
....................    switch(gt_mod){ 
*
12B8:  MOVF   30,W
12B9:  XORLW  01
12BA:  BTFSC  03.2
12BB:  GOTO   2C3
12BC:  XORLW  03
12BD:  BTFSC  03.2
12BE:  GOTO   2DD
12BF:  XORLW  01
12C0:  BTFSC  03.2
12C1:  GOTO   2F8
12C2:  GOTO   313
....................       case 1: 
....................          giam_giay(); 
....................          break; 
*
12DC:  GOTO   313
....................       case 2: 
....................          giam_phut(); 
....................          break; 
*
12F7:  GOTO   313
....................       case 3: 
....................          giam_gio(); 
....................          break; 
*
1312:  GOTO   313
....................       default: break; 
....................    } 
.................... } 
.................... void giam_nam(){ 
....................    if(nam_ds == 0x0) nam_ds = 0x99; 
*
1325:  MOVF   46,F
1326:  BTFSS  03.2
1327:  GOTO   32B
1328:  MOVLW  99
1329:  MOVWF  46
132A:  GOTO   336
....................    else nam_ds = tang_or_giam_bcd(nam_ds, giam); 
132B:  MOVF   46,W
132C:  MOVWF  5D
132D:  MOVLW  01
132E:  MOVWF  5E
132F:  BCF    0A.4
1330:  BSF    0A.3
1331:  CALL   232
1332:  BSF    0A.4
1333:  BCF    0A.3
1334:  MOVF   78,W
1335:  MOVWF  46
....................    ds1307_save_ds(6,nam_ds); 
1336:  MOVLW  06
1337:  MOVWF  5D
1338:  MOVF   46,W
1339:  MOVWF  5E
133A:  BCF    0A.4
133B:  BSF    0A.3
133C:  CALL   265
133D:  BSF    0A.4
133E:  BCF    0A.3
.................... } 
.................... void giam_thang(){ 
....................    if(thang_ds == 0x1) thang_ds = 12; 
*
1340:  DECFSZ 45,W
1341:  GOTO   345
1342:  MOVLW  0C
1343:  MOVWF  45
1344:  GOTO   350
....................    else thang_ds = tang_or_giam_bcd(thang_ds, giam); 
1345:  MOVF   45,W
1346:  MOVWF  5D
1347:  MOVLW  01
1348:  MOVWF  5E
1349:  BCF    0A.4
134A:  BSF    0A.3
134B:  CALL   232
134C:  BSF    0A.4
134D:  BCF    0A.3
134E:  MOVF   78,W
134F:  MOVWF  45
....................    ds1307_save_ds(5,thang_ds); 
1350:  MOVLW  05
1351:  MOVWF  5D
1352:  MOVF   45,W
1353:  MOVWF  5E
1354:  BCF    0A.4
1355:  BSF    0A.3
1356:  CALL   265
1357:  BSF    0A.4
1358:  BCF    0A.3
.................... } 
.................... void giam_ngay(){ 
....................    if(ngay_ds == 0x1) ngay_ds = 21; 
*
135A:  DECFSZ 44,W
135B:  GOTO   35F
135C:  MOVLW  15
135D:  MOVWF  44
135E:  GOTO   36A
....................    else ngay_ds = tang_or_giam_bcd(ngay_ds, giam); 
135F:  MOVF   44,W
1360:  MOVWF  5D
1361:  MOVLW  01
1362:  MOVWF  5E
1363:  BCF    0A.4
1364:  BSF    0A.3
1365:  CALL   232
1366:  BSF    0A.4
1367:  BCF    0A.3
1368:  MOVF   78,W
1369:  MOVWF  44
....................    ds1307_save_ds(4,ngay_ds); 
136A:  MOVLW  04
136B:  MOVWF  5D
136C:  MOVF   44,W
136D:  MOVWF  5E
136E:  BCF    0A.4
136F:  BSF    0A.3
1370:  CALL   265
1371:  BSF    0A.4
1372:  BCF    0A.3
.................... } 
.................... void chinh_giam_ntn(){ 
....................    switch(gt_mod){ 
*
131A:  MOVF   30,W
131B:  XORLW  01
131C:  BTFSC  03.2
131D:  GOTO   325
131E:  XORLW  03
131F:  BTFSC  03.2
1320:  GOTO   340
1321:  XORLW  01
1322:  BTFSC  03.2
1323:  GOTO   35A
1324:  GOTO   374
....................       case 1: 
....................          giam_nam(); 
....................          break; 
*
133F:  GOTO   374
....................       case 2: 
....................          giam_thang(); 
....................          break; 
*
1359:  GOTO   374
....................       case 3: 
....................          giam_ngay(); 
....................          break; 
*
1373:  GOTO   374
....................       default: break; 
....................    } 
.................... } 
.................... void chinh_giam_thu(){ 
....................    if(thu_ds == 2) thu_ds = 8; 
*
1379:  MOVF   43,W
137A:  SUBLW  02
137B:  BTFSS  03.2
137C:  GOTO   380
137D:  MOVLW  08
137E:  MOVWF  43
137F:  GOTO   381
....................    else thu_ds--; 
1380:  DECF   43,F
....................    ds1307_save_ds(3,thu_ds); 
1381:  MOVLW  03
1382:  MOVWF  5D
1383:  MOVF   43,W
1384:  MOVWF  5E
1385:  BCF    0A.4
1386:  BSF    0A.3
1387:  CALL   265
1388:  BSF    0A.4
1389:  BCF    0A.3
.................... } 
.................... void phim_dw(){ 
....................    if(nhan_btn_giu(1, bt2)){ 
*
12A4:  CLRF   5E
12A5:  MOVLW  01
12A6:  MOVWF  5D
12A7:  MOVLW  32
12A8:  MOVWF  5F
12A9:  BCF    0A.4
12AA:  BSF    0A.3
12AB:  CALL   130
12AC:  BSF    0A.4
12AD:  BCF    0A.3
12AE:  MOVF   78,F
12AF:  BTFSC  03.2
12B0:  GOTO   392
....................       tg_chinh = 0; 
12B1:  CLRF   31
....................       if(gt_mod<4) chinh_giam_gpg(); 
12B2:  BTFSC  30.7
12B3:  GOTO   2B8
12B4:  MOVF   30,W
12B5:  SUBLW  03
12B6:  BTFSS  03.0
12B7:  GOTO   314
*
1313:  GOTO   38A
....................       else if(gt_mod<7) chinh_giam_ntn(); 
1314:  BTFSC  30.7
1315:  GOTO   31A
1316:  MOVF   30,W
1317:  SUBLW  06
1318:  BTFSS  03.0
1319:  GOTO   375
*
1374:  GOTO   38A
....................       else if(gt_mod==7) chinh_giam_thu(); 
1375:  MOVF   30,W
1376:  SUBLW  07
1377:  BTFSS  03.2
1378:  GOTO   38A
....................       e_11 = true; e_22 = true; e_33 = true; 
*
138A:  BSF    32.0
138B:  BSF    32.1
138C:  BSF    32.2
....................       giai_ma_gpg_ntn_thu_lcd(); 
138D:  BCF    0A.4
138E:  BSF    0A.3
138F:  CALL   20B
1390:  BSF    0A.4
1391:  BCF    0A.3
....................    } 
.................... } 
.................... void log_mode(){ 
....................    lcd_setCursor(0, 1); 
*
13B0:  CLRF   71
13B1:  MOVLW  01
13B2:  MOVWF  72
13B3:  BCF    0A.4
13B4:  CALL   775
13B5:  BSF    0A.4
....................    if(tt_ht == 0) lcd_data(" N "); 
13B6:  MOVF   2F,F
13B7:  BTFSS  03.2
13B8:  GOTO   3C3
13B9:  MOVLW  85
13BA:  BSF    03.6
13BB:  MOVWF  0D
13BC:  MOVLW  00
13BD:  MOVWF  0F
13BE:  BCF    0A.4
13BF:  BCF    03.6
13C0:  CALL   7AB
13C1:  BSF    0A.4
13C2:  GOTO   3EA
....................    else if(tt_ht == 1) lcd_data("GPG"); 
13C3:  DECFSZ 2F,W
13C4:  GOTO   3CF
13C5:  MOVLW  87
13C6:  BSF    03.6
13C7:  MOVWF  0D
13C8:  MOVLW  00
13C9:  MOVWF  0F
13CA:  BCF    0A.4
13CB:  BCF    03.6
13CC:  CALL   7AB
13CD:  BSF    0A.4
13CE:  GOTO   3EA
....................    else if(tt_ht == 2) lcd_data("NTN"); 
13CF:  MOVF   2F,W
13D0:  SUBLW  02
13D1:  BTFSS  03.2
13D2:  GOTO   3DD
13D3:  MOVLW  89
13D4:  BSF    03.6
13D5:  MOVWF  0D
13D6:  MOVLW  00
13D7:  MOVWF  0F
13D8:  BCF    0A.4
13D9:  BCF    03.6
13DA:  CALL   7AB
13DB:  BSF    0A.4
13DC:  GOTO   3EA
....................    else if(tt_ht == 3) lcd_data(" T "); 
13DD:  MOVF   2F,W
13DE:  SUBLW  03
13DF:  BTFSS  03.2
13E0:  GOTO   3EA
13E1:  MOVLW  8B
13E2:  BSF    03.6
13E3:  MOVWF  0D
13E4:  MOVLW  00
13E5:  MOVWF  0F
13E6:  BCF    0A.4
13E7:  BCF    03.6
13E8:  CALL   7AB
13E9:  BSF    0A.4
....................    lcd_setCursor(13, 1); 
13EA:  MOVLW  0D
13EB:  MOVWF  71
13EC:  MOVLW  01
13ED:  MOVWF  72
13EE:  BCF    0A.4
13EF:  CALL   775
13F0:  BSF    0A.4
....................    lcd_data(gt_mod + 0x30); 
13F1:  MOVLW  30
13F2:  ADDWF  30,W
13F3:  MOVWF  5D
13F4:  MOVWF  74
13F5:  BCF    0A.4
13F6:  CALL   78E
13F7:  BSF    0A.4
....................    if(gt_mod != 0){ 
13F8:  MOVF   30,F
13F9:  BTFSC  03.2
13FA:  GOTO   41C
....................       lcd_data(tg_chinh/10 + 0x30); lcd_data(tg_chinh%10 + 0x30); 
13FB:  MOVF   31,W
13FC:  MOVWF  5D
13FD:  MOVLW  0A
13FE:  MOVWF  5E
13FF:  BCF    0A.4
1400:  BSF    0A.3
1401:  CALL   2B7
1402:  BSF    0A.4
1403:  BCF    0A.3
1404:  MOVLW  30
1405:  ADDWF  78,W
1406:  MOVWF  5D
1407:  MOVWF  74
1408:  BCF    0A.4
1409:  CALL   78E
140A:  BSF    0A.4
140B:  MOVF   31,W
140C:  MOVWF  5D
140D:  MOVLW  0A
140E:  MOVWF  5E
140F:  BCF    0A.4
1410:  BSF    0A.3
1411:  CALL   2B7
1412:  BSF    0A.4
1413:  BCF    0A.3
1414:  MOVLW  30
1415:  ADDWF  77,W
1416:  MOVWF  5D
1417:  MOVWF  74
1418:  BCF    0A.4
1419:  CALL   78E
141A:  BSF    0A.4
....................    } 
141B:  GOTO   425
....................    else 
....................       lcd_data("__"); 
141C:  MOVLW  8D
141D:  BSF    03.6
141E:  MOVWF  0D
141F:  MOVLW  00
1420:  MOVWF  0F
1421:  BCF    0A.4
1422:  BCF    03.6
1423:  CALL   7AB
1424:  BSF    0A.4
.................... } 
....................  
.................... #include <thu_vien_control_alarm.c> 
.................... void giai_ma_gpg_alarm_lcd(){ 
....................    lcd_dis_xx_yy_zz(4,1,dec_gio_eat,dec_phut_eat,dec_giay_eat,e_33, e_22, e_11); 
*
0ADC:  MOVF   33,W
0ADD:  MOVWF  5F
0ADE:  BCF    0A.3
0ADF:  CALL   74F
0AE0:  BSF    0A.3
0AE1:  MOVF   78,W
0AE2:  MOVWF  5D
0AE3:  MOVF   34,W
0AE4:  MOVWF  5F
0AE5:  BCF    0A.3
0AE6:  CALL   74F
0AE7:  BSF    0A.3
0AE8:  MOVF   78,W
0AE9:  MOVWF  5E
0AEA:  MOVF   35,W
0AEB:  MOVWF  5F
0AEC:  BCF    0A.3
0AED:  CALL   74F
0AEE:  BSF    0A.3
0AEF:  MOVF   78,W
0AF0:  MOVWF  5F
0AF1:  MOVLW  00
0AF2:  BTFSC  32.2
0AF3:  MOVLW  01
0AF4:  MOVWF  60
0AF5:  MOVLW  00
0AF6:  BTFSC  32.1
0AF7:  MOVLW  01
0AF8:  MOVWF  61
0AF9:  MOVLW  00
0AFA:  BTFSC  32.0
0AFB:  MOVLW  01
0AFC:  MOVWF  62
0AFD:  MOVLW  04
0AFE:  MOVWF  63
0AFF:  MOVLW  01
0B00:  MOVWF  64
0B01:  MOVF   5D,W
0B02:  MOVWF  65
0B03:  MOVF   5E,W
0B04:  MOVWF  66
0B05:  MOVF   78,W
0B06:  MOVWF  67
0B07:  MOVF   60,W
0B08:  MOVWF  68
0B09:  MOVF   61,W
0B0A:  MOVWF  69
0B0B:  MOVF   62,W
0B0C:  MOVWF  6A
0B0D:  CALL   000
0B0E:  RETURN
.................... } 
.................... void phim_chon_mode_alarm(){ 
....................    if(nhan_btn_giu(1, bt3)){ 
*
1441:  CLRF   5E
1442:  MOVLW  01
1443:  MOVWF  5D
1444:  MOVLW  33
1445:  MOVWF  5F
1446:  BCF    0A.4
1447:  BSF    0A.3
1448:  CALL   130
1449:  BSF    0A.4
144A:  BCF    0A.3
144B:  MOVF   78,F
144C:  BTFSC  03.2
144D:  GOTO   45E
....................       if(gt_mod < 3) gt_mod++; 
144E:  BTFSC  30.7
144F:  GOTO   454
1450:  MOVF   30,W
1451:  SUBLW  02
1452:  BTFSS  03.0
1453:  GOTO   456
1454:  INCF   30,F
1455:  GOTO   458
....................       else{ 
....................          gt_mod = 0; 
1456:  CLRF   30
....................          dem_menu_tong_curr = 0; 
1457:  CLRF   51
....................       } 
....................       tg_chinh = 0; 
1458:  CLRF   31
....................       giai_ma_gpg_alarm_lcd(); 
1459:  BCF    0A.4
145A:  BSF    0A.3
145B:  CALL   2DC
145C:  BSF    0A.4
145D:  BCF    0A.3
....................    } 
.................... } 
.................... void tang_giay_eat(){ 
....................    if(eat_ss == 0x59) eat_ss = 0; 
*
1477:  MOVF   35,W
1478:  SUBLW  59
1479:  BTFSS  03.2
147A:  GOTO   47D
147B:  CLRF   35
147C:  GOTO   487
....................    else eat_ss = tang_or_giam_bcd(eat_ss, tang); 
147D:  MOVF   35,W
147E:  MOVWF  5D
147F:  CLRF   5E
1480:  BCF    0A.4
1481:  BSF    0A.3
1482:  CALL   232
1483:  BSF    0A.4
1484:  BCF    0A.3
1485:  MOVF   78,W
1486:  MOVWF  35
.................... } 
.................... void tang_phut_eat(){ 
....................    if(eat_pp == 0x59) eat_pp = 0; 
*
1488:  MOVF   34,W
1489:  SUBLW  59
148A:  BTFSS  03.2
148B:  GOTO   48E
148C:  CLRF   34
148D:  GOTO   498
....................    else eat_pp = tang_or_giam_bcd(eat_pp, tang); 
148E:  MOVF   34,W
148F:  MOVWF  5D
1490:  CLRF   5E
1491:  BCF    0A.4
1492:  BSF    0A.3
1493:  CALL   232
1494:  BSF    0A.4
1495:  BCF    0A.3
1496:  MOVF   78,W
1497:  MOVWF  34
.................... } 
.................... void tang_gio_eat(){ 
....................    if(eat_hh == 0x23) eat_hh = 0; 
*
1499:  MOVF   33,W
149A:  SUBLW  23
149B:  BTFSS  03.2
149C:  GOTO   49F
149D:  CLRF   33
149E:  GOTO   4A9
....................    else eat_hh = tang_or_giam_bcd(eat_hh, tang); 
149F:  MOVF   33,W
14A0:  MOVWF  5D
14A1:  CLRF   5E
14A2:  BCF    0A.4
14A3:  BSF    0A.3
14A4:  CALL   232
14A5:  BSF    0A.4
14A6:  BCF    0A.3
14A7:  MOVF   78,W
14A8:  MOVWF  33
.................... } 
.................... void chinh_tang_gpg_eat(){ 
....................    switch(gt_mod){ 
*
146C:  MOVF   30,W
146D:  XORLW  01
146E:  BTFSC  03.2
146F:  GOTO   477
1470:  XORLW  03
1471:  BTFSC  03.2
1472:  GOTO   488
1473:  XORLW  01
1474:  BTFSC  03.2
1475:  GOTO   499
1476:  GOTO   4AA
....................       case 1: 
....................          tang_giay_eat(); 
....................          break; 
*
1487:  GOTO   4AA
....................       case 2: 
....................          tang_phut_eat(); 
....................          break; 
*
1498:  GOTO   4AA
....................       case 3: 
....................          tang_gio_eat(); 
....................          break; 
*
14A9:  GOTO   4AA
....................       default: break; 
....................    } 
.................... } 
....................  
.................... void phim_up_eat(){ 
....................    if(nhan_btn_giu(1, bt1)){ 
*
145E:  CLRF   5E
145F:  MOVLW  01
1460:  MOVWF  5D
1461:  MOVLW  31
1462:  MOVWF  5F
1463:  BCF    0A.4
1464:  BSF    0A.3
1465:  CALL   130
1466:  BSF    0A.4
1467:  BCF    0A.3
1468:  MOVF   78,F
1469:  BTFSC  03.2
146A:  GOTO   4B2
....................       tg_chinh = 0; 
146B:  CLRF   31
....................       chinh_tang_gpg_eat(); 
....................       e_11 = true; e_22 = true; e_33 = true; 
*
14AA:  BSF    32.0
14AB:  BSF    32.1
14AC:  BSF    32.2
....................       giai_ma_gpg_alarm_lcd(); 
14AD:  BCF    0A.4
14AE:  BSF    0A.3
14AF:  CALL   2DC
14B0:  BSF    0A.4
14B1:  BCF    0A.3
....................    } 
.................... } 
.................... void giam_giay_eat(){ 
....................    if(eat_ss == 0) eat_ss = 0x59; 
*
14CB:  MOVF   35,F
14CC:  BTFSS  03.2
14CD:  GOTO   4D1
14CE:  MOVLW  59
14CF:  MOVWF  35
14D0:  GOTO   4DC
....................    else eat_ss = tang_or_giam_bcd(eat_ss,giam); 
14D1:  MOVF   35,W
14D2:  MOVWF  5D
14D3:  MOVLW  01
14D4:  MOVWF  5E
14D5:  BCF    0A.4
14D6:  BSF    0A.3
14D7:  CALL   232
14D8:  BSF    0A.4
14D9:  BCF    0A.3
14DA:  MOVF   78,W
14DB:  MOVWF  35
.................... } 
.................... void giam_phut_eat(){ 
....................    if(eat_pp == 0) eat_pp = 0x59; 
*
14DD:  MOVF   34,F
14DE:  BTFSS  03.2
14DF:  GOTO   4E3
14E0:  MOVLW  59
14E1:  MOVWF  34
14E2:  GOTO   4EE
....................    else eat_pp = tang_or_giam_bcd(eat_pp,giam); 
14E3:  MOVF   34,W
14E4:  MOVWF  5D
14E5:  MOVLW  01
14E6:  MOVWF  5E
14E7:  BCF    0A.4
14E8:  BSF    0A.3
14E9:  CALL   232
14EA:  BSF    0A.4
14EB:  BCF    0A.3
14EC:  MOVF   78,W
14ED:  MOVWF  34
.................... } 
.................... void giam_gio_eat(){ 
....................    if(eat_hh == 0) eat_hh = 0x23; 
*
14EF:  MOVF   33,F
14F0:  BTFSS  03.2
14F1:  GOTO   4F5
14F2:  MOVLW  23
14F3:  MOVWF  33
14F4:  GOTO   500
....................    else eat_hh = tang_or_giam_bcd(eat_hh,giam); 
14F5:  MOVF   33,W
14F6:  MOVWF  5D
14F7:  MOVLW  01
14F8:  MOVWF  5E
14F9:  BCF    0A.4
14FA:  BSF    0A.3
14FB:  CALL   232
14FC:  BSF    0A.4
14FD:  BCF    0A.3
14FE:  MOVF   78,W
14FF:  MOVWF  33
.................... } 
.................... void chinh_giam_gpg_eat(){ 
....................    switch(gt_mod){ 
*
14C0:  MOVF   30,W
14C1:  XORLW  01
14C2:  BTFSC  03.2
14C3:  GOTO   4CB
14C4:  XORLW  03
14C5:  BTFSC  03.2
14C6:  GOTO   4DD
14C7:  XORLW  01
14C8:  BTFSC  03.2
14C9:  GOTO   4EF
14CA:  GOTO   501
....................       case 1: 
....................          giam_giay_eat(); 
....................          break; 
*
14DC:  GOTO   501
....................       case 2: 
....................          giam_phut_eat(); 
....................          break; 
*
14EE:  GOTO   501
....................       case 3: 
....................          giam_gio_eat(); 
....................          break; 
*
1500:  GOTO   501
....................       default: break; 
....................    } 
.................... } 
.................... void phim_dw_eat(){ 
....................    if(nhan_btn_giu(1, bt2)){ 
*
14B2:  CLRF   5E
14B3:  MOVLW  01
14B4:  MOVWF  5D
14B5:  MOVLW  32
14B6:  MOVWF  5F
14B7:  BCF    0A.4
14B8:  BSF    0A.3
14B9:  CALL   130
14BA:  BSF    0A.4
14BB:  BCF    0A.3
14BC:  MOVF   78,F
14BD:  BTFSC  03.2
14BE:  GOTO   509
....................       tg_chinh = 0; 
14BF:  CLRF   31
....................       chinh_giam_gpg_eat(); 
....................       e_11 = true; e_22 = true; e_33 = true; 
*
1501:  BSF    32.0
1502:  BSF    32.1
1503:  BSF    32.2
....................       giai_ma_gpg_alarm_lcd(); 
1504:  BCF    0A.4
1505:  BSF    0A.3
1506:  CALL   2DC
1507:  BSF    0A.4
1508:  BCF    0A.3
....................    } 
.................... } 
.................... void log_mode_alarm(){ 
....................    lcd_setCursor(13, 1); 
*
1520:  MOVLW  0D
1521:  MOVWF  71
1522:  MOVLW  01
1523:  MOVWF  72
1524:  BCF    0A.4
1525:  CALL   775
1526:  BSF    0A.4
....................    lcd_data(gt_mod + 0x30); 
1527:  MOVLW  30
1528:  ADDWF  30,W
1529:  MOVWF  5D
152A:  MOVWF  74
152B:  BCF    0A.4
152C:  CALL   78E
152D:  BSF    0A.4
....................    if(gt_mod != 0){ 
152E:  MOVF   30,F
152F:  BTFSC  03.2
1530:  GOTO   552
....................       lcd_data(tg_chinh/10 + 0x30); lcd_data(tg_chinh%10 + 0x30); 
1531:  MOVF   31,W
1532:  MOVWF  5D
1533:  MOVLW  0A
1534:  MOVWF  5E
1535:  BCF    0A.4
1536:  BSF    0A.3
1537:  CALL   2B7
1538:  BSF    0A.4
1539:  BCF    0A.3
153A:  MOVLW  30
153B:  ADDWF  78,W
153C:  MOVWF  5D
153D:  MOVWF  74
153E:  BCF    0A.4
153F:  CALL   78E
1540:  BSF    0A.4
1541:  MOVF   31,W
1542:  MOVWF  5D
1543:  MOVLW  0A
1544:  MOVWF  5E
1545:  BCF    0A.4
1546:  BSF    0A.3
1547:  CALL   2B7
1548:  BSF    0A.4
1549:  BCF    0A.3
154A:  MOVLW  30
154B:  ADDWF  77,W
154C:  MOVWF  5D
154D:  MOVWF  74
154E:  BCF    0A.4
154F:  CALL   78E
1550:  BSF    0A.4
....................    } 
1551:  GOTO   55B
....................    else 
....................       lcd_data("__"); 
1552:  MOVLW  8F
1553:  BSF    03.6
1554:  MOVWF  0D
1555:  MOVLW  00
1556:  MOVWF  0F
1557:  BCF    0A.4
1558:  BCF    03.6
1559:  CALL   7AB
155A:  BSF    0A.4
.................... } 
....................  
.................... #include <thu_vien_ds18b20.c> 
.................... #define touch_pin pin_a0 
.................... #define DS18B20_PIN touch_pin 
....................  
.................... #include <touch.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                        Dallas Touch Driver                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////  data = touch_read_bit()     Reads one bit from a touch device    //// 
.................... ////                                                                   //// 
.................... ////  data = touch_read_BYTE()    Reads one byte from a touch device.  //// 
.................... ////                                                                   //// 
.................... ////  ok = touch_write_bit(data)  Writes one bit to a touch device     //// 
.................... ////                              and returns true if all went ok.     //// 
.................... ////                              A false indicates a collision with   //// 
.................... ////                              another device.                      //// 
.................... ////                                                                   //// 
.................... ////  ok = touch_write_byte(data) Writes one byte to a touch device    //// 
.................... ////                              and returns true if all went ok.     //// 
.................... ////                              A false indicates a collision with   //// 
.................... ////                              another device.                      //// 
.................... ////                                                                   //// 
.................... ////  present = touch_present()   Issues a reset and returns true      //// 
.................... ////                              if the touch device is there.        //// 
.................... ////                                                                   //// 
.................... ////  reset_pulse()               Issues a reset and waits for a       //// 
.................... ////                              present pulse.                       //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef  TOUCH_C 
.................... #define  TOUCH_C 
....................  
.................... #ifndef TOUCH_PIN 
....................    #define TOUCH_PIN  PIN_B0 
.................... #endif 
....................  
.................... #define TOUCH_PIN_LOW()    output_drive(TOUCH_PIN); output_low(TOUCH_PIN) 
.................... #define TOUCH_PIN_HIGH()    output_drive(TOUCH_PIN); output_high(TOUCH_PIN) 
.................... #define TOUCH_PIN_FLOAT()  output_float(TOUCH_PIN) 
.................... #define TOUCH_PIN_READ()      input_state(TOUCH_PIN) 
....................  
.................... ///////////////////////////// 
.................... ////                     //// 
.................... //// Function Prototypes //// 
.................... ////                     //// 
.................... ///////////////////////////// 
....................  
.................... /* 
.................... int1 touch_read_bit() 
.................... This will read back a bit from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A bit from the DS1993 
.................... */ 
.................... int1 touch_read_bit(); 
....................  
.................... /* 
.................... BYTE touch_read_byte() 
.................... This will read back a byte from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A byte from the DS1993 
.................... */ 
.................... BYTE touch_read_byte(); 
....................  
.................... /* 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... This will write a bit to the DS1993 
.................... PARAMS: The bit to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_bit(int1 data); 
....................  
.................... /* 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... This will write a byte to the DS1993 
.................... PARAMS: The byte to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_byte(BYTE data); 
....................  
.................... /* 
.................... BOOLEAN touch_present() 
.................... This will evaluate whether or not there is a touch present on the DS1993 
.................... PARAMS: none 
.................... RETURNS: True if a touch is present, false if otherwise 
.................... */ 
.................... BOOLEAN touch_present(); 
....................  
.................... /* 
.................... void reset_pulse() 
.................... This will send the DS1993 a reset pulse 
.................... PARAMS: none 
.................... RETURNS: none 
.................... */ 
.................... void reset_pulse(); 
....................  
.................... ////////////////////////////////// 
.................... ////                          //// 
.................... //// Function Implementations //// 
.................... ////                          //// 
.................... ////////////////////////////////// 
....................  
.................... /* 
.................... int1 touch_read_bit() 
.................... This will read back a bit from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A bit from the DS1993 
.................... */ 
.................... int1 touch_read_bit() 
.................... { 
....................    int1 data; 
....................  
....................    TOUCH_PIN_LOW(); 
....................    delay_us(14); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................    data = TOUCH_PIN_READ(); 
....................    delay_us(100); 
....................  
....................    return data; 
.................... } 
....................  
.................... /* 
.................... BYTE touch_read_byte() 
.................... This will read back a byte from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A byte from the DS1993 
.................... */ 
.................... BYTE touch_read_byte() 
.................... { 
....................    BYTE i,data; 
....................  
....................    for(i=1; i <= 8; ++i) 
....................       shift_right(&data, 1, touch_read_bit()); 
....................  
....................    return data; 
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... This will write a bit to the DS1993 
.................... PARAMS: The bit to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... { 
....................    TOUCH_PIN_LOW(); 
*
04FE:  BSF    03.5
04FF:  BCF    05.0
0500:  BCF    05.0
0501:  BCF    03.5
0502:  BCF    05.0
....................    delay_us(10); 
0503:  MOVLW  10
0504:  MOVWF  77
0505:  DECFSZ 77,F
0506:  GOTO   505
0507:  NOP
....................    if(data) 
0508:  MOVF   60,F
0509:  BTFSC  03.2
050A:  GOTO   51B
....................    { 
....................       TOUCH_PIN_HIGH(); 
050B:  BSF    03.5
050C:  BCF    05.0
050D:  BCF    05.0
050E:  BCF    03.5
050F:  BSF    05.0
....................       delay_us(10); 
0510:  MOVLW  10
0511:  MOVWF  77
0512:  DECFSZ 77,F
0513:  GOTO   512
0514:  NOP
....................       if(!TOUCH_PIN_READ()) 
0515:  BTFSC  05.0
0516:  GOTO   51A
....................          return FALSE; 
0517:  MOVLW  00
0518:  MOVWF  78
0519:  GOTO   53D
....................    } 
051A:  GOTO   52A
....................    else 
....................    { 
....................       TOUCH_PIN_LOW(); 
051B:  BSF    03.5
051C:  BCF    05.0
051D:  BCF    05.0
051E:  BCF    03.5
051F:  BCF    05.0
....................       delay_us(10); 
0520:  MOVLW  10
0521:  MOVWF  77
0522:  DECFSZ 77,F
0523:  GOTO   522
0524:  NOP
....................       if(TOUCH_PIN_READ()) 
0525:  BTFSS  05.0
0526:  GOTO   52A
....................          return FALSE; 
0527:  MOVLW  00
0528:  MOVWF  78
0529:  GOTO   53D
....................    } 
....................    delay_us(50); 
052A:  MOVLW  52
052B:  MOVWF  77
052C:  DECFSZ 77,F
052D:  GOTO   52C
052E:  GOTO   52F
052F:  NOP
....................    TOUCH_PIN_HIGH(); 
0530:  BSF    03.5
0531:  BCF    05.0
0532:  BCF    05.0
0533:  BCF    03.5
0534:  BSF    05.0
....................    delay_us(50); 
0535:  MOVLW  52
0536:  MOVWF  77
0537:  DECFSZ 77,F
0538:  GOTO   537
0539:  GOTO   53A
053A:  NOP
....................    return TRUE; 
053B:  MOVLW  01
053C:  MOVWF  78
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... This will write a byte to the DS1993 
.................... PARAMS: The byte to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... { 
....................    BYTE i; 
....................  
....................    for(i=1; i<=8; ++i) 
*
04F0:  MOVLW  01
04F1:  MOVWF  5E
04F2:  MOVF   5E,W
04F3:  SUBLW  08
04F4:  BTFSS  03.0
04F5:  GOTO   545
....................       if(!touch_write_bit(shift_right(&data, 1, 0))) 
04F6:  BCF    03.0
04F7:  RRF    5D,F
04F8:  MOVLW  00
04F9:  BTFSC  03.0
04FA:  MOVLW  01
04FB:  MOVWF  5F
04FC:  MOVF   5F,W
04FD:  MOVWF  60
*
053D:  MOVF   78,F
053E:  BTFSS  03.2
053F:  GOTO   543
....................          return FALSE; 
0540:  MOVLW  00
0541:  MOVWF  78
0542:  GOTO   547
0543:  INCF   5E,F
0544:  GOTO   4F2
....................  
....................    return TRUE; 
0545:  MOVLW  01
0546:  MOVWF  78
0547:  RETURN
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_present() 
.................... This will evaluate whether or not there is a touch present on the DS1993 
.................... PARAMS: none 
.................... RETURNS: True if a touch is present, false if otherwise 
.................... */ 
.................... BOOLEAN touch_present() 
.................... { 
....................    BOOLEAN present; 
....................    TOUCH_PIN_LOW(); 
*
04C5:  BSF    03.5
04C6:  BCF    05.0
04C7:  BCF    05.0
04C8:  BCF    03.5
04C9:  BCF    05.0
....................    delay_us(500); 
04CA:  MOVLW  02
04CB:  MOVWF  5E
04CC:  MOVLW  F9
04CD:  MOVWF  60
04CE:  CALL   4B6
04CF:  DECFSZ 5E,F
04D0:  GOTO   4CC
....................    TOUCH_PIN_FLOAT(); 
04D1:  BSF    03.5
04D2:  BSF    05.0
....................    delay_us(5); 
04D3:  MOVLW  07
04D4:  MOVWF  77
04D5:  DECFSZ 77,F
04D6:  GOTO   4D5
04D7:  GOTO   4D8
04D8:  NOP
....................  
....................    if(!TOUCH_PIN_READ()) 
04D9:  BCF    03.5
04DA:  BTFSC  05.0
04DB:  GOTO   4DF
....................       return FALSE; 
04DC:  MOVLW  00
04DD:  MOVWF  78
04DE:  GOTO   4EF
....................  
....................    delay_us(65); 
04DF:  MOVLW  6B
04E0:  MOVWF  77
04E1:  DECFSZ 77,F
04E2:  GOTO   4E1
04E3:  GOTO   4E4
04E4:  NOP
....................    present = !TOUCH_PIN_READ(); 
04E5:  BCF    5D.0
04E6:  BTFSS  05.0
04E7:  BSF    5D.0
....................    delay_us(240); 
04E8:  MOVLW  F0
04E9:  MOVWF  60
04EA:  CALL   4B6
....................    return present; 
04EB:  MOVLW  00
04EC:  BTFSC  5D.0
04ED:  MOVLW  01
04EE:  MOVWF  78
04EF:  RETURN
.................... } 
....................  
.................... /* 
.................... void reset_pulse() 
.................... This will send the DS1993 a reset pulse 
.................... PARAMS: none 
.................... RETURNS: none 
.................... */ 
.................... void reset_pulse() 
.................... { 
....................    TOUCH_PIN_LOW(); 
....................    delay_us(500); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................    while(!touch_present()); 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #define search_rom       0xf0 
.................... #define read_rom         0x33 
.................... #define match_rom        0x55 
.................... #define skip_rom         0xcc 
.................... #define alarm_search     0xec 
.................... #define read_scratchpad  0xbe 
.................... #define write_scratchpad 0x4e 
.................... #define copy_scratchpad  0x48 
.................... #define convert_t        0x44 
....................  
.................... si16 nhiet_do; 
.................... usi8 dt_ng, dt_ngt; 
.................... usi16 dt_tp, dt_tpt; 
.................... usi16 dt_tp_real; 
....................  
.................... /* 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................          CACH 1 SU DUNG THU VIEN TOUCH.C 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... */ 
.................... void ds18b20_no_ds18b(usi8 x, y) 
.................... { 
....................    lcd_setCursor(x, y); 
....................    lcd_data("NO DS18B20"); 
.................... } 
....................  
.................... void ds18b20_khoi_tao() 
.................... { 
....................    touch_present(); 
*
0548:  CALL   4C5
....................    touch_write_byte(skip_rom); 
0549:  MOVLW  CC
054A:  MOVWF  5D
054B:  CALL   4F0
....................    touch_write_byte(write_scratchpad); 
054C:  MOVLW  4E
054D:  MOVWF  5D
054E:  CALL   4F0
....................    touch_write_byte(0x0); 
054F:  CLRF   5D
0550:  CALL   4F0
....................    touch_write_byte(0x0); 
0551:  CLRF   5D
0552:  CALL   4F0
....................    touch_write_byte(0x7f); // 12 bit 
0553:  MOVLW  7F
0554:  MOVWF  5D
0555:  CALL   4F0
....................  
....................    touch_present(); 
0556:  CALL   4C5
....................    touch_write_byte(skip_rom); 
0557:  MOVLW  CC
0558:  MOVWF  5D
0559:  CALL   4F0
....................    touch_write_byte(convert_t); 
055A:  MOVLW  44
055B:  MOVWF  5D
055C:  CALL   4F0
055D:  BCF    0A.3
055E:  BSF    0A.4
055F:  GOTO   04C (RETURN)
.................... } 
....................  
.................... usi16 ds18b20_read_temp_c1() 
.................... { 
....................    usi8 bl, bh; 
....................    usi16 w; 
....................    touch_write_byte(skip_rom); 
....................    touch_write_byte(read_scratchpad); 
....................    bl = touch_read_byte(); 
....................    bh = touch_read_byte(); 
....................    w = make16(bh, bl); 
....................    touch_present(); 
....................    touch_write_byte(skip_rom); 
....................    touch_write_byte(convert_t); 
....................    return w; 
.................... } 
....................  
.................... void ds18b20_doc_rom(usi8 time_s) 
.................... { 
....................    usi8 rom_code[8]; 
....................    usi8 xh, xl; 
....................    si8 i; 
....................    if (touch_present()) 
....................    { 
....................       touch_write_byte(read_rom); 
....................       for (i = 0; i < 8; i++) 
....................          rom_code[i] = touch_read_byte(); 
....................       lcd_setCursor(0, 0); 
....................       lcd_data("CO DS18B20"); 
....................       lcd_setCursor(0, 1); 
....................       for (i = 7; i > -1; i--) 
....................       { 
....................          xh = rom_code[i] / 16; 
....................          if (xh > 9) 
....................             xh = xh + 0x37; 
....................          else 
....................             xh = xh + 0x30; 
....................          xl = rom_code[i] % 16; 
....................          if (xl > 9) 
....................             xl = xl + 0x37; 
....................          else 
....................             xl = xl + 0x30; 
....................          lcd_data(xh); 
....................          lcd_data(xl); 
....................       } 
....................    } 
....................    else 
....................       ds18b20_no_ds18b(0, 0); 
....................    delay_ms(time_s * 1000); 
....................    lcd_clear(); 
.................... } 
.................... /* 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................          CACH 2 KHONG SU DUNG THU VIEN TOUCH.C 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... */ 
.................... bool ds18b20_start(){ 
....................    output_low(DS18B20_PIN); 
0560:  BSF    03.5
0561:  BCF    05.0
0562:  BCF    03.5
0563:  BCF    05.0
....................    output_drive(DS18B20_PIN); 
0564:  BSF    03.5
0565:  BCF    05.0
....................    delay_us(500); 
0566:  MOVLW  02
0567:  BCF    03.5
0568:  MOVWF  5F
0569:  MOVLW  F9
056A:  MOVWF  60
056B:  CALL   4B6
056C:  DECFSZ 5F,F
056D:  GOTO   569
....................    output_float(DS18B20_PIN); 
056E:  BSF    03.5
056F:  BSF    05.0
....................    delay_us(100); 
0570:  MOVLW  A6
0571:  MOVWF  77
0572:  DECFSZ 77,F
0573:  GOTO   572
0574:  NOP
....................    if(!input(DS18B20_PIN)){ 
0575:  BSF    05.0
0576:  BCF    03.5
0577:  BTFSC  05.0
0578:  GOTO   583
....................       delay_us(400); 
0579:  MOVLW  02
057A:  MOVWF  5F
057B:  MOVLW  C7
057C:  MOVWF  60
057D:  CALL   4B6
057E:  DECFSZ 5F,F
057F:  GOTO   57B
....................       return true; 
0580:  MOVLW  01
0581:  MOVWF  78
0582:  GOTO   585
....................    } 
....................    return false; 
0583:  MOVLW  00
0584:  MOVWF  78
0585:  RETURN
.................... } 
....................  
.................... void ds18b20_write_bit(bool value){ 
....................    output_low(DS18B20_PIN); 
*
059B:  BSF    03.5
059C:  BCF    05.0
059D:  BCF    03.5
059E:  BCF    05.0
....................    output_drive(DS18B20_PIN); 
059F:  BSF    03.5
05A0:  BCF    05.0
....................    delay_us(2); 
05A1:  MOVLW  02
05A2:  MOVWF  77
05A3:  DECFSZ 77,F
05A4:  GOTO   5A3
05A5:  GOTO   5A6
05A6:  NOP
....................    output_bit(DS18B20_PIN, value); 
05A7:  BCF    03.5
05A8:  MOVF   62,F
05A9:  BTFSS  03.2
05AA:  GOTO   5AD
05AB:  BCF    05.0
05AC:  GOTO   5AE
05AD:  BSF    05.0
05AE:  BSF    03.5
05AF:  BCF    05.0
....................    delay_us(80); 
05B0:  MOVLW  84
05B1:  MOVWF  77
05B2:  DECFSZ 77,F
05B3:  GOTO   5B2
05B4:  GOTO   5B5
05B5:  NOP
....................    output_float(DS18B20_PIN); 
05B6:  BSF    05.0
....................    delay_us(2); 
05B7:  MOVLW  02
05B8:  MOVWF  77
05B9:  DECFSZ 77,F
05BA:  GOTO   5B9
05BB:  GOTO   5BC
05BC:  NOP
.................... } 
....................  
.................... void ds18b20_write_byte(int8 value){ 
....................    for(int8 i = 0; i < 8; i++) 
*
0586:  CLRF   60
0587:  MOVF   60,W
0588:  SUBLW  07
0589:  BTFSS  03.0
058A:  GOTO   5C0
....................       ds18b20_write_bit(bit_test(value,i)); 
058B:  MOVF   5F,W
058C:  MOVWF  77
058D:  MOVF   60,W
058E:  MOVWF  78
058F:  BTFSC  03.2
0590:  GOTO   595
0591:  BCF    03.0
0592:  RRF    77,F
0593:  DECFSZ 78,F
0594:  GOTO   591
0595:  MOVLW  00
0596:  BTFSC  77.0
0597:  MOVLW  01
0598:  MOVWF  61
0599:  MOVF   61,W
059A:  MOVWF  62
*
05BD:  BCF    03.5
05BE:  INCF   60,F
05BF:  GOTO   587
05C0:  RETURN
.................... } 
....................  
.................... bool ds18b20_read_bit(){ 
....................    bool value; 
....................    output_low(DS18B20_PIN); 
*
05C7:  BSF    03.5
05C8:  BCF    05.0
05C9:  BCF    03.5
05CA:  BCF    05.0
....................    output_drive(DS18B20_PIN); 
05CB:  BSF    03.5
05CC:  BCF    05.0
....................    delay_us(2); 
05CD:  MOVLW  02
05CE:  MOVWF  77
05CF:  DECFSZ 77,F
05D0:  GOTO   5CF
05D1:  GOTO   5D2
05D2:  NOP
....................    output_float(DS18B20_PIN); 
05D3:  BSF    05.0
....................    delay_us(5); 
05D4:  MOVLW  07
05D5:  MOVWF  77
05D6:  DECFSZ 77,F
05D7:  GOTO   5D6
05D8:  GOTO   5D9
05D9:  NOP
....................    value = input(DS18B20_PIN); 
05DA:  BSF    05.0
05DB:  BCF    03.5
05DC:  BCF    65.0
05DD:  BTFSC  05.0
05DE:  BSF    65.0
....................    delay_us(100); 
05DF:  MOVLW  A6
05E0:  MOVWF  77
05E1:  DECFSZ 77,F
05E2:  GOTO   5E1
05E3:  NOP
....................    return value; 
05E4:  MOVLW  00
05E5:  BTFSC  65.0
05E6:  MOVLW  01
05E7:  MOVWF  78
.................... } 
....................  
.................... int8 ds18b20_read_byte(){ 
*
05C1:  CLRF   63
....................    int8 value = 0; 
....................    for(int8 i = 0; i < 8; i++) 
05C2:  CLRF   64
05C3:  MOVF   64,W
05C4:  SUBLW  07
05C5:  BTFSS  03.0
05C6:  GOTO   5F1
....................       shift_right(&value,1,ds18b20_read_bit()); 
*
05E8:  MOVF   78,F
05E9:  BTFSS  03.2
05EA:  GOTO   5ED
05EB:  BCF    03.0
05EC:  GOTO   5EE
05ED:  BSF    03.0
05EE:  RRF    63,F
05EF:  INCF   64,F
05F0:  GOTO   5C3
....................    return value; 
05F1:  MOVF   63,W
05F2:  MOVWF  78
05F3:  RETURN
.................... } 
....................  
.................... bool ds18b20_read_temp_c2(int16 *raw_temp_value){ 
....................    if(!ds18b20_start()) 
*
061C:  CALL   560
061D:  MOVF   78,F
061E:  BTFSS  03.2
061F:  GOTO   623
....................       return false; 
0620:  MOVLW  00
0621:  MOVWF  78
0622:  GOTO   671
....................    ds18b20_write_byte(skip_rom); 
0623:  MOVLW  CC
0624:  MOVWF  5F
0625:  CALL   586
....................    ds18b20_write_byte(convert_t); 
0626:  MOVLW  44
0627:  MOVWF  5F
0628:  CALL   586
....................    while(ds18b20_read_byte() == 0); 
0629:  CALL   5C1
062A:  MOVF   78,F
062B:  BTFSC  03.2
062C:  GOTO   629
....................    if(!ds18b20_start()) 
062D:  CALL   560
062E:  MOVF   78,F
062F:  BTFSS  03.2
0630:  GOTO   634
....................       return false; 
0631:  MOVLW  00
0632:  MOVWF  78
0633:  GOTO   671
....................    ds18b20_write_byte(skip_rom); 
0634:  MOVLW  CC
0635:  MOVWF  5F
0636:  CALL   586
....................    ds18b20_write_byte(read_scratchpad); 
0637:  MOVLW  BE
0638:  MOVWF  5F
0639:  CALL   586
....................    *raw_temp_value = ds18b20_read_byte(); 
063A:  MOVF   5E,W
063B:  MOVWF  7A
063C:  MOVF   5D,W
063D:  MOVWF  5F
063E:  MOVF   5E,W
063F:  MOVWF  60
0640:  CALL   5C1
0641:  MOVF   5F,W
0642:  MOVWF  04
0643:  BCF    03.7
0644:  BTFSC  60.0
0645:  BSF    03.7
0646:  INCF   04,F
0647:  CLRF   00
0648:  DECF   04,F
0649:  MOVF   78,W
064A:  MOVWF  00
....................    *raw_temp_value |= (int16)(ds18b20_read_byte()) << 8; 
064B:  MOVF   5E,W
064C:  MOVWF  7A
064D:  MOVF   5D,W
064E:  MOVWF  5F
064F:  MOVF   5E,W
0650:  MOVWF  60
0651:  MOVF   5D,W
0652:  MOVWF  04
0653:  BCF    03.7
0654:  BTFSC  5E.0
0655:  BSF    03.7
0656:  INCF   04,F
0657:  MOVF   00,W
0658:  MOVWF  62
0659:  DECF   04,F
065A:  MOVF   00,W
065B:  MOVWF  61
065C:  CALL   5C1
065D:  CLRF   64
065E:  MOVLW  00
065F:  IORWF  61,W
0660:  MOVWF  77
0661:  MOVF   78,W
0662:  IORWF  62,W
0663:  MOVWF  7A
0664:  MOVF   5F,W
0665:  MOVWF  04
0666:  BCF    03.7
0667:  BTFSC  60.0
0668:  BSF    03.7
0669:  INCF   04,F
066A:  MOVF   7A,W
066B:  MOVWF  00
066C:  DECF   04,F
066D:  MOVF   77,W
066E:  MOVWF  00
....................    return true; 
066F:  MOVLW  01
0670:  MOVWF  78
.................... } 
....................  
.................... /* 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................    HIEN THI NHIET DO LEN LCD 2 SO NGUYEN VA 3 SO THAP PHAN 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... */ 
.................... void ds18b20_lcd_data(usi16 data, int8 x, int8 y){ 
....................    dt_ng = data>>4; 
....................    dt_tp = data & 0x000f; 
....................    if(dt_ngt != dt_ng){ 
....................       dt_ngt = dt_ng; 
....................       lcd_dis_2num_dot(dt_ng, x, y, enable, disable); 
....................    } 
....................    if(dt_tpt != dt_tp){ 
....................       dt_tpt = dt_tp; 
....................       dt_tp_real = (dt_tp*625)/10; 
....................       lcd_dis_3num_dot(dt_tp_real, x+2, y, enable, enable); 
....................    } 
.................... } 
....................  
.................... void ds18b20_read_temp(){ 
....................    if(ds18b20_read_temp_c2(&nhiet_do)) 
*
0619:  CLRF   5E
061A:  MOVLW  53
061B:  MOVWF  5D
*
0671:  MOVF   78,F
0672:  BTFSC  03.2
0673:  GOTO   680
....................       dt_ng = nhiet_do>>4; 
0674:  RRF    54,W
0675:  MOVWF  7A
0676:  RRF    53,W
0677:  MOVWF  79
0678:  RRF    7A,F
0679:  RRF    79,F
067A:  RRF    7A,F
067B:  RRF    79,F
067C:  RRF    7A,F
067D:  RRF    79,F
067E:  MOVF   79,W
067F:  MOVWF  55
....................       dt_tp = nhiet_do & 0x000f; 
0680:  MOVF   53,W
0681:  ANDLW  0F
0682:  MOVWF  77
0683:  CLRF   7A
0684:  MOVF   77,W
0685:  MOVWF  57
0686:  MOVF   7A,W
0687:  MOVWF  58
....................       dt_tp_real = (dt_tp*625)/10; 
0688:  MOVF   58,W
0689:  MOVWF  5E
068A:  MOVF   57,W
068B:  MOVWF  5D
068C:  MOVLW  02
068D:  MOVWF  60
068E:  MOVLW  71
068F:  MOVWF  5F
*
06A4:  MOVF   79,W
06A5:  MOVWF  5E
06A6:  MOVF   78,W
06A7:  MOVWF  5D
06A8:  MOVF   79,W
06A9:  MOVWF  69
06AA:  MOVF   78,W
06AB:  MOVWF  68
06AC:  CLRF   6B
06AD:  MOVLW  0A
06AE:  MOVWF  6A
06AF:  CALL   5F4
06B0:  MOVF   79,W
06B1:  MOVWF  5C
06B2:  MOVF   78,W
06B3:  MOVWF  5B
06B4:  BCF    0A.3
06B5:  BSF    0A.4
06B6:  GOTO   054 (RETURN)
....................       //ds18b20_lcd_data(nhiet_do,0,1); 
....................    //else ds18b20_no_ds18b(0,1); 
.................... } 
....................  
.................... #include <thu_vien_control_chiler.c> 
.................... void control_temperature(int8 nd_ss, int8 gh){ 
....................    if(nd_ss > gh){ 
....................    // water is hot 
....................       output_bit(pinCold, 1); 
....................       output_bit(pinHot,  0); 
....................    } 
....................    else{ 
....................    // water is cold 
....................       output_bit(pinCold, 0); 
....................       output_bit(pinHot,  1); 
....................    } 
.................... } 
....................  
.................... void servo_degree_0(){ 
....................    unsigned int i; 
....................    for(i = 0; i < 50; i++){ 
....................       output_bit(pinServo, 1); 
....................       Delay_us(800); // pulse of 800us 
....................       output_bit(pinServo, 0); 
....................       Delay_us(19200); 
....................    } 
.................... } 
....................  
.................... void servo_degree_90(){ 
....................    unsigned int i; 
....................    for(i = 0; i < 50; i++){ 
....................       output_bit(pinServo, 1); 
....................       Delay_us(1500); // pulse of 1500us 
....................       output_bit(pinServo, 0); 
....................       Delay_us(18500); 
....................    } 
.................... } 
....................  
.................... void servo_degree_180(){ 
....................    unsigned int i; 
....................    for(i = 0; i < 50; i++){ 
....................       output_bit(pinServo, 1); 
....................       Delay_us(2200); // pulse of 2200us 
....................       output_bit(pinServo, 0); 
....................       Delay_us(17800); 
....................    } 
.................... } 
....................  
.................... void control_servo(){ 
....................    if(dec_gio_ds == dec_gio_eat && dec_phut_ds == dec_phut_eat && dec_giay_ds == dec_giay_eat){ 
....................       flag_servo = true; 
....................    } 
....................    if(flag_servo){ 
....................       servo_degree_90(); 
....................       //output_bit(pinServo, 1); 
....................    } 
....................    else{ 
....................       servo_degree_0(); 
....................       //output_bit(pinServo, 0); 
....................    } 
.................... } 
....................  
.................... #include <thu_vien_uart.c> 
.................... void read_data(){ 
....................  
.................... } 
.................... void write_data(){ 
....................  
.................... } 
....................  
....................  
....................  
....................  
.................... void select_menu(){ 
....................    if(nhan_btn_nha(true, bt0)){ 
*
1055:  MOVLW  01
1056:  MOVWF  5D
1057:  MOVLW  30
1058:  MOVWF  5E
1059:  BCF    0A.4
105A:  CALL   6EE
105B:  BSF    0A.4
105C:  MOVF   78,F
105D:  BTFSC  03.2
105E:  GOTO   066
....................       dem_menu_tong_curr++; 
105F:  INCF   51,F
....................       bdn = 0; gt_mod = 0; tt_ht = 0; 
1060:  CLRF   2E
1061:  CLRF   30
1062:  CLRF   2F
....................       e_11 = true; e_22 = true; e_33 = true; 
1063:  BSF    32.0
1064:  BSF    32.1
1065:  BSF    32.2
....................    } 
....................     
....................    if(dem_menu_tong_curr >= level_menu) 
1066:  MOVF   51,W
1067:  SUBLW  05
1068:  BTFSC  03.0
1069:  GOTO   06C
....................       dem_menu_tong_curr = 0; 
106A:  CLRF   51
106B:  GOTO   07C
....................    else{ 
....................       if(dem_menu_tong_curr != dem_menu_tong_prev){ 
106C:  MOVF   52,W
106D:  SUBWF  51,W
106E:  BTFSC  03.2
106F:  GOTO   07C
....................          dem_menu_tong_prev = dem_menu_tong_curr; 
1070:  MOVF   51,W
1071:  MOVWF  52
....................          lcd_clear(); 
....................       } 
....................    } 
....................     
....................    switch(dem_menu_tong_curr){ 
*
107C:  MOVF   51,W
107D:  BTFSC  03.2
107E:  GOTO   08C
107F:  XORLW  01
1080:  BTFSC  03.2
1081:  GOTO   0EA
1082:  XORLW  03
1083:  BTFSC  03.2
1084:  GOTO   169
1085:  XORLW  01
1086:  BTFSC  03.2
1087:  GOTO   426
1088:  XORLW  07
1089:  BTFSC  03.2
108A:  GOTO   55C
108B:  GOTO   5DA
....................       case 0: 
....................          /* hien thi man hinh chinh */ 
....................          lcd_dis_xx_yy_zz(4,0,dec_gio_ds,dec_phut_ds,dec_giay_ds,1,1,1); 
108C:  MOVF   42,W
108D:  MOVWF  5F
108E:  BCF    0A.4
108F:  CALL   74F
1090:  BSF    0A.4
1091:  MOVF   78,W
1092:  MOVWF  5D
1093:  MOVF   41,W
1094:  MOVWF  5F
1095:  BCF    0A.4
1096:  CALL   74F
1097:  BSF    0A.4
1098:  MOVF   78,W
1099:  MOVWF  5E
109A:  MOVF   40,W
109B:  MOVWF  5F
109C:  BCF    0A.4
109D:  CALL   74F
109E:  BSF    0A.4
109F:  MOVF   78,W
10A0:  MOVWF  5F
10A1:  MOVLW  04
10A2:  MOVWF  63
10A3:  CLRF   64
10A4:  MOVF   5D,W
10A5:  MOVWF  65
10A6:  MOVF   5E,W
10A7:  MOVWF  66
10A8:  MOVF   78,W
10A9:  MOVWF  67
10AA:  MOVLW  01
10AB:  MOVWF  68
10AC:  MOVWF  69
10AD:  MOVWF  6A
10AE:  BCF    0A.4
10AF:  BSF    0A.3
10B0:  CALL   000
10B1:  BSF    0A.4
10B2:  BCF    0A.3
....................          lcd_setCursor(2,1); 
10B3:  MOVLW  02
10B4:  MOVWF  71
10B5:  MOVLW  01
10B6:  MOVWF  72
10B7:  BCF    0A.4
10B8:  CALL   775
10B9:  BSF    0A.4
....................          lcd_data("ND: "); 
10BA:  MOVLW  9D
10BB:  BSF    03.6
10BC:  MOVWF  0D
10BD:  MOVLW  00
10BE:  MOVWF  0F
10BF:  BCF    0A.4
10C0:  BCF    03.6
10C1:  CALL   7AB
10C2:  BSF    0A.4
....................          lcd_dis_2num_dot(dt_ng, 6, 1, enable, disable); 
10C3:  CLRF   5E
10C4:  MOVF   55,W
10C5:  MOVWF  5D
10C6:  MOVLW  06
10C7:  MOVWF  5F
10C8:  MOVLW  01
10C9:  MOVWF  60
10CA:  MOVWF  61
10CB:  CLRF   62
10CC:  BCF    0A.4
10CD:  BSF    0A.3
10CE:  CALL   08C
10CF:  BSF    0A.4
10D0:  BCF    0A.3
....................          lcd_dis_3num_dot(dt_tp_real, 8, 1, enable, enable); 
10D1:  MOVF   5C,W
10D2:  MOVWF  5E
10D3:  MOVF   5B,W
10D4:  MOVWF  5D
10D5:  MOVLW  08
10D6:  MOVWF  5F
10D7:  MOVLW  01
10D8:  MOVWF  60
10D9:  MOVWF  61
10DA:  MOVWF  62
10DB:  BCF    0A.4
10DC:  BSF    0A.3
10DD:  CALL   0CB
10DE:  BSF    0A.4
10DF:  BCF    0A.3
....................          lcd_data(" oC"); 
10E0:  MOVLW  A0
10E1:  BSF    03.6
10E2:  MOVWF  0D
10E3:  MOVLW  00
10E4:  MOVWF  0F
10E5:  BCF    0A.4
10E6:  BCF    03.6
10E7:  CALL   7AB
10E8:  BSF    0A.4
....................          break; 
10E9:  GOTO   602
....................       case 1: 
....................          /*  
....................             hien thi nhiet do - nhiet do gioi han 
....................             chinh nhiet do gioi han  
....................          */ 
....................          gh_nd += nhan_btn_giu(2, bt1); 
10EA:  CLRF   5E
10EB:  MOVLW  02
10EC:  MOVWF  5D
10ED:  MOVLW  31
10EE:  MOVWF  5F
10EF:  BCF    0A.4
10F0:  BSF    0A.3
10F1:  CALL   130
10F2:  BSF    0A.4
10F3:  BCF    0A.3
10F4:  MOVF   78,W
10F5:  ADDWF  2C,F
....................          gh_nd -= nhan_btn_giu(2, bt2); 
10F6:  CLRF   5E
10F7:  MOVLW  02
10F8:  MOVWF  5D
10F9:  MOVLW  32
10FA:  MOVWF  5F
10FB:  BCF    0A.4
10FC:  BSF    0A.3
10FD:  CALL   130
10FE:  BSF    0A.4
10FF:  BCF    0A.3
1100:  MOVF   78,W
1101:  SUBWF  2C,F
....................          if(nhan_btn_nha(1,bt3) == enable) dem_menu_tong_curr = 0; 
1102:  MOVLW  01
1103:  MOVWF  5D
1104:  MOVLW  33
1105:  MOVWF  5E
1106:  BCF    0A.4
1107:  CALL   6EE
1108:  BSF    0A.4
1109:  DECFSZ 78,W
110A:  GOTO   10C
110B:  CLRF   51
....................          lcd_setCursor(2,0); 
110C:  MOVLW  02
110D:  MOVWF  71
110E:  CLRF   72
110F:  BCF    0A.4
1110:  CALL   775
1111:  BSF    0A.4
....................          lcd_data("ND: "); 
1112:  MOVLW  A2
1113:  BSF    03.6
1114:  MOVWF  0D
1115:  MOVLW  00
1116:  MOVWF  0F
1117:  BCF    0A.4
1118:  BCF    03.6
1119:  CALL   7AB
111A:  BSF    0A.4
....................          lcd_dis_2num_dot(dt_ng, 6, 0, enable, disable); 
111B:  CLRF   5E
111C:  MOVF   55,W
111D:  MOVWF  5D
111E:  MOVLW  06
111F:  MOVWF  5F
1120:  CLRF   60
1121:  MOVLW  01
1122:  MOVWF  61
1123:  CLRF   62
1124:  BCF    0A.4
1125:  BSF    0A.3
1126:  CALL   08C
1127:  BSF    0A.4
1128:  BCF    0A.3
....................          lcd_dis_3num_dot(dt_tp_real, 8, 0, disable, enable); 
1129:  MOVF   5C,W
112A:  MOVWF  5E
112B:  MOVF   5B,W
112C:  MOVWF  5D
112D:  MOVLW  08
112E:  MOVWF  5F
112F:  CLRF   60
1130:  CLRF   61
1131:  MOVLW  01
1132:  MOVWF  62
1133:  BCF    0A.4
1134:  BSF    0A.3
1135:  CALL   0CB
1136:  BSF    0A.4
1137:  BCF    0A.3
....................          lcd_data(" oC"); 
1138:  MOVLW  A5
1139:  BSF    03.6
113A:  MOVWF  0D
113B:  MOVLW  00
113C:  MOVWF  0F
113D:  BCF    0A.4
113E:  BCF    03.6
113F:  CALL   7AB
1140:  BSF    0A.4
....................          lcd_setCursor(2,1); 
1141:  MOVLW  02
1142:  MOVWF  71
1143:  MOVLW  01
1144:  MOVWF  72
1145:  BCF    0A.4
1146:  CALL   775
1147:  BSF    0A.4
....................          lcd_data("GH_ND: "); 
1148:  MOVLW  A7
1149:  BSF    03.6
114A:  MOVWF  0D
114B:  MOVLW  00
114C:  MOVWF  0F
114D:  BCF    0A.4
114E:  BCF    03.6
114F:  CALL   7AB
1150:  BSF    0A.4
....................          lcd_dis_2num_dot(gh_nd, 10, 1, enable, disable); 
1151:  CLRF   5E
1152:  MOVF   2C,W
1153:  MOVWF  5D
1154:  MOVLW  0A
1155:  MOVWF  5F
1156:  MOVLW  01
1157:  MOVWF  60
1158:  MOVWF  61
1159:  CLRF   62
115A:  BCF    0A.4
115B:  BSF    0A.3
115C:  CALL   08C
115D:  BSF    0A.4
115E:  BCF    0A.3
....................          lcd_data(" oC"); 
115F:  MOVLW  AB
1160:  BSF    03.6
1161:  MOVWF  0D
1162:  MOVLW  00
1163:  MOVWF  0F
1164:  BCF    0A.4
1165:  BCF    03.6
1166:  CALL   7AB
1167:  BSF    0A.4
....................          break; 
1168:  GOTO   602
....................       case 2: 
....................          /* 
....................             hien thi thoi gian va 
....................             cai dat thoi gian - thoi gian dong bo 
....................          */ 
....................          lcd_setCursor(1,0); 
1169:  MOVLW  01
116A:  MOVWF  71
116B:  CLRF   72
116C:  BCF    0A.4
116D:  CALL   775
116E:  BSF    0A.4
....................          lcd_data("cai dat dong ho"); 
116F:  MOVLW  AD
1170:  BSF    03.6
1171:  MOVWF  0D
1172:  MOVLW  00
1173:  MOVWF  0F
1174:  BCF    0A.4
1175:  BCF    03.6
1176:  CALL   7AB
1177:  BSF    0A.4
....................          if(bdn < 5){ 
1178:  MOVF   2E,W
1179:  SUBLW  04
117A:  BTFSS  03.0
117B:  GOTO   393
....................             if(gt_mod != 0) xu_ly_choptat(); 
117C:  MOVF   30,F
117D:  BTFSC  03.2
117E:  GOTO   184
117F:  BCF    0A.4
1180:  BSF    0A.3
1181:  CALL   15B
1182:  BSF    0A.4
1183:  BCF    0A.3
....................             phim_chon_hthi_mode(); 
....................             phim_up(); 
....................             phim_dw(); 
....................          } 
*
1392:  GOTO   3AB
....................          else if(bdn >= 10){ 
1393:  MOVF   2E,W
1394:  SUBLW  09
1395:  BTFSC  03.0
1396:  GOTO   3AB
....................             bdn = 0; 
1397:  CLRF   2E
....................             if(tg_chinh < 10) tg_chinh++; 
1398:  BTFSC  31.7
1399:  GOTO   39E
139A:  MOVF   31,W
139B:  SUBLW  09
139C:  BTFSS  03.0
139D:  GOTO   3A0
139E:  INCF   31,F
139F:  GOTO   3A5
....................             else{ 
....................                gt_mod = 0; tt_ht = 0; 
13A0:  CLRF   30
13A1:  CLRF   2F
....................                e_11 = true; e_22 = true; e_33 = true; 
13A2:  BSF    32.0
13A3:  BSF    32.1
13A4:  BSF    32.2
....................             } 
....................             if(giay_tam!=giay_ds){ 
13A5:  MOVF   40,W
13A6:  SUBWF  2D,W
13A7:  BTFSC  03.2
13A8:  GOTO   3AB
....................                giay_tam = giay_ds; 
13A9:  MOVF   40,W
13AA:  MOVWF  2D
....................             } 
....................          } 
....................          giai_ma_gpg_ntn_thu_lcd(); 
13AB:  BCF    0A.4
13AC:  BSF    0A.3
13AD:  CALL   20B
13AE:  BSF    0A.4
13AF:  BCF    0A.3
....................          log_mode(); 
....................          break; 
*
1425:  GOTO   602
....................       case 3: 
....................          /* cai dat thoi gian - thoi gian cho ca an*/ 
....................          lcd_setCursor(1,0); 
1426:  MOVLW  01
1427:  MOVWF  71
1428:  CLRF   72
1429:  BCF    0A.4
142A:  CALL   775
142B:  BSF    0A.4
....................          lcd_data("t/g cho ca an"); 
142C:  MOVLW  B5
142D:  BSF    03.6
142E:  MOVWF  0D
142F:  MOVLW  00
1430:  MOVWF  0F
1431:  BCF    0A.4
1432:  BCF    03.6
1433:  CALL   7AB
1434:  BSF    0A.4
....................          if(bdn < 2){ 
1435:  MOVF   2E,W
1436:  SUBLW  01
1437:  BTFSS  03.0
1438:  GOTO   50A
....................             if(gt_mod != 0) xu_ly_choptat(); 
1439:  MOVF   30,F
143A:  BTFSC  03.2
143B:  GOTO   441
143C:  BCF    0A.4
143D:  BSF    0A.3
143E:  CALL   15B
143F:  BSF    0A.4
1440:  BCF    0A.3
....................             phim_chon_mode_alarm(); 
....................             phim_up_eat(); 
....................             phim_dw_eat(); 
....................          } 
*
1509:  GOTO   51B
....................          else if(bdn >= 10){ 
150A:  MOVF   2E,W
150B:  SUBLW  09
150C:  BTFSC  03.0
150D:  GOTO   51B
....................             bdn = 0; 
150E:  CLRF   2E
....................             if(tg_chinh < 20) tg_chinh++; 
150F:  BTFSC  31.7
1510:  GOTO   515
1511:  MOVF   31,W
1512:  SUBLW  13
1513:  BTFSS  03.0
1514:  GOTO   517
1515:  INCF   31,F
1516:  GOTO   51B
....................             else{ 
....................                gt_mod = 0; 
1517:  CLRF   30
....................                e_11 = true; e_22 = true; e_33 = true; 
1518:  BSF    32.0
1519:  BSF    32.1
151A:  BSF    32.2
....................             } 
....................          } 
....................          giai_ma_gpg_alarm_lcd(); 
151B:  BCF    0A.4
151C:  BSF    0A.3
151D:  CALL   2DC
151E:  BSF    0A.4
151F:  BCF    0A.3
....................          log_mode_alarm(); 
....................          break; 
*
155B:  GOTO   602
....................       case 4: 
....................          /* kiem tra ket noi uart - wifi - esp - firebase */ 
....................          lcd_setCursor(1,0); 
155C:  MOVLW  01
155D:  MOVWF  71
155E:  CLRF   72
155F:  BCF    0A.4
1560:  CALL   775
1561:  BSF    0A.4
....................          lcd_data("check com esp"); 
1562:  MOVLW  BC
1563:  BSF    03.6
1564:  MOVWF  0D
1565:  MOVLW  00
1566:  MOVWF  0F
1567:  BCF    0A.4
1568:  BCF    03.6
1569:  CALL   7AB
156A:  BSF    0A.4
....................           
....................           
....................          printf("hello\n"); 
156B:  MOVLW  C3
156C:  BSF    03.6
156D:  MOVWF  0D
156E:  MOVLW  00
156F:  MOVWF  0F
....................          delay_ms(1000); 
*
15C5:  MOVLW  04
15C6:  BCF    03.6
15C7:  MOVWF  5D
15C8:  MOVLW  FA
15C9:  MOVWF  5F
15CA:  BCF    0A.4
15CB:  CALL   173
15CC:  BSF    0A.4
15CD:  DECFSZ 5D,F
15CE:  GOTO   5C8
....................           
....................          if(nhan_btn_nha(1,bt3)) dem_menu_tong_curr = 0; 
15CF:  MOVLW  01
15D0:  MOVWF  5D
15D1:  MOVLW  33
15D2:  MOVWF  5E
15D3:  BCF    0A.4
15D4:  CALL   6EE
15D5:  BSF    0A.4
15D6:  MOVF   78,F
15D7:  BTFSS  03.2
15D8:  CLRF   51
....................          break; 
15D9:  GOTO   602
....................       default: 
....................          /* hien thi thong tin sp */ 
....................          lcd_setCursor(2,0); 
15DA:  MOVLW  02
15DB:  MOVWF  71
15DC:  CLRF   72
15DD:  BCF    0A.4
15DE:  CALL   775
15DF:  BSF    0A.4
....................          lcd_data("Information"); 
15E0:  MOVLW  C7
15E1:  BSF    03.6
15E2:  MOVWF  0D
15E3:  MOVLW  00
15E4:  MOVWF  0F
15E5:  BCF    0A.4
15E6:  BCF    03.6
15E7:  CALL   7AB
15E8:  BSF    0A.4
....................          lcd_setCursor(0,1); 
15E9:  CLRF   71
15EA:  MOVLW  01
15EB:  MOVWF  72
15EC:  BCF    0A.4
15ED:  CALL   775
15EE:  BSF    0A.4
....................          lcd_data("Version: V1.0.0"); 
15EF:  MOVLW  CD
15F0:  BSF    03.6
15F1:  MOVWF  0D
15F2:  MOVLW  00
15F3:  MOVWF  0F
15F4:  BCF    0A.4
15F5:  BCF    03.6
15F6:  CALL   7AB
15F7:  BSF    0A.4
....................          if(nhan_btn_nha(1,bt3)) dem_menu_tong_curr = 0; 
15F8:  MOVLW  01
15F9:  MOVWF  5D
15FA:  MOVLW  33
15FB:  MOVWF  5E
15FC:  BCF    0A.4
15FD:  CALL   6EE
15FE:  BSF    0A.4
15FF:  MOVF   78,F
1600:  BTFSS  03.2
1601:  CLRF   51
....................          break; 
....................    } 
.................... } 
....................  
.................... void main(){ 
*
1000:  MOVF   03,W
1001:  ANDLW  1F
1002:  MOVWF  03
1003:  MOVLW  FF
1004:  MOVWF  2B
1005:  MOVLW  81
1006:  BSF    03.5
1007:  MOVWF  19
1008:  MOVLW  A6
1009:  MOVWF  18
100A:  MOVLW  90
100B:  BCF    03.5
100C:  MOVWF  18
100D:  MOVLW  19
100E:  MOVWF  2C
100F:  CLRF   2F
1010:  CLRF   30
1011:  CLRF   31
1012:  CLRF   36
1013:  CLRF   51
1014:  MOVLW  01
1015:  MOVWF  52
1016:  BSF    03.5
1017:  BSF    1F.0
1018:  BSF    1F.1
1019:  BSF    1F.2
101A:  BCF    1F.3
101B:  MOVLW  07
101C:  MOVWF  1C
101D:  BCF    03.7
....................    set_up_init(); 
*
1041:  BCF    0A.4
1042:  GOTO   0D5
1043:  BSF    0A.4
....................    lcd_init(); 
1044:  BCF    0A.4
1045:  GOTO   2AA
1046:  BSF    0A.4
....................    //lcd_log_info(3,enable); 
....................    ds1307_init(); 
1047:  BCF    0A.4
1048:  GOTO   446
1049:  BSF    0A.4
....................    //log_code_ds1307(); 
....................    //delay_ms(2000); 
....................    ds18b20_khoi_tao(); 
104A:  BCF    0A.4
104B:  GOTO   548
104C:  BSF    0A.4
....................    while(true){ 
....................       ds1307_read_time(8); 
104D:  MOVLW  08
104E:  MOVWF  5D
104F:  BCF    0A.4
1050:  CALL   3C5
1051:  BSF    0A.4
....................       ds18b20_read_temp(); 
1052:  BCF    0A.4
1053:  GOTO   619
1054:  BSF    0A.4
....................       select_menu(); 
*
1602:  GOTO   04D
....................       //control_temperature(dt_ng,gh_nd); 
....................       //control_servo(); 
....................       //test_btn(); 
....................        
....................    } 
.................... } 
1603:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
