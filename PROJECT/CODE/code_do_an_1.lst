CCS PCM C Compiler, Version 5.015, 5967               09-Mar-24 16:37

               Filename:   E:\STUDY\HKII-2023-2024\DO_AN_1\PROJECT\CODE\code_do_an_1.lst

               ROM used:   597 words (7%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           36 (10%) worst case
               Stack used: 7 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   228
0003:  NOP
.................... #include <thu_vien_do_an_1.c> 
.................... /*  
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................                        SU PHAM KY THUAT - TP.HCM 
....................  DO AN 1 - HIEU CHINH NHIET DO HO CA VA CHO CA AN TU DONG - KET NOI ESP 
....................   
....................    THANH VIEN: 
....................       VO MINH THUAN   - 21161366 
....................       LE QUANG THUONG - 21161367 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... */ 
.................... #include <define_pic_16f887.c> 
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA C4,37
0005:  DATA A0,30
0006:  DATA 6E,10
0007:  DATA 31,10
0008:  DATA 2D,10
0009:  DATA C8,25
000A:  DATA C9,24
000B:  DATA 00,00
000C:  DATA 53,28
000D:  DATA 4B,2A
000E:  DATA 2D,2A
000F:  DATA 50,24
0010:  DATA C3,26
0011:  DATA 00,00
0012:  DATA CE,27
0013:  DATA 20,22
0014:  DATA D3,18
0015:  DATA 38,21
0016:  DATA 32,18
0017:  DATA 00,00
*
0188:  MOVF   0B,W
0189:  MOVWF  2B
018A:  BCF    0B.7
018B:  BSF    03.5
018C:  BSF    03.6
018D:  BSF    0C.7
018E:  BSF    0C.0
018F:  NOP
0190:  NOP
0191:  BCF    03.5
0192:  BCF    03.6
0193:  BTFSC  2B.7
0194:  BSF    0B.7
0195:  BSF    03.6
0196:  MOVF   0C,W
0197:  ANDLW  7F
0198:  BTFSC  03.2
0199:  GOTO   1DC
019A:  BCF    03.6
019B:  MOVWF  2B
019C:  BSF    03.6
019D:  MOVF   0D,W
019E:  BCF    03.6
019F:  MOVWF  2C
01A0:  BSF    03.6
01A1:  MOVF   0F,W
01A2:  BCF    03.6
01A3:  MOVWF  2D
01A4:  MOVF   2B,W
01A5:  MOVWF  2E
01A6:  CALL   182
01A7:  MOVF   2C,W
01A8:  BSF    03.6
01A9:  MOVWF  0D
01AA:  BCF    03.6
01AB:  MOVF   2D,W
01AC:  BSF    03.6
01AD:  MOVWF  0F
01AE:  BCF    03.6
01AF:  MOVF   0B,W
01B0:  MOVWF  2E
01B1:  BCF    0B.7
01B2:  BSF    03.5
01B3:  BSF    03.6
01B4:  BSF    0C.7
01B5:  BSF    0C.0
01B6:  NOP
01B7:  NOP
01B8:  BCF    03.5
01B9:  BCF    03.6
01BA:  BTFSC  2E.7
01BB:  BSF    0B.7
01BC:  BSF    03.6
01BD:  RLF    0C,W
01BE:  RLF    0E,W
01BF:  ANDLW  7F
01C0:  BTFSC  03.2
01C1:  GOTO   1DC
01C2:  BCF    03.6
01C3:  MOVWF  2B
01C4:  BSF    03.6
01C5:  MOVF   0D,W
01C6:  BCF    03.6
01C7:  MOVWF  2C
01C8:  BSF    03.6
01C9:  MOVF   0F,W
01CA:  BCF    03.6
01CB:  MOVWF  2D
01CC:  MOVF   2B,W
01CD:  MOVWF  2E
01CE:  CALL   182
01CF:  MOVF   2C,W
01D0:  BSF    03.6
01D1:  MOVWF  0D
01D2:  BCF    03.6
01D3:  MOVF   2D,W
01D4:  BSF    03.6
01D5:  MOVWF  0F
01D6:  INCF   0D,F
01D7:  BTFSC  03.2
01D8:  INCF   0F,F
01D9:  BCF    03.6
01DA:  GOTO   188
01DB:  BSF    03.6
01DC:  BCF    03.6
01DD:  RETURN
*
01FF:  MOVLW  10
0200:  MOVWF  2F
0201:  CLRF   77
0202:  CLRF   7A
0203:  RRF    2C,F
0204:  RRF    2B,F
0205:  BTFSS  03.0
0206:  GOTO   20D
0207:  MOVF   2D,W
0208:  ADDWF  77,F
0209:  BTFSC  03.0
020A:  INCF   7A,F
020B:  MOVF   2E,W
020C:  ADDWF  7A,F
020D:  RRF    7A,F
020E:  RRF    77,F
020F:  RRF    79,F
0210:  RRF    78,F
0211:  DECFSZ 2F,F
0212:  GOTO   203
....................  
.................... #list 
....................  
.................... #device  adc=10 
.................... #fuses   hs, nowdt, put, noprotect, nolvp 
.................... #use     delay(clock=20000000) // 20MHz 
*
0077:  MOVLW  2E
0078:  MOVWF  04
0079:  BCF    03.7
007A:  MOVF   00,W
007B:  BTFSC  03.2
007C:  GOTO   08A
007D:  MOVLW  06
007E:  MOVWF  78
007F:  CLRF   77
0080:  DECFSZ 77,F
0081:  GOTO   080
0082:  DECFSZ 78,F
0083:  GOTO   07F
0084:  MOVLW  7B
0085:  MOVWF  77
0086:  DECFSZ 77,F
0087:  GOTO   086
0088:  DECFSZ 00,F
0089:  GOTO   07D
008A:  RETURN
.................... #use     i2c(master,slow,sda=pin_c4,scl=pin_c3) 
*
001B:  MOVLW  08
001C:  MOVWF  78
001D:  MOVLW  04
001E:  MOVWF  77
001F:  DECFSZ 77,F
0020:  GOTO   01F
0021:  BCF    07.3
0022:  BCF    20.3
0023:  MOVF   20,W
0024:  BSF    03.5
0025:  MOVWF  07
0026:  MOVLW  03
0027:  MOVWF  77
0028:  DECFSZ 77,F
0029:  GOTO   028
002A:  BCF    03.5
002B:  RLF    3E,F
002C:  BCF    07.4
002D:  BTFSS  03.0
002E:  GOTO   035
002F:  BSF    20.4
0030:  MOVF   20,W
0031:  BSF    03.5
0032:  MOVWF  07
0033:  GOTO   039
0034:  BCF    03.5
0035:  BCF    20.4
0036:  MOVF   20,W
0037:  BSF    03.5
0038:  MOVWF  07
0039:  NOP
003A:  BCF    03.5
003B:  BSF    20.3
003C:  MOVF   20,W
003D:  BSF    03.5
003E:  MOVWF  07
003F:  BCF    03.5
0040:  BTFSS  07.3
0041:  GOTO   040
0042:  DECFSZ 78,F
0043:  GOTO   01D
0044:  MOVLW  04
0045:  MOVWF  77
0046:  DECFSZ 77,F
0047:  GOTO   046
0048:  BCF    07.3
0049:  BCF    20.3
004A:  MOVF   20,W
004B:  BSF    03.5
004C:  MOVWF  07
004D:  NOP
004E:  BCF    03.5
004F:  BSF    20.4
0050:  MOVF   20,W
0051:  BSF    03.5
0052:  MOVWF  07
0053:  MOVLW  03
0054:  MOVWF  77
0055:  DECFSZ 77,F
0056:  GOTO   055
0057:  MOVLW  03
0058:  MOVWF  77
0059:  DECFSZ 77,F
005A:  GOTO   059
005B:  BCF    03.5
005C:  BSF    20.3
005D:  MOVF   20,W
005E:  BSF    03.5
005F:  MOVWF  07
0060:  BCF    03.5
0061:  BTFSS  07.3
0062:  GOTO   061
0063:  CLRF   78
0064:  MOVLW  03
0065:  MOVWF  77
0066:  DECFSZ 77,F
0067:  GOTO   066
0068:  BTFSC  07.4
0069:  BSF    78.0
006A:  BCF    07.3
006B:  BCF    20.3
006C:  MOVF   20,W
006D:  BSF    03.5
006E:  MOVWF  07
006F:  BCF    03.5
0070:  BCF    07.4
0071:  BCF    20.4
0072:  MOVF   20,W
0073:  BSF    03.5
0074:  MOVWF  07
0075:  BCF    03.5
0076:  RETURN
.................... #use     rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
....................  
.................... /* Define name again to accordant user */ 
.................... #define usi8  unsigned int8 
.................... #define usi16 unsigned int16 
.................... #define usi32 unsigned int32 
.................... #define si8   signed   int8 
.................... #define si16  signed   int16 
.................... #define si32  signed   int32 
....................  
.................... #define bool int1 
....................  
.................... #define enable  1 
.................... #define disable 0 
....................  
.................... #define on  1 
.................... #define off 0 
....................  
.................... #ifndef btn0 
.................... #define btn0 pin_b 
.................... #endif 
....................  
.................... #ifndef btn1 
.................... #define btn1 pin_b 
.................... #endif 
....................  
.................... #ifndef btn2 
.................... #define btn2 pin_b 
.................... #endif 
....................  
.................... #ifndef btn3 
.................... #define btn3 pin_b 
.................... #endif 
....................  
.................... #ifndef btn4 
.................... #define btn4 pin_b 
.................... #endif 
....................  
.................... #ifndef btn5 
.................... #define btn5 pin_b 
.................... #endif 
....................  
.................... #define btn_limit_temp_up btn0 
.................... #define btn_limit_temp_dw btn1 
....................  
.................... void set_up_port(){ 
*
0018:  BCF    0A.3
0019:  BCF    0A.4
001A:  GOTO   24C (RETURN)
....................     
.................... } 
....................  
....................  
....................  
.................... #include <thu_vien_btn.c> 
.................... #include <thu_vien_i2c_lcd.c> 
.................... #include <thu_vien_lcd_1602.c> 
.................... #define pcf8574_addr_wr 0x4E //0b01001110 
.................... #define pcf8574_addr_rd 0x4F //0b01001111 
....................  
.................... void i2c_reset(){ 
....................    i2c_start(); 
....................    i2c_stop(); 
.................... } 
....................  
.................... void i2c_setup_write(){ 
....................    i2c_start(); 
*
0116:  BSF    20.4
0117:  MOVF   20,W
0118:  BSF    03.5
0119:  MOVWF  07
011A:  MOVLW  04
011B:  MOVWF  77
011C:  DECFSZ 77,F
011D:  GOTO   11C
011E:  BCF    03.5
011F:  BSF    20.3
0120:  MOVF   20,W
0121:  BSF    03.5
0122:  MOVWF  07
0123:  MOVLW  03
0124:  MOVWF  77
0125:  DECFSZ 77,F
0126:  GOTO   125
0127:  BCF    03.5
0128:  BCF    07.4
0129:  BCF    20.4
012A:  MOVF   20,W
012B:  BSF    03.5
012C:  MOVWF  07
012D:  MOVLW  04
012E:  MOVWF  77
012F:  DECFSZ 77,F
0130:  GOTO   12F
0131:  BCF    03.5
0132:  BCF    07.3
0133:  BCF    20.3
0134:  MOVF   20,W
0135:  BSF    03.5
0136:  MOVWF  07
....................    i2c_write(pcf8574_addr_wr); 
0137:  MOVLW  4E
0138:  BCF    03.5
0139:  MOVWF  3E
013A:  CALL   01B
.................... } 
....................  
.................... void i2c_write_1byte(usi8 payload){ 
....................    i2c_start(); 
*
0090:  BSF    20.4
0091:  MOVF   20,W
0092:  BSF    03.5
0093:  MOVWF  07
0094:  MOVLW  04
0095:  MOVWF  77
0096:  DECFSZ 77,F
0097:  GOTO   096
0098:  BCF    03.5
0099:  BSF    20.3
009A:  MOVF   20,W
009B:  BSF    03.5
009C:  MOVWF  07
009D:  MOVLW  03
009E:  MOVWF  77
009F:  DECFSZ 77,F
00A0:  GOTO   09F
00A1:  BCF    03.5
00A2:  BTFSS  07.3
00A3:  GOTO   0A2
00A4:  BCF    07.4
00A5:  BCF    20.4
00A6:  MOVF   20,W
00A7:  BSF    03.5
00A8:  MOVWF  07
00A9:  MOVLW  04
00AA:  MOVWF  77
00AB:  DECFSZ 77,F
00AC:  GOTO   0AB
00AD:  BCF    03.5
00AE:  BCF    07.3
00AF:  BCF    20.3
00B0:  MOVF   20,W
00B1:  BSF    03.5
00B2:  MOVWF  07
....................    i2c_write(pcf8574_addr_wr); 
00B3:  MOVLW  4E
00B4:  BCF    03.5
00B5:  MOVWF  3E
00B6:  CALL   01B
....................    i2c_write(payload); 
00B7:  MOVF   3D,W
00B8:  MOVWF  3E
00B9:  CALL   01B
....................    i2c_stop(); 
00BA:  BCF    20.4
00BB:  MOVF   20,W
00BC:  BSF    03.5
00BD:  MOVWF  07
00BE:  NOP
00BF:  BCF    03.5
00C0:  BSF    20.3
00C1:  MOVF   20,W
00C2:  BSF    03.5
00C3:  MOVWF  07
00C4:  BCF    03.5
00C5:  BTFSS  07.3
00C6:  GOTO   0C5
00C7:  MOVLW  04
00C8:  MOVWF  77
00C9:  DECFSZ 77,F
00CA:  GOTO   0C9
00CB:  GOTO   0CC
00CC:  NOP
00CD:  BSF    20.4
00CE:  MOVF   20,W
00CF:  BSF    03.5
00D0:  MOVWF  07
00D1:  MOVLW  04
00D2:  MOVWF  77
00D3:  DECFSZ 77,F
00D4:  GOTO   0D3
.................... } 
....................  
.................... #include <thu_vien_ds18b20.c> 
.................... #define lcd_cols 16 
.................... #define lcd_rows 2 
....................  
.................... // commands 
.................... #define LCD_CLEARDISPLAY 0x01 
.................... #define LCD_RETURNHOME 0x02 
.................... #define LCD_ENTRYMODESET 0x04 
.................... #define LCD_DISPLAYCONTROL 0x08 
.................... #define LCD_CURSORSHIFT 0x10 
.................... #define LCD_FUNCTIONSET 0x20 
.................... #define LCD_SETCGRAMADDR 0x40 
.................... #define LCD_SETDDRAMADDR 0x80 
....................  
.................... // flags for display entry mode 
.................... #define LCD_ENTRYRIGHT 0x00 
.................... #define LCD_ENTRYLEFT 0x02 
.................... #define LCD_ENTRYSHIFTINCREMENT 0x01 
.................... #define LCD_ENTRYSHIFTDECREMENT 0x00 
....................  
.................... // flags for display on/off control 
.................... #define LCD_DISPLAYON 0x04 
.................... #define LCD_DISPLAYOFF 0x00 
.................... #define LCD_CURSORON 0x02 
.................... #define LCD_CURSOROFF 0x00 
.................... #define LCD_BLINKON 0x01 
.................... #define LCD_BLINKOFF 0x00 
....................  
.................... // flags for display/cursor shift 
.................... #define LCD_DISPLAYMOVE 0x08 
.................... #define LCD_CURSORMOVE 0x00 
.................... #define LCD_MOVERIGHT 0x04 
.................... #define LCD_MOVELEFT 0x00 
....................  
.................... // flags for function set 
.................... #define LCD_8BITMODE 0x10 
.................... #define LCD_4BITMODE 0x00 
.................... #define LCD_2LINE 0x08 
.................... #define LCD_1LINE 0x00 
.................... #define LCD_5x10DOTS 0x04 
.................... #define LCD_5x8DOTS 0x00 
....................  
.................... // flags for backlight control 
.................... #define LCD_BACKLIGHT 0x08 
.................... #define LCD_NOBACKLIGHT 0x00 
....................  
.................... #define En 0B00000100  // Enable bit 
.................... #define Rw 0B00000010  // Read/Write bit 
.................... #define Rs 0B00000001  // Register select bit 
....................  
.................... void write4bits(usi8 value); 
.................... void expanderWrite(usi8 _data); 
.................... void pulseEnable(usi8 _data); 
.................... void lcd_command(usi8 value); 
.................... void lcd_display(); 
.................... void lcd_clear(); 
.................... void lcd_home(); 
.................... void lcd_send(usi8 value, usi8 mode); 
.................... void lcd_data(usi8 value); 
....................  
.................... usi8 _displayfunction; 
.................... usi8 _displaycontrol; 
.................... usi8 _displaymode; 
.................... usi8 _numlines; 
.................... usi8 _cols; 
.................... usi8 _rows; 
.................... usi8 _backlightval; 
....................  
.................... void lcd_init(){ 
....................    _cols = lcd_cols; // 16 
*
0111:  MOVLW  10
0112:  MOVWF  25
....................    _rows = lcd_rows; // 2 
0113:  MOVLW  02
0114:  MOVWF  26
....................    _backlightval = LCD_NOBACKLIGHT; // back light is off 
0115:  CLRF   27
....................     
....................    i2c_setup_write(); // setup i2c 
....................    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS; 
*
013B:  CLRF   21
....................     
....................    _displayfunction |= LCD_2LINE; 
013C:  BSF    21.3
....................    _numlines = _rows; // 2 
013D:  MOVF   26,W
013E:  MOVWF  24
....................     
....................    delay_ms(40); 
013F:  MOVLW  28
0140:  MOVWF  2E
0141:  CALL   077
....................     
....................    expanderWrite(_backlightval); // back light is on 
0142:  MOVF   27,W
0143:  MOVWF  3B
0144:  CALL   08B
....................    delay_ms(100); 
0145:  MOVLW  64
0146:  MOVWF  2E
0147:  CALL   077
....................     
....................    /* 
....................    It is try to set use 4bit in 3 time 
....................    write4bits(0x03 << 4); 
....................    delay_ms(5); 
....................     
....................    write4bits(0x03 << 4); 
....................    delay_ms(5); 
....................     
....................    write4bits(0x03 << 4); 
....................    delay_ms(5); 
....................    */ 
....................     
....................    write4bits(0x02 << 4); // set using 4bit for lcd16x2 
0148:  MOVLW  20
0149:  MOVWF  38
014A:  CALL   0D7
....................     
....................    lcd_command(LCD_FUNCTIONSET | _displayfunction); 
014B:  MOVF   21,W
014C:  IORLW  20
014D:  MOVWF  28
014E:  MOVWF  32
014F:  CALL   105
....................     
....................    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF; 
0150:  MOVLW  04
0151:  MOVWF  22
....................    lcd_display(); 
....................     
....................    lcd_clear(); 
*
0158:  CALL   10A
....................     
....................    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT; 
0159:  MOVLW  02
015A:  MOVWF  23
....................    lcd_command(LCD_ENTRYMODESET | _displaymode); 
015B:  MOVF   23,W
015C:  IORLW  04
015D:  MOVWF  28
015E:  MOVWF  32
015F:  CALL   105
....................     
....................    lcd_home(); 
*
0166:  BCF    0A.3
0167:  BCF    0A.4
0168:  GOTO   24D (RETURN)
.................... } 
....................  
.................... void lcd_clear(){ 
....................    lcd_command(LCD_CLEARDISPLAY); 
*
010A:  MOVLW  01
010B:  MOVWF  32
010C:  CALL   105
....................    delay_ms(20); 
010D:  MOVLW  14
010E:  MOVWF  2E
010F:  CALL   077
0110:  RETURN
.................... } 
....................  
.................... void lcd_home(){ 
....................    lcd_command(LCD_RETURNHOME); 
*
0160:  MOVLW  02
0161:  MOVWF  32
0162:  CALL   105
....................    delay_ms(20); 
0163:  MOVLW  14
0164:  MOVWF  2E
0165:  CALL   077
.................... } 
....................  
.................... void lcd_setCursor(usi8 col, usi8 row){ 
....................    int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 }; 
*
0169:  CLRF   2D
016A:  MOVLW  40
016B:  MOVWF  2E
016C:  MOVLW  14
016D:  MOVWF  2F
016E:  MOVLW  54
016F:  MOVWF  30
....................    if ( row > _numlines ) { 
0170:  MOVF   2C,W
0171:  SUBWF  24,W
0172:  BTFSC  03.0
0173:  GOTO   177
....................       row = _numlines-1; 
0174:  MOVLW  01
0175:  SUBWF  24,W
0176:  MOVWF  2C
....................    } 
....................    lcd_command(LCD_SETDDRAMADDR | (col + row_offsets[row])); 
0177:  MOVLW  2D
0178:  ADDWF  2C,W
0179:  MOVWF  04
017A:  BCF    03.7
017B:  MOVF   00,W
017C:  ADDWF  2B,W
017D:  IORLW  80
017E:  MOVWF  31
017F:  MOVWF  32
0180:  CALL   105
0181:  RETURN
.................... } 
....................  
.................... void lcd_display() { 
....................    _displaycontrol |= LCD_DISPLAYON; 
*
0152:  BSF    22.2
....................    lcd_command(LCD_DISPLAYCONTROL | _displaycontrol); 
0153:  MOVF   22,W
0154:  IORLW  08
0155:  MOVWF  28
0156:  MOVWF  32
0157:  CALL   105
.................... } 
....................  
.................... void lcd_command(usi8 value){ 
....................    lcd_send(value,0); 
*
0105:  MOVF   32,W
0106:  MOVWF  33
0107:  CLRF   34
0108:  CALL   0F0
0109:  RETURN
.................... } 
....................  
.................... void lcd_data(usi8 value){ 
....................    lcd_send(value,Rs); 
*
0182:  MOVF   2E,W
0183:  MOVWF  33
0184:  MOVLW  01
0185:  MOVWF  34
0186:  CALL   0F0
0187:  RETURN
.................... } 
....................  
.................... void lcd_send(usi8 value, usi8 mode) { 
*
00F0:  MOVF   33,W
00F1:  ANDLW  F0
00F2:  MOVWF  35
00F3:  SWAPF  33,W
00F4:  MOVWF  77
00F5:  MOVLW  F0
00F6:  ANDWF  77,F
00F7:  MOVF   77,W
00F8:  ANDLW  F0
00F9:  MOVWF  36
....................    usi8 highnib=value&0xf0; 
....................    usi8 lownib=(value<<4)&0xf0; 
....................    write4bits((highnib)|mode); 
00FA:  MOVF   35,W
00FB:  IORWF  34,W
00FC:  MOVWF  37
00FD:  MOVWF  38
00FE:  CALL   0D7
....................    write4bits((lownib)|mode);  
00FF:  MOVF   36,W
0100:  IORWF  34,W
0101:  MOVWF  37
0102:  MOVWF  38
0103:  CALL   0D7
0104:  RETURN
.................... } 
....................  
.................... void write4bits(usi8 value) { 
....................    expanderWrite(value); 
*
00D7:  MOVF   38,W
00D8:  MOVWF  3B
00D9:  CALL   08B
....................    pulseEnable(value); 
00DA:  MOVF   38,W
00DB:  MOVWF  39
*
00EF:  RETURN
.................... } 
....................  
.................... void expanderWrite(usi8 _data){ 
....................    i2c_write_1byte(_data|_backlightval); 
*
008B:  MOVF   3B,W
008C:  IORWF  27,W
008D:  MOVWF  3C
008E:  MOVF   3C,W
008F:  MOVWF  3D
*
00D5:  BCF    03.5
00D6:  RETURN
.................... } 
....................  
.................... void pulseEnable(usi8 _data){ 
....................    expanderWrite(_data | En); 
*
00DC:  MOVF   39,W
00DD:  IORLW  04
00DE:  MOVWF  3A
00DF:  MOVWF  3B
00E0:  CALL   08B
....................    delay_us(1); 
00E1:  GOTO   0E2
00E2:  GOTO   0E3
00E3:  NOP
....................    expanderWrite(_data & ~En); 
00E4:  MOVF   39,W
00E5:  ANDLW  FB
00E6:  MOVWF  3A
00E7:  MOVWF  3B
00E8:  CALL   08B
....................    delay_us(50); 
00E9:  MOVLW  52
00EA:  MOVWF  77
00EB:  DECFSZ 77,F
00EC:  GOTO   0EB
00ED:  GOTO   0EE
00EE:  NOP
.................... } 
....................  
.................... /* Library modify in User*/ 
.................... void lcd_log_info(usi16 time_s, bool ena_time){ 
....................    lcd_setCursor(1,0); 
*
01DE:  MOVLW  01
01DF:  MOVWF  2B
01E0:  CLRF   2C
01E1:  CALL   169
....................    lcd_data("Do an 1 - HKII"); 
01E2:  MOVLW  04
01E3:  BSF    03.6
01E4:  MOVWF  0D
01E5:  MOVLW  00
01E6:  MOVWF  0F
01E7:  BCF    03.6
01E8:  CALL   188
....................    lcd_setCursor(3,1); 
01E9:  MOVLW  03
01EA:  MOVWF  2B
01EB:  MOVLW  01
01EC:  MOVWF  2C
01ED:  CALL   169
....................    lcd_data("SPKT-TPHCM"); 
01EE:  MOVLW  0C
01EF:  BSF    03.6
01F0:  MOVWF  0D
01F1:  MOVLW  00
01F2:  MOVWF  0F
01F3:  BCF    03.6
01F4:  CALL   188
....................    if(ena_time == enable){ 
01F5:  DECFSZ 2A,W
01F6:  GOTO   225
....................       delay_ms(time_s*1000); 
01F7:  MOVF   29,W
01F8:  MOVWF  2C
01F9:  MOVF   28,W
01FA:  MOVWF  2B
01FB:  MOVLW  03
01FC:  MOVWF  2E
01FD:  MOVLW  E8
01FE:  MOVWF  2D
*
0213:  MOVF   79,W
0214:  MOVWF  2C
0215:  MOVF   78,W
0216:  MOVWF  2B
0217:  MOVF   79,W
0218:  MOVWF  2D
0219:  INCF   2D,F
021A:  DECF   2D,F
021B:  BTFSC  03.2
021C:  GOTO   221
021D:  MOVLW  FF
021E:  MOVWF  2E
021F:  CALL   077
0220:  GOTO   21A
0221:  MOVF   2B,W
0222:  MOVWF  2E
0223:  CALL   077
....................       lcd_clear(); 
0224:  CALL   10A
....................    } 
0225:  BCF    0A.3
0226:  BCF    0A.4
0227:  GOTO   253 (RETURN)
.................... } 
....................  
....................  
.................... #define  touch_pin pin_a5   
.................... #include <touch.c>                               
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                        Dallas Touch Driver                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////  data = touch_read_bit()     Reads one bit from a touch device    //// 
.................... ////                                                                   //// 
.................... ////  data = touch_read_BYTE()    Reads one byte from a touch device.  //// 
.................... ////                                                                   //// 
.................... ////  ok = touch_write_bit(data)  Writes one bit to a touch device     //// 
.................... ////                              and returns true if all went ok.     //// 
.................... ////                              A false indicates a collision with   //// 
.................... ////                              another device.                      //// 
.................... ////                                                                   //// 
.................... ////  ok = touch_write_byte(data) Writes one byte to a touch device    //// 
.................... ////                              and returns true if all went ok.     //// 
.................... ////                              A false indicates a collision with   //// 
.................... ////                              another device.                      //// 
.................... ////                                                                   //// 
.................... ////  present = touch_present()   Issues a reset and returns true      //// 
.................... ////                              if the touch device is there.        //// 
.................... ////                                                                   //// 
.................... ////  reset_pulse()               Issues a reset and waits for a       //// 
.................... ////                              present pulse.                       //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef  TOUCH_C 
.................... #define  TOUCH_C 
....................  
.................... #ifndef TOUCH_PIN 
....................    #define TOUCH_PIN  PIN_B0 
.................... #endif 
....................  
.................... #define TOUCH_PIN_LOW()    output_drive(TOUCH_PIN); output_low(TOUCH_PIN) 
.................... #define TOUCH_PIN_HIGH()    output_drive(TOUCH_PIN); output_high(TOUCH_PIN) 
.................... #define TOUCH_PIN_FLOAT()  output_float(TOUCH_PIN) 
.................... #define TOUCH_PIN_READ()      input_state(TOUCH_PIN) 
....................  
.................... ///////////////////////////// 
.................... ////                     //// 
.................... //// Function Prototypes //// 
.................... ////                     //// 
.................... ///////////////////////////// 
....................  
.................... /* 
.................... int1 touch_read_bit() 
.................... This will read back a bit from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A bit from the DS1993 
.................... */ 
.................... int1 touch_read_bit(); 
....................  
.................... /* 
.................... BYTE touch_read_byte() 
.................... This will read back a byte from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A byte from the DS1993 
.................... */ 
.................... BYTE touch_read_byte(); 
....................  
.................... /* 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... This will write a bit to the DS1993 
.................... PARAMS: The bit to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_bit(int1 data); 
....................  
.................... /* 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... This will write a byte to the DS1993 
.................... PARAMS: The byte to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_byte(BYTE data); 
....................  
.................... /* 
.................... BOOLEAN touch_present() 
.................... This will evaluate whether or not there is a touch present on the DS1993 
.................... PARAMS: none 
.................... RETURNS: True if a touch is present, false if otherwise 
.................... */ 
.................... BOOLEAN touch_present(); 
....................  
.................... /* 
.................... void reset_pulse() 
.................... This will send the DS1993 a reset pulse 
.................... PARAMS: none 
.................... RETURNS: none 
.................... */ 
.................... void reset_pulse(); 
....................  
.................... ////////////////////////////////// 
.................... ////                          //// 
.................... //// Function Implementations //// 
.................... ////                          //// 
.................... ////////////////////////////////// 
....................  
.................... /* 
.................... int1 touch_read_bit() 
.................... This will read back a bit from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A bit from the DS1993 
.................... */ 
.................... int1 touch_read_bit() 
.................... { 
....................    int1 data; 
....................  
....................    TOUCH_PIN_LOW(); 
....................    delay_us(14); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................    data = TOUCH_PIN_READ(); 
....................    delay_us(100); 
....................  
....................    return data; 
.................... } 
....................  
.................... /* 
.................... BYTE touch_read_byte() 
.................... This will read back a byte from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A byte from the DS1993 
.................... */ 
.................... BYTE touch_read_byte() 
.................... { 
....................    BYTE i,data; 
....................  
....................    for(i=1; i <= 8; ++i) 
....................       shift_right(&data, 1, touch_read_bit()); 
....................  
....................    return data; 
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... This will write a bit to the DS1993 
.................... PARAMS: The bit to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... { 
....................    TOUCH_PIN_LOW(); 
....................    delay_us(10); 
....................    if(data) 
....................    { 
....................       TOUCH_PIN_HIGH(); 
....................       delay_us(10); 
....................       if(!TOUCH_PIN_READ()) 
....................          return FALSE; 
....................    } 
....................    else 
....................    { 
....................       TOUCH_PIN_LOW(); 
....................       delay_us(10); 
....................       if(TOUCH_PIN_READ()) 
....................          return FALSE; 
....................    } 
....................    delay_us(50); 
....................    TOUCH_PIN_HIGH(); 
....................    delay_us(50); 
....................    return TRUE; 
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... This will write a byte to the DS1993 
.................... PARAMS: The byte to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... { 
....................    BYTE i; 
....................  
....................    for(i=1; i<=8; ++i) 
....................       if(!touch_write_bit(shift_right(&data, 1, 0))) 
....................          return FALSE; 
....................  
....................    return TRUE; 
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_present() 
.................... This will evaluate whether or not there is a touch present on the DS1993 
.................... PARAMS: none 
.................... RETURNS: True if a touch is present, false if otherwise 
.................... */ 
.................... BOOLEAN touch_present() 
.................... { 
....................    BOOLEAN present; 
....................    TOUCH_PIN_LOW(); 
....................    delay_us(500); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................  
....................    if(!TOUCH_PIN_READ()) 
....................       return FALSE; 
....................  
....................    delay_us(65); 
....................    present = !TOUCH_PIN_READ(); 
....................    delay_us(240); 
....................    return present; 
.................... } 
....................  
.................... /* 
.................... void reset_pulse() 
.................... This will send the DS1993 a reset pulse 
.................... PARAMS: none 
.................... RETURNS: none 
.................... */ 
.................... void reset_pulse() 
.................... { 
....................    TOUCH_PIN_LOW(); 
....................    delay_us(500); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................    while(!touch_present()); 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #define  search_rom       0xf0 
.................... #define  read_rom         0x33 
.................... #define  match_rom        0x55     
.................... #define  skip_rom         0xcc 
.................... #define  alarm_search     0xec 
.................... #define  read_scratchpad  0xbe  
.................... #define  write_scratchpad 0x4e                                
.................... #define  copy_scratchpad  0x48   
.................... #define  convert_t        0x44  
....................  
.................... void ds18b20_no_ds18b(usi8 x,y)  
.................... {    
....................    lcd_setCursor(x,y);        
....................    lcd_data("NO DS18B20");  
.................... }  
....................  
.................... void ds18b20_khoi_tao() 
.................... {                          
....................    touch_present(); 
....................    touch_write_byte(skip_rom);       
....................    touch_write_byte(write_scratchpad);                      
....................    touch_write_byte(0x0); 
....................    touch_write_byte(0x0);     
....................    touch_write_byte(0x7f); //12 bit 
....................  
....................    touch_present();    
....................    touch_write_byte(skip_rom); 
....................    touch_write_byte(convert_t); 
.................... } 
....................  
.................... usi16 ds18b20_read_temp()                                         
.................... {                                     
....................    usi8  bl,bh;                                                              
....................    usi16 w;  
....................    touch_write_byte(skip_rom); 
....................    touch_write_byte(read_scratchpad);                  
....................    bl = touch_read_byte(); 
....................    bh = touch_read_byte();                              
....................    w  = make16(bh,bl);                                                           
....................                                                          
....................    touch_present();    
....................    touch_write_byte(skip_rom); 
....................    touch_write_byte(convert_t);  
....................    return w; 
.................... }  
....................  
.................... void ds18b20_doc_rom(usi8 x,y)   
.................... {     
....................    unsigned int8 rom_code[8];        
....................    unsigned int8 xh,xl; 
....................    signed int8 i; 
....................    if(touch_present()) 
....................    { 
....................       touch_write_byte(read_rom);                                                                             
....................       for(i=0;i<8;i++)                  
....................       rom_code[i] = touch_read_byte();                                  
....................       lcd_setCursor(x,y);      
....................       for(i=7;i>-1;i--)  
....................       { 
....................          xh=rom_code[i]/16; 
....................          if(xh>9) xh=xh+0x37; 
....................          else     xh=xh+0x30; 
....................          xl=rom_code[i]%16; 
....................          if(xl>9) xl=xl+0x37; 
....................          else     xl=xl+0x30; 
....................                         
....................          lcd_data(xh); 
....................          lcd_data(xl);          
....................       }         
....................    } 
....................    else ds18b20_no_ds18b(0,0);      
.................... } 
....................  
....................  
....................  
....................  
.................... void main(){ 
0228:  MOVF   03,W
0229:  ANDLW  1F
022A:  MOVWF  03
022B:  MOVLW  FF
022C:  MOVWF  20
022D:  BSF    03.5
022E:  BSF    03.6
022F:  BSF    07.3
0230:  MOVLW  08
0231:  BCF    03.6
0232:  MOVWF  19
0233:  MOVLW  02
0234:  MOVWF  1A
0235:  MOVLW  A6
0236:  MOVWF  18
0237:  MOVLW  90
0238:  BCF    03.5
0239:  MOVWF  18
023A:  BSF    03.5
023B:  BSF    03.6
023C:  MOVF   09,W
023D:  ANDLW  C0
023E:  MOVWF  09
023F:  BCF    03.6
0240:  BCF    1F.4
0241:  BCF    1F.5
0242:  MOVLW  00
0243:  BSF    03.6
0244:  MOVWF  08
0245:  BCF    03.5
0246:  CLRF   07
0247:  CLRF   08
0248:  CLRF   09
0249:  BCF    03.7
....................     
....................    set_up_port(); 
024A:  BCF    03.6
024B:  GOTO   018
....................     
....................    lcd_init(); 
024C:  GOTO   111
....................    lcd_log_info(8,enable); 
024D:  CLRF   29
024E:  MOVLW  08
024F:  MOVWF  28
0250:  MOVLW  01
0251:  MOVWF  2A
0252:  GOTO   1DE
....................     
....................    while(true){ 
0253:  GOTO   253
....................     
....................    } 
.................... } 
0254:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
