CCS PCM C Compiler, Version 5.015, 5967               13-Apr-24 14:03

               Filename:   E:\STUDY\HKII-2023-2024\DO_AN_1\PROJECT\CODE\code_do_an_1.lst

               ROM used:   3780 words (46%)
                           Largest free fragment is 2048
               RAM used:   65 (18%) at main() level
                           105 (29%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  0A
0001:  MOVWF  0A
0002:  GOTO   2C9
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.0
002A:  GOTO   02D
002B:  BTFSC  0C.0
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   051
.................... #include <thu_vien_do_an_1.c> 
.................... /* 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................                        SU PHAM KY THUAT - TP.HCM 
....................  DO AN 1 - HIEU CHINH NHIET DO HO CA VA CHO CA AN TU DONG - KET NOI ESP 
....................  
....................    THANH VIEN: 
....................       VO MINH THUAN   - 21161366 
....................       LE QUANG THUONG - 21161367 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... */ 
.................... #include <define_pic_16f887.c> 
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
005B:  DATA C4,37
005C:  DATA A0,30
005D:  DATA 6E,10
005E:  DATA 31,10
005F:  DATA 2D,10
0060:  DATA C8,25
0061:  DATA C9,24
0062:  DATA 00,00
0063:  DATA 53,28
0064:  DATA 4B,2A
0065:  DATA 2D,2A
0066:  DATA 50,24
0067:  DATA C3,26
0068:  DATA 00,00
0069:  DATA 2E,00
006A:  DATA 2E,00
006B:  DATA 2D,00
006C:  DATA 2D,00
006D:  DATA 2D,00
006E:  DATA 20,27
006F:  DATA 20,00
0070:  DATA 47,28
0071:  DATA 47,00
0072:  DATA 4E,2A
0073:  DATA 4E,00
0074:  DATA 20,2A
0075:  DATA 20,00
0076:  DATA DF,2F
0077:  DATA 00,00
0078:  DATA CE,27
0079:  DATA 20,22
007A:  DATA D3,18
007B:  DATA 38,21
007C:  DATA 32,18
007D:  DATA 00,00
007E:  DATA C3,27
007F:  DATA 20,22
0080:  DATA D3,18
0081:  DATA 38,21
0082:  DATA 32,18
0083:  DATA 00,00
0084:  DATA 4E,22
0085:  DATA 3A,10
0086:  DATA 00,01
0087:  DATA A0,37
0088:  DATA 43,00
0089:  DATA 4E,22
008A:  DATA 3A,10
008B:  DATA 00,01
008C:  DATA A0,37
008D:  DATA 43,00
008E:  DATA 47,24
008F:  DATA 5F,27
0090:  DATA 44,1D
0091:  DATA 20,00
0092:  DATA A0,37
0093:  DATA 43,00
0094:  DATA E3,30
0095:  DATA 69,10
0096:  DATA E4,30
0097:  DATA 74,10
0098:  DATA E4,37
0099:  DATA EE,33
009A:  DATA 20,34
009B:  DATA 6F,00
009C:  DATA F4,17
009D:  DATA 67,10
009E:  DATA 63,34
009F:  DATA 6F,10
00A0:  DATA E3,30
00A1:  DATA A0,30
00A2:  DATA 6E,00
00A3:  DATA 49,37
00A4:  DATA E6,37
00A5:  DATA F2,36
00A6:  DATA 61,3A
00A7:  DATA E9,37
00A8:  DATA 6E,00
00A9:  DATA D6,32
00AA:  DATA F2,39
00AB:  DATA E9,37
00AC:  DATA 6E,1D
00AD:  DATA 20,2B
00AE:  DATA 31,17
00AF:  DATA 30,17
00B0:  DATA 30,00
*
0378:  MOVF   0B,W
0379:  MOVWF  70
037A:  BCF    0B.7
037B:  BSF    03.5
037C:  BSF    03.6
037D:  BSF    0C.7
037E:  BSF    0C.0
037F:  NOP
0380:  NOP
0381:  BTFSS  70.7
0382:  GOTO   388
0383:  BCF    03.5
0384:  BCF    03.6
0385:  BSF    0B.7
0386:  BSF    03.5
0387:  BSF    03.6
0388:  BCF    03.5
0389:  MOVF   0C,W
038A:  ANDLW  7F
038B:  BTFSC  03.2
038C:  GOTO   3C6
038D:  MOVWF  70
038E:  MOVF   0D,W
038F:  MOVWF  71
0390:  MOVF   0F,W
0391:  MOVWF  72
0392:  MOVF   70,W
0393:  MOVWF  73
0394:  BCF    03.6
0395:  CALL   35B
0396:  MOVF   71,W
0397:  BSF    03.6
0398:  MOVWF  0D
0399:  MOVF   72,W
039A:  MOVWF  0F
039B:  BCF    03.6
039C:  MOVF   0B,W
039D:  MOVWF  73
039E:  BCF    0B.7
039F:  BSF    03.5
03A0:  BSF    03.6
03A1:  BSF    0C.7
03A2:  BSF    0C.0
03A3:  NOP
03A4:  NOP
03A5:  BTFSS  73.7
03A6:  GOTO   3AC
03A7:  BCF    03.5
03A8:  BCF    03.6
03A9:  BSF    0B.7
03AA:  BSF    03.5
03AB:  BSF    03.6
03AC:  BCF    03.5
03AD:  RLF    0C,W
03AE:  RLF    0E,W
03AF:  ANDLW  7F
03B0:  BTFSC  03.2
03B1:  GOTO   3C6
03B2:  MOVWF  70
03B3:  MOVF   0D,W
03B4:  MOVWF  71
03B5:  MOVF   0F,W
03B6:  MOVWF  72
03B7:  MOVF   70,W
03B8:  MOVWF  73
03B9:  BCF    03.6
03BA:  CALL   35B
03BB:  MOVF   71,W
03BC:  BSF    03.6
03BD:  MOVWF  0D
03BE:  MOVF   72,W
03BF:  MOVWF  0F
03C0:  INCF   0D,F
03C1:  BTFSC  03.2
03C2:  INCF   0F,F
03C3:  BCF    03.6
03C4:  GOTO   378
03C5:  BSF    03.6
03C6:  BCF    03.6
03C7:  RETURN
03C8:  MOVLW  10
03C9:  MOVWF  63
03CA:  CLRF   77
03CB:  CLRF   7A
03CC:  RRF    60,F
03CD:  RRF    5F,F
03CE:  BTFSS  03.0
03CF:  GOTO   3D6
03D0:  MOVF   61,W
03D1:  ADDWF  77,F
03D2:  BTFSC  03.0
03D3:  INCF   7A,F
03D4:  MOVF   62,W
03D5:  ADDWF  7A,F
03D6:  RRF    7A,F
03D7:  RRF    77,F
03D8:  RRF    79,F
03D9:  RRF    78,F
03DA:  DECFSZ 63,F
03DB:  GOTO   3CC
03DC:  RETURN
*
069C:  CLRF   78
069D:  CLRF   79
069E:  CLRF   77
069F:  CLRF   7A
06A0:  MOVF   6A,W
06A1:  BTFSS  03.2
06A2:  GOTO   6A6
06A3:  MOVF   69,W
06A4:  BTFSC  03.2
06A5:  GOTO   6C0
06A6:  MOVLW  10
06A7:  MOVWF  6B
06A8:  BCF    03.0
06A9:  RLF    67,F
06AA:  RLF    68,F
06AB:  RLF    77,F
06AC:  RLF    7A,F
06AD:  MOVF   6A,W
06AE:  SUBWF  7A,W
06AF:  BTFSS  03.2
06B0:  GOTO   6B3
06B1:  MOVF   69,W
06B2:  SUBWF  77,W
06B3:  BTFSS  03.0
06B4:  GOTO   6BC
06B5:  MOVF   69,W
06B6:  SUBWF  77,F
06B7:  BTFSS  03.0
06B8:  DECF   7A,F
06B9:  MOVF   6A,W
06BA:  SUBWF  7A,F
06BB:  BSF    03.0
06BC:  RLF    78,F
06BD:  RLF    79,F
06BE:  DECFSZ 6B,F
06BF:  GOTO   6A8
06C0:  RETURN
*
074C:  MOVF   5F,W
074D:  ANDLW  07
074E:  MOVWF  77
074F:  RRF    5F,W
0750:  MOVWF  78
0751:  RRF    78,F
0752:  RRF    78,F
0753:  MOVLW  1F
0754:  ANDWF  78,F
0755:  MOVF   78,W
0756:  ADDWF  61,W
0757:  MOVWF  04
0758:  BCF    03.7
0759:  BTFSC  62.0
075A:  BSF    03.7
075B:  CLRF   78
075C:  INCF   78,F
075D:  INCF   77,F
075E:  GOTO   760
075F:  RLF    78,F
0760:  DECFSZ 77,F
0761:  GOTO   75F
0762:  MOVF   60,F
0763:  BTFSC  03.2
0764:  GOTO   768
0765:  MOVF   78,W
0766:  IORWF  00,F
0767:  GOTO   76B
0768:  COMF   78,F
0769:  MOVF   78,W
076A:  ANDWF  00,F
076B:  RETURN
076C:  MOVF   5F,W
076D:  ANDLW  07
076E:  MOVWF  77
076F:  RRF    5F,W
0770:  MOVWF  78
0771:  RRF    78,F
0772:  RRF    78,F
0773:  MOVLW  1F
0774:  ANDWF  78,F
0775:  MOVF   78,W
0776:  ADDWF  60,W
0777:  MOVWF  04
0778:  BCF    03.7
0779:  BTFSC  61.0
077A:  BSF    03.7
077B:  MOVF   00,W
077C:  MOVWF  78
077D:  INCF   77,F
077E:  GOTO   780
077F:  RRF    78,F
0780:  DECFSZ 77,F
0781:  GOTO   77F
0782:  RETURN
*
07C3:  CLRF   77
07C4:  CLRF   78
07C5:  MOVF   62,W
07C6:  BCF    03.0
07C7:  BTFSC  63.0
07C8:  ADDWF  77,F
07C9:  RRF    77,F
07CA:  RRF    78,F
07CB:  BTFSC  63.1
07CC:  ADDWF  77,F
07CD:  RRF    77,F
07CE:  RRF    78,F
07CF:  BTFSC  63.2
07D0:  ADDWF  77,F
07D1:  RRF    77,F
07D2:  RRF    78,F
07D3:  BTFSC  63.3
07D4:  ADDWF  77,F
07D5:  RRF    77,F
07D6:  RRF    78,F
07D7:  BTFSC  63.4
07D8:  ADDWF  77,F
07D9:  RRF    77,F
07DA:  RRF    78,F
07DB:  BTFSC  63.5
07DC:  ADDWF  77,F
07DD:  RRF    77,F
07DE:  RRF    78,F
07DF:  BTFSC  63.6
07E0:  ADDWF  77,F
07E1:  RRF    77,F
07E2:  RRF    78,F
07E3:  BTFSC  63.7
07E4:  ADDWF  77,F
07E5:  RRF    77,F
07E6:  RRF    78,F
07E7:  RETURN
*
0800:  MOVF   71,W
0801:  CLRF   78
0802:  SUBWF  70,W
0803:  BTFSC  03.0
0804:  GOTO   008
0805:  MOVF   70,W
0806:  MOVWF  77
0807:  GOTO   014
0808:  CLRF   77
0809:  MOVLW  08
080A:  MOVWF  72
080B:  RLF    70,F
080C:  RLF    77,F
080D:  MOVF   71,W
080E:  SUBWF  77,W
080F:  BTFSC  03.0
0810:  MOVWF  77
0811:  RLF    78,F
0812:  DECFSZ 72,F
0813:  GOTO   00B
0814:  RETURN
*
0A8C:  MOVF   5C,W
0A8D:  XORWF  5D,W
0A8E:  ANDLW  80
0A8F:  MOVWF  5F
0A90:  BTFSS  5C.7
0A91:  GOTO   294
0A92:  COMF   5C,F
0A93:  INCF   5C,F
0A94:  BTFSS  5D.7
0A95:  GOTO   298
0A96:  COMF   5D,F
0A97:  INCF   5D,F
0A98:  MOVF   5D,W
0A99:  CLRF   78
0A9A:  SUBWF  5C,W
0A9B:  BTFSC  03.0
0A9C:  GOTO   2A0
0A9D:  MOVF   5C,W
0A9E:  MOVWF  77
0A9F:  GOTO   2AC
0AA0:  CLRF   77
0AA1:  MOVLW  08
0AA2:  MOVWF  5E
0AA3:  RLF    5C,F
0AA4:  RLF    77,F
0AA5:  MOVF   5D,W
0AA6:  SUBWF  77,W
0AA7:  BTFSC  03.0
0AA8:  MOVWF  77
0AA9:  RLF    78,F
0AAA:  DECFSZ 5E,F
0AAB:  GOTO   2A3
0AAC:  BTFSS  5F.7
0AAD:  GOTO   2B0
0AAE:  COMF   78,F
0AAF:  INCF   78,F
0AB0:  RETURN
....................  
.................... #list 
....................  
.................... #device  adc=10 
.................... #fuses   hs, nowdt, put, noprotect, nolvp 
.................... #use     delay(clock=20MHz)  
*
0144:  MOVLW  62
0145:  MOVWF  04
0146:  BCF    03.7
0147:  MOVF   00,W
0148:  BTFSC  03.2
0149:  GOTO   157
014A:  MOVLW  06
014B:  MOVWF  78
014C:  CLRF   77
014D:  DECFSZ 77,F
014E:  GOTO   14D
014F:  DECFSZ 78,F
0150:  GOTO   14C
0151:  MOVLW  7B
0152:  MOVWF  77
0153:  DECFSZ 77,F
0154:  GOTO   153
0155:  DECFSZ 00,F
0156:  GOTO   14A
0157:  RETURN
*
055E:  MOVLW  03
055F:  SUBWF  5F,F
0560:  BTFSS  03.0
0561:  GOTO   56C
0562:  MOVLW  5F
0563:  MOVWF  04
0564:  BCF    03.7
0565:  MOVF   00,W
0566:  BTFSC  03.2
0567:  GOTO   56C
0568:  GOTO   56A
0569:  GOTO   56A
056A:  DECFSZ 00,F
056B:  GOTO   569
056C:  RETURN
.................... #use     i2c(master,slow,sda=pin_c4,scl=pin_c3) 
*
00E8:  MOVLW  08
00E9:  MOVWF  78
00EA:  MOVLW  04
00EB:  MOVWF  77
00EC:  DECFSZ 77,F
00ED:  GOTO   0EC
00EE:  BCF    07.3
00EF:  BCF    2B.3
00F0:  MOVF   2B,W
00F1:  BSF    03.5
00F2:  MOVWF  07
00F3:  MOVLW  03
00F4:  MOVWF  77
00F5:  DECFSZ 77,F
00F6:  GOTO   0F5
00F7:  RLF    28,F
00F8:  BCF    03.5
00F9:  BCF    07.4
00FA:  BTFSS  03.0
00FB:  GOTO   102
00FC:  BSF    2B.4
00FD:  MOVF   2B,W
00FE:  BSF    03.5
00FF:  MOVWF  07
0100:  GOTO   106
0101:  BCF    03.5
0102:  BCF    2B.4
0103:  MOVF   2B,W
0104:  BSF    03.5
0105:  MOVWF  07
0106:  NOP
0107:  BCF    03.5
0108:  BSF    2B.3
0109:  MOVF   2B,W
010A:  BSF    03.5
010B:  MOVWF  07
010C:  BCF    03.5
010D:  BTFSS  07.3
010E:  GOTO   10D
010F:  DECFSZ 78,F
0110:  GOTO   0EA
0111:  MOVLW  04
0112:  MOVWF  77
0113:  DECFSZ 77,F
0114:  GOTO   113
0115:  BCF    07.3
0116:  BCF    2B.3
0117:  MOVF   2B,W
0118:  BSF    03.5
0119:  MOVWF  07
011A:  NOP
011B:  BCF    03.5
011C:  BSF    2B.4
011D:  MOVF   2B,W
011E:  BSF    03.5
011F:  MOVWF  07
0120:  MOVLW  03
0121:  MOVWF  77
0122:  DECFSZ 77,F
0123:  GOTO   122
0124:  MOVLW  03
0125:  MOVWF  77
0126:  DECFSZ 77,F
0127:  GOTO   126
0128:  BCF    03.5
0129:  BSF    2B.3
012A:  MOVF   2B,W
012B:  BSF    03.5
012C:  MOVWF  07
012D:  BCF    03.5
012E:  BTFSS  07.3
012F:  GOTO   12E
0130:  CLRF   78
0131:  MOVLW  03
0132:  MOVWF  77
0133:  DECFSZ 77,F
0134:  GOTO   133
0135:  BTFSC  07.4
0136:  BSF    78.0
0137:  BCF    07.3
0138:  BCF    2B.3
0139:  MOVF   2B,W
013A:  BSF    03.5
013B:  MOVWF  07
013C:  BCF    03.5
013D:  BCF    07.4
013E:  BCF    2B.4
013F:  MOVF   2B,W
0140:  BSF    03.5
0141:  MOVWF  07
0142:  BCF    03.5
0143:  RETURN
*
0419:  MOVLW  08
041A:  MOVWF  61
041B:  MOVF   77,W
041C:  MOVWF  62
041D:  BSF    2B.4
041E:  MOVF   2B,W
041F:  BSF    03.5
0420:  MOVWF  07
0421:  MOVLW  03
0422:  MOVWF  77
0423:  DECFSZ 77,F
0424:  GOTO   423
0425:  BCF    03.5
0426:  BSF    2B.3
0427:  MOVF   2B,W
0428:  BSF    03.5
0429:  MOVWF  07
042A:  BCF    03.5
042B:  BTFSS  07.3
042C:  GOTO   42B
042D:  BTFSC  07.4
042E:  BSF    03.0
042F:  BTFSS  07.4
0430:  BCF    03.0
0431:  RLF    78,F
0432:  MOVLW  04
0433:  MOVWF  77
0434:  DECFSZ 77,F
0435:  GOTO   434
0436:  BCF    2B.3
0437:  MOVF   2B,W
0438:  BSF    03.5
0439:  MOVWF  07
043A:  BCF    03.5
043B:  BCF    07.3
043C:  DECFSZ 61,F
043D:  GOTO   41D
043E:  BSF    2B.4
043F:  MOVF   2B,W
0440:  BSF    03.5
0441:  MOVWF  07
0442:  MOVLW  03
0443:  MOVWF  77
0444:  DECFSZ 77,F
0445:  GOTO   444
0446:  BCF    03.5
0447:  BCF    07.4
0448:  MOVF   62,W
0449:  BTFSC  03.2
044A:  GOTO   450
044B:  BCF    2B.4
044C:  MOVF   2B,W
044D:  BSF    03.5
044E:  MOVWF  07
044F:  BCF    03.5
0450:  NOP
0451:  BSF    2B.3
0452:  MOVF   2B,W
0453:  BSF    03.5
0454:  MOVWF  07
0455:  BCF    03.5
0456:  BTFSS  07.3
0457:  GOTO   456
0458:  MOVLW  04
0459:  MOVWF  77
045A:  DECFSZ 77,F
045B:  GOTO   45A
045C:  BCF    07.3
045D:  BCF    2B.3
045E:  MOVF   2B,W
045F:  BSF    03.5
0460:  MOVWF  07
0461:  MOVLW  03
0462:  MOVWF  77
0463:  DECFSZ 77,F
0464:  GOTO   463
0465:  BCF    03.5
0466:  BCF    07.4
0467:  BCF    2B.4
0468:  MOVF   2B,W
0469:  BSF    03.5
046A:  MOVWF  07
046B:  BCF    03.5
046C:  RETURN
.................... #use     rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
....................  
.................... /* Define name again to accordant user */ 
.................... #define usi8  unsigned int8 
.................... #define usi16 unsigned int16 
.................... #define usi32 unsigned int32 
.................... #define si8   signed   int8 
.................... #define si16  signed   int16 
.................... #define si32  signed   int32 
....................  
.................... #define bool int1 
....................  
.................... #define enable  1 
.................... #define disable 0 
....................  
.................... #define on  1 
.................... #define off 0 
....................  
.................... #ifndef bt0 
.................... #define bt0    pin_b0 
.................... #endif  
....................  
.................... #ifndef bt1 
.................... #define bt1    pin_b1 
.................... #endif 
....................  
.................... #ifndef bt2 
.................... #define bt2    pin_b2 
.................... #endif 
....................  
.................... #ifndef bt3 
.................... #define bt3    pin_b3 
.................... #endif 
....................  
.................... #ifndef bt4 
.................... #define bt4    pin_b4 
.................... #endif 
....................  
.................... #ifndef pinServo 
.................... #define pinServo    pin_c1 
.................... #endif 
....................  
.................... #ifndef pinCold 
.................... #define pinCold     pin_d6 
.................... #endif 
....................  
.................... #ifndef pinHot 
.................... #define pinHot      pin_d7 
.................... #endif 
....................  
.................... usi8 gh_nd = 25; 
....................  
.................... usi8 giay_tam, bdn, tt_ht = 0; 
.................... si8 gt_mod = 0, tg_chinh = 0; 
....................  
.................... #define tang 0 
.................... #define giam 1 
....................  
.................... bool e_11, e_22, e_33; 
....................  
.................... usi8 eat_hh, eat_pp, eat_ss; 
....................  
.................... #int_timer1 
.................... void interrupt_timer1() 
.................... { 
....................    bdn++; 
*
0051:  INCF   2E,F
....................    set_timer1(3036); 
0052:  CLRF   0E
0053:  MOVLW  0B
0054:  MOVWF  0F
0055:  MOVLW  DC
0056:  MOVWF  0E
0057:  BCF    0C.0
0058:  BCF    0A.3
0059:  BCF    0A.4
005A:  GOTO   02D
.................... } 
....................  
.................... void set_up_init(){ 
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
*
00B1:  MOVLW  B5
00B2:  MOVWF  10
....................    set_timer1(3036); 
00B3:  CLRF   0E
00B4:  MOVLW  0B
00B5:  MOVWF  0F
00B6:  MOVLW  DC
00B7:  MOVWF  0E
....................     
....................    enable_interrupts(global); 
00B8:  MOVLW  C0
00B9:  IORWF  0B,F
....................    enable_interrupts(int_timer1); 
00BA:  BSF    03.5
00BB:  BSF    0C.0
....................     
....................    tt_ht = 0; 
00BC:  BCF    03.5
00BD:  CLRF   2F
....................    bdn = 0; gt_mod = 0; 
00BE:  CLRF   2E
00BF:  CLRF   30
....................     
....................    e_11 = true; 
00C0:  BSF    32.0
....................    e_22 = true; 
00C1:  BSF    32.1
....................    e_33 = true; 
00C2:  BSF    32.2
....................     
....................    gh_nd = 25; 
00C3:  MOVLW  19
00C4:  MOVWF  2C
....................    eat_hh = 10; eat_pp = 10; eat_ss = 30; 
00C5:  MOVLW  0A
00C6:  MOVWF  33
00C7:  MOVWF  34
00C8:  MOVLW  1E
00C9:  MOVWF  35
....................     
....................    set_tris_a(0xff); 
00CA:  MOVLW  FF
00CB:  BSF    03.5
00CC:  MOVWF  05
....................    set_tris_b(0xff); 
00CD:  MOVWF  06
....................    set_tris_d(0x00); output_d(0x00); 
00CE:  MOVLW  00
00CF:  MOVWF  08
00D0:  CLRF   08
00D1:  BCF    03.5
00D2:  CLRF   08
....................    set_tris_e(0x00); output_e(0x00); 
00D3:  BSF    03.5
00D4:  BCF    09.0
00D5:  BCF    09.1
00D6:  BCF    09.2
00D7:  BCF    09.0
00D8:  BCF    09.1
00D9:  BCF    09.2
00DA:  BCF    03.5
00DB:  CLRF   09
....................    set_tris_c(0x00); output_c(0x00); 
00DC:  BSF    03.5
00DD:  MOVWF  07
00DE:  BCF    03.5
00DF:  MOVWF  2B
00E0:  MOVWF  2B
00E1:  BSF    03.5
00E2:  CLRF   07
00E3:  BCF    03.5
00E4:  CLRF   07
00E5:  BSF    0A.3
00E6:  BCF    0A.4
00E7:  GOTO   30B (RETURN)
.................... } 
....................  
....................  
....................  
.................... #include <thu_vien_btn.c> 
.................... #define level_menu 5 
....................  
.................... usi8 dl_count; 
....................  
.................... usi8 dem_menu_tong_curr = 0; 
.................... usi8 dem_menu_tong_prev = 1; 
....................  
.................... bool nhan_btn_giu(usi16 dl, usi8 pin){ 
....................    if(!input(pin)){ 
*
0939:  MOVF   5E,W
093A:  MOVWF  5F
093B:  MOVLW  01
093C:  MOVWF  60
093D:  CLRF   62
093E:  MOVLW  80
093F:  MOVWF  61
0940:  BCF    0A.3
0941:  CALL   74C
0942:  BSF    0A.3
0943:  MOVF   5E,W
0944:  MOVWF  5F
0945:  CLRF   61
0946:  CLRF   60
0947:  BCF    0A.3
0948:  CALL   76C
0949:  BSF    0A.3
094A:  BTFSC  78.0
094B:  GOTO   162
....................       dl_count += 1; delay_us(50); 
094C:  MOVLW  01
094D:  ADDWF  36,F
094E:  MOVLW  52
094F:  MOVWF  77
0950:  DECFSZ 77,F
0951:  GOTO   150
0952:  GOTO   153
0953:  NOP
....................       if(dl_count >= dl){ 
0954:  MOVF   5D,F
0955:  BTFSS  03.2
0956:  GOTO   15F
0957:  MOVF   5C,W
0958:  SUBWF  36,W
0959:  BTFSS  03.0
095A:  GOTO   15F
....................          dl_count = 0; 
095B:  CLRF   36
....................          return true; 
095C:  MOVLW  01
095D:  MOVWF  78
095E:  GOTO   164
....................       } 
....................       return false; 
095F:  MOVLW  00
0960:  MOVWF  78
0961:  GOTO   164
....................    } 
....................    return false; 
0962:  MOVLW  00
0963:  MOVWF  78
0964:  RETURN
.................... } 
....................  
.................... bool nhan_btn_nha(bool giu_nha, usi8 pin){ 
....................    if(!input(pin)){ 
*
0783:  MOVF   5D,W
0784:  MOVWF  5F
0785:  MOVLW  01
0786:  MOVWF  60
0787:  CLRF   62
0788:  MOVLW  80
0789:  MOVWF  61
078A:  CALL   74C
078B:  MOVF   5D,W
078C:  MOVWF  5F
078D:  CLRF   61
078E:  CLRF   60
078F:  CALL   76C
0790:  BTFSC  78.0
0791:  GOTO   7C0
....................       delay_ms(12); 
0792:  MOVLW  0C
0793:  MOVWF  62
0794:  CALL   144
....................       if(!input(pin)){ 
0795:  MOVF   5D,W
0796:  MOVWF  5F
0797:  MOVLW  01
0798:  MOVWF  60
0799:  CLRF   62
079A:  MOVLW  80
079B:  MOVWF  61
079C:  CALL   74C
079D:  MOVF   5D,W
079E:  MOVWF  5F
079F:  CLRF   61
07A0:  CLRF   60
07A1:  CALL   76C
07A2:  BTFSC  78.0
07A3:  GOTO   7BD
....................          if(giu_nha) while(!input(pin)); 
07A4:  MOVF   5C,F
07A5:  BTFSC  03.2
07A6:  GOTO   7B7
07A7:  MOVF   5D,W
07A8:  MOVWF  5F
07A9:  MOVLW  01
07AA:  MOVWF  60
07AB:  CLRF   62
07AC:  MOVLW  80
07AD:  MOVWF  61
07AE:  CALL   74C
07AF:  MOVF   5D,W
07B0:  MOVWF  5F
07B1:  CLRF   61
07B2:  CLRF   60
07B3:  CALL   76C
07B4:  BTFSS  78.0
07B5:  GOTO   7A7
07B6:  GOTO   7BA
....................          else delay_ms(5); 
07B7:  MOVLW  05
07B8:  MOVWF  62
07B9:  CALL   144
....................          return true;    
07BA:  MOVLW  01
07BB:  MOVWF  78
07BC:  GOTO   7C2
....................       } 
....................       return false; 
07BD:  MOVLW  00
07BE:  MOVWF  78
07BF:  GOTO   7C2
....................    } 
....................    return false; 
07C0:  MOVLW  00
07C1:  MOVWF  78
07C2:  RETURN
.................... } 
....................  
.................... #include <thu_vien_i2c_ds1307.c> 
.................... #define ds13_addr_wr 0xd0 
.................... #define ds13_addr_rd 0xd1 
....................  
.................... //cap nhat time: giay-phut-gio-thu-ngay-thang-nam-madk_msds 
.................... usi8 time_w[9]={0x31,0x15,0x15,0x04,0x25,0x10,0x23,0x90,0x92}; 
*
0AE6:  MOVLW  31
0AE7:  BCF    03.5
0AE8:  MOVWF  39
0AE9:  MOVLW  15
0AEA:  MOVWF  3A
0AEB:  MOVWF  3B
0AEC:  MOVLW  04
0AED:  MOVWF  3C
0AEE:  MOVLW  25
0AEF:  MOVWF  3D
0AF0:  MOVLW  10
0AF1:  MOVWF  3E
0AF2:  MOVLW  23
0AF3:  MOVWF  3F
0AF4:  MOVLW  90
0AF5:  MOVWF  40
0AF6:  MOVLW  92
0AF7:  MOVWF  41
.................... usi8 time_r[9]={0x30,0x30,0x10,0x08,0x20,0x02,0x20,0x90,0x96}; 
0AF8:  MOVLW  30
0AF9:  MOVWF  42
0AFA:  MOVWF  43
0AFB:  MOVLW  10
0AFC:  MOVWF  44
0AFD:  MOVLW  08
0AFE:  MOVWF  45
0AFF:  MOVLW  20
0B00:  MOVWF  46
0B01:  MOVLW  02
0B02:  MOVWF  47
0B03:  MOVLW  20
0B04:  MOVWF  48
0B05:  MOVLW  90
0B06:  MOVWF  49
0B07:  MOVLW  96
0B08:  MOVWF  4A
....................  
.................... #define dec_giay_eat  ds1307_bcdToDec(eat_ss) 
.................... #define dec_phut_eat  ds1307_bcdToDec(eat_pp) 
.................... #define dec_gio_eat   ds1307_bcdToDec(eat_hh) 
....................  
.................... #define dec_giay_ds  ds1307_bcdToDec(time_r[0]) 
.................... #define dec_phut_ds  ds1307_bcdToDec(time_r[1]) 
.................... #define dec_gio_ds   ds1307_bcdToDec(time_r[2]) 
.................... #define dec_thu_ds   ds1307_bcdToDec(time_r[3]) 
.................... #define dec_ngay_ds  ds1307_bcdToDec(time_r[4]) 
.................... #define dec_thang_ds ds1307_bcdToDec(time_r[5]) 
.................... #define dec_nam_ds   ds1307_bcdToDec(time_r[6]) 
....................  
.................... #define giay_ds  time_r[0] 
.................... #define phut_ds  time_r[1] 
.................... #define gio_ds   time_r[2] 
.................... #define thu_ds   time_r[3] 
.................... #define ngay_ds  time_r[4] 
.................... #define thang_ds time_r[5] 
.................... #define nam_ds   time_r[6] 
....................  
.................... #define ma_qd   time_w[8] 
.................... #define ma_ds   time_r[8] 
....................  
.................... usi8 ds1307_decToBcd(usi8 val) { 
....................     return ((val / 10 * 16) + (val % 10)); 
.................... } 
....................  
.................... usi8 ds1307_bcdToDec(usi8 val) { 
....................     return ((val / 16 * 10) + (val % 16)); 
*
07E8:  SWAPF  5E,W
07E9:  MOVWF  77
07EA:  MOVLW  0F
07EB:  ANDWF  77,F
07EC:  MOVF   77,W
07ED:  MOVWF  60
07EE:  MOVWF  62
07EF:  MOVLW  0A
07F0:  MOVWF  63
07F1:  CALL   7C3
07F2:  MOVF   78,W
07F3:  MOVWF  5F
07F4:  MOVF   5E,W
07F5:  ANDLW  0F
07F6:  ADDWF  78,W
07F7:  MOVWF  78
07F8:  RETURN
.................... } 
....................  
.................... void ds1307_read_time(usi8 j)      
.................... {    
....................    usi8 i;  
....................    i2c_start(); 
*
046D:  BSF    2B.4
046E:  MOVF   2B,W
046F:  BSF    03.5
0470:  MOVWF  07
0471:  MOVLW  04
0472:  MOVWF  77
0473:  DECFSZ 77,F
0474:  GOTO   473
0475:  BCF    03.5
0476:  BSF    2B.3
0477:  MOVF   2B,W
0478:  BSF    03.5
0479:  MOVWF  07
047A:  MOVLW  03
047B:  MOVWF  77
047C:  DECFSZ 77,F
047D:  GOTO   47C
047E:  BCF    03.5
047F:  BCF    07.4
0480:  BCF    2B.4
0481:  MOVF   2B,W
0482:  BSF    03.5
0483:  MOVWF  07
0484:  MOVLW  04
0485:  MOVWF  77
0486:  DECFSZ 77,F
0487:  GOTO   486
0488:  BCF    03.5
0489:  BCF    07.3
048A:  BCF    2B.3
048B:  MOVF   2B,W
048C:  BSF    03.5
048D:  MOVWF  07
....................    i2c_write(ds13_addr_wr); 
048E:  MOVLW  D0
048F:  MOVWF  28
0490:  BCF    03.5
0491:  CALL   0E8
....................    i2c_write(0x00);                      
0492:  BSF    03.5
0493:  CLRF   28
0494:  BCF    03.5
0495:  CALL   0E8
....................    i2c_start();                
0496:  BSF    2B.4
0497:  MOVF   2B,W
0498:  BSF    03.5
0499:  MOVWF  07
049A:  MOVLW  04
049B:  MOVWF  77
049C:  DECFSZ 77,F
049D:  GOTO   49C
049E:  BCF    03.5
049F:  BSF    2B.3
04A0:  MOVF   2B,W
04A1:  BSF    03.5
04A2:  MOVWF  07
04A3:  MOVLW  03
04A4:  MOVWF  77
04A5:  DECFSZ 77,F
04A6:  GOTO   4A5
04A7:  BCF    03.5
04A8:  BTFSS  07.3
04A9:  GOTO   4A8
04AA:  BCF    07.4
04AB:  BCF    2B.4
04AC:  MOVF   2B,W
04AD:  BSF    03.5
04AE:  MOVWF  07
04AF:  MOVLW  04
04B0:  MOVWF  77
04B1:  DECFSZ 77,F
04B2:  GOTO   4B1
04B3:  BCF    03.5
04B4:  BCF    07.3
04B5:  BCF    2B.3
04B6:  MOVF   2B,W
04B7:  BSF    03.5
04B8:  MOVWF  07
....................    i2c_write(ds13_addr_rd);                               
04B9:  MOVLW  D1
04BA:  MOVWF  28
04BB:  BCF    03.5
04BC:  CALL   0E8
....................    for(i=0;i<j;i++) time_r[i]=i2c_read(); 
04BD:  CLRF   5D
04BE:  MOVF   5C,W
04BF:  SUBWF  5D,W
04C0:  BTFSC  03.0
04C1:  GOTO   4CD
04C2:  MOVLW  42
04C3:  ADDWF  5D,W
04C4:  MOVWF  04
04C5:  BCF    03.7
04C6:  MOVLW  01
04C7:  MOVWF  77
04C8:  CALL   419
04C9:  MOVF   78,W
04CA:  MOVWF  00
04CB:  INCF   5D,F
04CC:  GOTO   4BE
....................                                   
....................    i = i2c_read(0); //not ack, don't care i   
04CD:  CLRF   77
04CE:  CALL   419
04CF:  MOVF   78,W
04D0:  MOVWF  5D
....................    i2c_stop(); 
04D1:  BCF    2B.4
04D2:  MOVF   2B,W
04D3:  BSF    03.5
04D4:  MOVWF  07
04D5:  NOP
04D6:  BCF    03.5
04D7:  BSF    2B.3
04D8:  MOVF   2B,W
04D9:  BSF    03.5
04DA:  MOVWF  07
04DB:  BCF    03.5
04DC:  BTFSS  07.3
04DD:  GOTO   4DC
04DE:  MOVLW  04
04DF:  MOVWF  77
04E0:  DECFSZ 77,F
04E1:  GOTO   4E0
04E2:  GOTO   4E3
04E3:  NOP
04E4:  BSF    2B.4
04E5:  MOVF   2B,W
04E6:  BSF    03.5
04E7:  MOVWF  07
04E8:  MOVLW  04
04E9:  MOVWF  77
04EA:  DECFSZ 77,F
04EB:  GOTO   4EA
04EC:  BCF    03.5
04ED:  RETURN
.................... } 
....................  
.................... void ds1307_update_time(int1 sel)                  
.................... {          
....................    usi8 i; 
....................    i2c_start(); 
*
04F7:  BSF    2B.4
04F8:  MOVF   2B,W
04F9:  BSF    03.5
04FA:  MOVWF  07
04FB:  MOVLW  04
04FC:  MOVWF  77
04FD:  DECFSZ 77,F
04FE:  GOTO   4FD
04FF:  BCF    03.5
0500:  BSF    2B.3
0501:  MOVF   2B,W
0502:  BSF    03.5
0503:  MOVWF  07
0504:  MOVLW  03
0505:  MOVWF  77
0506:  DECFSZ 77,F
0507:  GOTO   506
0508:  BCF    03.5
0509:  BCF    07.4
050A:  BCF    2B.4
050B:  MOVF   2B,W
050C:  BSF    03.5
050D:  MOVWF  07
050E:  MOVLW  04
050F:  MOVWF  77
0510:  DECFSZ 77,F
0511:  GOTO   510
0512:  BCF    03.5
0513:  BCF    07.3
0514:  BCF    2B.3
0515:  MOVF   2B,W
0516:  BSF    03.5
0517:  MOVWF  07
....................    i2c_write(ds13_addr_wr); 
0518:  MOVLW  D0
0519:  MOVWF  28
051A:  BCF    03.5
051B:  CALL   0E8
....................    i2c_write(0x00); 
051C:  BSF    03.5
051D:  CLRF   28
051E:  BCF    03.5
051F:  CALL   0E8
....................    for(i=0;i<9;i++)                           
0520:  CLRF   5D
0521:  MOVF   5D,W
0522:  SUBLW  08
0523:  BTFSS  03.0
0524:  GOTO   53F
....................    {   
....................       if(sel)  i2c_write(time_w[i]); 
0525:  MOVF   5C,F
0526:  BTFSC  03.2
0527:  GOTO   533
0528:  MOVLW  39
0529:  ADDWF  5D,W
052A:  MOVWF  04
052B:  BCF    03.7
052C:  MOVF   00,W
052D:  MOVWF  5E
052E:  BSF    03.5
052F:  MOVWF  28
0530:  BCF    03.5
0531:  CALL   0E8
0532:  GOTO   53D
....................       else     i2c_write(time_r[i]); 
0533:  MOVLW  42
0534:  ADDWF  5D,W
0535:  MOVWF  04
0536:  BCF    03.7
0537:  MOVF   00,W
0538:  MOVWF  5E
0539:  BSF    03.5
053A:  MOVWF  28
053B:  BCF    03.5
053C:  CALL   0E8
053D:  INCF   5D,F
053E:  GOTO   521
....................    }                                  
....................    i2c_stop();         
053F:  BCF    2B.4
0540:  MOVF   2B,W
0541:  BSF    03.5
0542:  MOVWF  07
0543:  NOP
0544:  BCF    03.5
0545:  BSF    2B.3
0546:  MOVF   2B,W
0547:  BSF    03.5
0548:  MOVWF  07
0549:  BCF    03.5
054A:  BTFSS  07.3
054B:  GOTO   54A
054C:  MOVLW  04
054D:  MOVWF  77
054E:  DECFSZ 77,F
054F:  GOTO   54E
0550:  GOTO   551
0551:  NOP
0552:  BSF    2B.4
0553:  MOVF   2B,W
0554:  BSF    03.5
0555:  MOVWF  07
0556:  MOVLW  04
0557:  MOVWF  77
0558:  DECFSZ 77,F
0559:  GOTO   558
055A:  BCF    03.5
.................... }   
....................  
.................... void ds1307_init()                                
.................... {                                               
....................    ds1307_read_time(9);           
*
04EE:  MOVLW  09
04EF:  MOVWF  5C
04F0:  CALL   46D
....................    if(ma_qd!=ma_ds) 
04F1:  MOVF   4A,W
04F2:  SUBWF  41,W
04F3:  BTFSC  03.2
04F4:  GOTO   55B
....................    { 
....................       ds1307_update_time(1); 
04F5:  MOVLW  01
04F6:  MOVWF  5C
....................    } 
*
055B:  BSF    0A.3
055C:  BCF    0A.4
055D:  GOTO   319 (RETURN)
.................... } 
....................  
.................... void ds1307_save_ds(usi8 dcdt,dt)                  
.................... {            
....................    i2c_start(); 
*
0A3A:  BSF    2B.4
0A3B:  MOVF   2B,W
0A3C:  BSF    03.5
0A3D:  MOVWF  07
0A3E:  MOVLW  04
0A3F:  MOVWF  77
0A40:  DECFSZ 77,F
0A41:  GOTO   240
0A42:  BCF    03.5
0A43:  BSF    2B.3
0A44:  MOVF   2B,W
0A45:  BSF    03.5
0A46:  MOVWF  07
0A47:  MOVLW  03
0A48:  MOVWF  77
0A49:  DECFSZ 77,F
0A4A:  GOTO   249
0A4B:  BCF    03.5
0A4C:  BCF    07.4
0A4D:  BCF    2B.4
0A4E:  MOVF   2B,W
0A4F:  BSF    03.5
0A50:  MOVWF  07
0A51:  MOVLW  04
0A52:  MOVWF  77
0A53:  DECFSZ 77,F
0A54:  GOTO   253
0A55:  BCF    03.5
0A56:  BCF    07.3
0A57:  BCF    2B.3
0A58:  MOVF   2B,W
0A59:  BSF    03.5
0A5A:  MOVWF  07
....................    i2c_write(ds13_addr_wr);         
0A5B:  MOVLW  D0
0A5C:  MOVWF  28
0A5D:  BCF    0A.3
0A5E:  BCF    03.5
0A5F:  CALL   0E8
0A60:  BSF    0A.3
....................    i2c_write(dcdt);     
0A61:  MOVF   5C,W
0A62:  BSF    03.5
0A63:  MOVWF  28
0A64:  BCF    0A.3
0A65:  BCF    03.5
0A66:  CALL   0E8
0A67:  BSF    0A.3
....................    i2c_write(dt); 
0A68:  MOVF   5D,W
0A69:  BSF    03.5
0A6A:  MOVWF  28
0A6B:  BCF    0A.3
0A6C:  BCF    03.5
0A6D:  CALL   0E8
0A6E:  BSF    0A.3
....................    i2c_stop(); 
0A6F:  BCF    2B.4
0A70:  MOVF   2B,W
0A71:  BSF    03.5
0A72:  MOVWF  07
0A73:  NOP
0A74:  BCF    03.5
0A75:  BSF    2B.3
0A76:  MOVF   2B,W
0A77:  BSF    03.5
0A78:  MOVWF  07
0A79:  BCF    03.5
0A7A:  BTFSS  07.3
0A7B:  GOTO   27A
0A7C:  MOVLW  04
0A7D:  MOVWF  77
0A7E:  DECFSZ 77,F
0A7F:  GOTO   27E
0A80:  GOTO   281
0A81:  NOP
0A82:  BSF    2B.4
0A83:  MOVF   2B,W
0A84:  BSF    03.5
0A85:  MOVWF  07
0A86:  MOVLW  04
0A87:  MOVWF  77
0A88:  DECFSZ 77,F
0A89:  GOTO   288
0A8A:  BCF    03.5
0A8B:  RETURN
.................... } 
....................  
.................... #include <thu_vien_i2c_lcd.c> 
.................... #define pcf8574_addr_wr 0x4E // 0b01001110 
.................... #define pcf8574_addr_rd 0x4F // 0b01001111 
....................  
.................... void i2c_reset() 
.................... { 
....................    i2c_start(); 
....................    i2c_stop(); 
.................... } 
....................  
.................... void i2c_setup_write() 
.................... { 
....................    i2c_start(); 
*
0280:  BSF    2B.4
0281:  MOVF   2B,W
0282:  BSF    03.5
0283:  MOVWF  07
0284:  MOVLW  04
0285:  MOVWF  77
0286:  DECFSZ 77,F
0287:  GOTO   286
0288:  BCF    03.5
0289:  BSF    2B.3
028A:  MOVF   2B,W
028B:  BSF    03.5
028C:  MOVWF  07
028D:  MOVLW  03
028E:  MOVWF  77
028F:  DECFSZ 77,F
0290:  GOTO   28F
0291:  BCF    03.5
0292:  BCF    07.4
0293:  BCF    2B.4
0294:  MOVF   2B,W
0295:  BSF    03.5
0296:  MOVWF  07
0297:  MOVLW  04
0298:  MOVWF  77
0299:  DECFSZ 77,F
029A:  GOTO   299
029B:  BCF    03.5
029C:  BCF    07.3
029D:  BCF    2B.3
029E:  MOVF   2B,W
029F:  BSF    03.5
02A0:  MOVWF  07
....................    i2c_write(pcf8574_addr_wr); 
02A1:  MOVLW  4E
02A2:  MOVWF  28
02A3:  BCF    03.5
02A4:  CALL   0E8
.................... } 
....................  
.................... void i2c_write_1byte(usi8 payload) 
.................... { 
....................    i2c_start(); 
*
0162:  BCF    03.5
0163:  BSF    2B.4
0164:  MOVF   2B,W
0165:  BSF    03.5
0166:  MOVWF  07
0167:  MOVLW  04
0168:  MOVWF  77
0169:  DECFSZ 77,F
016A:  GOTO   169
016B:  BCF    03.5
016C:  BSF    2B.3
016D:  MOVF   2B,W
016E:  BSF    03.5
016F:  MOVWF  07
0170:  MOVLW  03
0171:  MOVWF  77
0172:  DECFSZ 77,F
0173:  GOTO   172
0174:  BCF    03.5
0175:  BTFSS  07.3
0176:  GOTO   175
0177:  BCF    07.4
0178:  BCF    2B.4
0179:  MOVF   2B,W
017A:  BSF    03.5
017B:  MOVWF  07
017C:  MOVLW  04
017D:  MOVWF  77
017E:  DECFSZ 77,F
017F:  GOTO   17E
0180:  BCF    03.5
0181:  BCF    07.3
0182:  BCF    2B.3
0183:  MOVF   2B,W
0184:  BSF    03.5
0185:  MOVWF  07
*
01B8:  BCF    03.5
01B9:  BSF    2B.4
01BA:  MOVF   2B,W
01BB:  BSF    03.5
01BC:  MOVWF  07
01BD:  MOVLW  04
01BE:  MOVWF  77
01BF:  DECFSZ 77,F
01C0:  GOTO   1BF
01C1:  BCF    03.5
01C2:  BSF    2B.3
01C3:  MOVF   2B,W
01C4:  BSF    03.5
01C5:  MOVWF  07
01C6:  MOVLW  03
01C7:  MOVWF  77
01C8:  DECFSZ 77,F
01C9:  GOTO   1C8
01CA:  BCF    03.5
01CB:  BTFSS  07.3
01CC:  GOTO   1CB
01CD:  BCF    07.4
01CE:  BCF    2B.4
01CF:  MOVF   2B,W
01D0:  BSF    03.5
01D1:  MOVWF  07
01D2:  MOVLW  04
01D3:  MOVWF  77
01D4:  DECFSZ 77,F
01D5:  GOTO   1D4
01D6:  BCF    03.5
01D7:  BCF    07.3
01D8:  BCF    2B.3
01D9:  MOVF   2B,W
01DA:  BSF    03.5
01DB:  MOVWF  07
*
020F:  BCF    03.5
0210:  BSF    2B.4
0211:  MOVF   2B,W
0212:  BSF    03.5
0213:  MOVWF  07
0214:  MOVLW  04
0215:  MOVWF  77
0216:  DECFSZ 77,F
0217:  GOTO   216
0218:  BCF    03.5
0219:  BSF    2B.3
021A:  MOVF   2B,W
021B:  BSF    03.5
021C:  MOVWF  07
021D:  MOVLW  03
021E:  MOVWF  77
021F:  DECFSZ 77,F
0220:  GOTO   21F
0221:  BCF    03.5
0222:  BTFSS  07.3
0223:  GOTO   222
0224:  BCF    07.4
0225:  BCF    2B.4
0226:  MOVF   2B,W
0227:  BSF    03.5
0228:  MOVWF  07
0229:  MOVLW  04
022A:  MOVWF  77
022B:  DECFSZ 77,F
022C:  GOTO   22B
022D:  BCF    03.5
022E:  BCF    07.3
022F:  BCF    2B.3
0230:  MOVF   2B,W
0231:  BSF    03.5
0232:  MOVWF  07
*
02B6:  BCF    03.5
02B7:  BSF    2B.4
02B8:  MOVF   2B,W
02B9:  BSF    03.5
02BA:  MOVWF  07
02BB:  MOVLW  04
02BC:  MOVWF  77
02BD:  DECFSZ 77,F
02BE:  GOTO   2BD
02BF:  BCF    03.5
02C0:  BSF    2B.3
02C1:  MOVF   2B,W
02C2:  BSF    03.5
02C3:  MOVWF  07
02C4:  MOVLW  03
02C5:  MOVWF  77
02C6:  DECFSZ 77,F
02C7:  GOTO   2C6
02C8:  BCF    03.5
02C9:  BTFSS  07.3
02CA:  GOTO   2C9
02CB:  BCF    07.4
02CC:  BCF    2B.4
02CD:  MOVF   2B,W
02CE:  BSF    03.5
02CF:  MOVWF  07
02D0:  MOVLW  04
02D1:  MOVWF  77
02D2:  DECFSZ 77,F
02D3:  GOTO   2D2
02D4:  BCF    03.5
02D5:  BCF    07.3
02D6:  BCF    2B.3
02D7:  MOVF   2B,W
02D8:  BSF    03.5
02D9:  MOVWF  07
....................    i2c_write(pcf8574_addr_wr); 
*
0186:  MOVLW  4E
0187:  MOVWF  28
0188:  BCF    03.5
0189:  CALL   0E8
*
01DC:  MOVLW  4E
01DD:  MOVWF  28
01DE:  BCF    03.5
01DF:  CALL   0E8
*
0233:  MOVLW  4E
0234:  MOVWF  28
0235:  BCF    03.5
0236:  CALL   0E8
*
02DA:  MOVLW  4E
02DB:  MOVWF  28
02DC:  BCF    03.5
02DD:  CALL   0E8
....................    i2c_write(payload); 
*
018A:  BSF    03.5
018B:  MOVF   27,W
018C:  MOVWF  28
018D:  BCF    03.5
018E:  CALL   0E8
*
01E0:  BSF    03.5
01E1:  MOVF   27,W
01E2:  MOVWF  28
01E3:  BCF    03.5
01E4:  CALL   0E8
*
0237:  BSF    03.5
0238:  MOVF   27,W
0239:  MOVWF  28
023A:  BCF    03.5
023B:  CALL   0E8
*
02DE:  BSF    03.5
02DF:  MOVF   27,W
02E0:  MOVWF  28
02E1:  BCF    03.5
02E2:  CALL   0E8
....................    i2c_stop(); 
*
018F:  BCF    2B.4
0190:  MOVF   2B,W
0191:  BSF    03.5
0192:  MOVWF  07
0193:  NOP
0194:  BCF    03.5
0195:  BSF    2B.3
0196:  MOVF   2B,W
0197:  BSF    03.5
0198:  MOVWF  07
0199:  BCF    03.5
019A:  BTFSS  07.3
019B:  GOTO   19A
019C:  MOVLW  04
019D:  MOVWF  77
019E:  DECFSZ 77,F
019F:  GOTO   19E
01A0:  GOTO   1A1
01A1:  NOP
01A2:  BSF    2B.4
01A3:  MOVF   2B,W
01A4:  BSF    03.5
01A5:  MOVWF  07
01A6:  MOVLW  04
01A7:  MOVWF  77
01A8:  DECFSZ 77,F
01A9:  GOTO   1A8
*
01E5:  BCF    2B.4
01E6:  MOVF   2B,W
01E7:  BSF    03.5
01E8:  MOVWF  07
01E9:  NOP
01EA:  BCF    03.5
01EB:  BSF    2B.3
01EC:  MOVF   2B,W
01ED:  BSF    03.5
01EE:  MOVWF  07
01EF:  BCF    03.5
01F0:  BTFSS  07.3
01F1:  GOTO   1F0
01F2:  MOVLW  04
01F3:  MOVWF  77
01F4:  DECFSZ 77,F
01F5:  GOTO   1F4
01F6:  GOTO   1F7
01F7:  NOP
01F8:  BSF    2B.4
01F9:  MOVF   2B,W
01FA:  BSF    03.5
01FB:  MOVWF  07
01FC:  MOVLW  04
01FD:  MOVWF  77
01FE:  DECFSZ 77,F
01FF:  GOTO   1FE
*
023C:  BCF    2B.4
023D:  MOVF   2B,W
023E:  BSF    03.5
023F:  MOVWF  07
0240:  NOP
0241:  BCF    03.5
0242:  BSF    2B.3
0243:  MOVF   2B,W
0244:  BSF    03.5
0245:  MOVWF  07
0246:  BCF    03.5
0247:  BTFSS  07.3
0248:  GOTO   247
0249:  MOVLW  04
024A:  MOVWF  77
024B:  DECFSZ 77,F
024C:  GOTO   24B
024D:  GOTO   24E
024E:  NOP
024F:  BSF    2B.4
0250:  MOVF   2B,W
0251:  BSF    03.5
0252:  MOVWF  07
0253:  MOVLW  04
0254:  MOVWF  77
0255:  DECFSZ 77,F
0256:  GOTO   255
*
02E3:  BCF    2B.4
02E4:  MOVF   2B,W
02E5:  BSF    03.5
02E6:  MOVWF  07
02E7:  NOP
02E8:  BCF    03.5
02E9:  BSF    2B.3
02EA:  MOVF   2B,W
02EB:  BSF    03.5
02EC:  MOVWF  07
02ED:  BCF    03.5
02EE:  BTFSS  07.3
02EF:  GOTO   2EE
02F0:  MOVLW  04
02F1:  MOVWF  77
02F2:  DECFSZ 77,F
02F3:  GOTO   2F2
02F4:  GOTO   2F5
02F5:  NOP
02F6:  BSF    2B.4
02F7:  MOVF   2B,W
02F8:  BSF    03.5
02F9:  MOVWF  07
02FA:  MOVLW  04
02FB:  MOVWF  77
02FC:  DECFSZ 77,F
02FD:  GOTO   2FC
.................... } 
....................  
.................... #include <thu_vien_lcd_1602.c> 
.................... #define lcd_cols 16 
.................... #define lcd_rows 2 
....................  
.................... // commands 
.................... #define LCD_CLEARDISPLAY 0x01 
.................... #define LCD_RETURNHOME 0x02 
.................... #define LCD_ENTRYMODESET 0x04 
.................... #define LCD_DISPLAYCONTROL 0x08 
.................... #define LCD_CURSORSHIFT 0x10 
.................... #define LCD_FUNCTIONSET 0x20 
.................... #define LCD_SETCGRAMADDR 0x40 
.................... #define LCD_SETDDRAMADDR 0x80 
....................  
.................... // flags for display entry mode 
.................... #define LCD_ENTRYRIGHT 0x00 
.................... #define LCD_ENTRYLEFT 0x02 
.................... #define LCD_ENTRYSHIFTINCREMENT 0x01 
.................... #define LCD_ENTRYSHIFTDECREMENT 0x00 
....................  
.................... // flags for display on/off control 
.................... #define LCD_DISPLAYON 0x04 
.................... #define LCD_DISPLAYOFF 0x00 
.................... #define LCD_CURSORON 0x02 
.................... #define LCD_CURSOROFF 0x00 
.................... #define LCD_BLINKON 0x01 
.................... #define LCD_BLINKOFF 0x00 
....................  
.................... // flags for display/cursor shift 
.................... #define LCD_DISPLAYMOVE 0x08 
.................... #define LCD_CURSORMOVE 0x00 
.................... #define LCD_MOVERIGHT 0x04 
.................... #define LCD_MOVELEFT 0x00 
....................  
.................... // flags for function set 
.................... #define LCD_8BITMODE 0x10 
.................... #define LCD_4BITMODE 0x00 
.................... #define LCD_2LINE 0x08 
.................... #define LCD_1LINE 0x00 
.................... #define LCD_5x10DOTS 0x04 
.................... #define LCD_5x8DOTS 0x00 
....................  
.................... // flags for backlight control 
.................... #define LCD_BACKLIGHT 0x08 
.................... #define LCD_NOBACKLIGHT 0x00 
....................  
.................... #define En 0B00000100  // Enable bit 
.................... #define Rw 0B00000010  // Read/Write bit 
.................... #define Rs 0B00000001  // Register select bit 
....................  
.................... void write4bits(usi8 value); 
.................... void expanderWrite(usi8 _data); 
.................... void pulseEnable(usi8 _data); 
.................... void lcd_command(usi8 value); 
.................... void lcd_display(); 
.................... void lcd_clear(); 
.................... void lcd_home(); 
.................... void lcd_send(usi8 value, usi8 mode); 
.................... void lcd_data(usi8 value); 
....................  
.................... usi8 _displayfunction; 
.................... usi8 _displaycontrol; 
.................... usi8 _displaymode; 
.................... usi8 _numlines; 
.................... usi8 _cols; 
.................... usi8 _rows; 
.................... usi8 _backlightval; 
....................  
.................... void lcd_init(){ 
....................    _cols = lcd_cols; // 16 
*
027B:  MOVLW  10
027C:  MOVWF  4F
....................    _rows = lcd_rows; // 2 
027D:  MOVLW  02
027E:  MOVWF  50
....................    _backlightval = LCD_NOBACKLIGHT; // back light is off 
027F:  CLRF   51
....................     
....................    i2c_setup_write(); // setup i2c 
....................    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS; 
*
02A5:  CLRF   4B
....................     
....................    _displayfunction |= LCD_2LINE; 
02A6:  BSF    4B.3
....................    _numlines = _rows; // 2 
02A7:  MOVF   50,W
02A8:  MOVWF  4E
....................     
....................    delay_ms(40); 
02A9:  MOVLW  28
02AA:  MOVWF  62
02AB:  CALL   144
....................     
....................    expanderWrite(_backlightval); // back light is on 
02AC:  MOVF   51,W
02AD:  BSF    03.5
02AE:  MOVWF  25
....................    delay_ms(100); 
*
02FE:  MOVLW  64
02FF:  BCF    03.5
0300:  MOVWF  62
0301:  CALL   144
....................     
....................    //It is try to set use 4bit in 3 time 
....................    write4bits(0x03 << 4); 
0302:  MOVLW  30
0303:  BSF    03.5
0304:  MOVWF  22
0305:  BCF    03.5
0306:  CALL   158
....................    delay_ms(5); 
0307:  MOVLW  05
0308:  MOVWF  62
0309:  CALL   144
....................     
....................    write4bits(0x03 << 4); 
030A:  MOVLW  30
030B:  BSF    03.5
030C:  MOVWF  22
030D:  BCF    03.5
030E:  CALL   158
....................    delay_ms(5); 
030F:  MOVLW  05
0310:  MOVWF  62
0311:  CALL   144
....................     
....................    write4bits(0x03 << 4); 
0312:  MOVLW  30
0313:  BSF    03.5
0314:  MOVWF  22
0315:  BCF    03.5
0316:  CALL   158
....................    delay_ms(5); 
0317:  MOVLW  05
0318:  MOVWF  62
0319:  CALL   144
....................     
....................    write4bits(0x02 << 4); // set using 4bit for lcd16x2 
031A:  MOVLW  20
031B:  BSF    03.5
031C:  MOVWF  22
031D:  BCF    03.5
031E:  CALL   158
....................     
....................    lcd_command(LCD_FUNCTIONSET | _displayfunction); 
031F:  MOVF   4B,W
0320:  IORLW  20
0321:  MOVWF  5C
0322:  MOVWF  7B
0323:  CALL   25F
....................     
....................    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF; 
0324:  MOVLW  04
0325:  MOVWF  4C
....................    lcd_display(); 
....................     
....................    lcd_clear(); 
....................     
....................    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT; 
*
0332:  MOVLW  02
0333:  MOVWF  4D
....................    lcd_command(LCD_ENTRYMODESET | _displaymode); 
0334:  MOVF   4D,W
0335:  IORLW  04
0336:  MOVWF  5C
0337:  MOVWF  7B
0338:  CALL   25F
....................     
....................    lcd_home(); 
*
033F:  BSF    0A.3
0340:  BCF    0A.4
0341:  GOTO   30E (RETURN)
.................... } 
....................  
.................... void lcd_clear(){ 
....................    lcd_command(LCD_CLEARDISPLAY); 
*
032C:  MOVLW  01
032D:  MOVWF  7B
032E:  CALL   25F
*
0410:  MOVLW  01
0411:  MOVWF  7B
0412:  CALL   25F
*
0B42:  MOVLW  01
0B43:  MOVWF  7B
0B44:  BCF    0A.3
0B45:  CALL   25F
0B46:  BSF    0A.3
....................    delay_ms(20); 
*
032F:  MOVLW  14
0330:  MOVWF  62
0331:  CALL   144
*
0413:  MOVLW  14
0414:  MOVWF  62
0415:  CALL   144
*
0B47:  MOVLW  14
0B48:  MOVWF  62
0B49:  BCF    0A.3
0B4A:  CALL   144
0B4B:  BSF    0A.3
.................... } 
....................  
.................... void lcd_home(){ 
....................    lcd_command(LCD_RETURNHOME); 
*
0339:  MOVLW  02
033A:  MOVWF  7B
033B:  CALL   25F
....................    delay_ms(20); 
033C:  MOVLW  14
033D:  MOVWF  62
033E:  CALL   144
.................... } 
....................  
.................... void lcd_setCursor(usi8 col, usi8 row){ 
....................    int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 }; 
*
0342:  CLRF   72
0343:  MOVLW  40
0344:  MOVWF  73
0345:  MOVLW  14
0346:  MOVWF  74
0347:  MOVLW  54
0348:  MOVWF  75
....................    if ( row > _numlines ) { 
0349:  MOVF   71,W
034A:  SUBWF  4E,W
034B:  BTFSC  03.0
034C:  GOTO   350
....................       row = _numlines-1; 
034D:  MOVLW  01
034E:  SUBWF  4E,W
034F:  MOVWF  71
....................    } 
....................    lcd_command(LCD_SETDDRAMADDR | (col + row_offsets[row])); 
0350:  MOVLW  72
0351:  ADDWF  71,W
0352:  MOVWF  04
0353:  BCF    03.7
0354:  MOVF   00,W
0355:  ADDWF  70,W
0356:  IORLW  80
0357:  MOVWF  76
0358:  MOVWF  7B
0359:  CALL   25F
035A:  RETURN
.................... } 
....................  
.................... void lcd_display() { 
....................    _displaycontrol |= LCD_DISPLAYON; 
*
0326:  BSF    4C.2
....................    lcd_command(LCD_DISPLAYCONTROL | _displaycontrol); 
0327:  MOVF   4C,W
0328:  IORLW  08
0329:  MOVWF  5C
032A:  MOVWF  7B
032B:  CALL   25F
.................... } 
....................  
.................... void lcd_command(usi8 value){ 
....................    lcd_send(value,0); 
*
025F:  MOVF   7B,W
0260:  MOVWF  7C
0261:  CLRF   7D
*
027A:  RETURN
.................... } 
....................  
.................... void lcd_data(usi8 value){ 
....................    lcd_send(value,Rs); 
*
035B:  MOVF   73,W
035C:  MOVWF  7C
035D:  MOVLW  01
035E:  MOVWF  7D
*
0377:  RETURN
.................... } 
....................  
.................... void lcd_send(usi8 value, usi8 mode) { 
*
0262:  MOVF   7C,W
0263:  ANDLW  F0
0264:  MOVWF  7E
0265:  SWAPF  7C,W
0266:  MOVWF  77
0267:  MOVLW  F0
0268:  ANDWF  77,F
0269:  MOVF   77,W
026A:  ANDLW  F0
026B:  BSF    03.5
026C:  MOVWF  20
*
035F:  MOVF   7C,W
0360:  ANDLW  F0
0361:  MOVWF  7E
0362:  SWAPF  7C,W
0363:  MOVWF  77
0364:  MOVLW  F0
0365:  ANDWF  77,F
0366:  MOVF   77,W
0367:  ANDLW  F0
0368:  BSF    03.5
0369:  MOVWF  20
....................    usi8 highnib=value&0xf0; 
....................    usi8 lownib=(value<<4)&0xf0; 
....................    write4bits((highnib)|mode); 
*
026D:  MOVF   7E,W
026E:  IORWF  7D,W
026F:  MOVWF  21
0270:  MOVWF  22
0271:  BCF    03.5
0272:  CALL   158
*
036A:  MOVF   7E,W
036B:  IORWF  7D,W
036C:  MOVWF  21
036D:  MOVWF  22
036E:  BCF    03.5
036F:  CALL   158
....................    write4bits((lownib)|mode);  
*
0273:  BSF    03.5
0274:  MOVF   20,W
0275:  IORWF  7D,W
0276:  MOVWF  21
0277:  MOVWF  22
0278:  BCF    03.5
0279:  CALL   158
*
0370:  BSF    03.5
0371:  MOVF   20,W
0372:  IORWF  7D,W
0373:  MOVWF  21
0374:  MOVWF  22
0375:  BCF    03.5
0376:  CALL   158
.................... } 
....................  
.................... void write4bits(usi8 value) { 
....................    expanderWrite(value); 
*
0158:  BSF    03.5
0159:  MOVF   22,W
015A:  MOVWF  25
....................    pulseEnable(value); 
*
01AA:  MOVF   22,W
01AB:  MOVWF  23
*
025D:  BCF    03.5
025E:  RETURN
.................... } 
....................  
.................... void expanderWrite(usi8 _data){ 
....................    i2c_write_1byte(_data|_backlightval); 
*
015B:  MOVF   25,W
015C:  BCF    03.5
015D:  IORWF  51,W
015E:  BSF    03.5
015F:  MOVWF  26
0160:  MOVF   26,W
0161:  MOVWF  27
*
01B1:  MOVF   25,W
01B2:  BCF    03.5
01B3:  IORWF  51,W
01B4:  BSF    03.5
01B5:  MOVWF  26
01B6:  MOVF   26,W
01B7:  MOVWF  27
*
0208:  MOVF   25,W
0209:  BCF    03.5
020A:  IORWF  51,W
020B:  BSF    03.5
020C:  MOVWF  26
020D:  MOVF   26,W
020E:  MOVWF  27
*
02AF:  MOVF   25,W
02B0:  BCF    03.5
02B1:  IORWF  51,W
02B2:  BSF    03.5
02B3:  MOVWF  26
02B4:  MOVF   26,W
02B5:  MOVWF  27
.................... } 
....................  
.................... void pulseEnable(usi8 _data){ 
....................    expanderWrite(_data | En); 
*
01AC:  MOVF   23,W
01AD:  IORLW  04
01AE:  MOVWF  24
01AF:  MOVF   24,W
01B0:  MOVWF  25
....................    delay_us(1); 
*
0200:  GOTO   201
0201:  GOTO   202
0202:  NOP
....................    expanderWrite(_data & ~En); 
0203:  MOVF   23,W
0204:  ANDLW  FB
0205:  MOVWF  24
0206:  MOVF   24,W
0207:  MOVWF  25
....................    delay_us(50); 
*
0257:  MOVLW  52
0258:  MOVWF  77
0259:  DECFSZ 77,F
025A:  GOTO   259
025B:  GOTO   25C
025C:  NOP
.................... } 
....................  
.................... /* Library modify in User*/ 
.................... void lcd_log_info(usi16 time_s, bool ena_time){ 
....................    lcd_setCursor(1,0); 
*
03DD:  MOVLW  01
03DE:  MOVWF  70
03DF:  CLRF   71
03E0:  CALL   342
....................    lcd_data("Do an 1 - HKII"); 
03E1:  MOVLW  5B
03E2:  BSF    03.6
03E3:  MOVWF  0D
03E4:  MOVLW  00
03E5:  MOVWF  0F
03E6:  BCF    03.6
03E7:  CALL   378
....................    lcd_setCursor(3,1); 
03E8:  MOVLW  03
03E9:  MOVWF  70
03EA:  MOVLW  01
03EB:  MOVWF  71
03EC:  CALL   342
....................    lcd_data("SPKT-TPHCM"); 
03ED:  MOVLW  63
03EE:  BSF    03.6
03EF:  MOVWF  0D
03F0:  MOVLW  00
03F1:  MOVWF  0F
03F2:  BCF    03.6
03F3:  CALL   378
....................    if(ena_time == enable){ 
03F4:  DECFSZ 5E,W
03F5:  GOTO   416
....................       delay_ms(time_s*1000); 
03F6:  MOVF   5D,W
03F7:  MOVWF  60
03F8:  MOVF   5C,W
03F9:  MOVWF  5F
03FA:  MOVLW  03
03FB:  MOVWF  62
03FC:  MOVLW  E8
03FD:  MOVWF  61
03FE:  CALL   3C8
03FF:  MOVF   79,W
0400:  MOVWF  60
0401:  MOVF   78,W
0402:  MOVWF  5F
0403:  MOVF   79,W
0404:  MOVWF  61
0405:  INCF   61,F
0406:  DECF   61,F
0407:  BTFSC  03.2
0408:  GOTO   40D
0409:  MOVLW  FF
040A:  MOVWF  62
040B:  CALL   144
040C:  GOTO   406
040D:  MOVF   5F,W
040E:  MOVWF  62
040F:  CALL   144
....................       lcd_clear(); 
....................    } 
*
0416:  BSF    0A.3
0417:  BCF    0A.4
0418:  GOTO   316 (RETURN)
.................... } 
.................... void lcd_dis_2num_dot(usi16 dt, int8 x, int8 y, bool is_xvn, bool is_dot){ 
....................    usi8 ch, dv; 
....................    lcd_setCursor(x, y); 
*
0895:  MOVF   5E,W
0896:  MOVWF  70
0897:  MOVF   5F,W
0898:  MOVWF  71
0899:  BCF    0A.3
089A:  CALL   342
089B:  BSF    0A.3
....................    ch = dt/10 + 0x30; 
089C:  MOVF   5D,W
089D:  MOVWF  68
089E:  MOVF   5C,W
089F:  MOVWF  67
08A0:  CLRF   6A
08A1:  MOVLW  0A
08A2:  MOVWF  69
08A3:  BCF    0A.3
08A4:  CALL   69C
08A5:  BSF    0A.3
08A6:  MOVLW  30
08A7:  ADDWF  78,W
08A8:  MOVWF  62
....................    dv = dt%10 + 0x30; 
08A9:  MOVF   5D,W
08AA:  MOVWF  68
08AB:  MOVF   5C,W
08AC:  MOVWF  67
08AD:  CLRF   6A
08AE:  MOVLW  0A
08AF:  MOVWF  69
08B0:  BCF    0A.3
08B1:  CALL   69C
08B2:  BSF    0A.3
08B3:  MOVLW  30
08B4:  ADDWF  77,W
08B5:  MOVWF  63
....................    if(is_xvn == enable) if(ch == 0x30) ch = " "; 
08B6:  DECFSZ 60,W
08B7:  GOTO   0BE
08B8:  MOVF   62,W
08B9:  SUBLW  30
08BA:  BTFSS  03.2
08BB:  GOTO   0BE
08BC:  MOVLW  20
08BD:  MOVWF  62
....................    if(is_dot == enable) lcd_data("."); 
08BE:  DECFSZ 61,W
08BF:  GOTO   0C9
08C0:  MOVLW  69
08C1:  BSF    03.6
08C2:  MOVWF  0D
08C3:  MOVLW  00
08C4:  MOVWF  0F
08C5:  BCF    0A.3
08C6:  BCF    03.6
08C7:  CALL   378
08C8:  BSF    0A.3
....................    lcd_data(ch); lcd_data(dv); 
08C9:  MOVF   62,W
08CA:  MOVWF  73
08CB:  BCF    0A.3
08CC:  CALL   35B
08CD:  BSF    0A.3
08CE:  MOVF   63,W
08CF:  MOVWF  73
08D0:  BCF    0A.3
08D1:  CALL   35B
08D2:  BSF    0A.3
08D3:  RETURN
.................... } 
.................... void lcd_dis_3num_dot(usi16 dt, int8 x, int8 y, bool is_xvn, bool is_dot){ 
....................    usi8 tr, ch, dv; 
....................    lcd_setCursor(x, y); //xxx /10 -> xx  
08D4:  MOVF   5E,W
08D5:  MOVWF  70
08D6:  MOVF   5F,W
08D7:  MOVWF  71
08D8:  BCF    0A.3
08D9:  CALL   342
08DA:  BSF    0A.3
....................    tr = dt/100 + 0x30;  
08DB:  MOVF   5D,W
08DC:  MOVWF  68
08DD:  MOVF   5C,W
08DE:  MOVWF  67
08DF:  CLRF   6A
08E0:  MOVLW  64
08E1:  MOVWF  69
08E2:  BCF    0A.3
08E3:  CALL   69C
08E4:  BSF    0A.3
08E5:  MOVLW  30
08E6:  ADDWF  78,W
08E7:  MOVWF  62
....................    ch = dt/10%10  + 0x30; 
08E8:  MOVF   5D,W
08E9:  MOVWF  68
08EA:  MOVF   5C,W
08EB:  MOVWF  67
08EC:  CLRF   6A
08ED:  MOVLW  0A
08EE:  MOVWF  69
08EF:  BCF    0A.3
08F0:  CALL   69C
08F1:  BSF    0A.3
08F2:  MOVF   79,W
08F3:  MOVWF  66
08F4:  MOVF   78,W
08F5:  MOVWF  65
08F6:  MOVF   79,W
08F7:  MOVWF  68
08F8:  MOVF   78,W
08F9:  MOVWF  67
08FA:  CLRF   6A
08FB:  MOVLW  0A
08FC:  MOVWF  69
08FD:  BCF    0A.3
08FE:  CALL   69C
08FF:  BSF    0A.3
0900:  MOVLW  30
0901:  ADDWF  77,W
0902:  MOVWF  63
....................    dv = dt%10     + 0x30; 
0903:  MOVF   5D,W
0904:  MOVWF  68
0905:  MOVF   5C,W
0906:  MOVWF  67
0907:  CLRF   6A
0908:  MOVLW  0A
0909:  MOVWF  69
090A:  BCF    0A.3
090B:  CALL   69C
090C:  BSF    0A.3
090D:  MOVLW  30
090E:  ADDWF  77,W
090F:  MOVWF  64
....................    if(is_xvn == enable) if(tr == 0x30){ 
0910:  DECFSZ 60,W
0911:  GOTO   11E
0912:  MOVF   62,W
0913:  SUBLW  30
0914:  BTFSS  03.2
0915:  GOTO   11E
....................       tr = " "; 
0916:  MOVLW  20
0917:  MOVWF  62
....................       if(ch == 0x30) ch = " "; 
0918:  MOVF   63,W
0919:  SUBLW  30
091A:  BTFSS  03.2
091B:  GOTO   11E
091C:  MOVLW  20
091D:  MOVWF  63
....................    } 
....................    if(is_dot == enable) lcd_data("."); 
091E:  DECFSZ 61,W
091F:  GOTO   129
0920:  MOVLW  6A
0921:  BSF    03.6
0922:  MOVWF  0D
0923:  MOVLW  00
0924:  MOVWF  0F
0925:  BCF    0A.3
0926:  BCF    03.6
0927:  CALL   378
0928:  BSF    0A.3
....................    lcd_data(tr); lcd_data(ch); lcd_data(dv); 
0929:  MOVF   62,W
092A:  MOVWF  73
092B:  BCF    0A.3
092C:  CALL   35B
092D:  BSF    0A.3
092E:  MOVF   63,W
092F:  MOVWF  73
0930:  BCF    0A.3
0931:  CALL   35B
0932:  BSF    0A.3
0933:  MOVF   64,W
0934:  MOVWF  73
0935:  BCF    0A.3
0936:  CALL   35B
0937:  BSF    0A.3
0938:  RETURN
.................... } 
....................  
.................... void lcd_dis_xx_yy_zz(usi8 x, usi8 y, usi8 hh, usi8 pp, usi8 ss, bool e3, bool e2, bool e1){ 
....................    usi8 hh_ch, hh_dv, pp_ch, pp_dv, ss_ch, ss_dv; 
....................    hh_ch = e3 == true ? hh/10 + 0x30 : 0x20; hh_dv = e3 == true ? hh%10 + 0x30 : 0x20; 
*
0815:  DECFSZ 67,W
0816:  GOTO   01F
0817:  MOVF   64,W
0818:  MOVWF  70
0819:  MOVLW  0A
081A:  MOVWF  71
081B:  CALL   000
081C:  MOVLW  30
081D:  ADDWF  78,W
081E:  GOTO   020
081F:  MOVLW  20
0820:  MOVWF  6A
0821:  DECFSZ 67,W
0822:  GOTO   02B
0823:  MOVF   64,W
0824:  MOVWF  70
0825:  MOVLW  0A
0826:  MOVWF  71
0827:  CALL   000
0828:  MOVLW  30
0829:  ADDWF  77,W
082A:  GOTO   02C
082B:  MOVLW  20
082C:  MOVWF  6B
....................    pp_ch = e2 == true ? pp/10 + 0x30 : 0x20; pp_dv = e2 == true ? pp%10 + 0x30 : 0x20; 
082D:  DECFSZ 68,W
082E:  GOTO   037
082F:  MOVF   65,W
0830:  MOVWF  70
0831:  MOVLW  0A
0832:  MOVWF  71
0833:  CALL   000
0834:  MOVLW  30
0835:  ADDWF  78,W
0836:  GOTO   038
0837:  MOVLW  20
0838:  MOVWF  6C
0839:  DECFSZ 68,W
083A:  GOTO   043
083B:  MOVF   65,W
083C:  MOVWF  70
083D:  MOVLW  0A
083E:  MOVWF  71
083F:  CALL   000
0840:  MOVLW  30
0841:  ADDWF  77,W
0842:  GOTO   044
0843:  MOVLW  20
0844:  MOVWF  6D
....................    ss_ch = e1 == true ? ss/10 + 0x30 : 0x20; ss_dv = e1 == true ? ss%10 + 0x30 : 0x20; 
0845:  DECFSZ 69,W
0846:  GOTO   04F
0847:  MOVF   66,W
0848:  MOVWF  70
0849:  MOVLW  0A
084A:  MOVWF  71
084B:  CALL   000
084C:  MOVLW  30
084D:  ADDWF  78,W
084E:  GOTO   050
084F:  MOVLW  20
0850:  MOVWF  6E
0851:  DECFSZ 69,W
0852:  GOTO   05B
0853:  MOVF   66,W
0854:  MOVWF  70
0855:  MOVLW  0A
0856:  MOVWF  71
0857:  CALL   000
0858:  MOVLW  30
0859:  ADDWF  77,W
085A:  GOTO   05C
085B:  MOVLW  20
085C:  MOVWF  6F
....................    lcd_setCursor(x, y); 
085D:  MOVF   62,W
085E:  MOVWF  70
085F:  MOVF   63,W
0860:  MOVWF  71
0861:  BCF    0A.3
0862:  CALL   342
0863:  BSF    0A.3
....................    lcd_data(hh_ch); lcd_data(hh_dv); lcd_data("-"); 
0864:  MOVF   6A,W
0865:  MOVWF  73
0866:  BCF    0A.3
0867:  CALL   35B
0868:  BSF    0A.3
0869:  MOVF   6B,W
086A:  MOVWF  73
086B:  BCF    0A.3
086C:  CALL   35B
086D:  BSF    0A.3
086E:  MOVLW  6B
086F:  BSF    03.6
0870:  MOVWF  0D
0871:  MOVLW  00
0872:  MOVWF  0F
0873:  BCF    0A.3
0874:  BCF    03.6
0875:  CALL   378
0876:  BSF    0A.3
....................    lcd_data(pp_ch); lcd_data(pp_dv); lcd_data("-"); 
0877:  MOVF   6C,W
0878:  MOVWF  73
0879:  BCF    0A.3
087A:  CALL   35B
087B:  BSF    0A.3
087C:  MOVF   6D,W
087D:  MOVWF  73
087E:  BCF    0A.3
087F:  CALL   35B
0880:  BSF    0A.3
0881:  MOVLW  6C
0882:  BSF    03.6
0883:  MOVWF  0D
0884:  MOVLW  00
0885:  MOVWF  0F
0886:  BCF    0A.3
0887:  BCF    03.6
0888:  CALL   378
0889:  BSF    0A.3
....................    lcd_data(ss_ch); lcd_data(ss_dv); 
088A:  MOVF   6E,W
088B:  MOVWF  73
088C:  BCF    0A.3
088D:  CALL   35B
088E:  BSF    0A.3
088F:  MOVF   6F,W
0890:  MOVWF  73
0891:  BCF    0A.3
0892:  CALL   35B
0893:  BSF    0A.3
0894:  RETURN
.................... } 
.................... void log_code_ds1307(){ 
....................    lcd_setCursor(0, 0); 
....................    lcd_data(ma_qd/10 + 0x30); lcd_data(ma_qd%10 + 0x30); lcd_data("-"); 
....................    lcd_data(ma_ds/10 + 0x30); lcd_data(ma_ds%10 + 0x30); 
.................... } 
....................  
.................... #include <thu_vien_control_clock.c> 
.................... usi8 tang_or_giam_bcd(unsigned int8 x, int1 sel){ 
....................    usi8 y, dv, ch, v; 
....................    ch = (x>>4); 
*
0A0B:  SWAPF  5C,W
0A0C:  MOVWF  60
0A0D:  MOVLW  0F
0A0E:  ANDWF  60,F
....................    dv = x& 0x0f; 
0A0F:  MOVF   5C,W
0A10:  ANDLW  0F
0A11:  MOVWF  5F
....................    y = ch*10 + dv; 
0A12:  MOVF   60,W
0A13:  MOVWF  62
0A14:  MOVLW  0A
0A15:  MOVWF  63
0A16:  BCF    0A.3
0A17:  CALL   7C3
0A18:  BSF    0A.3
0A19:  MOVF   5F,W
0A1A:  ADDWF  78,W
0A1B:  MOVWF  5E
....................    if(sel == 0) y++; 
0A1C:  MOVF   5D,F
0A1D:  BTFSS  03.2
0A1E:  GOTO   221
0A1F:  INCF   5E,F
0A20:  GOTO   222
....................    else         y--; 
0A21:  DECF   5E,F
....................    ch = y/10; dv = y%10; 
0A22:  MOVF   5E,W
0A23:  MOVWF  70
0A24:  MOVLW  0A
0A25:  MOVWF  71
0A26:  CALL   000
0A27:  MOVF   78,W
0A28:  MOVWF  60
0A29:  MOVF   5E,W
0A2A:  MOVWF  70
0A2B:  MOVLW  0A
0A2C:  MOVWF  71
0A2D:  CALL   000
0A2E:  MOVF   77,W
0A2F:  MOVWF  5F
....................    v = (ch<<4)|dv; 
0A30:  SWAPF  60,W
0A31:  MOVWF  77
0A32:  MOVLW  F0
0A33:  ANDWF  77,F
0A34:  MOVF   77,W
0A35:  IORWF  5F,W
0A36:  MOVWF  61
....................    return v; 
0A37:  MOVF   61,W
0A38:  MOVWF  78
0A39:  RETURN
.................... } 
....................  
.................... void tat_bat_2led_chinh(){ 
....................    if(gt_mod == 1 || gt_mod == 4) { e_11 = ~e_11; e_22 = true; e_33 = true;} 
*
0C2F:  DECFSZ 30,W
0C30:  GOTO   432
0C31:  GOTO   436
0C32:  MOVF   30,W
0C33:  SUBLW  04
0C34:  BTFSS  03.2
0C35:  GOTO   43B
0C36:  MOVLW  01
0C37:  XORWF  32,F
0C38:  BSF    32.1
0C39:  BSF    32.2
0C3A:  GOTO   458
....................    else if(gt_mod == 2 || gt_mod == 5) { e_11 = true; e_22 = ~e_22; e_33 = true;} 
0C3B:  MOVF   30,W
0C3C:  SUBLW  02
0C3D:  BTFSC  03.2
0C3E:  GOTO   443
0C3F:  MOVF   30,W
0C40:  SUBLW  05
0C41:  BTFSS  03.2
0C42:  GOTO   448
0C43:  BSF    32.0
0C44:  MOVLW  02
0C45:  XORWF  32,F
0C46:  BSF    32.2
0C47:  GOTO   458
....................    else if(gt_mod == 3 || gt_mod == 6) { e_11 = true; e_22 = true; e_33 = ~e_33;} 
0C48:  MOVF   30,W
0C49:  SUBLW  03
0C4A:  BTFSC  03.2
0C4B:  GOTO   450
0C4C:  MOVF   30,W
0C4D:  SUBLW  06
0C4E:  BTFSS  03.2
0C4F:  GOTO   455
0C50:  BSF    32.0
0C51:  BSF    32.1
0C52:  MOVLW  04
0C53:  XORWF  32,F
0C54:  GOTO   458
....................    else { e_11 = true; e_22 = true; e_33 = true;} 
0C55:  BSF    32.0
0C56:  BSF    32.1
0C57:  BSF    32.2
.................... } 
....................  
.................... void giai_ma_gpg_lcd(){ 
....................    lcd_dis_xx_yy_zz(4,1,dec_gio_ds,dec_phut_ds,dec_giay_ds,e_33, e_22, e_11); 
*
0965:  MOVF   44,W
0966:  MOVWF  5E
0967:  BCF    0A.3
0968:  CALL   7E8
0969:  BSF    0A.3
096A:  MOVF   78,W
096B:  MOVWF  5C
096C:  MOVF   43,W
096D:  MOVWF  5E
096E:  BCF    0A.3
096F:  CALL   7E8
0970:  BSF    0A.3
0971:  MOVF   78,W
0972:  MOVWF  5D
0973:  MOVF   42,W
0974:  MOVWF  5E
0975:  BCF    0A.3
0976:  CALL   7E8
0977:  BSF    0A.3
0978:  MOVF   78,W
0979:  MOVWF  5E
097A:  MOVLW  00
097B:  BTFSC  32.2
097C:  MOVLW  01
097D:  MOVWF  5F
097E:  MOVLW  00
097F:  BTFSC  32.1
0980:  MOVLW  01
0981:  MOVWF  60
0982:  MOVLW  00
0983:  BTFSC  32.0
0984:  MOVLW  01
0985:  MOVWF  61
0986:  MOVLW  04
0987:  MOVWF  62
0988:  MOVLW  01
0989:  MOVWF  63
098A:  MOVF   5C,W
098B:  MOVWF  64
098C:  MOVF   5D,W
098D:  MOVWF  65
098E:  MOVF   78,W
098F:  MOVWF  66
0990:  MOVF   5F,W
0991:  MOVWF  67
0992:  MOVF   60,W
0993:  MOVWF  68
0994:  MOVF   61,W
0995:  MOVWF  69
0996:  CALL   015
0997:  RETURN
.................... } 
....................  
.................... void giai_ma_ntn_lcd(){ 
....................    lcd_dis_xx_yy_zz(4,1,dec_ngay_ds,dec_thang_ds,dec_nam_ds,e_33, e_22, e_11); 
0998:  MOVF   46,W
0999:  MOVWF  5E
099A:  BCF    0A.3
099B:  CALL   7E8
099C:  BSF    0A.3
099D:  MOVF   78,W
099E:  MOVWF  5C
099F:  MOVF   47,W
09A0:  MOVWF  5E
09A1:  BCF    0A.3
09A2:  CALL   7E8
09A3:  BSF    0A.3
09A4:  MOVF   78,W
09A5:  MOVWF  5D
09A6:  MOVF   48,W
09A7:  MOVWF  5E
09A8:  BCF    0A.3
09A9:  CALL   7E8
09AA:  BSF    0A.3
09AB:  MOVF   78,W
09AC:  MOVWF  5E
09AD:  MOVLW  00
09AE:  BTFSC  32.2
09AF:  MOVLW  01
09B0:  MOVWF  5F
09B1:  MOVLW  00
09B2:  BTFSC  32.1
09B3:  MOVLW  01
09B4:  MOVWF  60
09B5:  MOVLW  00
09B6:  BTFSC  32.0
09B7:  MOVLW  01
09B8:  MOVWF  61
09B9:  MOVLW  04
09BA:  MOVWF  62
09BB:  MOVLW  01
09BC:  MOVWF  63
09BD:  MOVF   5C,W
09BE:  MOVWF  64
09BF:  MOVF   5D,W
09C0:  MOVWF  65
09C1:  MOVF   78,W
09C2:  MOVWF  66
09C3:  MOVF   5F,W
09C4:  MOVWF  67
09C5:  MOVF   60,W
09C6:  MOVWF  68
09C7:  MOVF   61,W
09C8:  MOVWF  69
09C9:  CALL   015
09CA:  RETURN
.................... } 
....................  
.................... void giai_ma_thu_lcd(){ 
....................    lcd_dis_xx_yy_zz(4,1,0x00,dec_thu_ds,0x00,0, e_22, 0); 
09CB:  MOVF   45,W
09CC:  MOVWF  5E
09CD:  BCF    0A.3
09CE:  CALL   7E8
09CF:  BSF    0A.3
09D0:  MOVF   78,W
09D1:  MOVWF  5C
09D2:  MOVLW  00
09D3:  BTFSC  32.1
09D4:  MOVLW  01
09D5:  MOVWF  5D
09D6:  MOVLW  04
09D7:  MOVWF  62
09D8:  MOVLW  01
09D9:  MOVWF  63
09DA:  CLRF   64
09DB:  MOVF   78,W
09DC:  MOVWF  65
09DD:  CLRF   66
09DE:  CLRF   67
09DF:  MOVF   5D,W
09E0:  MOVWF  68
09E1:  CLRF   69
09E2:  CALL   015
09E3:  RETURN
.................... } 
....................  
.................... void giai_ma_gpg_ntn_thu_lcd(){ 
....................    if(gt_mod == 0){ 
09E4:  MOVF   30,F
09E5:  BTFSS  03.2
09E6:  GOTO   1F6
....................       if(tt_ht == 0 || tt_ht == 1) giai_ma_gpg_lcd(); 
09E7:  MOVF   2F,F
09E8:  BTFSC  03.2
09E9:  GOTO   1EC
09EA:  DECFSZ 2F,W
09EB:  GOTO   1ED
09EC:  CALL   165
....................       if(tt_ht == 2) giai_ma_ntn_lcd(); 
09ED:  MOVF   2F,W
09EE:  SUBLW  02
09EF:  BTFSC  03.2
09F0:  CALL   198
....................       if(tt_ht == 3) giai_ma_thu_lcd(); 
09F1:  MOVF   2F,W
09F2:  SUBLW  03
09F3:  BTFSC  03.2
09F4:  CALL   1CB
....................    } 
09F5:  GOTO   20A
....................    else{ 
....................       if(gt_mod < 4)       giai_ma_gpg_lcd(); 
09F6:  BTFSC  30.7
09F7:  GOTO   1FC
09F8:  MOVF   30,W
09F9:  SUBLW  03
09FA:  BTFSS  03.0
09FB:  GOTO   1FE
09FC:  CALL   165
09FD:  GOTO   20A
....................       else if(gt_mod < 7)  giai_ma_ntn_lcd(); 
09FE:  BTFSC  30.7
09FF:  GOTO   204
0A00:  MOVF   30,W
0A01:  SUBLW  06
0A02:  BTFSS  03.0
0A03:  GOTO   206
0A04:  CALL   198
0A05:  GOTO   20A
....................       else if(gt_mod == 7) giai_ma_thu_lcd(); 
0A06:  MOVF   30,W
0A07:  SUBLW  07
0A08:  BTFSC  03.2
0A09:  CALL   1CB
....................    } 
0A0A:  RETURN
.................... } 
....................  
.................... void xu_ly_choptat(){ 
....................    if(gt_mod != 0){ 
*
0C2C:  MOVF   30,F
0C2D:  BTFSC  03.2
0C2E:  GOTO   459
....................       tat_bat_2led_chinh(); 
....................    } 
*
0C58:  GOTO   45C
....................    else { e_11 = true; e_22 = true; e_33 = true;} 
0C59:  BSF    32.0
0C5A:  BSF    32.1
0C5B:  BSF    32.2
....................     
.................... } 
....................  
.................... void phim_chon_hthi_mode(){ 
....................    if(nhan_btn_nha(1, bt3)){ 
0C5C:  MOVLW  01
0C5D:  MOVWF  5C
0C5E:  MOVLW  33
0C5F:  MOVWF  5D
0C60:  BCF    0A.3
0C61:  CALL   783
0C62:  BSF    0A.3
0C63:  MOVF   78,F
0C64:  BTFSC  03.2
0C65:  GOTO   488
....................       tt_ht = 1; 
0C66:  MOVLW  01
0C67:  MOVWF  2F
....................       if(tt_ht == 1){ 
0C68:  DECFSZ 2F,W
0C69:  GOTO   486
....................          gt_mod++; 
0C6A:  INCF   30,F
....................          if(gt_mod < 4) tt_ht = 1; 
0C6B:  BTFSC  30.7
0C6C:  GOTO   471
0C6D:  MOVF   30,W
0C6E:  SUBLW  03
0C6F:  BTFSS  03.0
0C70:  GOTO   474
0C71:  MOVLW  01
0C72:  MOVWF  2F
0C73:  GOTO   486
....................          else if(gt_mod < 7) tt_ht = 2; 
0C74:  BTFSC  30.7
0C75:  GOTO   47A
0C76:  MOVF   30,W
0C77:  SUBLW  06
0C78:  BTFSS  03.0
0C79:  GOTO   47D
0C7A:  MOVLW  02
0C7B:  MOVWF  2F
0C7C:  GOTO   486
....................          else if(gt_mod == 7) tt_ht = 3; 
0C7D:  MOVF   30,W
0C7E:  SUBLW  07
0C7F:  BTFSS  03.2
0C80:  GOTO   484
0C81:  MOVLW  03
0C82:  MOVWF  2F
0C83:  GOTO   486
....................          else{ 
....................             gt_mod = 0; 
0C84:  CLRF   30
....................             tt_ht = 0; 
0C85:  CLRF   2F
....................          } 
....................       } 
....................       tg_chinh = 0; 
0C86:  CLRF   31
....................       giai_ma_gpg_ntn_thu_lcd(); 
0C87:  CALL   1E4
....................    } 
.................... } 
.................... void tang_giay(){ 
....................    if(giay_ds == 0x59) giay_ds = 0; 
*
0CA3:  MOVF   42,W
0CA4:  SUBLW  59
0CA5:  BTFSS  03.2
0CA6:  GOTO   4A9
0CA7:  CLRF   42
0CA8:  GOTO   4AF
....................    else giay_ds = tang_or_giam_bcd(giay_ds, tang); 
0CA9:  MOVF   42,W
0CAA:  MOVWF  5C
0CAB:  CLRF   5D
0CAC:  CALL   20B
0CAD:  MOVF   78,W
0CAE:  MOVWF  42
....................    ds1307_save_ds(0,giay_ds); 
0CAF:  CLRF   5C
0CB0:  MOVF   42,W
0CB1:  MOVWF  5D
0CB2:  CALL   23A
.................... } 
.................... void tang_phut(){ 
....................    if(phut_ds == 0x59) phut_ds = 0; 
*
0CB4:  MOVF   43,W
0CB5:  SUBLW  59
0CB6:  BTFSS  03.2
0CB7:  GOTO   4BA
0CB8:  CLRF   43
0CB9:  GOTO   4C0
....................    else phut_ds = tang_or_giam_bcd(phut_ds, tang); 
0CBA:  MOVF   43,W
0CBB:  MOVWF  5C
0CBC:  CLRF   5D
0CBD:  CALL   20B
0CBE:  MOVF   78,W
0CBF:  MOVWF  43
....................    ds1307_save_ds(1,phut_ds); 
0CC0:  MOVLW  01
0CC1:  MOVWF  5C
0CC2:  MOVF   43,W
0CC3:  MOVWF  5D
0CC4:  CALL   23A
.................... } 
.................... void tang_gio(){ 
....................    if(gio_ds == 0x23) gio_ds = 0; 
*
0CC6:  MOVF   44,W
0CC7:  SUBLW  23
0CC8:  BTFSS  03.2
0CC9:  GOTO   4CC
0CCA:  CLRF   44
0CCB:  GOTO   4D2
....................    else gio_ds = tang_or_giam_bcd(gio_ds, tang); 
0CCC:  MOVF   44,W
0CCD:  MOVWF  5C
0CCE:  CLRF   5D
0CCF:  CALL   20B
0CD0:  MOVF   78,W
0CD1:  MOVWF  44
....................    ds1307_save_ds(2,gio_ds); 
0CD2:  MOVLW  02
0CD3:  MOVWF  5C
0CD4:  MOVF   44,W
0CD5:  MOVWF  5D
0CD6:  CALL   23A
.................... } 
.................... void chinh_tang_gpg(){ 
....................    switch(gt_mod){ 
*
0C98:  MOVF   30,W
0C99:  XORLW  01
0C9A:  BTFSC  03.2
0C9B:  GOTO   4A3
0C9C:  XORLW  03
0C9D:  BTFSC  03.2
0C9E:  GOTO   4B4
0C9F:  XORLW  01
0CA0:  BTFSC  03.2
0CA1:  GOTO   4C6
0CA2:  GOTO   4D8
....................       case 1: 
....................          tang_giay(); 
....................          break; 
*
0CB3:  GOTO   4D8
....................       case 2: 
....................          tang_phut(); 
....................          break; 
*
0CC5:  GOTO   4D8
....................       case 3: 
....................          tang_gio(); 
....................          break; 
*
0CD7:  GOTO   4D8
....................       default: break; 
....................    } 
.................... } 
.................... void tang_nam(){ 
....................    if(nam_ds == 0x99) nam_ds = 0; 
*
0CEA:  MOVF   48,W
0CEB:  SUBLW  99
0CEC:  BTFSS  03.2
0CED:  GOTO   4F0
0CEE:  CLRF   48
0CEF:  GOTO   4F6
....................    else nam_ds = tang_or_giam_bcd(nam_ds, tang); 
0CF0:  MOVF   48,W
0CF1:  MOVWF  5C
0CF2:  CLRF   5D
0CF3:  CALL   20B
0CF4:  MOVF   78,W
0CF5:  MOVWF  48
....................    ds1307_save_ds(6,nam_ds); 
0CF6:  MOVLW  06
0CF7:  MOVWF  5C
0CF8:  MOVF   48,W
0CF9:  MOVWF  5D
0CFA:  CALL   23A
.................... } 
.................... void tang_thang(){ 
....................    if(thang_ds == 0x12) thang_ds = 1; 
*
0CFC:  MOVF   47,W
0CFD:  SUBLW  12
0CFE:  BTFSS  03.2
0CFF:  GOTO   503
0D00:  MOVLW  01
0D01:  MOVWF  47
0D02:  GOTO   509
....................    else thang_ds = tang_or_giam_bcd(thang_ds, tang); 
0D03:  MOVF   47,W
0D04:  MOVWF  5C
0D05:  CLRF   5D
0D06:  CALL   20B
0D07:  MOVF   78,W
0D08:  MOVWF  47
....................    ds1307_save_ds(5,thang_ds); 
0D09:  MOVLW  05
0D0A:  MOVWF  5C
0D0B:  MOVF   47,W
0D0C:  MOVWF  5D
0D0D:  CALL   23A
.................... } 
.................... void tang_ngay(){ 
....................    if(ngay_ds == 0x31) ngay_ds = 1; 
*
0D0F:  MOVF   46,W
0D10:  SUBLW  31
0D11:  BTFSS  03.2
0D12:  GOTO   516
0D13:  MOVLW  01
0D14:  MOVWF  46
0D15:  GOTO   51C
....................    else ngay_ds = tang_or_giam_bcd(ngay_ds, tang); 
0D16:  MOVF   46,W
0D17:  MOVWF  5C
0D18:  CLRF   5D
0D19:  CALL   20B
0D1A:  MOVF   78,W
0D1B:  MOVWF  46
....................    ds1307_save_ds(4,ngay_ds); 
0D1C:  MOVLW  04
0D1D:  MOVWF  5C
0D1E:  MOVF   46,W
0D1F:  MOVWF  5D
0D20:  CALL   23A
.................... } 
.................... void chinh_tang_ntn(){ 
....................    switch(gt_mod){ 
*
0CDF:  MOVF   30,W
0CE0:  XORLW  04
0CE1:  BTFSC  03.2
0CE2:  GOTO   4EA
0CE3:  XORLW  01
0CE4:  BTFSC  03.2
0CE5:  GOTO   4FC
0CE6:  XORLW  03
0CE7:  BTFSC  03.2
0CE8:  GOTO   50F
0CE9:  GOTO   522
....................       case 4: 
....................          tang_nam(); 
....................          break; 
*
0CFB:  GOTO   522
....................       case 5: 
....................          tang_thang(); 
....................          break; 
*
0D0E:  GOTO   522
....................       case 6: 
....................          tang_ngay(); 
....................          break; 
*
0D21:  GOTO   522
....................       default: break; 
....................    } 
.................... } 
.................... void chinh_tang_thu(){ 
....................    if(thu_ds == 8) thu_ds = 2; 
*
0D27:  MOVF   45,W
0D28:  SUBLW  08
0D29:  BTFSS  03.2
0D2A:  GOTO   52E
0D2B:  MOVLW  02
0D2C:  MOVWF  45
0D2D:  GOTO   52F
....................    else thu_ds++; 
0D2E:  INCF   45,F
....................    ds1307_save_ds(3,thu_ds); 
0D2F:  MOVLW  03
0D30:  MOVWF  5C
0D31:  MOVF   45,W
0D32:  MOVWF  5D
0D33:  CALL   23A
.................... } 
....................  
.................... void phim_up(){ 
....................    if(nhan_btn_giu(1, bt1)){ 
*
0C88:  CLRF   5D
0C89:  MOVLW  01
0C8A:  MOVWF  5C
0C8B:  MOVLW  31
0C8C:  MOVWF  5E
0C8D:  CALL   139
0C8E:  MOVF   78,F
0C8F:  BTFSC  03.2
0C90:  GOTO   538
....................       tg_chinh = 0; 
0C91:  CLRF   31
....................       if(gt_mod<4) chinh_tang_gpg(); 
0C92:  BTFSC  30.7
0C93:  GOTO   498
0C94:  MOVF   30,W
0C95:  SUBLW  03
0C96:  BTFSS  03.0
0C97:  GOTO   4D9
*
0CD8:  GOTO   534
....................       else if(gt_mod<7) chinh_tang_ntn(); 
0CD9:  BTFSC  30.7
0CDA:  GOTO   4DF
0CDB:  MOVF   30,W
0CDC:  SUBLW  06
0CDD:  BTFSS  03.0
0CDE:  GOTO   523
*
0D22:  GOTO   534
....................       else if(gt_mod==7) chinh_tang_thu(); 
0D23:  MOVF   30,W
0D24:  SUBLW  07
0D25:  BTFSS  03.2
0D26:  GOTO   534
....................       e_11 = true; e_22 = true; e_33 = true; 
*
0D34:  BSF    32.0
0D35:  BSF    32.1
0D36:  BSF    32.2
....................       giai_ma_gpg_ntn_thu_lcd(); 
0D37:  CALL   1E4
....................    } 
.................... } 
.................... void giam_giay(){ 
....................    if(giay_ds == 0) giay_ds = 0x59; 
*
0D53:  MOVF   42,F
0D54:  BTFSS  03.2
0D55:  GOTO   559
0D56:  MOVLW  59
0D57:  MOVWF  42
0D58:  GOTO   560
....................    else giay_ds = tang_or_giam_bcd(giay_ds,giam); 
0D59:  MOVF   42,W
0D5A:  MOVWF  5C
0D5B:  MOVLW  01
0D5C:  MOVWF  5D
0D5D:  CALL   20B
0D5E:  MOVF   78,W
0D5F:  MOVWF  42
....................    ds1307_save_ds(0,giay_ds); 
0D60:  CLRF   5C
0D61:  MOVF   42,W
0D62:  MOVWF  5D
0D63:  CALL   23A
.................... } 
.................... void giam_phut(){ 
....................    if(phut_ds == 0) phut_ds = 0x59; 
*
0D65:  MOVF   43,F
0D66:  BTFSS  03.2
0D67:  GOTO   56B
0D68:  MOVLW  59
0D69:  MOVWF  43
0D6A:  GOTO   572
....................    else phut_ds = tang_or_giam_bcd(phut_ds,giam); 
0D6B:  MOVF   43,W
0D6C:  MOVWF  5C
0D6D:  MOVLW  01
0D6E:  MOVWF  5D
0D6F:  CALL   20B
0D70:  MOVF   78,W
0D71:  MOVWF  43
....................    ds1307_save_ds(1,phut_ds); 
0D72:  MOVLW  01
0D73:  MOVWF  5C
0D74:  MOVF   43,W
0D75:  MOVWF  5D
0D76:  CALL   23A
.................... } 
.................... void giam_gio(){ 
....................    if(gio_ds == 0) gio_ds = 0x23; 
*
0D78:  MOVF   44,F
0D79:  BTFSS  03.2
0D7A:  GOTO   57E
0D7B:  MOVLW  23
0D7C:  MOVWF  44
0D7D:  GOTO   585
....................    else gio_ds = tang_or_giam_bcd(gio_ds,giam); 
0D7E:  MOVF   44,W
0D7F:  MOVWF  5C
0D80:  MOVLW  01
0D81:  MOVWF  5D
0D82:  CALL   20B
0D83:  MOVF   78,W
0D84:  MOVWF  44
....................    ds1307_save_ds(2,gio_ds); 
0D85:  MOVLW  02
0D86:  MOVWF  5C
0D87:  MOVF   44,W
0D88:  MOVWF  5D
0D89:  CALL   23A
.................... } 
.................... void chinh_giam_gpg(){ 
....................    switch(gt_mod){ 
*
0D48:  MOVF   30,W
0D49:  XORLW  01
0D4A:  BTFSC  03.2
0D4B:  GOTO   553
0D4C:  XORLW  03
0D4D:  BTFSC  03.2
0D4E:  GOTO   565
0D4F:  XORLW  01
0D50:  BTFSC  03.2
0D51:  GOTO   578
0D52:  GOTO   58B
....................       case 1: 
....................          giam_giay(); 
....................          break; 
*
0D64:  GOTO   58B
....................       case 2: 
....................          giam_phut(); 
....................          break; 
*
0D77:  GOTO   58B
....................       case 3: 
....................          giam_gio(); 
....................          break; 
*
0D8A:  GOTO   58B
....................       default: break; 
....................    } 
.................... } 
.................... void giam_nam(){ 
....................    if(nam_ds == 0x0) nam_ds = 0x99; 
*
0D9D:  MOVF   48,F
0D9E:  BTFSS  03.2
0D9F:  GOTO   5A3
0DA0:  MOVLW  99
0DA1:  MOVWF  48
0DA2:  GOTO   5AA
....................    else nam_ds = tang_or_giam_bcd(nam_ds, giam); 
0DA3:  MOVF   48,W
0DA4:  MOVWF  5C
0DA5:  MOVLW  01
0DA6:  MOVWF  5D
0DA7:  CALL   20B
0DA8:  MOVF   78,W
0DA9:  MOVWF  48
....................    ds1307_save_ds(6,nam_ds); 
0DAA:  MOVLW  06
0DAB:  MOVWF  5C
0DAC:  MOVF   48,W
0DAD:  MOVWF  5D
0DAE:  CALL   23A
.................... } 
.................... void giam_thang(){ 
....................    if(thang_ds == 0x1) thang_ds = 12; 
*
0DB0:  DECFSZ 47,W
0DB1:  GOTO   5B5
0DB2:  MOVLW  0C
0DB3:  MOVWF  47
0DB4:  GOTO   5BC
....................    else thang_ds = tang_or_giam_bcd(thang_ds, giam); 
0DB5:  MOVF   47,W
0DB6:  MOVWF  5C
0DB7:  MOVLW  01
0DB8:  MOVWF  5D
0DB9:  CALL   20B
0DBA:  MOVF   78,W
0DBB:  MOVWF  47
....................    ds1307_save_ds(5,thang_ds); 
0DBC:  MOVLW  05
0DBD:  MOVWF  5C
0DBE:  MOVF   47,W
0DBF:  MOVWF  5D
0DC0:  CALL   23A
.................... } 
.................... void giam_ngay(){ 
....................    if(ngay_ds == 0x1) ngay_ds = 21; 
*
0DC2:  DECFSZ 46,W
0DC3:  GOTO   5C7
0DC4:  MOVLW  15
0DC5:  MOVWF  46
0DC6:  GOTO   5CE
....................    else ngay_ds = tang_or_giam_bcd(ngay_ds, giam); 
0DC7:  MOVF   46,W
0DC8:  MOVWF  5C
0DC9:  MOVLW  01
0DCA:  MOVWF  5D
0DCB:  CALL   20B
0DCC:  MOVF   78,W
0DCD:  MOVWF  46
....................    ds1307_save_ds(4,ngay_ds); 
0DCE:  MOVLW  04
0DCF:  MOVWF  5C
0DD0:  MOVF   46,W
0DD1:  MOVWF  5D
0DD2:  CALL   23A
.................... } 
.................... void chinh_giam_ntn(){ 
....................    switch(gt_mod){ 
*
0D92:  MOVF   30,W
0D93:  XORLW  01
0D94:  BTFSC  03.2
0D95:  GOTO   59D
0D96:  XORLW  03
0D97:  BTFSC  03.2
0D98:  GOTO   5B0
0D99:  XORLW  01
0D9A:  BTFSC  03.2
0D9B:  GOTO   5C2
0D9C:  GOTO   5D4
....................       case 1: 
....................          giam_nam(); 
....................          break; 
*
0DAF:  GOTO   5D4
....................       case 2: 
....................          giam_thang(); 
....................          break; 
*
0DC1:  GOTO   5D4
....................       case 3: 
....................          giam_ngay(); 
....................          break; 
*
0DD3:  GOTO   5D4
....................       default: break; 
....................    } 
.................... } 
.................... void chinh_giam_thu(){ 
....................    if(thu_ds == 2) thu_ds = 8; 
*
0DD9:  MOVF   45,W
0DDA:  SUBLW  02
0DDB:  BTFSS  03.2
0DDC:  GOTO   5E0
0DDD:  MOVLW  08
0DDE:  MOVWF  45
0DDF:  GOTO   5E1
....................    else thu_ds--; 
0DE0:  DECF   45,F
....................    ds1307_save_ds(3,thu_ds); 
0DE1:  MOVLW  03
0DE2:  MOVWF  5C
0DE3:  MOVF   45,W
0DE4:  MOVWF  5D
0DE5:  CALL   23A
.................... } 
.................... void phim_dw(){ 
....................    if(nhan_btn_giu(1, bt2)){ 
*
0D38:  CLRF   5D
0D39:  MOVLW  01
0D3A:  MOVWF  5C
0D3B:  MOVLW  32
0D3C:  MOVWF  5E
0D3D:  CALL   139
0D3E:  MOVF   78,F
0D3F:  BTFSC  03.2
0D40:  GOTO   5EA
....................       tg_chinh = 0; 
0D41:  CLRF   31
....................       if(gt_mod<4) chinh_giam_gpg(); 
0D42:  BTFSC  30.7
0D43:  GOTO   548
0D44:  MOVF   30,W
0D45:  SUBLW  03
0D46:  BTFSS  03.0
0D47:  GOTO   58C
*
0D8B:  GOTO   5E6
....................       else if(gt_mod<7) chinh_giam_ntn(); 
0D8C:  BTFSC  30.7
0D8D:  GOTO   592
0D8E:  MOVF   30,W
0D8F:  SUBLW  06
0D90:  BTFSS  03.0
0D91:  GOTO   5D5
*
0DD4:  GOTO   5E6
....................       else if(gt_mod==7) chinh_giam_thu(); 
0DD5:  MOVF   30,W
0DD6:  SUBLW  07
0DD7:  BTFSS  03.2
0DD8:  GOTO   5E6
....................       e_11 = true; e_22 = true; e_33 = true; 
*
0DE6:  BSF    32.0
0DE7:  BSF    32.1
0DE8:  BSF    32.2
....................       giai_ma_gpg_ntn_thu_lcd(); 
0DE9:  CALL   1E4
....................    } 
.................... } 
.................... void log_mode(){ 
....................    lcd_setCursor(0, 1); 
*
0E04:  CLRF   70
0E05:  MOVLW  01
0E06:  MOVWF  71
0E07:  BCF    0A.3
0E08:  CALL   342
0E09:  BSF    0A.3
....................    if(tt_ht == 0) lcd_data(" N "); 
0E0A:  MOVF   2F,F
0E0B:  BTFSS  03.2
0E0C:  GOTO   617
0E0D:  MOVLW  6E
0E0E:  BSF    03.6
0E0F:  MOVWF  0D
0E10:  MOVLW  00
0E11:  MOVWF  0F
0E12:  BCF    0A.3
0E13:  BCF    03.6
0E14:  CALL   378
0E15:  BSF    0A.3
0E16:  GOTO   63E
....................    else if(tt_ht == 1) lcd_data("GPG"); 
0E17:  DECFSZ 2F,W
0E18:  GOTO   623
0E19:  MOVLW  70
0E1A:  BSF    03.6
0E1B:  MOVWF  0D
0E1C:  MOVLW  00
0E1D:  MOVWF  0F
0E1E:  BCF    0A.3
0E1F:  BCF    03.6
0E20:  CALL   378
0E21:  BSF    0A.3
0E22:  GOTO   63E
....................    else if(tt_ht == 2) lcd_data("NTN"); 
0E23:  MOVF   2F,W
0E24:  SUBLW  02
0E25:  BTFSS  03.2
0E26:  GOTO   631
0E27:  MOVLW  72
0E28:  BSF    03.6
0E29:  MOVWF  0D
0E2A:  MOVLW  00
0E2B:  MOVWF  0F
0E2C:  BCF    0A.3
0E2D:  BCF    03.6
0E2E:  CALL   378
0E2F:  BSF    0A.3
0E30:  GOTO   63E
....................    else if(tt_ht == 3) lcd_data(" T "); 
0E31:  MOVF   2F,W
0E32:  SUBLW  03
0E33:  BTFSS  03.2
0E34:  GOTO   63E
0E35:  MOVLW  74
0E36:  BSF    03.6
0E37:  MOVWF  0D
0E38:  MOVLW  00
0E39:  MOVWF  0F
0E3A:  BCF    0A.3
0E3B:  BCF    03.6
0E3C:  CALL   378
0E3D:  BSF    0A.3
....................    lcd_setCursor(13, 1); 
0E3E:  MOVLW  0D
0E3F:  MOVWF  70
0E40:  MOVLW  01
0E41:  MOVWF  71
0E42:  BCF    0A.3
0E43:  CALL   342
0E44:  BSF    0A.3
....................    lcd_data(gt_mod + 0x30); 
0E45:  MOVLW  30
0E46:  ADDWF  30,W
0E47:  MOVWF  5C
0E48:  MOVWF  73
0E49:  BCF    0A.3
0E4A:  CALL   35B
0E4B:  BSF    0A.3
....................    if(gt_mod != 0){ 
0E4C:  MOVF   30,F
0E4D:  BTFSC  03.2
0E4E:  GOTO   668
....................       lcd_data(tg_chinh/10 + 0x30); lcd_data(tg_chinh%10 + 0x30); 
0E4F:  MOVF   31,W
0E50:  MOVWF  5C
0E51:  MOVLW  0A
0E52:  MOVWF  5D
0E53:  CALL   28C
0E54:  MOVLW  30
0E55:  ADDWF  78,W
0E56:  MOVWF  5C
0E57:  MOVWF  73
0E58:  BCF    0A.3
0E59:  CALL   35B
0E5A:  BSF    0A.3
0E5B:  MOVF   31,W
0E5C:  MOVWF  5C
0E5D:  MOVLW  0A
0E5E:  MOVWF  5D
0E5F:  CALL   28C
0E60:  MOVLW  30
0E61:  ADDWF  77,W
0E62:  MOVWF  5C
0E63:  MOVWF  73
0E64:  BCF    0A.3
0E65:  CALL   35B
0E66:  BSF    0A.3
....................    } 
0E67:  GOTO   671
....................    else 
....................       lcd_data("__"); 
0E68:  MOVLW  76
0E69:  BSF    03.6
0E6A:  MOVWF  0D
0E6B:  MOVLW  00
0E6C:  MOVWF  0F
0E6D:  BCF    0A.3
0E6E:  BCF    03.6
0E6F:  CALL   378
0E70:  BSF    0A.3
.................... } 
....................  
.................... #include <thu_vien_ds18b20.c> 
.................... #define touch_pin pin_a0 
.................... #define DS18B20_PIN touch_pin 
....................  
.................... #include <touch.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                        Dallas Touch Driver                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////  data = touch_read_bit()     Reads one bit from a touch device    //// 
.................... ////                                                                   //// 
.................... ////  data = touch_read_BYTE()    Reads one byte from a touch device.  //// 
.................... ////                                                                   //// 
.................... ////  ok = touch_write_bit(data)  Writes one bit to a touch device     //// 
.................... ////                              and returns true if all went ok.     //// 
.................... ////                              A false indicates a collision with   //// 
.................... ////                              another device.                      //// 
.................... ////                                                                   //// 
.................... ////  ok = touch_write_byte(data) Writes one byte to a touch device    //// 
.................... ////                              and returns true if all went ok.     //// 
.................... ////                              A false indicates a collision with   //// 
.................... ////                              another device.                      //// 
.................... ////                                                                   //// 
.................... ////  present = touch_present()   Issues a reset and returns true      //// 
.................... ////                              if the touch device is there.        //// 
.................... ////                                                                   //// 
.................... ////  reset_pulse()               Issues a reset and waits for a       //// 
.................... ////                              present pulse.                       //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef  TOUCH_C 
.................... #define  TOUCH_C 
....................  
.................... #ifndef TOUCH_PIN 
....................    #define TOUCH_PIN  PIN_B0 
.................... #endif 
....................  
.................... #define TOUCH_PIN_LOW()    output_drive(TOUCH_PIN); output_low(TOUCH_PIN) 
.................... #define TOUCH_PIN_HIGH()    output_drive(TOUCH_PIN); output_high(TOUCH_PIN) 
.................... #define TOUCH_PIN_FLOAT()  output_float(TOUCH_PIN) 
.................... #define TOUCH_PIN_READ()      input_state(TOUCH_PIN) 
....................  
.................... ///////////////////////////// 
.................... ////                     //// 
.................... //// Function Prototypes //// 
.................... ////                     //// 
.................... ///////////////////////////// 
....................  
.................... /* 
.................... int1 touch_read_bit() 
.................... This will read back a bit from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A bit from the DS1993 
.................... */ 
.................... int1 touch_read_bit(); 
....................  
.................... /* 
.................... BYTE touch_read_byte() 
.................... This will read back a byte from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A byte from the DS1993 
.................... */ 
.................... BYTE touch_read_byte(); 
....................  
.................... /* 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... This will write a bit to the DS1993 
.................... PARAMS: The bit to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_bit(int1 data); 
....................  
.................... /* 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... This will write a byte to the DS1993 
.................... PARAMS: The byte to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_byte(BYTE data); 
....................  
.................... /* 
.................... BOOLEAN touch_present() 
.................... This will evaluate whether or not there is a touch present on the DS1993 
.................... PARAMS: none 
.................... RETURNS: True if a touch is present, false if otherwise 
.................... */ 
.................... BOOLEAN touch_present(); 
....................  
.................... /* 
.................... void reset_pulse() 
.................... This will send the DS1993 a reset pulse 
.................... PARAMS: none 
.................... RETURNS: none 
.................... */ 
.................... void reset_pulse(); 
....................  
.................... ////////////////////////////////// 
.................... ////                          //// 
.................... //// Function Implementations //// 
.................... ////                          //// 
.................... ////////////////////////////////// 
....................  
.................... /* 
.................... int1 touch_read_bit() 
.................... This will read back a bit from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A bit from the DS1993 
.................... */ 
.................... int1 touch_read_bit() 
.................... { 
....................    int1 data; 
....................  
....................    TOUCH_PIN_LOW(); 
....................    delay_us(14); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................    data = TOUCH_PIN_READ(); 
....................    delay_us(100); 
....................  
....................    return data; 
.................... } 
....................  
.................... /* 
.................... BYTE touch_read_byte() 
.................... This will read back a byte from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A byte from the DS1993 
.................... */ 
.................... BYTE touch_read_byte() 
.................... { 
....................    BYTE i,data; 
....................  
....................    for(i=1; i <= 8; ++i) 
....................       shift_right(&data, 1, touch_read_bit()); 
....................  
....................    return data; 
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... This will write a bit to the DS1993 
.................... PARAMS: The bit to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... { 
....................    TOUCH_PIN_LOW(); 
*
05A6:  BSF    03.5
05A7:  BCF    05.0
05A8:  BCF    05.0
05A9:  BCF    03.5
05AA:  BCF    05.0
....................    delay_us(10); 
05AB:  MOVLW  10
05AC:  MOVWF  77
05AD:  DECFSZ 77,F
05AE:  GOTO   5AD
05AF:  NOP
....................    if(data) 
05B0:  MOVF   5F,F
05B1:  BTFSC  03.2
05B2:  GOTO   5C3
....................    { 
....................       TOUCH_PIN_HIGH(); 
05B3:  BSF    03.5
05B4:  BCF    05.0
05B5:  BCF    05.0
05B6:  BCF    03.5
05B7:  BSF    05.0
....................       delay_us(10); 
05B8:  MOVLW  10
05B9:  MOVWF  77
05BA:  DECFSZ 77,F
05BB:  GOTO   5BA
05BC:  NOP
....................       if(!TOUCH_PIN_READ()) 
05BD:  BTFSC  05.0
05BE:  GOTO   5C2
....................          return FALSE; 
05BF:  MOVLW  00
05C0:  MOVWF  78
05C1:  GOTO   5E5
....................    } 
05C2:  GOTO   5D2
....................    else 
....................    { 
....................       TOUCH_PIN_LOW(); 
05C3:  BSF    03.5
05C4:  BCF    05.0
05C5:  BCF    05.0
05C6:  BCF    03.5
05C7:  BCF    05.0
....................       delay_us(10); 
05C8:  MOVLW  10
05C9:  MOVWF  77
05CA:  DECFSZ 77,F
05CB:  GOTO   5CA
05CC:  NOP
....................       if(TOUCH_PIN_READ()) 
05CD:  BTFSS  05.0
05CE:  GOTO   5D2
....................          return FALSE; 
05CF:  MOVLW  00
05D0:  MOVWF  78
05D1:  GOTO   5E5
....................    } 
....................    delay_us(50); 
05D2:  MOVLW  52
05D3:  MOVWF  77
05D4:  DECFSZ 77,F
05D5:  GOTO   5D4
05D6:  GOTO   5D7
05D7:  NOP
....................    TOUCH_PIN_HIGH(); 
05D8:  BSF    03.5
05D9:  BCF    05.0
05DA:  BCF    05.0
05DB:  BCF    03.5
05DC:  BSF    05.0
....................    delay_us(50); 
05DD:  MOVLW  52
05DE:  MOVWF  77
05DF:  DECFSZ 77,F
05E0:  GOTO   5DF
05E1:  GOTO   5E2
05E2:  NOP
....................    return TRUE; 
05E3:  MOVLW  01
05E4:  MOVWF  78
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... This will write a byte to the DS1993 
.................... PARAMS: The byte to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... { 
....................    BYTE i; 
....................  
....................    for(i=1; i<=8; ++i) 
*
0598:  MOVLW  01
0599:  MOVWF  5D
059A:  MOVF   5D,W
059B:  SUBLW  08
059C:  BTFSS  03.0
059D:  GOTO   5ED
....................       if(!touch_write_bit(shift_right(&data, 1, 0))) 
059E:  BCF    03.0
059F:  RRF    5C,F
05A0:  MOVLW  00
05A1:  BTFSC  03.0
05A2:  MOVLW  01
05A3:  MOVWF  5E
05A4:  MOVF   5E,W
05A5:  MOVWF  5F
*
05E5:  MOVF   78,F
05E6:  BTFSS  03.2
05E7:  GOTO   5EB
....................          return FALSE; 
05E8:  MOVLW  00
05E9:  MOVWF  78
05EA:  GOTO   5EF
05EB:  INCF   5D,F
05EC:  GOTO   59A
....................  
....................    return TRUE; 
05ED:  MOVLW  01
05EE:  MOVWF  78
05EF:  RETURN
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_present() 
.................... This will evaluate whether or not there is a touch present on the DS1993 
.................... PARAMS: none 
.................... RETURNS: True if a touch is present, false if otherwise 
.................... */ 
.................... BOOLEAN touch_present() 
.................... { 
....................    BOOLEAN present; 
....................    TOUCH_PIN_LOW(); 
*
056D:  BSF    03.5
056E:  BCF    05.0
056F:  BCF    05.0
0570:  BCF    03.5
0571:  BCF    05.0
....................    delay_us(500); 
0572:  MOVLW  02
0573:  MOVWF  5D
0574:  MOVLW  F9
0575:  MOVWF  5F
0576:  CALL   55E
0577:  DECFSZ 5D,F
0578:  GOTO   574
....................    TOUCH_PIN_FLOAT(); 
0579:  BSF    03.5
057A:  BSF    05.0
....................    delay_us(5); 
057B:  MOVLW  07
057C:  MOVWF  77
057D:  DECFSZ 77,F
057E:  GOTO   57D
057F:  GOTO   580
0580:  NOP
....................  
....................    if(!TOUCH_PIN_READ()) 
0581:  BCF    03.5
0582:  BTFSC  05.0
0583:  GOTO   587
....................       return FALSE; 
0584:  MOVLW  00
0585:  MOVWF  78
0586:  GOTO   597
....................  
....................    delay_us(65); 
0587:  MOVLW  6B
0588:  MOVWF  77
0589:  DECFSZ 77,F
058A:  GOTO   589
058B:  GOTO   58C
058C:  NOP
....................    present = !TOUCH_PIN_READ(); 
058D:  BCF    5C.0
058E:  BTFSS  05.0
058F:  BSF    5C.0
....................    delay_us(240); 
0590:  MOVLW  F0
0591:  MOVWF  5F
0592:  CALL   55E
....................    return present; 
0593:  MOVLW  00
0594:  BTFSC  5C.0
0595:  MOVLW  01
0596:  MOVWF  78
0597:  RETURN
.................... } 
....................  
.................... /* 
.................... void reset_pulse() 
.................... This will send the DS1993 a reset pulse 
.................... PARAMS: none 
.................... RETURNS: none 
.................... */ 
.................... void reset_pulse() 
.................... { 
....................    TOUCH_PIN_LOW(); 
....................    delay_us(500); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................    while(!touch_present()); 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #define search_rom       0xf0 
.................... #define read_rom         0x33 
.................... #define match_rom        0x55 
.................... #define skip_rom         0xcc 
.................... #define alarm_search     0xec 
.................... #define read_scratchpad  0xbe 
.................... #define write_scratchpad 0x4e 
.................... #define copy_scratchpad  0x48 
.................... #define convert_t        0x44 
....................  
.................... si16 nhiet_do; 
.................... usi8 dt_ng, dt_ngt; 
.................... usi16 dt_tp, dt_tpt; 
.................... usi16 dt_tp_real; 
....................  
.................... /* 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................          CACH 1 SU DUNG THU VIEN TOUCH.C 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... */ 
.................... void ds18b20_no_ds18b(usi8 x, y) 
.................... { 
....................    lcd_setCursor(x, y); 
....................    lcd_data("NO DS18B20"); 
.................... } 
....................  
.................... void ds18b20_khoi_tao() 
.................... { 
....................    touch_present(); 
*
05F0:  CALL   56D
....................    touch_write_byte(skip_rom); 
05F1:  MOVLW  CC
05F2:  MOVWF  5C
05F3:  CALL   598
....................    touch_write_byte(write_scratchpad); 
05F4:  MOVLW  4E
05F5:  MOVWF  5C
05F6:  CALL   598
....................    touch_write_byte(0x0); 
05F7:  CLRF   5C
05F8:  CALL   598
....................    touch_write_byte(0x0); 
05F9:  CLRF   5C
05FA:  CALL   598
....................    touch_write_byte(0x7f); // 12 bit 
05FB:  MOVLW  7F
05FC:  MOVWF  5C
05FD:  CALL   598
....................  
....................    touch_present(); 
05FE:  CALL   56D
....................    touch_write_byte(skip_rom); 
05FF:  MOVLW  CC
0600:  MOVWF  5C
0601:  CALL   598
....................    touch_write_byte(convert_t); 
0602:  MOVLW  44
0603:  MOVWF  5C
0604:  CALL   598
0605:  BSF    0A.3
0606:  BCF    0A.4
0607:  GOTO   31C (RETURN)
.................... } 
....................  
.................... usi16 ds18b20_read_temp_c1() 
.................... { 
....................    usi8 bl, bh; 
....................    usi16 w; 
....................    touch_write_byte(skip_rom); 
....................    touch_write_byte(read_scratchpad); 
....................    bl = touch_read_byte(); 
....................    bh = touch_read_byte(); 
....................    w = make16(bh, bl); 
....................    touch_present(); 
....................    touch_write_byte(skip_rom); 
....................    touch_write_byte(convert_t); 
....................    return w; 
.................... } 
....................  
.................... void ds18b20_doc_rom(usi8 time_s) 
.................... { 
....................    usi8 rom_code[8]; 
....................    usi8 xh, xl; 
....................    si8 i; 
....................    if (touch_present()) 
....................    { 
....................       touch_write_byte(read_rom); 
....................       for (i = 0; i < 8; i++) 
....................          rom_code[i] = touch_read_byte(); 
....................       lcd_setCursor(0, 0); 
....................       lcd_data("CO DS18B20"); 
....................       lcd_setCursor(0, 1); 
....................       for (i = 7; i > -1; i--) 
....................       { 
....................          xh = rom_code[i] / 16; 
....................          if (xh > 9) 
....................             xh = xh + 0x37; 
....................          else 
....................             xh = xh + 0x30; 
....................          xl = rom_code[i] % 16; 
....................          if (xl > 9) 
....................             xl = xl + 0x37; 
....................          else 
....................             xl = xl + 0x30; 
....................          lcd_data(xh); 
....................          lcd_data(xl); 
....................       } 
....................    } 
....................    else 
....................       ds18b20_no_ds18b(0, 0); 
....................    delay_ms(time_s * 1000); 
....................    lcd_clear(); 
.................... } 
.................... /* 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................          CACH 2 KHONG SU DUNG THU VIEN TOUCH.C 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... */ 
.................... bool ds18b20_start(){ 
....................    output_low(DS18B20_PIN); 
0608:  BSF    03.5
0609:  BCF    05.0
060A:  BCF    03.5
060B:  BCF    05.0
....................    output_drive(DS18B20_PIN); 
060C:  BSF    03.5
060D:  BCF    05.0
....................    delay_us(500); 
060E:  MOVLW  02
060F:  BCF    03.5
0610:  MOVWF  5E
0611:  MOVLW  F9
0612:  MOVWF  5F
0613:  CALL   55E
0614:  DECFSZ 5E,F
0615:  GOTO   611
....................    output_float(DS18B20_PIN); 
0616:  BSF    03.5
0617:  BSF    05.0
....................    delay_us(100); 
0618:  MOVLW  A6
0619:  MOVWF  77
061A:  DECFSZ 77,F
061B:  GOTO   61A
061C:  NOP
....................    if(!input(DS18B20_PIN)){ 
061D:  BSF    05.0
061E:  BCF    03.5
061F:  BTFSC  05.0
0620:  GOTO   62B
....................       delay_us(400); 
0621:  MOVLW  02
0622:  MOVWF  5E
0623:  MOVLW  C7
0624:  MOVWF  5F
0625:  CALL   55E
0626:  DECFSZ 5E,F
0627:  GOTO   623
....................       return true; 
0628:  MOVLW  01
0629:  MOVWF  78
062A:  GOTO   62D
....................    } 
....................    return false; 
062B:  MOVLW  00
062C:  MOVWF  78
062D:  RETURN
.................... } 
....................  
.................... void ds18b20_write_bit(bool value){ 
....................    output_low(DS18B20_PIN); 
*
0643:  BSF    03.5
0644:  BCF    05.0
0645:  BCF    03.5
0646:  BCF    05.0
....................    output_drive(DS18B20_PIN); 
0647:  BSF    03.5
0648:  BCF    05.0
....................    delay_us(2); 
0649:  MOVLW  02
064A:  MOVWF  77
064B:  DECFSZ 77,F
064C:  GOTO   64B
064D:  GOTO   64E
064E:  NOP
....................    output_bit(DS18B20_PIN, value); 
064F:  BCF    03.5
0650:  MOVF   61,F
0651:  BTFSS  03.2
0652:  GOTO   655
0653:  BCF    05.0
0654:  GOTO   656
0655:  BSF    05.0
0656:  BSF    03.5
0657:  BCF    05.0
....................    delay_us(80); 
0658:  MOVLW  84
0659:  MOVWF  77
065A:  DECFSZ 77,F
065B:  GOTO   65A
065C:  GOTO   65D
065D:  NOP
....................    output_float(DS18B20_PIN); 
065E:  BSF    05.0
....................    delay_us(2); 
065F:  MOVLW  02
0660:  MOVWF  77
0661:  DECFSZ 77,F
0662:  GOTO   661
0663:  GOTO   664
0664:  NOP
.................... } 
....................  
.................... void ds18b20_write_byte(int8 value){ 
....................    for(int8 i = 0; i < 8; i++) 
*
062E:  CLRF   5F
062F:  MOVF   5F,W
0630:  SUBLW  07
0631:  BTFSS  03.0
0632:  GOTO   668
....................       ds18b20_write_bit(bit_test(value,i)); 
0633:  MOVF   5E,W
0634:  MOVWF  77
0635:  MOVF   5F,W
0636:  MOVWF  78
0637:  BTFSC  03.2
0638:  GOTO   63D
0639:  BCF    03.0
063A:  RRF    77,F
063B:  DECFSZ 78,F
063C:  GOTO   639
063D:  MOVLW  00
063E:  BTFSC  77.0
063F:  MOVLW  01
0640:  MOVWF  60
0641:  MOVF   60,W
0642:  MOVWF  61
*
0665:  BCF    03.5
0666:  INCF   5F,F
0667:  GOTO   62F
0668:  RETURN
.................... } 
....................  
.................... bool ds18b20_read_bit(){ 
....................    bool value; 
....................    output_low(DS18B20_PIN); 
*
066F:  BSF    03.5
0670:  BCF    05.0
0671:  BCF    03.5
0672:  BCF    05.0
....................    output_drive(DS18B20_PIN); 
0673:  BSF    03.5
0674:  BCF    05.0
....................    delay_us(2); 
0675:  MOVLW  02
0676:  MOVWF  77
0677:  DECFSZ 77,F
0678:  GOTO   677
0679:  GOTO   67A
067A:  NOP
....................    output_float(DS18B20_PIN); 
067B:  BSF    05.0
....................    delay_us(5); 
067C:  MOVLW  07
067D:  MOVWF  77
067E:  DECFSZ 77,F
067F:  GOTO   67E
0680:  GOTO   681
0681:  NOP
....................    value = input(DS18B20_PIN); 
0682:  BSF    05.0
0683:  BCF    03.5
0684:  BCF    64.0
0685:  BTFSC  05.0
0686:  BSF    64.0
....................    delay_us(100); 
0687:  MOVLW  A6
0688:  MOVWF  77
0689:  DECFSZ 77,F
068A:  GOTO   689
068B:  NOP
....................    return value; 
068C:  MOVLW  00
068D:  BTFSC  64.0
068E:  MOVLW  01
068F:  MOVWF  78
.................... } 
....................  
.................... int8 ds18b20_read_byte(){ 
*
0669:  CLRF   62
....................    int8 value = 0; 
....................    for(int8 i = 0; i < 8; i++) 
066A:  CLRF   63
066B:  MOVF   63,W
066C:  SUBLW  07
066D:  BTFSS  03.0
066E:  GOTO   699
....................       shift_right(&value,1,ds18b20_read_bit()); 
*
0690:  MOVF   78,F
0691:  BTFSS  03.2
0692:  GOTO   695
0693:  BCF    03.0
0694:  GOTO   696
0695:  BSF    03.0
0696:  RRF    62,F
0697:  INCF   63,F
0698:  GOTO   66B
....................    return value; 
0699:  MOVF   62,W
069A:  MOVWF  78
069B:  RETURN
.................... } 
....................  
.................... bool ds18b20_read_temp_c2(int16 *raw_temp_value){ 
....................    if(!ds18b20_start()) 
*
06C4:  CALL   608
06C5:  MOVF   78,F
06C6:  BTFSS  03.2
06C7:  GOTO   6CB
....................       return false; 
06C8:  MOVLW  00
06C9:  MOVWF  78
06CA:  GOTO   719
....................    ds18b20_write_byte(skip_rom); 
06CB:  MOVLW  CC
06CC:  MOVWF  5E
06CD:  CALL   62E
....................    ds18b20_write_byte(convert_t); 
06CE:  MOVLW  44
06CF:  MOVWF  5E
06D0:  CALL   62E
....................    while(ds18b20_read_byte() == 0); 
06D1:  CALL   669
06D2:  MOVF   78,F
06D3:  BTFSC  03.2
06D4:  GOTO   6D1
....................    if(!ds18b20_start()) 
06D5:  CALL   608
06D6:  MOVF   78,F
06D7:  BTFSS  03.2
06D8:  GOTO   6DC
....................       return false; 
06D9:  MOVLW  00
06DA:  MOVWF  78
06DB:  GOTO   719
....................    ds18b20_write_byte(skip_rom); 
06DC:  MOVLW  CC
06DD:  MOVWF  5E
06DE:  CALL   62E
....................    ds18b20_write_byte(read_scratchpad); 
06DF:  MOVLW  BE
06E0:  MOVWF  5E
06E1:  CALL   62E
....................    *raw_temp_value = ds18b20_read_byte(); 
06E2:  MOVF   5D,W
06E3:  MOVWF  7A
06E4:  MOVF   5C,W
06E5:  MOVWF  5E
06E6:  MOVF   5D,W
06E7:  MOVWF  5F
06E8:  CALL   669
06E9:  MOVF   5E,W
06EA:  MOVWF  04
06EB:  BCF    03.7
06EC:  BTFSC  5F.0
06ED:  BSF    03.7
06EE:  INCF   04,F
06EF:  CLRF   00
06F0:  DECF   04,F
06F1:  MOVF   78,W
06F2:  MOVWF  00
....................    *raw_temp_value |= (int16)(ds18b20_read_byte()) << 8; 
06F3:  MOVF   5D,W
06F4:  MOVWF  7A
06F5:  MOVF   5C,W
06F6:  MOVWF  5E
06F7:  MOVF   5D,W
06F8:  MOVWF  5F
06F9:  MOVF   5C,W
06FA:  MOVWF  04
06FB:  BCF    03.7
06FC:  BTFSC  5D.0
06FD:  BSF    03.7
06FE:  INCF   04,F
06FF:  MOVF   00,W
0700:  MOVWF  61
0701:  DECF   04,F
0702:  MOVF   00,W
0703:  MOVWF  60
0704:  CALL   669
0705:  CLRF   63
0706:  MOVLW  00
0707:  IORWF  60,W
0708:  MOVWF  77
0709:  MOVF   78,W
070A:  IORWF  61,W
070B:  MOVWF  7A
070C:  MOVF   5E,W
070D:  MOVWF  04
070E:  BCF    03.7
070F:  BTFSC  5F.0
0710:  BSF    03.7
0711:  INCF   04,F
0712:  MOVF   7A,W
0713:  MOVWF  00
0714:  DECF   04,F
0715:  MOVF   77,W
0716:  MOVWF  00
....................    return true; 
0717:  MOVLW  01
0718:  MOVWF  78
.................... } 
....................  
.................... /* 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
....................    HIEN THI NHIET DO LEN LCD 2 SO NGUYEN VA 3 SO THAP PHAN 
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... */ 
.................... void ds18b20_lcd_data(usi16 data, int8 x, int8 y){ 
....................    dt_ng = data>>4; 
....................    dt_tp = data & 0x000f; 
....................    if(dt_ngt != dt_ng){ 
....................       dt_ngt = dt_ng; 
....................       lcd_dis_2num_dot(dt_ng, x, y, enable, disable); 
....................    } 
....................    if(dt_tpt != dt_tp){ 
....................       dt_tpt = dt_tp; 
....................       dt_tp_real = (dt_tp*625)/10; 
....................       lcd_dis_3num_dot(dt_tp_real, x+2, y, enable, enable); 
....................    } 
.................... } 
....................  
.................... void ds18b20_read_temp(){ 
....................    if(ds18b20_read_temp_c2(&nhiet_do)) 
*
06C1:  CLRF   5D
06C2:  MOVLW  52
06C3:  MOVWF  5C
*
0719:  MOVF   78,F
071A:  BTFSC  03.2
071B:  GOTO   728
....................       dt_ng = nhiet_do>>4; 
071C:  RRF    53,W
071D:  MOVWF  7A
071E:  RRF    52,W
071F:  MOVWF  79
0720:  RRF    7A,F
0721:  RRF    79,F
0722:  RRF    7A,F
0723:  RRF    79,F
0724:  RRF    7A,F
0725:  RRF    79,F
0726:  MOVF   79,W
0727:  MOVWF  54
....................       dt_tp = nhiet_do & 0x000f; 
0728:  MOVF   52,W
0729:  ANDLW  0F
072A:  MOVWF  77
072B:  CLRF   7A
072C:  MOVF   77,W
072D:  MOVWF  56
072E:  MOVF   7A,W
072F:  MOVWF  57
....................       dt_tp_real = (dt_tp*625)/10; 
0730:  MOVF   57,W
0731:  MOVWF  60
0732:  MOVF   56,W
0733:  MOVWF  5F
0734:  MOVLW  02
0735:  MOVWF  62
0736:  MOVLW  71
0737:  MOVWF  61
0738:  CALL   3C8
0739:  MOVF   79,W
073A:  MOVWF  5D
073B:  MOVF   78,W
073C:  MOVWF  5C
073D:  MOVF   79,W
073E:  MOVWF  68
073F:  MOVF   78,W
0740:  MOVWF  67
0741:  CLRF   6A
0742:  MOVLW  0A
0743:  MOVWF  69
0744:  CALL   69C
0745:  MOVF   79,W
0746:  MOVWF  5B
0747:  MOVF   78,W
0748:  MOVWF  5A
0749:  BSF    0A.3
074A:  BCF    0A.4
074B:  GOTO   324 (RETURN)
....................       //ds18b20_lcd_data(nhiet_do,0,1); 
....................    //else ds18b20_no_ds18b(0,1); 
.................... } 
....................  
.................... #include <thu_vien_control_chiler.c> 
.................... void control_temperature(int8 nd_ss, int8 gh){ 
....................    if(nd_ss > gh){ 
*
0AB1:  MOVF   5C,W
0AB2:  SUBWF  5D,W
0AB3:  BTFSC  03.0
0AB4:  GOTO   2BE
....................    // water is hot 
....................       output_bit(pinCold, 1); 
0AB5:  BSF    08.6
0AB6:  BSF    03.5
0AB7:  BCF    08.6
....................       output_bit(pinHot,  0); 
0AB8:  BCF    03.5
0AB9:  BCF    08.7
0ABA:  BSF    03.5
0ABB:  BCF    08.7
....................    } 
0ABC:  GOTO   2C5
0ABD:  BCF    03.5
....................    else{ 
....................    // water is cold 
....................       output_bit(pinCold, 0); 
0ABE:  BCF    08.6
0ABF:  BSF    03.5
0AC0:  BCF    08.6
....................       output_bit(pinHot,  1); 
0AC1:  BCF    03.5
0AC2:  BSF    08.7
0AC3:  BSF    03.5
0AC4:  BCF    08.7
....................    } 
0AC5:  BCF    03.5
0AC6:  BSF    0A.3
0AC7:  BCF    0A.4
0AC8:  GOTO   6C9 (RETURN)
.................... } 
....................  
....................  
....................  
....................  
.................... void select_menu(){ 
....................    if(nhan_btn_nha(1,bt0)){ 
*
0B25:  MOVLW  01
0B26:  MOVWF  5C
0B27:  MOVLW  30
0B28:  MOVWF  5D
0B29:  BCF    0A.3
0B2A:  CALL   783
0B2B:  BSF    0A.3
0B2C:  MOVF   78,F
0B2D:  BTFSC  03.2
0B2E:  GOTO   336
....................       dem_menu_tong_curr++; 
0B2F:  INCF   37,F
....................       bdn = 0; gt_mod = 0; tt_ht = 0; 
0B30:  CLRF   2E
0B31:  CLRF   30
0B32:  CLRF   2F
....................       e_11 = true; e_22 = true; e_33 = true; 
0B33:  BSF    32.0
0B34:  BSF    32.1
0B35:  BSF    32.2
....................    } 
....................    if(dem_menu_tong_curr >= level_menu) 
0B36:  MOVF   37,W
0B37:  SUBLW  04
0B38:  BTFSC  03.0
0B39:  GOTO   33C
....................       dem_menu_tong_curr = 0; 
0B3A:  CLRF   37
0B3B:  GOTO   6C4
....................    else{ 
....................       if(dem_menu_tong_curr != dem_menu_tong_prev){ 
0B3C:  MOVF   38,W
0B3D:  SUBWF  37,W
0B3E:  BTFSC  03.2
0B3F:  GOTO   34C
....................          dem_menu_tong_prev = dem_menu_tong_curr; 
0B40:  MOVF   37,W
0B41:  MOVWF  38
....................          lcd_clear(); 
....................       } 
....................       switch(dem_menu_tong_curr){ 
*
0B4C:  MOVF   37,W
0B4D:  BTFSC  03.2
0B4E:  GOTO   359
0B4F:  XORLW  01
0B50:  BTFSC  03.2
0B51:  GOTO   3AB
0B52:  XORLW  03
0B53:  BTFSC  03.2
0B54:  GOTO   416
0B55:  XORLW  01
0B56:  BTFSC  03.2
0B57:  GOTO   672
0B58:  GOTO   6A6
....................          case 0: 
....................             /* hien thi man hinh chinh */ 
....................             lcd_dis_xx_yy_zz(4,0,dec_gio_ds,dec_phut_ds,dec_giay_ds,1,1,1); 
0B59:  MOVF   44,W
0B5A:  MOVWF  5E
0B5B:  BCF    0A.3
0B5C:  CALL   7E8
0B5D:  BSF    0A.3
0B5E:  MOVF   78,W
0B5F:  MOVWF  5C
0B60:  MOVF   43,W
0B61:  MOVWF  5E
0B62:  BCF    0A.3
0B63:  CALL   7E8
0B64:  BSF    0A.3
0B65:  MOVF   78,W
0B66:  MOVWF  5D
0B67:  MOVF   42,W
0B68:  MOVWF  5E
0B69:  BCF    0A.3
0B6A:  CALL   7E8
0B6B:  BSF    0A.3
0B6C:  MOVF   78,W
0B6D:  MOVWF  5E
0B6E:  MOVLW  04
0B6F:  MOVWF  62
0B70:  CLRF   63
0B71:  MOVF   5C,W
0B72:  MOVWF  64
0B73:  MOVF   5D,W
0B74:  MOVWF  65
0B75:  MOVF   78,W
0B76:  MOVWF  66
0B77:  MOVLW  01
0B78:  MOVWF  67
0B79:  MOVWF  68
0B7A:  MOVWF  69
0B7B:  CALL   015
....................             lcd_setCursor(2,1); 
0B7C:  MOVLW  02
0B7D:  MOVWF  70
0B7E:  MOVLW  01
0B7F:  MOVWF  71
0B80:  BCF    0A.3
0B81:  CALL   342
0B82:  BSF    0A.3
....................             lcd_data("ND: "); 
0B83:  MOVLW  84
0B84:  BSF    03.6
0B85:  MOVWF  0D
0B86:  MOVLW  00
0B87:  MOVWF  0F
0B88:  BCF    0A.3
0B89:  BCF    03.6
0B8A:  CALL   378
0B8B:  BSF    0A.3
....................             lcd_dis_2num_dot(dt_ng, 6, 1, enable, disable); 
0B8C:  CLRF   5D
0B8D:  MOVF   54,W
0B8E:  MOVWF  5C
0B8F:  MOVLW  06
0B90:  MOVWF  5E
0B91:  MOVLW  01
0B92:  MOVWF  5F
0B93:  MOVWF  60
0B94:  CLRF   61
0B95:  CALL   095
....................             lcd_dis_3num_dot(dt_tp_real, 8, 1, enable, enable); 
0B96:  MOVF   5B,W
0B97:  MOVWF  5D
0B98:  MOVF   5A,W
0B99:  MOVWF  5C
0B9A:  MOVLW  08
0B9B:  MOVWF  5E
0B9C:  MOVLW  01
0B9D:  MOVWF  5F
0B9E:  MOVWF  60
0B9F:  MOVWF  61
0BA0:  CALL   0D4
....................             lcd_data(" oC"); 
0BA1:  MOVLW  87
0BA2:  BSF    03.6
0BA3:  MOVWF  0D
0BA4:  MOVLW  00
0BA5:  MOVWF  0F
0BA6:  BCF    0A.3
0BA7:  BCF    03.6
0BA8:  CALL   378
0BA9:  BSF    0A.3
....................             break; 
0BAA:  GOTO   6C4
....................          case 1: 
....................             /*  
....................                hien thi nhiet do - nhiet do gioi han 
....................                chinh nhiet do gioi han  
....................             */ 
....................             //dem_menu_1 += nhan_btn_nha(1,bt1); 
....................             gh_nd += nhan_btn_giu(3, bt1); 
0BAB:  CLRF   5D
0BAC:  MOVLW  03
0BAD:  MOVWF  5C
0BAE:  MOVLW  31
0BAF:  MOVWF  5E
0BB0:  CALL   139
0BB1:  MOVF   78,W
0BB2:  ADDWF  2C,F
....................             gh_nd -= nhan_btn_giu(3, bt2); 
0BB3:  CLRF   5D
0BB4:  MOVLW  03
0BB5:  MOVWF  5C
0BB6:  MOVLW  32
0BB7:  MOVWF  5E
0BB8:  CALL   139
0BB9:  MOVF   78,W
0BBA:  SUBWF  2C,F
....................             if(nhan_btn_nha(1,bt3) == enable) dem_menu_tong_curr = 0; 
0BBB:  MOVLW  01
0BBC:  MOVWF  5C
0BBD:  MOVLW  33
0BBE:  MOVWF  5D
0BBF:  BCF    0A.3
0BC0:  CALL   783
0BC1:  BSF    0A.3
0BC2:  DECFSZ 78,W
0BC3:  GOTO   3C5
0BC4:  CLRF   37
....................             lcd_setCursor(2,0); 
0BC5:  MOVLW  02
0BC6:  MOVWF  70
0BC7:  CLRF   71
0BC8:  BCF    0A.3
0BC9:  CALL   342
0BCA:  BSF    0A.3
....................             lcd_data("ND: "); 
0BCB:  MOVLW  89
0BCC:  BSF    03.6
0BCD:  MOVWF  0D
0BCE:  MOVLW  00
0BCF:  MOVWF  0F
0BD0:  BCF    0A.3
0BD1:  BCF    03.6
0BD2:  CALL   378
0BD3:  BSF    0A.3
....................             lcd_dis_2num_dot(dt_ng, 6, 0, enable, disable); 
0BD4:  CLRF   5D
0BD5:  MOVF   54,W
0BD6:  MOVWF  5C
0BD7:  MOVLW  06
0BD8:  MOVWF  5E
0BD9:  CLRF   5F
0BDA:  MOVLW  01
0BDB:  MOVWF  60
0BDC:  CLRF   61
0BDD:  CALL   095
....................             lcd_dis_3num_dot(dt_tp_real, 8, 0, disable, enable); 
0BDE:  MOVF   5B,W
0BDF:  MOVWF  5D
0BE0:  MOVF   5A,W
0BE1:  MOVWF  5C
0BE2:  MOVLW  08
0BE3:  MOVWF  5E
0BE4:  CLRF   5F
0BE5:  CLRF   60
0BE6:  MOVLW  01
0BE7:  MOVWF  61
0BE8:  CALL   0D4
....................             lcd_data(" oC"); 
0BE9:  MOVLW  8C
0BEA:  BSF    03.6
0BEB:  MOVWF  0D
0BEC:  MOVLW  00
0BED:  MOVWF  0F
0BEE:  BCF    0A.3
0BEF:  BCF    03.6
0BF0:  CALL   378
0BF1:  BSF    0A.3
....................             lcd_setCursor(2,1); 
0BF2:  MOVLW  02
0BF3:  MOVWF  70
0BF4:  MOVLW  01
0BF5:  MOVWF  71
0BF6:  BCF    0A.3
0BF7:  CALL   342
0BF8:  BSF    0A.3
....................             lcd_data("GH_ND: "); 
0BF9:  MOVLW  8E
0BFA:  BSF    03.6
0BFB:  MOVWF  0D
0BFC:  MOVLW  00
0BFD:  MOVWF  0F
0BFE:  BCF    0A.3
0BFF:  BCF    03.6
0C00:  CALL   378
0C01:  BSF    0A.3
....................             lcd_dis_2num_dot(gh_nd, 10, 1, enable, disable); 
0C02:  CLRF   5D
0C03:  MOVF   2C,W
0C04:  MOVWF  5C
0C05:  MOVLW  0A
0C06:  MOVWF  5E
0C07:  MOVLW  01
0C08:  MOVWF  5F
0C09:  MOVWF  60
0C0A:  CLRF   61
0C0B:  CALL   095
....................             lcd_data(" oC"); 
0C0C:  MOVLW  92
0C0D:  BSF    03.6
0C0E:  MOVWF  0D
0C0F:  MOVLW  00
0C10:  MOVWF  0F
0C11:  BCF    0A.3
0C12:  BCF    03.6
0C13:  CALL   378
0C14:  BSF    0A.3
....................             break; 
0C15:  GOTO   6C4
....................          case 2: 
....................             /* 
....................                hien thi thoi gian va 
....................                cai dat thoi gian - thoi gian dong bo 
....................             */ 
....................             lcd_setCursor(1,0); 
0C16:  MOVLW  01
0C17:  MOVWF  70
0C18:  CLRF   71
0C19:  BCF    0A.3
0C1A:  CALL   342
0C1B:  BSF    0A.3
....................             lcd_data("cai dat dong ho"); 
0C1C:  MOVLW  94
0C1D:  BSF    03.6
0C1E:  MOVWF  0D
0C1F:  MOVLW  00
0C20:  MOVWF  0F
0C21:  BCF    0A.3
0C22:  BCF    03.6
0C23:  CALL   378
0C24:  BSF    0A.3
....................             if(bdn < 5){ 
0C25:  MOVF   2E,W
0C26:  SUBLW  04
0C27:  BTFSS  03.0
0C28:  GOTO   5EB
....................                if(gt_mod != 0) xu_ly_choptat(); 
0C29:  MOVF   30,F
0C2A:  BTFSC  03.2
0C2B:  GOTO   45C
....................                phim_chon_hthi_mode(); 
....................                phim_up(); 
....................                phim_dw(); 
....................             } 
*
0DEA:  GOTO   603
....................             else if(bdn >= 10){ 
0DEB:  MOVF   2E,W
0DEC:  SUBLW  09
0DED:  BTFSC  03.0
0DEE:  GOTO   603
....................                bdn = 0; 
0DEF:  CLRF   2E
....................                if(tg_chinh < 10) tg_chinh++; 
0DF0:  BTFSC  31.7
0DF1:  GOTO   5F6
0DF2:  MOVF   31,W
0DF3:  SUBLW  09
0DF4:  BTFSS  03.0
0DF5:  GOTO   5F8
0DF6:  INCF   31,F
0DF7:  GOTO   5FD
....................                else{ 
....................                   gt_mod = 0; tt_ht = 0; 
0DF8:  CLRF   30
0DF9:  CLRF   2F
....................                   e_11 = true; e_22 = true; e_33 = true; 
0DFA:  BSF    32.0
0DFB:  BSF    32.1
0DFC:  BSF    32.2
....................                } 
....................                if(giay_tam!=giay_ds){ 
0DFD:  MOVF   42,W
0DFE:  SUBWF  2D,W
0DFF:  BTFSC  03.2
0E00:  GOTO   603
....................                   giay_tam = giay_ds; 
0E01:  MOVF   42,W
0E02:  MOVWF  2D
....................                } 
....................             } 
....................             giai_ma_gpg_ntn_thu_lcd(); 
0E03:  CALL   1E4
....................             log_mode(); 
....................             break; 
*
0E71:  GOTO   6C4
....................           case 3: 
....................             /* cai dat thoi gian - thoi gian cho ca an*/ 
....................             lcd_setCursor(1,0); 
0E72:  MOVLW  01
0E73:  MOVWF  70
0E74:  CLRF   71
0E75:  BCF    0A.3
0E76:  CALL   342
0E77:  BSF    0A.3
....................             lcd_data("t/g cho ca an"); 
0E78:  MOVLW  9C
0E79:  BSF    03.6
0E7A:  MOVWF  0D
0E7B:  MOVLW  00
0E7C:  MOVWF  0F
0E7D:  BCF    0A.3
0E7E:  BCF    03.6
0E7F:  CALL   378
0E80:  BSF    0A.3
....................             lcd_dis_xx_yy_zz(4,1,dec_gio_eat,dec_phut_eat,dec_giay_eat,1, 1, 1); 
0E81:  MOVF   33,W
0E82:  MOVWF  5E
0E83:  BCF    0A.3
0E84:  CALL   7E8
0E85:  BSF    0A.3
0E86:  MOVF   78,W
0E87:  MOVWF  5C
0E88:  MOVF   34,W
0E89:  MOVWF  5E
0E8A:  BCF    0A.3
0E8B:  CALL   7E8
0E8C:  BSF    0A.3
0E8D:  MOVF   78,W
0E8E:  MOVWF  5D
0E8F:  MOVF   35,W
0E90:  MOVWF  5E
0E91:  BCF    0A.3
0E92:  CALL   7E8
0E93:  BSF    0A.3
0E94:  MOVF   78,W
0E95:  MOVWF  5E
0E96:  MOVLW  04
0E97:  MOVWF  62
0E98:  MOVLW  01
0E99:  MOVWF  63
0E9A:  MOVF   5C,W
0E9B:  MOVWF  64
0E9C:  MOVF   5D,W
0E9D:  MOVWF  65
0E9E:  MOVF   78,W
0E9F:  MOVWF  66
0EA0:  MOVLW  01
0EA1:  MOVWF  67
0EA2:  MOVWF  68
0EA3:  MOVWF  69
0EA4:  CALL   015
....................             break; 
0EA5:  GOTO   6C4
....................           default: 
....................             /* hien thi thong tin sp */ 
....................             lcd_setCursor(2,0); 
0EA6:  MOVLW  02
0EA7:  MOVWF  70
0EA8:  CLRF   71
0EA9:  BCF    0A.3
0EAA:  CALL   342
0EAB:  BSF    0A.3
....................             lcd_data("Information"); 
0EAC:  MOVLW  A3
0EAD:  BSF    03.6
0EAE:  MOVWF  0D
0EAF:  MOVLW  00
0EB0:  MOVWF  0F
0EB1:  BCF    0A.3
0EB2:  BCF    03.6
0EB3:  CALL   378
0EB4:  BSF    0A.3
....................             lcd_setCursor(0,1); 
0EB5:  CLRF   70
0EB6:  MOVLW  01
0EB7:  MOVWF  71
0EB8:  BCF    0A.3
0EB9:  CALL   342
0EBA:  BSF    0A.3
....................             lcd_data("Version: V1.0.0"); 
0EBB:  MOVLW  A9
0EBC:  BSF    03.6
0EBD:  MOVWF  0D
0EBE:  MOVLW  00
0EBF:  MOVWF  0F
0EC0:  BCF    0A.3
0EC1:  BCF    03.6
0EC2:  CALL   378
0EC3:  BSF    0A.3
....................             break; 
....................       } 
....................    } 
.................... } 
....................  
.................... void main(){ 
*
0AC9:  MOVF   03,W
0ACA:  ANDLW  1F
0ACB:  MOVWF  03
0ACC:  MOVLW  FF
0ACD:  MOVWF  2B
0ACE:  MOVLW  81
0ACF:  BSF    03.5
0AD0:  MOVWF  19
0AD1:  MOVLW  A6
0AD2:  MOVWF  18
0AD3:  MOVLW  90
0AD4:  BCF    03.5
0AD5:  MOVWF  18
0AD6:  MOVLW  19
0AD7:  MOVWF  2C
0AD8:  CLRF   2F
0AD9:  CLRF   30
0ADA:  CLRF   31
0ADB:  CLRF   37
0ADC:  MOVLW  01
0ADD:  MOVWF  38
0ADE:  BSF    03.5
0ADF:  BSF    1F.0
0AE0:  BSF    1F.1
0AE1:  BSF    1F.2
0AE2:  BCF    1F.3
0AE3:  MOVLW  07
0AE4:  MOVWF  1C
0AE5:  BCF    03.7
....................    set_up_init(); 
*
0B09:  BCF    0A.3
0B0A:  GOTO   0B1
0B0B:  BSF    0A.3
....................    lcd_init(); 
0B0C:  BCF    0A.3
0B0D:  GOTO   27B
0B0E:  BSF    0A.3
....................    lcd_log_info(3,enable); 
0B0F:  CLRF   5D
0B10:  MOVLW  03
0B11:  MOVWF  5C
0B12:  MOVLW  01
0B13:  MOVWF  5E
0B14:  BCF    0A.3
0B15:  GOTO   3DD
0B16:  BSF    0A.3
....................    ds1307_init(); 
0B17:  BCF    0A.3
0B18:  GOTO   4EE
0B19:  BSF    0A.3
....................    //log_code_ds1307(); 
....................    //delay_ms(2000); 
....................    ds18b20_khoi_tao(); 
0B1A:  BCF    0A.3
0B1B:  GOTO   5F0
0B1C:  BSF    0A.3
....................    while(true){ 
....................       ds1307_read_time(8); 
0B1D:  MOVLW  08
0B1E:  MOVWF  5C
0B1F:  BCF    0A.3
0B20:  CALL   46D
0B21:  BSF    0A.3
....................       ds18b20_read_temp(); 
0B22:  BCF    0A.3
0B23:  GOTO   6C1
0B24:  BSF    0A.3
....................       select_menu(); 
....................       control_temperature(dt_ng,gh_nd); 
*
0EC4:  MOVF   54,W
0EC5:  MOVWF  5C
0EC6:  MOVF   2C,W
0EC7:  MOVWF  5D
0EC8:  GOTO   2B1
0EC9:  GOTO   31D
....................    } 
.................... }   
0ECA:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
