D G "__PCM__" 0 105 ""5.015""
D G "__DEVICE__" 0 105 "877"
D G "__DATE__" 0 105 ""13-Apr-24""
D G "__TIME__" 0 105 ""14:03:42"" "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
c L "set_tris_a" 3 1 6 "FUNCTION"
v L "value" 3 37 "int8" `54 
f B "set_tris_a" 3 37 "void(int8 value)" `53 
v L "value" 3 38 "int8" `56 
f B "set_tris_b" 3 38 "void(int8 value)" `55 
v L "value" 3 39 "int8" `58 
f B "set_tris_c" 3 39 "void(int8 value)" `57 
v L "value" 3 40 "int8" `60 
f B "set_tris_d" 3 40 "void(int8 value)" `59 
v L "value" 3 41 "int8" `62 
f B "set_tris_e" 3 41 "void(int8 value)" `61 
f B "get_tris_a" 3 42 "int8()" `63 
f B "get_tris_b" 3 43 "int8()" `64 
f B "get_tris_c" 3 44 "int8()" `65 
f B "get_tris_d" 3 45 "int8()" `66 
f B "get_tris_e" 3 46 "int8()" `67 
v L "value" 3 47 "int8" `69 
f B "output_a" 3 47 "void(int8 value)" `68 
v L "value" 3 48 "int8" `71 
f B "output_b" 3 48 "void(int8 value)" `70 
v L "value" 3 49 "int8" `73 
f B "output_c" 3 49 "void(int8 value)" `72 
v L "value" 3 50 "int8" `75 
f B "output_d" 3 50 "void(int8 value)" `74 
v L "value" 3 51 "int8" `77 
f B "output_e" 3 51 "void(int8 value)" `76 
f B "input_a" 3 52 "int8()" `78 
f B "input_b" 3 53 "int8()" `79 
f B "input_c" 3 54 "int8()" `80 
f B "input_d" 3 55 "int8()" `81 
f B "input_e" 3 56 "int8()" `82 
f B "input_change_a" 3 57 "int8()" `83 
f B "input_change_b" 3 58 "int8()" `84 
f B "input_change_c" 3 59 "int8()" `85 
f B "input_change_d" 3 60 "int8()" `86 
f B "input_change_e" 3 61 "int8()" `87 
v L "pin" 3 62 "int16" `89 
f B "input" 3 62 "int8(int16 pin)" `88 
v L "pin" 3 63 "int16" `91 
f B "input_state" 3 63 "int8(int16 pin)" `90 
v L "pin" 3 64 "int16" `93 
f B "output_low" 3 64 "void(int16 pin)" `92 
v L "pin" 3 65 "int16" `95 
f B "output_high" 3 65 "void(int16 pin)" `94 
v L "pin" 3 66 "int16" `97 
f B "output_toggle" 3 66 "void(int16 pin)" `96 
v L "pin" 3 67 "int16" `99 
v L "level" 3 67 "int8" `100 
f B "output_bit" 3 67 "void(int16 pin,int8 level)" `98 
v L "pin" 3 68 "int16" `102 
f B "output_float" 3 68 "void(int16 pin)" `101 
v L "pin" 3 69 "int16" `104 
f B "output_drive" 3 69 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 3 73 "40"
d G "PIN_A1" 3 74 "41"
d G "PIN_A2" 3 75 "42"
d G "PIN_A3" 3 76 "43"
d G "PIN_A4" 3 77 "44"
d G "PIN_A5" 3 78 "45"
d G "PIN_B0" 3 80 "48"
d G "PIN_B1" 3 81 "49"
d G "PIN_B2" 3 82 "50"
d G "PIN_B3" 3 83 "51"
d G "PIN_B4" 3 84 "52"
d G "PIN_B5" 3 85 "53"
d G "PIN_B6" 3 86 "54"
d G "PIN_B7" 3 87 "55"
d G "PIN_C0" 3 89 "56"
d G "PIN_C1" 3 90 "57"
d G "PIN_C2" 3 91 "58"
d G "PIN_C3" 3 92 "59"
d G "PIN_C4" 3 93 "60"
d G "PIN_C5" 3 94 "61"
d G "PIN_C6" 3 95 "62"
d G "PIN_C7" 3 96 "63"
d G "PIN_D0" 3 98 "64"
d G "PIN_D1" 3 99 "65"
d G "PIN_D2" 3 100 "66"
d G "PIN_D3" 3 101 "67"
d G "PIN_D4" 3 102 "68"
d G "PIN_D5" 3 103 "69"
d G "PIN_D6" 3 104 "70"
d G "PIN_D7" 3 105 "71"
d G "PIN_E0" 3 107 "72"
d G "PIN_E1" 3 108 "73"
d G "PIN_E2" 3 109 "74"
d G "FALSE" 3 112 "0"
d G "TRUE" 3 113 "1"
d G "BYTE" 3 115 "int8"
d G "BOOLEAN" 3 116 "int1"
d G "getc" 3 118 "getch"
d G "fgetc" 3 119 "getch"
d G "getchar" 3 120 "getch"
d G "putc" 3 121 "putchar"
d G "fputc" 3 122 "putchar"
d G "fgets" 3 123 "gets"
d G "fputs" 3 124 "puts"
c L "output_drive" 3 1 3 "FUNCTION"
f B "restart_cause" 3 129 "int8()" `105 
f B "reset_cpu" 3 130 "void()" `106 
f B "sleep" 3 131 "void()" `107  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 3 133 "3"
d G "WDT_TIMEOUT" 3 134 "11"
d G "MCLR_FROM_SLEEP" 3 135 "19"
d G "MCLR_FROM_RUN" 3 136 "27"
d G "NORMAL_POWER_UP" 3 137 "25"
d G "BROWNOUT_RESTART" 3 138 "26"
c L "sleep" 3 1 5 "FUNCTION"
v L "mode" 3 145 "int8" `109 
f B "setup_timer_0" 3 145 "void(int8 mode)" `108 
v L "value" 3 146 "int8" `111 
f B "set_timer0" 3 146 "void(int8 value)" `110 
f B "get_timer0" 3 147 "int8()" `112 
v L "mode" 3 148 "int8" `114 
v L "prescaler" 3 148 "int8" `115 
f B "setup_counters" 3 148 "void(int8 mode,int8 prescaler)" `113 
v L "value" 3 149 "int8" `117 
f B "set_rtcc" 3 149 "void(int8 value)" `116 
f B "get_rtcc" 3 150 "int8()" `118  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 3 152 "0"
d G "T0_EXT_L_TO_H" 3 153 "32"
d G "T0_EXT_H_TO_L" 3 154 "48"
d G "T0_DIV_1" 3 156 "8"
d G "T0_DIV_2" 3 157 "0"
d G "T0_DIV_4" 3 158 "1"
d G "T0_DIV_8" 3 159 "2"
d G "T0_DIV_16" 3 160 "3"
d G "T0_DIV_32" 3 161 "4"
d G "T0_DIV_64" 3 162 "5"
d G "T0_DIV_128" 3 163 "6"
d G "T0_DIV_256" 3 164 "7"
d G "T0_8_BIT" 3 167 "0"
d G "RTCC_INTERNAL" 3 169 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 3 170 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 3 171 "48"
d G "RTCC_DIV_1" 3 172 "8"
d G "RTCC_DIV_2" 3 173 "0"
d G "RTCC_DIV_4" 3 174 "1"
d G "RTCC_DIV_8" 3 175 "2"
d G "RTCC_DIV_16" 3 176 "3"
d G "RTCC_DIV_32" 3 177 "4"
d G "RTCC_DIV_64" 3 178 "5"
d G "RTCC_DIV_128" 3 179 "6"
d G "RTCC_DIV_256" 3 180 "7"
d G "RTCC_8_BIT" 3 181 "0"
c L "get_rtcc" 3 1 8 "FUNCTION"
v L "mode" 3 192 "int16" `120 
f B "setup_wdt" 3 192 "void(int16 mode)" `119 
f B "restart_wdt" 3 193 "void()" `121  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 3 196 "8"
d G "WDT_36MS" 3 197 "9"
d G "WDT_72MS" 3 198 "10"
d G "WDT_144MS" 3 199 "11"
d G "WDT_288MS" 3 200 "12"
d G "WDT_576MS" 3 201 "13"
d G "WDT_1152MS" 3 202 "14"
d G "WDT_2304MS" 3 203 "15"
c L "restart_wdt" 3 1 3 "FUNCTION"
v L "mode" 3 209 "int16" `123 
f B "setup_timer_1" 3 209 "void(int16 mode)" `122 
f B "get_timer1" 3 210 "int16()" `124 
v L "value" 3 211 "int16" `126 
f B "set_timer1" 3 211 "void(int16 value)" `125  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 3 214 "0"
d G "T1_INTERNAL" 3 215 "0x85"
d G "T1_EXTERNAL" 3 216 "0x87"
d G "T1_EXTERNAL_SYNC" 3 217 "0x83"
d G "T1_CLK_OUT" 3 219 "8"
d G "T1_DIV_BY_1" 3 221 "0"
d G "T1_DIV_BY_2" 3 222 "0x10"
d G "T1_DIV_BY_4" 3 223 "0x20"
d G "T1_DIV_BY_8" 3 224 "0x30"
c L "set_timer1" 3 1 3 "FUNCTION"
v L "mode" 3 229 "int8" `128 
v L "period" 3 229 "int8" `129 
v L "postscale" 3 229 "int8" `130 
f B "setup_timer_2" 3 229 "void(int8 mode,int8 period,int8 postscale)" `127 
f B "get_timer2" 3 230 "int8()" `131 
v L "value" 3 231 "int8" `133 
f B "set_timer2" 3 231 "void(int8 value)" `132  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 3 233 "0"
d G "T2_DIV_BY_1" 3 234 "4"
d G "T2_DIV_BY_4" 3 235 "5"
d G "T2_DIV_BY_16" 3 236 "6"
c L "set_timer2" 3 1 4 "FUNCTION"
v L "mode" 3 242 "int32" `135 
f B "setup_ccp1" 3 242 "void(int32 mode)" `134 
v L "mode" 3 243 "int32" `137 
v L "pwm" 3 243 "int8" `138 
f G "setup_ccp1" 3 243 "void(int32 mode,int8 pwm)" `136 
v L "value" 3 244 "int16" `140 
f B "set_pwm1_duty" 3 244 "void(int16 value)" `139  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 3 246 "0"
d G "CCP_CAPTURE_FE" 3 247 "4"
d G "CCP_CAPTURE_RE" 3 248 "5"
d G "CCP_CAPTURE_DIV_4" 3 249 "6"
d G "CCP_CAPTURE_DIV_16" 3 250 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 3 251 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 3 252 "9"
d G "CCP_COMPARE_INT" 3 253 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 3 254 "0xB"
d G "CCP_PWM" 3 255 "0xC"
d G "CCP_PWM_PLUS_1" 3 256 "0x1c"
d G "CCP_PWM_PLUS_2" 3 257 "0x2c"
d G "CCP_PWM_PLUS_3" 3 258 "0x3c"
c L "set_pwm1_duty" 3 1 1 "FUNCTION"
v L "mode" 3 264 "int32" `145 
f B "setup_ccp2" 3 264 "void(int32 mode)" `144 
v L "mode" 3 265 "int32" `147 
v L "pwm" 3 265 "int8" `148 
f G "setup_ccp2" 3 265 "void(int32 mode,int8 pwm)" `146 
v L "value" 3 266 "int16" `150 
f B "set_pwm2_duty" 3 266 "void(int16 value)" `149 
c L "set_pwm2_duty" 3 1 5 "FUNCTION"
v L "mode" 3 275 "int8" `155 
f B "setup_psp" 3 275 "void(int8 mode)" `154 
f B "psp_output_full" 3 276 "int8()" `156 
f B "psp_input_full" 3 277 "int8()" `157 
f B "psp_overflow" 3 278 "int8()" `158  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 3 280 "0x10"
d G "PSP_DISABLED" 3 281 "0"
c L "psp_overflow" 3 1 3 "FUNCTION"
v L "mode" 3 288 "int32" `161 
f B "setup_spi" 3 288 "void(int32 mode)" `160 
v L "value" 3 289 "int8" `163 
f B "spi_write" 3 289 "void(int8 value)" `162 
f B "spi_read" 3 290 "int8()" `164 
v L "value" 3 291 "int8" `166 
f G "spi_read" 3 291 "int8(int8 value)" `165 
f B "spi_data_in" 3 292 "int8()" `167  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 3 294 "0x00"
d G "SPI_MASTER" 3 295 "0x20"
d G "SPI_SLAVE" 3 296 "0x24"
d G "SPI_SCK_IDLE_HIGH" 3 297 "0x10"
d G "SPI_SCK_IDLE_LOW" 3 298 "0x00"
d G "SPI_CLK_DIV_4" 3 299 "0x00"
d G "SPI_CLK_DIV_16" 3 300 "0x01"
d G "SPI_CLK_DIV_64" 3 301 "0x02"
d G "SPI_CLK_T2" 3 302 "0x03"
d G "SPI_SS_DISABLED" 3 303 "0x01"
d G "SPI_XMIT_L_TO_H" 3 305 "0x4000"
d G "SPI_XMIT_H_TO_L" 3 306 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 3 308 "0x0000"
d G "SPI_SAMPLE_AT_END" 3 309 "0x8000"
d G "SPI_L_TO_H" 3 312 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 3 313 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 3 1 2 "FUNCTION"
v L "baud" 3 317 "int32" `169 
f B "setup_uart" 3 317 "void(int32 baud)" `168 
v L "baud" 3 318 "int32" `171 
v L "stream" 3 318 "int8" `172 
f G "setup_uart" 3 318 "void(int32 baud,int8 stream)" `170 
v L "baud" 3 319 "int32" `174 
v L "stream" 3 319 "int8" `175 
v L "clock" 3 319 "int32" `176 
f G "setup_uart" 3 319 "void(int32 baud,int8 stream,int32 clock)" `173 
v L "baud" 3 320 "int32" `178 
f B "set_uart_speed" 3 320 "void(int32 baud)" `177 
v L "baud" 3 321 "int32" `180 
v L "stream" 3 321 "int8" `181 
f G "set_uart_speed" 3 321 "void(int32 baud,int8 stream)" `179 
v L "baud" 3 322 "int32" `183 
v L "stream" 3 322 "int8" `184 
v L "clock" 3 322 "int32" `185 
f G "set_uart_speed" 3 322 "void(int32 baud,int8 stream,int32 clock)" `182  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 3 326 "2"
d G "UART_DATA" 3 327 "4"
c L "set_uart_speed" 3 1 3 "FUNCTION"
v L "mode" 3 331 "int32" `187 
f B "setup_comparator" 3 331 "void(int32 mode)" `186  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 3 333 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 3 334 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 3 335 "0xbcf05"
d G "NC_NC_NC_NC" 3 336 "0x0ff07"
d G "A0_A3_A1_A2" 3 337 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 3 338 "0x9ef01"
d G "A0_VR_A1_VR" 3 339 "0x3ff06"
d G "A3_VR_A2_VR" 3 340 "0xcff0e"
d G "CP1_INVERT" 3 341 "0x0000010"
d G "CP2_INVERT" 3 342 "0x0000020"
c L "setup_comparator" 3 1 2 "FUNCTION"
v L "mode" 3 349 "int8" `191 
f B "setup_vref" 3 349 "void(int8 mode)" `190  "Constants used in setup_vref() are:"
d G "VREF_LOW" 3 351 "0xa0"
d G "VREF_HIGH" 3 352 "0x80"
d G "VREF_A2" 3 354 "0x40"
c L "setup_vref" 3 1 4 "FUNCTION"
v L "mode" 3 362 "int32" `193 
f B "setup_adc" 3 362 "void(int32 mode)" `192 
f B "read_adc" 3 363 "int8()" `194 
v L "mode" 3 364 "int8" `196 
f G "read_adc" 3 364 "int8(int8 mode)" `195 
f G "read_adc" 3 365 "int16()" `197 
v L "mode" 3 366 "int8" `199 
f G "read_adc" 3 366 "int16(int8 mode)" `198 
f B "adc_done" 3 367 "int8()" `200  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 3 369 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 3 370 "0x10000"
d G "ADC_CLOCK_DIV_4" 3 371 "0x4000"
d G "ADC_CLOCK_DIV_8" 3 372 "0x0040"
d G "ADC_CLOCK_DIV_16" 3 373 "0x4040"
d G "ADC_CLOCK_DIV_32" 3 374 "0x0080"
d G "ADC_CLOCK_DIV_64" 3 375 "0x4080"
d G "ADC_CLOCK_INTERNAL" 3 376 "0x00c0" "Internal 2-6us"
c L "adc_done" 3 1 1 "FUNCTION"
v L "setting" 3 379 "int8" `202 
f B "setup_adc_ports" 3 379 "void(int8 setting)" `201 
v L "channel" 3 380 "int8" `204 
f B "set_adc_channel" 3 380 "void(int8 channel)" `203  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 3 382 "7" "None"
d G "ALL_ANALOG" 3 383 "0" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_AN1_AN2_AN4_AN5_AN6_AN7_VSS_VREF" 3 384 "1" "A0 A1 A2 A5 E0 E1 E2 VRefh=A3"
d G "AN0_AN1_AN2_AN3_AN4" 3 385 "2" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 3 386 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 3 387 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 3 388 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_AN5_AN6_AN7_VREF_VREF" 3 389 "0x08" "A0 A1 A5 E0 E1 E2 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN2_AN3_AN4_AN5" 3 390 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_AN1_AN2_AN4_AN5_VSS_VREF" 3 391 "0x0A" "A0 A1 A2 A5 E0 VRefh=A3"
d G "AN0_AN1_AN4_AN5_VREF_VREF" 3 392 "0x0B" "A0 A1 A5 E0 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN4_VREF_VREF" 3 393 "0x0C" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 3 394 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 3 395 "0x0E" "A0"
d G "AN0_VREF_VREF" 3 396 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 3 397 "0x1" "!old only provided for compatibility"
d G "A_ANALOG" 3 398 "0x2" "!old only provided for compatibility"
d G "A_ANALOG_RA3_REF" 3 399 "0x3" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 3 400 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 3 401 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 3 402 "0x8" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2" 3 403 "0x9" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3" 3 404 "0xA" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3_RA2" 3 405 "0xB" "!old only provided for compatibility"
d G "A_ANALOG_RA3_RA2_REF" 3 406 "0xC" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 3 407 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 3 408 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 3 409 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 3 412 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 3 413 "1"
d G "ADC_READ_ONLY" 3 414 "6"
c L "set_adc_channel" 3 1 3 "FUNCTION"
v L "x" 3 420 "sint8" `206 
f B "abs" 3 420 "sint8(sint8 x)" `205 
v L "x" 3 421 "sint16" `208 
f G "abs" 3 421 "sint16(sint16 x)" `207 
v L "x" 3 422 "sint32" `210 
f G "abs" 3 422 "sint32(sint32 x)" `209 
v L "x" 3 423 "float" `212 
f G "abs" 3 423 "float(float x)" `211 
v L "??65535" 3 424 "int8" `214 
v L "??65535" 3 424 "int8" `215 
f B "_mul" 3 424 "int16(int8 ,int8 )" `213 
v L "??65535" 3 425 "sint8" `214 
v L "??65535" 3 425 "sint8" `218 
f G "_mul" 3 425 "sint16(sint8 ,sint8 )" `216 
v L "??65535" 3 426 "int16" `214 
v L "??65535" 3 426 "int16" `221 
f G "_mul" 3 426 "int32(int16 ,int16 )" `219 
v L "??65535" 3 427 "sint16" `214 
v L "??65535" 3 427 "sint16" `224 
f G "_mul" 3 427 "sint32(sint16 ,sint16 )" `222  "Memory Manipulation Prototypes:"
v L "bank" 3 430 "int8" `226 
v L "offset" 3 430 "int8" `227 
f B "read_bank" 3 430 "int8(int8 bank,int8 offset)" `225 
v L "bank" 3 431 "int8" `229 
v L "offset" 3 431 "int8" `230 
v L "value" 3 431 "int8" `231 
f B "write_bank" 3 431 "void(int8 bank,int8 offset,int8 value)" `228 
v L "dest" 3 432 "*int8" `233 
v L "src" 3 432 "*int8" `234 
f B "strcpy" 3 432 "void(*int8 dest,*int8 src)" `232 
v L "dest" 3 433 "*int8" `236 
v L "src" 3 433 "*int8" `237 
f B "strcopy" 3 433 "void(*int8 dest,*int8 src)" `235 
v L "destination" 3 434 "*int8" `239 
v L "value" 3 434 "int8" `240 
v L "num" 3 434 "int16" `241 
f B "memset" 3 434 "void(*int8 destination,int8 value,int16 num)" `238 
v L "destination" 3 435 "*int8" `243 
v L "source" 3 435 "*int8" `244 
v L "num" 3 435 "int16" `245 
f B "memcpy" 3 435 "void(*int8 destination,*int8 source,int16 num)" `242  "String Prototypes:"
v L "cvalue" 3 438 "int8" `247 
f B "toupper" 3 438 "int8(int8 cvalue)" `246 
v L "cvalue" 3 439 "int8" `249 
f B "tolower" 3 439 "int8(int8 cvalue)" `248 
v L "string" 3 440 "*int8" `251 
v L "cstring" 3 440 "*int8" `252 
f B "sprintf" 3 440 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `250  "Data Manipulators Prototypes:"
v L "address" 3 443 "*int8" `255 
v L "bytes" 3 443 "int8" `256 
v L "value" 3 443 "int8" `257 
f B "shift_left" 3 443 "int8(*int8 address,int8 bytes,int8 value)" `254 
v L "address" 3 444 "*int8" `259 
v L "bytes" 3 444 "int8" `260 
v L "value" 3 444 "int8" `261 
f B "shift_right" 3 444 "int8(*int8 address,int8 bytes,int8 value)" `258 
v L "address" 3 445 "*int8" `263 
v L "bytes" 3 445 "int8" `264 
f B "rotate_left" 3 445 "void(*int8 address,int8 bytes)" `262 
v L "address" 3 446 "*int8" `266 
v L "bytes" 3 446 "int8" `267 
f B "rotate_right" 3 446 "void(*int8 address,int8 bytes)" `265 
v L "value" 3 447 "int8" `269 
f B "swap" 3 447 "void(int8 value)" `268 
v L "var" 3 448 "int16" `271 
v L "offset" 3 448 "int8" `272 
f B "make8" 3 448 "int8(int16 var,int8 offset)" `270 
v L "var" 3 449 "int32" `271 
v L "offset" 3 449 "int8" `275 
f G "make8" 3 449 "int8(int32 var,int8 offset)" `273 
v L "varhigh" 3 450 "int8" `277 
v L "varlow" 3 450 "int8" `278 
f B "make16" 3 450 "int16(int8 varhigh,int8 varlow)" `276 
v L "var1" 3 451 "int16" `280 
f B "make32" 3 451 "int32(int16 var1)" `279 
v L "var1" 3 452 "int16" `282 
v L "var2" 3 452 "int16" `283 
f G "make32" 3 452 "int32(int16 var1,int16 var2)" `281 
v L "var1" 3 453 "int16" `282 
v L "var2" 3 453 "int8" `286 
f G "make32" 3 453 "int32(int16 var1,int8 var2)" `284 
v L "var1" 3 454 "int16" `288 
v L "var2" 3 454 "int8" `289 
v L "var3" 3 454 "int8" `290 
f G "make32" 3 454 "int32(int16 var1,int8 var2,int8 var3)" `287 
v L "var1" 3 455 "int8" `292 
f G "make32" 3 455 "int32(int8 var1)" `291 
v L "var1" 3 456 "int8" `282 
v L "var2" 3 456 "int8" `295 
f G "make32" 3 456 "int32(int8 var1,int8 var2)" `293 
v L "var1" 3 457 "int8" `288 
v L "var2" 3 457 "int8" `289 
v L "var3" 3 457 "int8" `299 
f G "make32" 3 457 "int32(int8 var1,int8 var2,int8 var3)" `296 
v L "var1" 3 458 "int8" `301 
v L "var2" 3 458 "int8" `302 
v L "var3" 3 458 "int8" `303 
v L "var4" 3 458 "int8" `304 
f G "make32" 3 458 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `300 
v L "var1" 3 459 "int8" `282 
v L "var2" 3 459 "int16" `307 
f G "make32" 3 459 "int32(int8 var1,int16 var2)" `305 
v L "var1" 3 460 "int8" `288 
v L "var2" 3 460 "int16" `289 
v L "var3" 3 460 "int8" `311 
f G "make32" 3 460 "int32(int8 var1,int16 var2,int8 var3)" `308 
v L "var1" 3 461 "int8" `288 
v L "var2" 3 461 "int8" `289 
v L "var3" 3 461 "int16" `315 
f G "make32" 3 461 "int32(int8 var1,int8 var2,int16 var3)" `312 
v L "var" 3 462 "int8" `317 
v L "bit" 3 462 "int8" `318 
f B "bit_set" 3 462 "void(int8 var,int8 bit)" `316 
v L "var" 3 463 "int16" `317 
v L "bit" 3 463 "int8" `321 
f G "bit_set" 3 463 "void(int16 var,int8 bit)" `319 
v L "var" 3 464 "int32" `317 
v L "bit" 3 464 "int8" `324 
f G "bit_set" 3 464 "void(int32 var,int8 bit)" `322 
v L "var" 3 465 "int8" `326 
v L "bit" 3 465 "int8" `327 
f B "bit_clear" 3 465 "void(int8 var,int8 bit)" `325 
v L "var" 3 466 "int16" `326 
v L "bit" 3 466 "int8" `330 
f G "bit_clear" 3 466 "void(int16 var,int8 bit)" `328 
v L "var" 3 467 "int32" `326 
v L "bit" 3 467 "int8" `333 
f G "bit_clear" 3 467 "void(int32 var,int8 bit)" `331 
v L "var" 3 468 "int8" `335 
v L "bit" 3 468 "int8" `336 
f B "bit_test" 3 468 "int8(int8 var,int8 bit)" `334 
v L "var" 3 469 "int16" `335 
v L "bit" 3 469 "int8" `339 
f G "bit_test" 3 469 "int8(int16 var,int8 bit)" `337 
v L "var" 3 470 "int32" `335 
v L "bit" 3 470 "int8" `342 
f G "bit_test" 3 470 "int8(int32 var,int8 bit)" `340  "#use delay() Prototypes:"
v L "count" 3 473 "int8" `344 
f B "delay_cycles" 3 473 "void(int8 count)" `343 
v L "time" 3 474 "int16" `346 
f B "delay_ms" 3 474 "void(int16 time)" `345 
v L "time" 3 475 "int16" `348 
f B "delay_us" 3 475 "void(int16 time)" `347  "#use rs232() Prototypes:"
v L "cdata" 3 478 "int8" `350 
f B "putchar" 3 478 "void(int8 cdata)" `349 
v L "cdata" 3 479 "int8" `352 
v L "stream" 3 479 "int8" `353 
f G "putchar" 3 479 "void(int8 cdata,int8 stream)" `351 
v L "string" 3 480 "*int8" `355 
f B "puts" 3 480 "void(*int8 string)" `354 
v L "string" 3 481 "*int8" `357 
v L "stream" 3 481 "int8" `358 
f G "puts" 3 481 "void(*int8 string,int8 stream)" `356 
f B "getch" 3 482 "int8()" `359 
v L "stream" 3 483 "int8" `361 
f G "getch" 3 483 "int8(int8 stream)" `360 
v L "string" 3 484 "*int8" `363 
f B "gets" 3 484 "void(*int8 string)" `362 
v L "string" 3 485 "*int8" `365 
v L "stream" 3 485 "int8" `366 
f G "gets" 3 485 "void(*int8 string,int8 stream)" `364 
f B "kbhit" 3 486 "int8()" `367 
v L "stream" 3 487 "int8" `369 
f G "kbhit" 3 487 "int8(int8 stream)" `368 
v L "string" 3 488 "*int8" `371 
f B "printf" 3 488 "void(*int8 string,*int8 _VA_LIST)" `370 
v L "stream" 3 489 "int8" `374 
v L "string" 3 489 "*int8" `375 
f B "fprintf" 3 489 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `373 
f B "putc_send" 3 490 "void()" `377 
v L "stream" 3 491 "int8" `379 
f B "fputc_send" 3 491 "void(int8 stream)" `378 
f B "rcv_buffer_full" 3 492 "int8()" `380 
v L "stream" 3 493 "int8" `382 
f G "rcv_buffer_full" 3 493 "int8(int8 stream)" `381 
f B "rcv_buffer_bytes" 3 494 "int16()" `383 
v L "stream" 3 495 "int8" `385 
f G "rcv_buffer_bytes" 3 495 "int16(int8 stream)" `384 
f B "tx_buffer_full" 3 496 "int8()" `386 
v L "stream" 3 497 "int8" `388 
f G "tx_buffer_full" 3 497 "int8(int8 stream)" `387 
f B "tx_buffer_bytes" 3 498 "int16()" `389 
v L "stream" 3 499 "int8" `391 
f G "tx_buffer_bytes" 3 499 "int16(int8 stream)" `390  "#use i2c() Prototypes:"
f B "i2c_read" 3 502 "int8()" `392 
v L "stream" 3 503 "int8" `394 
f G "i2c_read" 3 503 "int8(int8 stream)" `393 
v L "stream" 3 504 "int8" `396 
v L "ack" 3 504 "int8" `397 
f G "i2c_read" 3 504 "int8(int8 stream,int8 ack)" `395 
v L "data" 3 505 "int8" `399 
f B "i2c_write" 3 505 "int8(int8 data)" `398 
v L "stream" 3 506 "int8" `401 
v L "data" 3 506 "int8" `402 
f G "i2c_write" 3 506 "int8(int8 stream,int8 data)" `400 
f B "i2c_start" 3 507 "void()" `403 
v L "stream" 3 508 "int8" `405 
f G "i2c_start" 3 508 "void(int8 stream)" `404 
v L "stream" 3 509 "int8" `407 
v L "restart" 3 509 "int8" `408 
f G "i2c_start" 3 509 "void(int8 stream,int8 restart)" `406 
f B "i2c_stop" 3 510 "void()" `409 
v L "stream" 3 511 "int8" `411 
f G "i2c_stop" 3 511 "void(int8 stream)" `410 
f B "i2c_isr_state" 3 512 "int8()" `412 
v L "addr" 3 513 "int8" `414 
f B "i2c_slaveaddr" 3 513 "void(int8 addr)" `413 
v L "stream" 3 514 "int8" `416 
v L "addr" 3 514 "int8" `417 
f G "i2c_slaveaddr" 3 514 "void(int8 stream,int8 addr)" `415 
f B "i2c_poll" 3 515 "int8()" `418 
v L "stream" 3 516 "int8" `420 
f G "i2c_poll" 3 516 "int8(int8 stream)" `419 
v L "baud" 3 517 "int32" `422 
f B "i2c_init" 3 517 "void(int32 baud)" `421 
v L "stream" 3 518 "int8" `424 
v L "baud" 3 518 "int32" `425 
f G "i2c_init" 3 518 "void(int8 stream,int32 baud)" `423  "#use spi() Prototypes:"
f B "spi_xfer" 3 521 "int8()" `426 
f G "spi_xfer" 3 522 "int16()" `427 
f G "spi_xfer" 3 523 "int32()" `428 
v L "data" 3 524 "int8" `430 
f G "spi_xfer" 3 524 "int8(int8 data)" `429 
v L "data" 3 525 "int16" `432 
f G "spi_xfer" 3 525 "int16(int16 data)" `431 
v L "data" 3 526 "int32" `434 
f G "spi_xfer" 3 526 "int32(int32 data)" `433 
v L "stream" 3 527 "int8" `436 
v L "data" 3 527 "int8" `437 
f G "spi_xfer" 3 527 "int8(int8 stream,int8 data)" `435 
v L "stream" 3 528 "int8" `436 
v L "data" 3 528 "int16" `440 
f G "spi_xfer" 3 528 "int16(int8 stream,int16 data)" `438 
v L "stream" 3 529 "int8" `436 
v L "data" 3 529 "int32" `443 
f G "spi_xfer" 3 529 "int32(int8 stream,int32 data)" `441 
v L "stream" 3 530 "int8" `445 
v L "data" 3 530 "int8" `446 
v L "bits" 3 530 "int8" `447 
f G "spi_xfer" 3 530 "int8(int8 stream,int8 data,int8 bits)" `444 
v L "stream" 3 531 "int8" `445 
v L "data" 3 531 "int16" `446 
v L "bits" 3 531 "int8" `451 
f G "spi_xfer" 3 531 "int16(int8 stream,int16 data,int8 bits)" `448 
v L "stream" 3 532 "int8" `445 
v L "data" 3 532 "int32" `446 
v L "bits" 3 532 "int8" `455 
f G "spi_xfer" 3 532 "int32(int8 stream,int32 data,int8 bits)" `452 
v L "baud" 3 533 "int32" `457 
f B "spi_init" 3 533 "void(int32 baud)" `456 
v L "stream" 3 534 "int8" `459 
v L "baud" 3 534 "int32" `460 
f G "spi_init" 3 534 "void(int8 stream,int32 baud)" `458 
v L "baud" 3 535 "int32" `462 
f B "spi_speed" 3 535 "void(int32 baud)" `461 
v L "stream" 3 536 "int8" `464 
v L "baud" 3 536 "int32" `465 
f G "spi_speed" 3 536 "void(int8 stream,int32 baud)" `463 
v L "stream" 3 537 "int8" `467 
v L "baud" 3 537 "int32" `468 
v L "clock" 3 537 "int32" `469 
f G "spi_speed" 3 537 "void(int8 stream,int32 baud,int32 clock)" `466 
v L "data" 3 538 "int8" `471 
f B "spi_prewrite" 3 538 "void(int8 data)" `470 
v L "data" 3 539 "int16" `473 
f G "spi_prewrite" 3 539 "void(int16 data)" `472 
v L "data" 3 540 "int32" `475 
f G "spi_prewrite" 3 540 "void(int32 data)" `474 
v L "??65535" 3 541 "int8" `477 
v L "data" 3 541 "int8" `478 
f G "spi_prewrite" 3 541 "void(int8 ,int8 data)" `476 
v L "??65535" 3 542 "int8" `477 
v L "data" 3 542 "int16" `481 
f G "spi_prewrite" 3 542 "void(int8 ,int16 data)" `479 
v L "??65535" 3 543 "int8" `477 
v L "data" 3 543 "int32" `484 
f G "spi_prewrite" 3 543 "void(int8 ,int32 data)" `482 
f B "spi_xfer_in" 3 544 "int8()" `485 
f G "spi_xfer_in" 3 545 "int16()" `486 
f G "spi_xfer_in" 3 546 "int32()" `487 
v L "bits" 3 547 "int8" `489 
f G "spi_xfer_in" 3 547 "int8(int8 bits)" `488 
v L "bits" 3 548 "int8" `491 
f G "spi_xfer_in" 3 548 "int16(int8 bits)" `490 
v L "bits" 3 549 "int8" `493 
f G "spi_xfer_in" 3 549 "int32(int8 bits)" `492 
v L "stream" 3 550 "int8" `495 
v L "bits" 3 550 "int8" `496 
f G "spi_xfer_in" 3 550 "int8(int8 stream,int8 bits)" `494 
v L "stream" 3 551 "int8" `495 
v L "bits" 3 551 "int8" `499 
f G "spi_xfer_in" 3 551 "int16(int8 stream,int8 bits)" `497 
v L "stream" 3 552 "int8" `495 
v L "bits" 3 552 "int8" `502 
f G "spi_xfer_in" 3 552 "int32(int8 stream,int8 bits)" `500  "#use rtos() Prototypes:"
f B "rtos_run" 3 555 "void()" `503 
f B "rtos_yield" 3 556 "void()" `504 
v L "task" 3 557 "int8" `506 
f B "rtos_enable" 3 557 "void(int8 task)" `505 
v L "task" 3 558 "int8" `508 
f B "rtos_disable" 3 558 "void(int8 task)" `507 
f B "rtos_terminate" 3 559 "void()" `509 
v L "flag" 3 560 "int8" `511 
f B "rtos_await" 3 560 "void(int8 flag)" `510 
v L "sem" 3 561 "int8" `513 
f B "rtos_wait" 3 561 "void(int8 sem)" `512 
v L "sem" 3 562 "int8" `515 
f B "rtos_signal" 3 562 "void(int8 sem)" `514 
v L "task" 3 563 "int8" `517 
v L "msg" 3 563 "int8" `518 
f B "rtos_msg_send" 3 563 "void(int8 task,int8 msg)" `516 
f B "rtos_msg_read" 3 564 "int8()" `519 
f B "rtos_msg_poll" 3 565 "int8()" `520 
v L "task" 3 566 "int8" `522 
f B "rtos_overrun" 3 566 "int8(int8 task)" `521 
v L "task" 3 567 "int8" `524 
v L "stat" 3 567 "*int8" `525 
f B "rtos_stats" 3 567 "void(int8 task,*int8 stat)" `523  "#use timer() Prototypes:"
f B "get_ticks" 3 570 "int8()" `526 
f G "get_ticks" 3 571 "int16()" `527 
f G "get_ticks" 3 572 "int32()" `528 
v L "stream" 3 573 "int8" `530 
f G "get_ticks" 3 573 "int8(int8 stream)" `529 
v L "stream" 3 574 "int8" `532 
f G "get_ticks" 3 574 "int16(int8 stream)" `531 
v L "stream" 3 575 "int8" `534 
f G "get_ticks" 3 575 "int32(int8 stream)" `533 
v L "value" 3 576 "int8" `536 
f B "set_ticks" 3 576 "void(int8 value)" `535 
v L "value" 3 577 "int16" `538 
f G "set_ticks" 3 577 "void(int16 value)" `537 
v L "value" 3 578 "int32" `540 
f G "set_ticks" 3 578 "void(int32 value)" `539 
v L "stream" 3 579 "int8" `542 
v L "value" 3 579 "int8" `543 
f G "set_ticks" 3 579 "void(int8 stream,int8 value)" `541 
v L "stream" 3 580 "int8" `542 
v L "value" 3 580 "int16" `546 
f G "set_ticks" 3 580 "void(int8 stream,int16 value)" `544 
v L "stream" 3 581 "int8" `542 
v L "value" 3 581 "int32" `549 
f G "set_ticks" 3 581 "void(int8 stream,int32 value)" `547  "#use pwm() Prototypes:"
f B "pwm_on" 3 584 "void()" `550 
v L "stream" 3 585 "int8" `552 
f G "pwm_on" 3 585 "void(int8 stream)" `551 
f B "pwm_off" 3 586 "void()" `553 
v L "stream" 3 587 "int8" `555 
f G "pwm_off" 3 587 "void(int8 stream)" `554 
v L "duty" 3 588 "int16" `557 
f B "pwm_set_duty" 3 588 "void(int16 duty)" `556 
v L "stream" 3 589 "int8" `559 
v L "duty" 3 589 "int16" `560 
f G "pwm_set_duty" 3 589 "void(int8 stream,int16 duty)" `558 
v L "percent" 3 590 "int16" `562 
f B "pwm_set_duty_percent" 3 590 "void(int16 percent)" `561 
v L "stream" 3 591 "int8" `564 
v L "percent" 3 591 "int16" `565 
f G "pwm_set_duty_percent" 3 591 "void(int8 stream,int16 percent)" `563 
v L "frequency" 3 592 "int32" `567 
f B "pwm_set_frequency" 3 592 "void(int32 frequency)" `566 
v L "stream" 3 593 "int8" `569 
v L "frequency" 3 593 "int32" `570 
f G "pwm_set_frequency" 3 593 "void(int8 stream,int32 frequency)" `568  "#use capture() Prototypes:"
f B "get_capture_time" 3 596 "int16()" `571 
v L "stream" 3 597 "int8" `573 
f G "get_capture_time" 3 597 "int16(int8 stream)" `572 
f B "get_capture_event" 3 598 "int8()" `574 
v L "stream" 3 599 "int8" `576 
f G "get_capture_event" 3 599 "int8(int8 stream)" `575  "Enviroment Prototypes:"
c L "get_capture_event" 3 1 2 "FUNCTION"
v L "address" 3 612 "int16" `578 
f B "goto_address" 3 612 "void(int16 address)" `577 
v L "label" 3 613 "int16" `580 
f B "label_address" 3 613 "int16(int16 label)" `579  "Program Memory Prototypes:"
v L "address" 3 616 "int16" `582 
v L "dataptr" 3 616 "*int8" `583 
v L "count" 3 616 "int16" `584 
f B "read_program_memory" 3 616 "void(int16 address,*int8 dataptr,int16 count)" `581 
v L "address" 3 617 "int16" `586 
f B "read_program_eeprom" 3 617 "int16(int16 address)" `585 
v L "address" 3 618 "int16" `588 
f B "erase_program_eeprom" 3 618 "void(int16 address)" `587 
v L "address" 3 619 "int16" `590 
v L "dataptr" 3 619 "*int8" `591 
v L "count" 3 619 "int16" `592 
f B "write_program_memory" 3 619 "void(int16 address,*int8 dataptr,int16 count)" `589 
v L "address" 3 620 "int16" `594 
v L "data" 3 620 "int16" `595 
f B "write_program_eeprom" 3 620 "void(int16 address,int16 data)" `593  "EEPROM Prototypes:"
t G "__EEADDRESS__" 3 625 "int16" `596 
v L "address" 3 630 "__EEADDRESS__" `598 
f B "read_eeprom" 3 630 "int8(__EEADDRESS__ address)" `597 
v L "address" 3 631 "__EEADDRESS__" `600 
v L "value" 3 631 "int8" `601 
f B "write_eeprom" 3 631 "void(__EEADDRESS__ address,int8 value)" `599  "INT"
c L "write_eeprom" 3 1 4 "FUNCTION"
v L "interrupt" 3 638 "int32" `603 
f B "enable_interrupts" 3 638 "void(int32 interrupt)" `602 
v L "interrupt" 3 639 "int32" `605 
f B "disable_interrupts" 3 639 "void(int32 interrupt)" `604 
v L "interrupt" 3 640 "int32" `607 
f B "clear_interrupt" 3 640 "void(int32 interrupt)" `606 
v L "interrupt" 3 641 "int32" `609 
f B "interrupt_active" 3 641 "int8(int32 interrupt)" `608 
v L "interrupt" 3 642 "int32" `611 
f B "interrupt_enabled" 3 642 "int8(int32 interrupt)" `610 
v L "source" 3 643 "int8" `613 
v L "edge" 3 643 "int8" `614 
f B "ext_int_edge" 3 643 "void(int8 source,int8 edge)" `612 
v L "address" 3 644 "int16" `616 
f B "jump_to_irs" 3 644 "void(int16 address)" `615  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 3 646 "0x40"
d G "H_TO_L" 3 647 "0"
d G "GLOBAL" 3 649 "0x0BC0"
d G "PERIPH" 3 650 "0x0B40"
d G "INT_RTCC" 3 651 "0x000B20"
d G "INT_RB" 3 652 "0x00FF0B08"
d G "INT_EXT_L2H" 3 653 "0x50000B10"
d G "INT_EXT_H2L" 3 654 "0x60000B10"
d G "INT_EXT" 3 655 "0x000B10"
d G "INT_AD" 3 656 "0x008C40"
d G "INT_TBE" 3 657 "0x008C10"
d G "INT_RDA" 3 658 "0x008C20"
d G "INT_TIMER1" 3 659 "0x008C01"
d G "INT_TIMER2" 3 660 "0x008C02"
d G "INT_CCP1" 3 661 "0x008C04"
d G "INT_CCP2" 3 662 "0x008D01"
d G "INT_SSP" 3 663 "0x008C08"
d G "INT_PSP" 3 664 "0x008C80"
d G "INT_BUSCOL" 3 665 "0x008D08"
d G "INT_EEPROM" 3 666 "0x008D10"
d G "INT_TIMER0" 3 667 "0x000B20"
d G "INT_COMP" 3 668 "0x008D40"
D G "usi8" 2 9 "unsigned int8"
D G "usi16" 2 10 "unsigned int16"
D G "usi32" 2 11 "unsigned int32"
D G "si8" 2 12 "signed   int8"
D G "si16" 2 13 "signed   int16"
D G "si32" 2 14 "signed   int32"
D G "bool" 2 16 "int1"
D G "enable" 2 18 "1"
D G "disable" 2 19 "0"
D G "on" 2 21 "1"
D G "off" 2 22 "0"
D G "bt0" 2 25 "pin_b0"
D G "bt1" 2 29 "pin_b1"
D G "bt2" 2 33 "pin_b2"
D G "bt3" 2 37 "pin_b3"
D G "bt4" 2 41 "pin_b4"
D G "pinServo" 2 45 "pin_c1"
D G "pinCold" 2 49 "pin_d6"
D G "pinHot" 2 53 "pin_d7"
V G "gh_nd" 2 56 "int8" `629 
V G "giay_tam" 2 58 "int8" `630 
V G "bdn" 2 58 "int8" `631 
V G "tt_ht" 2 58 "int8" `632 
V G "gt_mod" 2 59 "sint8" `633 
V G "tg_chinh" 2 59 "sint8" `634 
D G "tang" 2 61 "0"
D G "giam" 2 62 "1"
V G "e_11" 2 64 "int1" `635 
V G "e_22" 2 64 "int1" `636 
V G "e_33" 2 64 "int1" `637 
V G "eat_hh" 2 66 "int8" `638 
V G "eat_pp" 2 66 "int8" `639 
V G "eat_ss" 2 66 "int8" `640 
F G "interrupt_timer1" 2 70 "void()" `641 
F G "set_up_init" 2 75 "void()" `642 
D G "level_menu" 4 1 "5"
V G "dl_count" 4 3 "int8" `643 
V G "dem_menu_tong_curr" 4 5 "int8" `644 
V G "dem_menu_tong_prev" 4 6 "int8" `645 
V L "dl" 4 8 "int16" `647 
V L "pin" 4 8 "int8" `648 
F G "nhan_btn_giu" 4 8 "int8(int16 dl,int8 pin)" `646 
V L "giu_nha" 4 20 "int8" `657 
V L "pin" 4 20 "int8" `658 
F G "nhan_btn_nha" 4 20 "int8(int8 giu_nha,int8 pin)" `656 
D G "ds13_addr_wr" 5 1 "0xd0"
D G "ds13_addr_rd" 5 2 "0xd1"
V G "time_w" 5 5 "int8[9]" `659 
V G "time_r" 5 6 "int8[9]" `660 
D G "dec_giay_eat" 5 8 "ds1307_bcdToDec(eat_ss)"
D G "dec_phut_eat" 5 9 "ds1307_bcdToDec(eat_pp)"
D G "dec_gio_eat" 5 10 "ds1307_bcdToDec(eat_hh)"
D G "dec_giay_ds" 5 12 "ds1307_bcdToDec(time_r[0])"
D G "dec_phut_ds" 5 13 "ds1307_bcdToDec(time_r[1])"
D G "dec_gio_ds" 5 14 "ds1307_bcdToDec(time_r[2])"
D G "dec_thu_ds" 5 15 "ds1307_bcdToDec(time_r[3])"
D G "dec_ngay_ds" 5 16 "ds1307_bcdToDec(time_r[4])"
D G "dec_thang_ds" 5 17 "ds1307_bcdToDec(time_r[5])"
D G "dec_nam_ds" 5 18 "ds1307_bcdToDec(time_r[6])"
D G "giay_ds" 5 20 "time_r[0]"
D G "phut_ds" 5 21 "time_r[1]"
D G "gio_ds" 5 22 "time_r[2]"
D G "thu_ds" 5 23 "time_r[3]"
D G "ngay_ds" 5 24 "time_r[4]"
D G "thang_ds" 5 25 "time_r[5]"
D G "nam_ds" 5 26 "time_r[6]"
D G "ma_qd" 5 28 "time_w[8]"
D G "ma_ds" 5 29 "time_r[8]"
V L "val" 5 31 "int8" `662 
F G "ds1307_decToBcd" 5 31 "int8(int8 val)" `661 
V L "val" 5 35 "int8" `667 
F G "ds1307_bcdToDec" 5 35 "int8(int8 val)" `666 
V L "j" 5 39 "int8" `672 
F G "ds1307_read_time" 5 40 "void(int8 j)" `671 
V L "i" 5 41 "int8" `673 
C L "ds1307_read_time" 5 4 1 "FUNCTION"
V L "sel" 5 53 "int8" `675 
F G "ds1307_update_time" 5 54 "void(int8 sel)" `674 
V L "i" 5 55 "int8" `676 
F G "ds1307_init" 5 68 "void()" `677 
V L "dcdt" 5 76 "int8" `679 
V L "dt" 5 76 "int8" `680 
F G "ds1307_save_ds" 5 77 "void(int8 dcdt,int8 dt)" `678 
D G "pcf8574_addr_wr" 6 1 "0x4E" "0b01001110"
D G "pcf8574_addr_rd" 6 2 "0x4F" "0b01001111"
F G "i2c_reset" 6 5 "void()" `681 
F G "i2c_setup_write" 6 11 "void()" `682 
V L "payload" 6 16 "int8" `684 
F G "i2c_write_1byte" 6 17 "void(int8 payload)" `683 
D G "lcd_cols" 7 1 "16"
D G "lcd_rows" 7 2 "2"
D G "LCD_CLEARDISPLAY" 7 5 "0x01"
D G "LCD_RETURNHOME" 7 6 "0x02"
D G "LCD_ENTRYMODESET" 7 7 "0x04"
D G "LCD_DISPLAYCONTROL" 7 8 "0x08"
D G "LCD_CURSORSHIFT" 7 9 "0x10"
D G "LCD_FUNCTIONSET" 7 10 "0x20"
D G "LCD_SETCGRAMADDR" 7 11 "0x40"
D G "LCD_SETDDRAMADDR" 7 12 "0x80"
D G "LCD_ENTRYRIGHT" 7 15 "0x00"
D G "LCD_ENTRYLEFT" 7 16 "0x02"
D G "LCD_ENTRYSHIFTINCREMENT" 7 17 "0x01"
D G "LCD_ENTRYSHIFTDECREMENT" 7 18 "0x00"
D G "LCD_DISPLAYON" 7 21 "0x04"
D G "LCD_DISPLAYOFF" 7 22 "0x00"
D G "LCD_CURSORON" 7 23 "0x02"
D G "LCD_CURSOROFF" 7 24 "0x00"
D G "LCD_BLINKON" 7 25 "0x01"
D G "LCD_BLINKOFF" 7 26 "0x00"
D G "LCD_DISPLAYMOVE" 7 29 "0x08"
D G "LCD_CURSORMOVE" 7 30 "0x00"
D G "LCD_MOVERIGHT" 7 31 "0x04"
D G "LCD_MOVELEFT" 7 32 "0x00"
D G "LCD_8BITMODE" 7 35 "0x10"
D G "LCD_4BITMODE" 7 36 "0x00"
D G "LCD_2LINE" 7 37 "0x08"
D G "LCD_1LINE" 7 38 "0x00"
D G "LCD_5x10DOTS" 7 39 "0x04"
D G "LCD_5x8DOTS" 7 40 "0x00"
D G "LCD_BACKLIGHT" 7 43 "0x08"
D G "LCD_NOBACKLIGHT" 7 44 "0x00"
D G "En" 7 46 "0B00000100" "Enable bit"
D G "Rw" 7 47 "0B00000010" "Read/Write bit"
D G "Rs" 7 48 "0B00000001" "Register select bit"
V L "value" 7 50 "int8" `686 
f G "write4bits" 7 50 "void(int8 value)" `685 
V L "_data" 7 51 "int8" `688 
f G "expanderWrite" 7 51 "void(int8 _data)" `687 
V L "_data" 7 52 "int8" `690 
f G "pulseEnable" 7 52 "void(int8 _data)" `689 
V L "value" 7 53 "int8" `692 
f G "lcd_command" 7 53 "void(int8 value)" `691 
f G "lcd_display" 7 54 "void()" `693 
f G "lcd_clear" 7 55 "void()" `694 
f G "lcd_home" 7 56 "void()" `695 
V L "value" 7 57 "int8" `697 
V L "mode" 7 57 "int8" `698 
f G "lcd_send" 7 57 "void(int8 value,int8 mode)" `696 
V L "value" 7 58 "int8" `700 
f G "lcd_data" 7 58 "void(int8 value)" `699 
V G "_displayfunction" 7 60 "int8" `701 
V G "_displaycontrol" 7 61 "int8" `702 
V G "_displaymode" 7 62 "int8" `703 
V G "_numlines" 7 63 "int8" `704 
V G "_cols" 7 64 "int8" `705 
V G "_rows" 7 65 "int8" `706 
V G "_backlightval" 7 66 "int8" `707 
F G "lcd_init" 7 68 "void()" `708 
C L "lcd_init" 7 4 1 "FUNCTION"
C L "lcd_init" 7 4 1 "FUNCTION"
C L "lcd_init" 7 4 1 "FUNCTION"
C L "lcd_init" 7 4 1 "FUNCTION"
C L "lcd_init" 7 4 1 "FUNCTION"
C L "lcd_init" 7 4 1 "FUNCTION"
F G "lcd_clear" 7 109 "void()" `694 
F G "lcd_home" 7 114 "void()" `695 
V L "col" 7 119 "int8" `710 
V L "row" 7 119 "int8" `711 
F G "lcd_setCursor" 7 119 "void(int8 col,int8 row)" `709 
V L "row_offsets" 7 120 "int8[1]" `712 
F G "lcd_display" 7 127 "void()" `693 
V L "value" 7 132 "int8" `714 
F G "lcd_command" 7 132 "void(int8 value)" `691 
V L "value" 7 136 "int8" `714 
F G "lcd_data" 7 136 "void(int8 value)" `699 
V L "value" 7 140 "int8" `697 
V L "mode" 7 140 "int8" `715 
F G "lcd_send" 7 140 "void(int8 value,int8 mode)" `696 
V L "highnib" 7 141 "int8" `713 
V L "lownib" 7 142 "int8" `714 
V L "value" 7 147 "int8" `716 
F G "write4bits" 7 147 "void(int8 value)" `685 
V L "_data" 7 152 "int8" `716 
F G "expanderWrite" 7 152 "void(int8 _data)" `687 
V L "_data" 7 156 "int8" `716 
F G "pulseEnable" 7 156 "void(int8 _data)" `689 
C L "lcd_log_info" 7 4 1 "FUNCTION"
V L "time_s" 7 164 "int16" `716 
V L "ena_time" 7 164 "int8" `717 
F G "lcd_log_info" 7 164 "void(int16 time_s,int8 ena_time)" `715 
V L "dt" 7 174 "int16" `725 
V L "x" 7 174 "int8" `726 
V L "y" 7 174 "int8" `727 
V L "is_xvn" 7 174 "int8" `728 
V L "is_dot" 7 174 "int8" `729 
F G "lcd_dis_2num_dot" 7 174 "void(int16 dt,int8 x,int8 y,int8 is_xvn,int8 is_dot)" `724 
V L "ch" 7 175 "int8" `730 
V L "dv" 7 175 "int8" `731 
V L "dt" 7 183 "int16" `738 
V L "x" 7 183 "int8" `739 
V L "y" 7 183 "int8" `740 
V L "is_xvn" 7 183 "int8" `741 
V L "is_dot" 7 183 "int8" `742 
F G "lcd_dis_3num_dot" 7 183 "void(int16 dt,int8 x,int8 y,int8 is_xvn,int8 is_dot)" `737 
V L "tr" 7 184 "int8" `743 
V L "ch" 7 184 "int8" `744 
V L "dv" 7 184 "int8" `745 
C L "lcd_dis_3num_dot" 7 4 1 "FUNCTION"
V L "x" 7 197 "int8" `750 
V L "y" 7 197 "int8" `751 
V L "hh" 7 197 "int8" `752 
V L "pp" 7 197 "int8" `753 
V L "ss" 7 197 "int8" `754 
V L "e3" 7 197 "int8" `755 
V L "e2" 7 197 "int8" `756 
V L "e1" 7 197 "int8" `757 
F G "lcd_dis_xx_yy_zz" 7 197 "void(int8 x,int8 y,int8 hh,int8 pp,int8 ss,int8 e3,int8 e2,int8 e1)" `749 
V L "hh_ch" 7 198 "int8" `758 
V L "hh_dv" 7 198 "int8" `759 
V L "pp_ch" 7 198 "int8" `760 
V L "pp_dv" 7 198 "int8" `761 
V L "ss_ch" 7 198 "int8" `762 
V L "ss_dv" 7 198 "int8" `763 
F G "log_code_ds1307" 7 207 "void()" `766 
V L "x" 8 1 "int8" `769 
V L "sel" 8 1 "int8" `770 
F G "tang_or_giam_bcd" 8 1 "int8(int8 x,int8 sel)" `768 
V L "y" 8 2 "int8" `771 
V L "dv" 8 2 "int8" `772 
V L "ch" 8 2 "int8" `773 
V L "v" 8 2 "int8" `774 
F G "tat_bat_2led_chinh" 8 13 "void()" `775 
F G "giai_ma_gpg_lcd" 8 20 "void()" `776 
F G "giai_ma_ntn_lcd" 8 24 "void()" `777 
F G "giai_ma_thu_lcd" 8 28 "void()" `778 
F G "giai_ma_gpg_ntn_thu_lcd" 8 32 "void()" `779 
F G "xu_ly_choptat" 8 45 "void()" `780 
F G "phim_chon_hthi_mode" 8 53 "void()" `781 
F G "tang_giay" 8 70 "void()" `782 
F G "tang_phut" 8 75 "void()" `783 
F G "tang_gio" 8 80 "void()" `784 
F G "chinh_tang_gpg" 8 85 "void()" `785 
F G "tang_nam" 8 99 "void()" `786 
F G "tang_thang" 8 104 "void()" `787 
F G "tang_ngay" 8 109 "void()" `788 
F G "chinh_tang_ntn" 8 114 "void()" `789 
F G "chinh_tang_thu" 8 128 "void()" `790 
F G "phim_up" 8 134 "void()" `791 
F G "giam_giay" 8 144 "void()" `792 
F G "giam_phut" 8 149 "void()" `793 
F G "giam_gio" 8 154 "void()" `794 
F G "chinh_giam_gpg" 8 159 "void()" `795 
F G "giam_nam" 8 173 "void()" `796 
F G "giam_thang" 8 178 "void()" `797 
F G "giam_ngay" 8 183 "void()" `798 
F G "chinh_giam_ntn" 8 188 "void()" `799 
F G "chinh_giam_thu" 8 202 "void()" `800 
F G "phim_dw" 8 207 "void()" `801 
F G "log_mode" 8 217 "void()" `802 
D G "touch_pin" 9 1 "pin_a0"
D G "DS18B20_PIN" 9 2 "touch_pin"
D G "TOUCH_C" 10 36 ""
D G "TOUCH_PIN_LOW" 10 42 "()    output_drive(TOUCH_PIN); output_low(TOUCH_PIN)"
D G "TOUCH_PIN_HIGH" 10 43 "()    output_drive(TOUCH_PIN); output_high(TOUCH_PIN)"
D G "TOUCH_PIN_FLOAT" 10 44 "()  output_float(TOUCH_PIN)"
D G "TOUCH_PIN_READ" 10 45 "()      input_state(TOUCH_PIN)"
C L "touch_read_bit" 10 2 7 "FUNCTION"
f G "touch_read_bit" 10 59 "int8()" `811  "BYTE touch_read_byte()"
C L "touch_read_bit" 10 2 3 "FUNCTION"
f G "touch_read_byte" 10 67 "int8()" `812  "BOOLEAN touch_write_bit(int1 data)"
C L "touch_read_byte" 10 2 3 "FUNCTION"
V L "data" 10 75 "int8" `814 
f G "touch_write_bit" 10 75 "int8(int8 data)" `813  "BOOLEAN touch_write_byte(BYTE data)"
C L "touch_write_bit" 10 2 3 "FUNCTION"
V L "data" 10 83 "int8" `816 
f G "touch_write_byte" 10 83 "int8(int8 data)" `815  "BOOLEAN touch_present()"
C L "touch_write_byte" 10 2 3 "FUNCTION"
f G "touch_present" 10 91 "int8()" `817  "void reset_pulse()"
C L "touch_present" 10 2 3 "FUNCTION"
f G "reset_pulse" 10 99 "void()" `818  "////"
C L "reset_pulse" 10 2 6 "FUNCTION"
F G "touch_read_bit" 10 114 "int8()" `811 
V L "data" 10 115 "int1" `819 
C L "touch_read_byte" 10 2 4 "FUNCTION"
F G "touch_read_byte" 10 134 "int8()" `812 
V L "i" 10 135 "int8" `820 
V L "data" 10 135 "int8" `821 
C L "touch_write_bit" 10 2 4 "FUNCTION"
V L "data" 10 149 "int8" `823 
F G "touch_write_bit" 10 150 "int8(int8 data)" `813 
C L "touch_write_byte" 10 2 4 "FUNCTION"
V L "data" 10 179 "int8" `823 
F G "touch_write_byte" 10 180 "int8(int8 data)" `815 
V L "i" 10 181 "int8" `822 
C L "touch_present" 10 2 4 "FUNCTION"
F G "touch_present" 10 197 "int8()" `817 
V L "present" 10 198 "int1" `823 
C L "reset_pulse" 10 2 4 "FUNCTION"
F G "reset_pulse" 10 220 "void()" `818 
D G "search_rom" 9 5 "0xf0"
D G "read_rom" 9 6 "0x33"
D G "match_rom" 9 7 "0x55"
D G "skip_rom" 9 8 "0xcc"
D G "alarm_search" 9 9 "0xec"
D G "read_scratchpad" 9 10 "0xbe"
D G "write_scratchpad" 9 11 "0x4e"
D G "copy_scratchpad" 9 12 "0x48"
D G "convert_t" 9 13 "0x44"
V G "nhiet_do" 9 15 "sint16" `824 
V G "dt_ng" 9 16 "int8" `825 
V G "dt_ngt" 9 16 "int8" `826 
V G "dt_tp" 9 17 "int16" `827 
V G "dt_tpt" 9 17 "int16" `828 
V G "dt_tp_real" 9 18 "int16" `829  "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
C L "ds18b20_no_ds18b" 9 20 2 "FUNCTION"
V L "x" 9 25 "int8" `831 
V L "y" 9 25 "int8" `832 
F G "ds18b20_no_ds18b" 9 26 "void(int8 x,int8 y)" `830 
F G "ds18b20_khoi_tao" 9 32 "void()" `834 
C L "ds18b20_khoi_tao" 9 20 1 "FUNCTION"
F G "ds18b20_read_temp_c1" 9 46 "int16()" `835 
V L "bl" 9 47 "int8" `836 
V L "bh" 9 47 "int8" `837 
V L "w" 9 48 "int16" `838 
V L "time_s" 9 60 "int8" `840 
F G "ds18b20_doc_rom" 9 61 "void(int8 time_s)" `839 
V L "rom_code" 9 62 "int8[8]" `841 
V L "xh" 9 63 "int8" `842 
V L "xl" 9 63 "int8" `843 
V L "i" 9 64 "sint8" `844 
C L "ds18b20_start" 9 20 3 "FUNCTION"
F G "ds18b20_start" 9 99 "int8()" `846 
V L "value" 9 112 "int8" `848 
F G "ds18b20_write_bit" 9 112 "void(int8 value)" `847 
V L "value" 9 122 "int8" `850 
F G "ds18b20_write_byte" 9 122 "void(int8 value)" `849 
V L "i" 9 123 "int8" `851 
F G "ds18b20_read_bit" 9 127 "int8()" `852 
V L "value" 9 128 "int1" `853 
F G "ds18b20_read_byte" 9 139 "int8()" `854 
V L "value" 9 140 "int8" `855 
V L "i" 9 141 "int8" `856 
V L "raw_temp_value" 9 146 "*int16" `858 
F G "ds18b20_read_temp_c2" 9 146 "int8(*int16 raw_temp_value)" `857 
C L "ds18b20_lcd_data" 9 20 3 "FUNCTION"
V L "data" 9 166 "int16" `860 
V L "x" 9 166 "int8" `861 
V L "y" 9 166 "int8" `862 
F G "ds18b20_lcd_data" 9 166 "void(int16 data,int8 x,int8 y)" `859 
F G "ds18b20_read_temp" 9 180 "void()" `863 
C L "ds18b20_read_temp" 9 20 2 "FUNCTION"
V L "nd_ss" 11 1 "int8" `865 
V L "gh" 11 1 "int8" `866 
F G "control_temperature" 11 1 "void(int8 nd_ss,int8 gh)" `864 
C L "control_temperature" 11 3 1 "FUNCTION"
C L "control_temperature" 11 3 1 "FUNCTION"
F G "select_menu" 0 3 "void()" `867 
C L "select_menu" 0 18 1 "FUNCTION"
C L "select_menu" 0 18 3 "FUNCTION"
C L "select_menu" 0 18 2 "FUNCTION"
C L "select_menu" 0 18 1 "FUNCTION"
C L "select_menu" 0 18 1 "FUNCTION"
F G "MAIN" 0 89 "void()" `878 
C L "MAIN" 0 18 2 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
