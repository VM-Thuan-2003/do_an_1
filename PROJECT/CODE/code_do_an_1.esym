D G "convert_t" 6 11 "0x44"
D G "__PCM__" 0 15 ""5.015""
D G "__DEVICE__" 0 15 "887"
D G "__DATE__" 0 15 ""09-Mar-24""
D G "__TIME__" 0 15 ""16:37:43"" "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
c L "set_tris_a" 3 1 6 "FUNCTION"
v L "value" 3 39 "int8" `54 
f B "set_tris_a" 3 39 "void(int8 value)" `53 
v L "value" 3 40 "int8" `56 
f B "set_tris_b" 3 40 "void(int8 value)" `55 
v L "value" 3 41 "int8" `58 
f B "set_tris_c" 3 41 "void(int8 value)" `57 
v L "value" 3 42 "int8" `60 
f B "set_tris_d" 3 42 "void(int8 value)" `59 
v L "value" 3 43 "int8" `62 
f B "set_tris_e" 3 43 "void(int8 value)" `61 
f B "get_tris_a" 3 44 "int8()" `63 
f B "get_tris_b" 3 45 "int8()" `64 
f B "get_tris_c" 3 46 "int8()" `65 
f B "get_tris_d" 3 47 "int8()" `66 
f B "get_tris_e" 3 48 "int8()" `67 
v L "value" 3 49 "int8" `69 
f B "output_a" 3 49 "void(int8 value)" `68 
v L "value" 3 50 "int8" `71 
f B "output_b" 3 50 "void(int8 value)" `70 
v L "value" 3 51 "int8" `73 
f B "output_c" 3 51 "void(int8 value)" `72 
v L "value" 3 52 "int8" `75 
f B "output_d" 3 52 "void(int8 value)" `74 
v L "value" 3 53 "int8" `77 
f B "output_e" 3 53 "void(int8 value)" `76 
f B "input_a" 3 54 "int8()" `78 
f B "input_b" 3 55 "int8()" `79 
f B "input_c" 3 56 "int8()" `80 
f B "input_d" 3 57 "int8()" `81 
f B "input_e" 3 58 "int8()" `82 
f B "input_change_a" 3 59 "int8()" `83 
f B "input_change_b" 3 60 "int8()" `84 
f B "input_change_c" 3 61 "int8()" `85 
f B "input_change_d" 3 62 "int8()" `86 
f B "input_change_e" 3 63 "int8()" `87 
v L "pin" 3 64 "int16" `89 
f B "input" 3 64 "int8(int16 pin)" `88 
v L "pin" 3 65 "int16" `91 
f B "input_state" 3 65 "int8(int16 pin)" `90 
v L "pin" 3 66 "int16" `93 
f B "output_low" 3 66 "void(int16 pin)" `92 
v L "pin" 3 67 "int16" `95 
f B "output_high" 3 67 "void(int16 pin)" `94 
v L "pin" 3 68 "int16" `97 
f B "output_toggle" 3 68 "void(int16 pin)" `96 
v L "pin" 3 69 "int16" `99 
v L "level" 3 69 "int8" `100 
f B "output_bit" 3 69 "void(int16 pin,int8 level)" `98 
v L "pin" 3 70 "int16" `102 
f B "output_float" 3 70 "void(int16 pin)" `101 
v L "pin" 3 71 "int16" `104 
f B "output_drive" 3 71 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 3 75 "40"
d G "PIN_A1" 3 76 "41"
d G "PIN_A2" 3 77 "42"
d G "PIN_A3" 3 78 "43"
d G "PIN_A4" 3 79 "44"
d G "PIN_A5" 3 80 "45"
d G "PIN_A6" 3 81 "46"
d G "PIN_A7" 3 82 "47"
d G "PIN_B0" 3 84 "48"
d G "PIN_B1" 3 85 "49"
d G "PIN_B2" 3 86 "50"
d G "PIN_B3" 3 87 "51"
d G "PIN_B4" 3 88 "52"
d G "PIN_B5" 3 89 "53"
d G "PIN_B6" 3 90 "54"
d G "PIN_B7" 3 91 "55"
d G "PIN_C0" 3 93 "56"
d G "PIN_C1" 3 94 "57"
d G "PIN_C2" 3 95 "58"
d G "PIN_C3" 3 96 "59"
d G "PIN_C4" 3 97 "60"
d G "PIN_C5" 3 98 "61"
d G "PIN_C6" 3 99 "62"
d G "PIN_C7" 3 100 "63"
d G "PIN_D0" 3 102 "64"
d G "PIN_D1" 3 103 "65"
d G "PIN_D2" 3 104 "66"
d G "PIN_D3" 3 105 "67"
d G "PIN_D4" 3 106 "68"
d G "PIN_D5" 3 107 "69"
d G "PIN_D6" 3 108 "70"
d G "PIN_D7" 3 109 "71"
d G "PIN_E0" 3 111 "72"
d G "PIN_E1" 3 112 "73"
d G "PIN_E2" 3 113 "74"
d G "PIN_E3" 3 114 "75"
d G "FALSE" 3 117 "0"
d G "TRUE" 3 118 "1"
d G "BYTE" 3 120 "int8"
d G "BOOLEAN" 3 121 "int1"
d G "getc" 3 123 "getch"
d G "fgetc" 3 124 "getch"
d G "getchar" 3 125 "getch"
d G "putc" 3 126 "putchar"
d G "fputc" 3 127 "putchar"
d G "fgets" 3 128 "gets"
d G "fputs" 3 129 "puts"
c L "output_drive" 3 1 3 "FUNCTION"
f B "restart_cause" 3 134 "int8()" `105 
f B "reset_cpu" 3 135 "void()" `106 
f B "sleep" 3 136 "void()" `107  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 3 138 "3"
d G "WDT_TIMEOUT" 3 139 "11"
d G "MCLR_FROM_SLEEP" 3 140 "19"
d G "MCLR_FROM_RUN" 3 141 "27"
d G "NORMAL_POWER_UP" 3 142 "25"
d G "BROWNOUT_RESTART" 3 143 "26"
c L "sleep" 3 1 5 "FUNCTION"
v L "mode" 3 150 "int8" `109 
f B "setup_timer_0" 3 150 "void(int8 mode)" `108 
v L "value" 3 151 "int8" `111 
f B "set_timer0" 3 151 "void(int8 value)" `110 
f B "get_timer0" 3 152 "int8()" `112 
v L "mode" 3 153 "int8" `114 
v L "prescaler" 3 153 "int8" `115 
f B "setup_counters" 3 153 "void(int8 mode,int8 prescaler)" `113 
v L "value" 3 154 "int8" `117 
f B "set_rtcc" 3 154 "void(int8 value)" `116 
f B "get_rtcc" 3 155 "int8()" `118  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 3 157 "0"
d G "T0_EXT_L_TO_H" 3 158 "32"
d G "T0_EXT_H_TO_L" 3 159 "48"
d G "T0_DIV_1" 3 161 "8"
d G "T0_DIV_2" 3 162 "0"
d G "T0_DIV_4" 3 163 "1"
d G "T0_DIV_8" 3 164 "2"
d G "T0_DIV_16" 3 165 "3"
d G "T0_DIV_32" 3 166 "4"
d G "T0_DIV_64" 3 167 "5"
d G "T0_DIV_128" 3 168 "6"
d G "T0_DIV_256" 3 169 "7"
d G "T0_8_BIT" 3 172 "0"
d G "RTCC_INTERNAL" 3 174 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 3 175 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 3 176 "48"
d G "RTCC_DIV_1" 3 177 "8"
d G "RTCC_DIV_2" 3 178 "0"
d G "RTCC_DIV_4" 3 179 "1"
d G "RTCC_DIV_8" 3 180 "2"
d G "RTCC_DIV_16" 3 181 "3"
d G "RTCC_DIV_32" 3 182 "4"
d G "RTCC_DIV_64" 3 183 "5"
d G "RTCC_DIV_128" 3 184 "6"
d G "RTCC_DIV_256" 3 185 "7"
d G "RTCC_8_BIT" 3 186 "0"
c L "get_rtcc" 3 1 8 "FUNCTION"
v L "mode" 3 197 "int16" `120 
f B "setup_wdt" 3 197 "void(int16 mode)" `119 
f B "restart_wdt" 3 198 "void()" `121  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 3 201 "8"
d G "WDT_36MS" 3 202 "9"
d G "WDT_72MS" 3 203 "10"
d G "WDT_144MS" 3 204 "11"
d G "WDT_288MS" 3 205 "12"
d G "WDT_576MS" 3 206 "13"
d G "WDT_1152MS" 3 207 "14"
d G "WDT_2304MS" 3 208 "15"
d G "WDT_ON" 3 213 "0x4000"
d G "WDT_OFF" 3 214 "0"
d G "WDT_DIV_16" 3 215 "0x100"
d G "WDT_DIV_8" 3 216 "0x300"
d G "WDT_DIV_4" 3 217 "0x500"
d G "WDT_DIV_2" 3 218 "0x700"
d G "WDT_TIMES_1" 3 219 "0x900" "Default"
d G "WDT_TIMES_2" 3 220 "0xB00"
d G "WDT_TIMES_4" 3 221 "0xD00"
d G "WDT_TIMES_8" 3 222 "0xF00"
d G "WDT_TIMES_16" 3 223 "0x1100"
d G "WDT_TIMES_32" 3 224 "0x1300"
d G "WDT_TIMES_64" 3 225 "0x1500"
d G "WDT_TIMES_128" 3 226 "0x1700"
c L "restart_wdt" 3 1 3 "FUNCTION"
v L "mode" 3 231 "int16" `123 
f B "setup_timer_1" 3 231 "void(int16 mode)" `122 
f B "get_timer1" 3 232 "int16()" `124 
v L "value" 3 233 "int16" `126 
f B "set_timer1" 3 233 "void(int16 value)" `125  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 3 236 "0"
d G "T1_INTERNAL" 3 237 "5"
d G "T1_EXTERNAL" 3 238 "7"
d G "T1_EXTERNAL_SYNC" 3 239 "3"
d G "T1_CLK_OUT" 3 241 "8"
d G "T1_DIV_BY_1" 3 243 "0"
d G "T1_DIV_BY_2" 3 244 "0x10"
d G "T1_DIV_BY_4" 3 245 "0x20"
d G "T1_DIV_BY_8" 3 246 "0x30"
d G "T1_GATE" 3 248 "0x40"
d G "T1_GATE_INVERTED" 3 249 "0xC0"
c L "set_timer1" 3 1 3 "FUNCTION"
v L "mode" 3 254 "int8" `128 
v L "period" 3 254 "int8" `129 
v L "postscale" 3 254 "int8" `130 
f B "setup_timer_2" 3 254 "void(int8 mode,int8 period,int8 postscale)" `127 
f B "get_timer2" 3 255 "int8()" `131 
v L "value" 3 256 "int8" `133 
f B "set_timer2" 3 256 "void(int8 value)" `132  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 3 258 "0"
d G "T2_DIV_BY_1" 3 259 "4"
d G "T2_DIV_BY_4" 3 260 "5"
d G "T2_DIV_BY_16" 3 261 "6"
c L "set_timer2" 3 1 4 "FUNCTION"
v L "mode" 3 267 "int32" `135 
f B "setup_ccp1" 3 267 "void(int32 mode)" `134 
v L "mode" 3 268 "int32" `137 
v L "pwm" 3 268 "int8" `138 
f G "setup_ccp1" 3 268 "void(int32 mode,int8 pwm)" `136 
v L "value" 3 269 "int16" `140 
f B "set_pwm1_duty" 3 269 "void(int16 value)" `139  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 3 271 "0"
d G "CCP_CAPTURE_FE" 3 272 "4"
d G "CCP_CAPTURE_RE" 3 273 "5"
d G "CCP_CAPTURE_DIV_4" 3 274 "6"
d G "CCP_CAPTURE_DIV_16" 3 275 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 3 276 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 3 277 "9"
d G "CCP_COMPARE_INT" 3 278 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 3 279 "0xB"
d G "CCP_PWM" 3 280 "0xC"
d G "CCP_PWM_PLUS_1" 3 281 "0x1c"
d G "CCP_PWM_PLUS_2" 3 282 "0x2c"
d G "CCP_PWM_PLUS_3" 3 283 "0x3c"
d G "CCP_PWM_H_H" 3 288 "0x0c"
d G "CCP_PWM_H_L" 3 289 "0x0d"
d G "CCP_PWM_L_H" 3 290 "0x0e"
d G "CCP_PWM_L_L" 3 291 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 3 293 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 3 294 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 3 295 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 3 297 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 3 298 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 3 299 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 3 300 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 3 301 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 3 302 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 3 303 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 3 305 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 3 306 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 3 307 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 3 309 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 3 310 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 3 311 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 3 313 "0x80000000"
d G "CCP_PULSE_STEERING_A" 3 315 "0x01000000"
d G "CCP_PULSE_STEERING_B" 3 316 "0x02000000"
d G "CCP_PULSE_STEERING_C" 3 317 "0x04000000"
d G "CCP_PULSE_STEERING_D" 3 318 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 3 319 "0x10000000"
c L "set_pwm1_duty" 3 1 1 "FUNCTION"
v L "mode" 3 323 "int32" `145 
f B "setup_ccp2" 3 323 "void(int32 mode)" `144 
v L "mode" 3 324 "int32" `147 
v L "pwm" 3 324 "int8" `148 
f G "setup_ccp2" 3 324 "void(int32 mode,int8 pwm)" `146 
v L "value" 3 325 "int16" `150 
f B "set_pwm2_duty" 3 325 "void(int16 value)" `149 
c L "set_pwm2_duty" 3 1 3 "FUNCTION"
v L "mode" 3 332 "int32" `155 
f B "setup_spi" 3 332 "void(int32 mode)" `154 
v L "value" 3 333 "int8" `157 
f B "spi_write" 3 333 "void(int8 value)" `156 
f B "spi_read" 3 334 "int8()" `158 
v L "value" 3 335 "int8" `160 
f G "spi_read" 3 335 "int8(int8 value)" `159 
f B "spi_data_in" 3 336 "int8()" `161  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 3 338 "0x00"
d G "SPI_MASTER" 3 339 "0x20"
d G "SPI_SLAVE" 3 340 "0x24"
d G "SPI_SCK_IDLE_HIGH" 3 341 "0x10"
d G "SPI_SCK_IDLE_LOW" 3 342 "0x00"
d G "SPI_CLK_DIV_4" 3 343 "0x00"
d G "SPI_CLK_DIV_16" 3 344 "0x01"
d G "SPI_CLK_DIV_64" 3 345 "0x02"
d G "SPI_CLK_T2" 3 346 "0x03"
d G "SPI_SS_DISABLED" 3 347 "0x01"
d G "SPI_XMIT_L_TO_H" 3 349 "0x4000"
d G "SPI_XMIT_H_TO_L" 3 350 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 3 352 "0x0000"
d G "SPI_SAMPLE_AT_END" 3 353 "0x8000"
d G "SPI_L_TO_H" 3 356 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 3 357 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 3 1 2 "FUNCTION"
v L "baud" 3 361 "int32" `163 
f B "setup_uart" 3 361 "void(int32 baud)" `162 
v L "baud" 3 362 "int32" `165 
v L "stream" 3 362 "int8" `166 
f G "setup_uart" 3 362 "void(int32 baud,int8 stream)" `164 
v L "baud" 3 363 "int32" `168 
v L "stream" 3 363 "int8" `169 
v L "clock" 3 363 "int32" `170 
f G "setup_uart" 3 363 "void(int32 baud,int8 stream,int32 clock)" `167 
v L "baud" 3 364 "int32" `172 
f B "set_uart_speed" 3 364 "void(int32 baud)" `171 
v L "baud" 3 365 "int32" `174 
v L "stream" 3 365 "int8" `175 
f G "set_uart_speed" 3 365 "void(int32 baud,int8 stream)" `173 
v L "baud" 3 366 "int32" `177 
v L "stream" 3 366 "int8" `178 
v L "clock" 3 366 "int32" `179 
f G "set_uart_speed" 3 366 "void(int32 baud,int8 stream,int32 clock)" `176  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 3 370 "2"
d G "UART_DATA" 3 371 "4"
d G "UART_AUTODETECT" 3 372 "8"
d G "UART_AUTODETECT_NOWAIT" 3 373 "9"
d G "UART_WAKEUP_ON_RDA" 3 374 "10"
d G "UART_SEND_BREAK" 3 375 "13"
c L "set_uart_speed" 3 1 3 "FUNCTION"
v L "mode" 3 379 "int32" `181 
f B "setup_comparator" 3 379 "void(int32 mode)" `180  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 3 383 "0x00"
d G "NC_NC" 3 384 "0x00"
d G "CP1_A0_A3" 3 387 "0x00090080"
d G "CP1_A1_A3" 3 388 "0x000A0081"
d G "CP1_B3_A3" 3 389 "0x00880082"
d G "CP1_B1_A3" 3 390 "0x00280083"
d G "CP1_A0_VREF" 3 391 "0x00010084"
d G "CP1_A1_VREF" 3 392 "0x00020085"
d G "CP1_B3_VREF" 3 393 "0x00800086"
d G "CP1_B1_VREF" 3 394 "0x00200087"
d G "CP1_OUT_ON_A4" 3 396 "0x00000020"
d G "CP1_INVERT" 3 397 "0x00000010"
d G "CP1_ABSOLUTE_VREF" 3 398 "0x20000000"
d G "CP2_A0_A2" 3 401 "0x00058000"
d G "CP2_A1_A2" 3 402 "0x00068100"
d G "CP2_B3_A2" 3 403 "0x00848200"
d G "CP2_B1_A2" 3 404 "0x00248300"
d G "CP2_A0_VREF" 3 405 "0x00018400"
d G "CP2_A1_VREF" 3 406 "0x00028500"
d G "CP2_B3_VREF" 3 407 "0x00808600"
d G "CP2_B1_VREF" 3 408 "0x00208700"
d G "CP2_OUT_ON_A5" 3 410 "0x00002000"
d G "CP2_INVERT" 3 411 "0x00001000"
d G "CP2_ABSOLUTE_VREF" 3 412 "0x10000000"
d G "CP2_T1_SYNC" 3 415 "0x01000000"
d G "CP2_T1_GATE" 3 416 "0x02000000"
c L "setup_comparator" 3 1 2 "FUNCTION"
v L "mode" 3 424 "int8" `185 
f B "setup_vref" 3 424 "void(int8 mode)" `184  "Constants used in setup_vref() are:"
d G "VREF_LOW" 3 426 "0xa0"
d G "VREF_HIGH" 3 427 "0x80"
c L "setup_vref" 3 1 3 "FUNCTION"
v L "mode" 3 433 "int8" `187 
f B "setup_oscillator" 3 433 "int8(int8 mode)" `186  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 3 435 "1"
d G "OSC_125KHZ" 3 436 "0x11"
d G "OSC_250KHZ" 3 437 "0x21"
d G "OSC_500KHZ" 3 438 "0x31"
d G "OSC_1MHZ" 3 439 "0x41"
d G "OSC_2MHZ" 3 440 "0x51"
d G "OSC_4MHZ" 3 441 "0x61"
d G "OSC_8MHZ" 3 442 "0x71"
d G "OSC_INTRC" 3 443 "1"
d G "OSC_NORMAL" 3 444 "0"
d G "OSC_STATE_STABLE" 3 446 "4"
d G "OSC_31KHZ_STABLE" 3 447 "2"
c L "setup_oscillator" 3 1 4 "FUNCTION"
v L "mode" 3 455 "int16" `189 
f B "setup_adc" 3 455 "void(int16 mode)" `188 
f B "read_adc" 3 456 "int8()" `190 
v L "mode" 3 457 "int8" `192 
f G "read_adc" 3 457 "int8(int8 mode)" `191 
f G "read_adc" 3 458 "int16()" `193 
v L "mode" 3 459 "int8" `195 
f G "read_adc" 3 459 "int16(int8 mode)" `194 
f B "adc_done" 3 460 "int8()" `196  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 3 462 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 3 463 "0x100"
d G "ADC_CLOCK_DIV_8" 3 464 "0x40"
d G "ADC_CLOCK_DIV_32" 3 465 "0x80"
d G "ADC_CLOCK_INTERNAL" 3 466 "0xc0" "Internal 2-6us"
c L "adc_done" 3 1 1 "FUNCTION"
v L "pins" 3 469 "int32" `198 
f B "setup_adc_ports" 3 469 "void(int32 pins)" `197 
v L "pins" 3 470 "int32" `200 
v L "reference" 3 470 "int32" `201 
f G "setup_adc_ports" 3 470 "void(int32 pins,int32 reference)" `199 
v L "channel" 3 471 "int8" `203 
f B "set_adc_channel" 3 471 "void(int8 channel)" `202  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 3 475 "1" "| A0"
d G "sAN1" 3 476 "2" "| A1"
d G "sAN2" 3 477 "4" "| A2"
d G "sAN3" 3 478 "8" "| A3"
d G "sAN4" 3 479 "16" "| A5"
d G "sAN5" 3 480 "32" "| E0"
d G "sAN6" 3 481 "64" "| E1"
d G "sAN7" 3 482 "128" "| E2"
d G "sAN8" 3 483 "0x10000" "| B2"
d G "sAN9" 3 484 "0x20000" "| B3"
d G "sAN10" 3 485 "0x40000" "| B1"
d G "sAN11" 3 486 "0x80000" "| B4"
d G "sAN12" 3 487 "0x100000" "| B0"
d G "sAN13" 3 488 "0x200000" "| B5"
d G "NO_ANALOGS" 3 489 "0" "None"
d G "ALL_ANALOG" 3 490 "0x1F00FF" "A0 A1 A2 A3 A5 E0 E1 E2 B0 B1 B2 B3 B4 B5"
d G "VSS_VDD" 3 493 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 3 494 "0x1000" "| Range 0-Vref"
d G "VREF_VREF" 3 495 "0x3000" "| Range Vref-Vref"
d G "VREF_VDD" 3 496 "0x2000" "| Range Vref-Vdd"
d G "ADC_START_AND_READ" 3 499 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 3 500 "1"
d G "ADC_READ_ONLY" 3 501 "6"
c L "set_adc_channel" 3 1 3 "FUNCTION"
v L "x" 3 507 "sint8" `205 
f B "abs" 3 507 "sint8(sint8 x)" `204 
v L "x" 3 508 "sint16" `207 
f G "abs" 3 508 "sint16(sint16 x)" `206 
v L "x" 3 509 "sint32" `209 
f G "abs" 3 509 "sint32(sint32 x)" `208 
v L "x" 3 510 "float" `211 
f G "abs" 3 510 "float(float x)" `210 
v L "??65535" 3 511 "int8" `213 
v L "??65535" 3 511 "int8" `214 
f B "_mul" 3 511 "int16(int8 ,int8 )" `212 
v L "??65535" 3 512 "sint8" `213 
v L "??65535" 3 512 "sint8" `217 
f G "_mul" 3 512 "sint16(sint8 ,sint8 )" `215 
v L "??65535" 3 513 "int16" `213 
v L "??65535" 3 513 "int16" `220 
f G "_mul" 3 513 "int32(int16 ,int16 )" `218 
v L "??65535" 3 514 "sint16" `213 
v L "??65535" 3 514 "sint16" `223 
f G "_mul" 3 514 "sint32(sint16 ,sint16 )" `221  "Memory Manipulation Prototypes:"
v L "bank" 3 517 "int8" `225 
v L "offset" 3 517 "int8" `226 
f B "read_bank" 3 517 "int8(int8 bank,int8 offset)" `224 
v L "bank" 3 518 "int8" `228 
v L "offset" 3 518 "int8" `229 
v L "value" 3 518 "int8" `230 
f B "write_bank" 3 518 "void(int8 bank,int8 offset,int8 value)" `227 
v L "dest" 3 519 "*int8" `232 
v L "src" 3 519 "*int8" `233 
f B "strcpy" 3 519 "void(*int8 dest,*int8 src)" `231 
v L "dest" 3 520 "*int8" `235 
v L "src" 3 520 "*int8" `236 
f B "strcopy" 3 520 "void(*int8 dest,*int8 src)" `234 
v L "destination" 3 521 "*int8" `238 
v L "value" 3 521 "int8" `239 
v L "num" 3 521 "int16" `240 
f B "memset" 3 521 "void(*int8 destination,int8 value,int16 num)" `237 
v L "destination" 3 522 "*int8" `242 
v L "source" 3 522 "*int8" `243 
v L "num" 3 522 "int16" `244 
f B "memcpy" 3 522 "void(*int8 destination,*int8 source,int16 num)" `241  "String Prototypes:"
v L "cvalue" 3 525 "int8" `246 
f B "toupper" 3 525 "int8(int8 cvalue)" `245 
v L "cvalue" 3 526 "int8" `248 
f B "tolower" 3 526 "int8(int8 cvalue)" `247 
v L "string" 3 527 "*int8" `250 
v L "cstring" 3 527 "*int8" `251 
f B "sprintf" 3 527 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `249  "Data Manipulators Prototypes:"
v L "address" 3 530 "*int8" `254 
v L "bytes" 3 530 "int8" `255 
v L "value" 3 530 "int8" `256 
f B "shift_left" 3 530 "int8(*int8 address,int8 bytes,int8 value)" `253 
v L "address" 3 531 "*int8" `258 
v L "bytes" 3 531 "int8" `259 
v L "value" 3 531 "int8" `260 
f B "shift_right" 3 531 "int8(*int8 address,int8 bytes,int8 value)" `257 
v L "address" 3 532 "*int8" `262 
v L "bytes" 3 532 "int8" `263 
f B "rotate_left" 3 532 "void(*int8 address,int8 bytes)" `261 
v L "address" 3 533 "*int8" `265 
v L "bytes" 3 533 "int8" `266 
f B "rotate_right" 3 533 "void(*int8 address,int8 bytes)" `264 
v L "value" 3 534 "int8" `268 
f B "swap" 3 534 "void(int8 value)" `267 
v L "var" 3 535 "int16" `270 
v L "offset" 3 535 "int8" `271 
f B "make8" 3 535 "int8(int16 var,int8 offset)" `269 
v L "var" 3 536 "int32" `270 
v L "offset" 3 536 "int8" `274 
f G "make8" 3 536 "int8(int32 var,int8 offset)" `272 
v L "varhigh" 3 537 "int8" `276 
v L "varlow" 3 537 "int8" `277 
f B "make16" 3 537 "int16(int8 varhigh,int8 varlow)" `275 
v L "var1" 3 538 "int16" `279 
f B "make32" 3 538 "int32(int16 var1)" `278 
v L "var1" 3 539 "int16" `281 
v L "var2" 3 539 "int16" `282 
f G "make32" 3 539 "int32(int16 var1,int16 var2)" `280 
v L "var1" 3 540 "int16" `281 
v L "var2" 3 540 "int8" `285 
f G "make32" 3 540 "int32(int16 var1,int8 var2)" `283 
v L "var1" 3 541 "int16" `287 
v L "var2" 3 541 "int8" `288 
v L "var3" 3 541 "int8" `289 
f G "make32" 3 541 "int32(int16 var1,int8 var2,int8 var3)" `286 
v L "var1" 3 542 "int8" `291 
f G "make32" 3 542 "int32(int8 var1)" `290 
v L "var1" 3 543 "int8" `281 
v L "var2" 3 543 "int8" `294 
f G "make32" 3 543 "int32(int8 var1,int8 var2)" `292 
v L "var1" 3 544 "int8" `287 
v L "var2" 3 544 "int8" `288 
v L "var3" 3 544 "int8" `298 
f G "make32" 3 544 "int32(int8 var1,int8 var2,int8 var3)" `295 
v L "var1" 3 545 "int8" `300 
v L "var2" 3 545 "int8" `301 
v L "var3" 3 545 "int8" `302 
v L "var4" 3 545 "int8" `303 
f G "make32" 3 545 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `299 
v L "var1" 3 546 "int8" `281 
v L "var2" 3 546 "int16" `306 
f G "make32" 3 546 "int32(int8 var1,int16 var2)" `304 
v L "var1" 3 547 "int8" `287 
v L "var2" 3 547 "int16" `288 
v L "var3" 3 547 "int8" `310 
f G "make32" 3 547 "int32(int8 var1,int16 var2,int8 var3)" `307 
v L "var1" 3 548 "int8" `287 
v L "var2" 3 548 "int8" `288 
v L "var3" 3 548 "int16" `314 
f G "make32" 3 548 "int32(int8 var1,int8 var2,int16 var3)" `311 
v L "var" 3 549 "int8" `316 
v L "bit" 3 549 "int8" `317 
f B "bit_set" 3 549 "void(int8 var,int8 bit)" `315 
v L "var" 3 550 "int16" `316 
v L "bit" 3 550 "int8" `320 
f G "bit_set" 3 550 "void(int16 var,int8 bit)" `318 
v L "var" 3 551 "int32" `316 
v L "bit" 3 551 "int8" `323 
f G "bit_set" 3 551 "void(int32 var,int8 bit)" `321 
v L "var" 3 552 "int8" `325 
v L "bit" 3 552 "int8" `326 
f B "bit_clear" 3 552 "void(int8 var,int8 bit)" `324 
v L "var" 3 553 "int16" `325 
v L "bit" 3 553 "int8" `329 
f G "bit_clear" 3 553 "void(int16 var,int8 bit)" `327 
v L "var" 3 554 "int32" `325 
v L "bit" 3 554 "int8" `332 
f G "bit_clear" 3 554 "void(int32 var,int8 bit)" `330 
v L "var" 3 555 "int8" `334 
v L "bit" 3 555 "int8" `335 
f B "bit_test" 3 555 "int8(int8 var,int8 bit)" `333 
v L "var" 3 556 "int16" `334 
v L "bit" 3 556 "int8" `338 
f G "bit_test" 3 556 "int8(int16 var,int8 bit)" `336 
v L "var" 3 557 "int32" `334 
v L "bit" 3 557 "int8" `341 
f G "bit_test" 3 557 "int8(int32 var,int8 bit)" `339  "#use delay() Prototypes:"
v L "count" 3 560 "int8" `343 
f B "delay_cycles" 3 560 "void(int8 count)" `342 
v L "time" 3 561 "int16" `345 
f B "delay_ms" 3 561 "void(int16 time)" `344 
v L "time" 3 562 "int16" `347 
f B "delay_us" 3 562 "void(int16 time)" `346  "#use rs232() Prototypes:"
v L "cdata" 3 565 "int8" `349 
f B "putchar" 3 565 "void(int8 cdata)" `348 
v L "cdata" 3 566 "int8" `351 
v L "stream" 3 566 "int8" `352 
f G "putchar" 3 566 "void(int8 cdata,int8 stream)" `350 
v L "string" 3 567 "*int8" `354 
f B "puts" 3 567 "void(*int8 string)" `353 
v L "string" 3 568 "*int8" `356 
v L "stream" 3 568 "int8" `357 
f G "puts" 3 568 "void(*int8 string,int8 stream)" `355 
f B "getch" 3 569 "int8()" `358 
v L "stream" 3 570 "int8" `360 
f G "getch" 3 570 "int8(int8 stream)" `359 
v L "string" 3 571 "*int8" `362 
f B "gets" 3 571 "void(*int8 string)" `361 
v L "string" 3 572 "*int8" `364 
v L "stream" 3 572 "int8" `365 
f G "gets" 3 572 "void(*int8 string,int8 stream)" `363 
f B "kbhit" 3 573 "int8()" `366 
v L "stream" 3 574 "int8" `368 
f G "kbhit" 3 574 "int8(int8 stream)" `367 
v L "string" 3 575 "*int8" `370 
f B "printf" 3 575 "void(*int8 string,*int8 _VA_LIST)" `369 
v L "stream" 3 576 "int8" `373 
v L "string" 3 576 "*int8" `374 
f B "fprintf" 3 576 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `372 
f B "putc_send" 3 577 "void()" `376 
v L "stream" 3 578 "int8" `378 
f B "fputc_send" 3 578 "void(int8 stream)" `377 
f B "rcv_buffer_full" 3 579 "int8()" `379 
v L "stream" 3 580 "int8" `381 
f G "rcv_buffer_full" 3 580 "int8(int8 stream)" `380 
f B "rcv_buffer_bytes" 3 581 "int16()" `382 
v L "stream" 3 582 "int8" `384 
f G "rcv_buffer_bytes" 3 582 "int16(int8 stream)" `383 
f B "tx_buffer_full" 3 583 "int8()" `385 
v L "stream" 3 584 "int8" `387 
f G "tx_buffer_full" 3 584 "int8(int8 stream)" `386 
f B "tx_buffer_bytes" 3 585 "int16()" `388 
v L "stream" 3 586 "int8" `390 
f G "tx_buffer_bytes" 3 586 "int16(int8 stream)" `389  "#use i2c() Prototypes:"
f B "i2c_read" 3 589 "int8()" `391 
v L "stream" 3 590 "int8" `393 
f G "i2c_read" 3 590 "int8(int8 stream)" `392 
v L "stream" 3 591 "int8" `395 
v L "ack" 3 591 "int8" `396 
f G "i2c_read" 3 591 "int8(int8 stream,int8 ack)" `394 
v L "data" 3 592 "int8" `398 
f B "i2c_write" 3 592 "int8(int8 data)" `397 
v L "stream" 3 593 "int8" `400 
v L "data" 3 593 "int8" `401 
f G "i2c_write" 3 593 "int8(int8 stream,int8 data)" `399 
f B "i2c_start" 3 594 "void()" `402 
v L "stream" 3 595 "int8" `404 
f G "i2c_start" 3 595 "void(int8 stream)" `403 
v L "stream" 3 596 "int8" `406 
v L "restart" 3 596 "int8" `407 
f G "i2c_start" 3 596 "void(int8 stream,int8 restart)" `405 
f B "i2c_stop" 3 597 "void()" `408 
v L "stream" 3 598 "int8" `410 
f G "i2c_stop" 3 598 "void(int8 stream)" `409 
f B "i2c_isr_state" 3 599 "int8()" `411 
v L "addr" 3 600 "int8" `413 
f B "i2c_slaveaddr" 3 600 "void(int8 addr)" `412 
v L "stream" 3 601 "int8" `415 
v L "addr" 3 601 "int8" `416 
f G "i2c_slaveaddr" 3 601 "void(int8 stream,int8 addr)" `414 
f B "i2c_poll" 3 602 "int8()" `417 
v L "stream" 3 603 "int8" `419 
f G "i2c_poll" 3 603 "int8(int8 stream)" `418 
v L "baud" 3 604 "int32" `421 
f B "i2c_init" 3 604 "void(int32 baud)" `420 
v L "stream" 3 605 "int8" `423 
v L "baud" 3 605 "int32" `424 
f G "i2c_init" 3 605 "void(int8 stream,int32 baud)" `422  "#use spi() Prototypes:"
f B "spi_xfer" 3 608 "int8()" `425 
f G "spi_xfer" 3 609 "int16()" `426 
f G "spi_xfer" 3 610 "int32()" `427 
v L "data" 3 611 "int8" `429 
f G "spi_xfer" 3 611 "int8(int8 data)" `428 
v L "data" 3 612 "int16" `431 
f G "spi_xfer" 3 612 "int16(int16 data)" `430 
v L "data" 3 613 "int32" `433 
f G "spi_xfer" 3 613 "int32(int32 data)" `432 
v L "stream" 3 614 "int8" `435 
v L "data" 3 614 "int8" `436 
f G "spi_xfer" 3 614 "int8(int8 stream,int8 data)" `434 
v L "stream" 3 615 "int8" `435 
v L "data" 3 615 "int16" `439 
f G "spi_xfer" 3 615 "int16(int8 stream,int16 data)" `437 
v L "stream" 3 616 "int8" `435 
v L "data" 3 616 "int32" `442 
f G "spi_xfer" 3 616 "int32(int8 stream,int32 data)" `440 
v L "stream" 3 617 "int8" `444 
v L "data" 3 617 "int8" `445 
v L "bits" 3 617 "int8" `446 
f G "spi_xfer" 3 617 "int8(int8 stream,int8 data,int8 bits)" `443 
v L "stream" 3 618 "int8" `444 
v L "data" 3 618 "int16" `445 
v L "bits" 3 618 "int8" `450 
f G "spi_xfer" 3 618 "int16(int8 stream,int16 data,int8 bits)" `447 
v L "stream" 3 619 "int8" `444 
v L "data" 3 619 "int32" `445 
v L "bits" 3 619 "int8" `454 
f G "spi_xfer" 3 619 "int32(int8 stream,int32 data,int8 bits)" `451 
v L "baud" 3 620 "int32" `456 
f B "spi_init" 3 620 "void(int32 baud)" `455 
v L "stream" 3 621 "int8" `458 
v L "baud" 3 621 "int32" `459 
f G "spi_init" 3 621 "void(int8 stream,int32 baud)" `457 
v L "baud" 3 622 "int32" `461 
f B "spi_speed" 3 622 "void(int32 baud)" `460 
v L "stream" 3 623 "int8" `463 
v L "baud" 3 623 "int32" `464 
f G "spi_speed" 3 623 "void(int8 stream,int32 baud)" `462 
v L "stream" 3 624 "int8" `466 
v L "baud" 3 624 "int32" `467 
v L "clock" 3 624 "int32" `468 
f G "spi_speed" 3 624 "void(int8 stream,int32 baud,int32 clock)" `465 
v L "data" 3 625 "int8" `470 
f B "spi_prewrite" 3 625 "void(int8 data)" `469 
v L "data" 3 626 "int16" `472 
f G "spi_prewrite" 3 626 "void(int16 data)" `471 
v L "data" 3 627 "int32" `474 
f G "spi_prewrite" 3 627 "void(int32 data)" `473 
v L "??65535" 3 628 "int8" `476 
v L "data" 3 628 "int8" `477 
f G "spi_prewrite" 3 628 "void(int8 ,int8 data)" `475 
v L "??65535" 3 629 "int8" `476 
v L "data" 3 629 "int16" `480 
f G "spi_prewrite" 3 629 "void(int8 ,int16 data)" `478 
v L "??65535" 3 630 "int8" `476 
v L "data" 3 630 "int32" `483 
f G "spi_prewrite" 3 630 "void(int8 ,int32 data)" `481 
f B "spi_xfer_in" 3 631 "int8()" `484 
f G "spi_xfer_in" 3 632 "int16()" `485 
f G "spi_xfer_in" 3 633 "int32()" `486 
v L "bits" 3 634 "int8" `488 
f G "spi_xfer_in" 3 634 "int8(int8 bits)" `487 
v L "bits" 3 635 "int8" `490 
f G "spi_xfer_in" 3 635 "int16(int8 bits)" `489 
v L "bits" 3 636 "int8" `492 
f G "spi_xfer_in" 3 636 "int32(int8 bits)" `491 
v L "stream" 3 637 "int8" `494 
v L "bits" 3 637 "int8" `495 
f G "spi_xfer_in" 3 637 "int8(int8 stream,int8 bits)" `493 
v L "stream" 3 638 "int8" `494 
v L "bits" 3 638 "int8" `498 
f G "spi_xfer_in" 3 638 "int16(int8 stream,int8 bits)" `496 
v L "stream" 3 639 "int8" `494 
v L "bits" 3 639 "int8" `501 
f G "spi_xfer_in" 3 639 "int32(int8 stream,int8 bits)" `499  "#use rtos() Prototypes:"
f B "rtos_run" 3 642 "void()" `502 
f B "rtos_yield" 3 643 "void()" `503 
v L "task" 3 644 "int8" `505 
f B "rtos_enable" 3 644 "void(int8 task)" `504 
v L "task" 3 645 "int8" `507 
f B "rtos_disable" 3 645 "void(int8 task)" `506 
f B "rtos_terminate" 3 646 "void()" `508 
v L "flag" 3 647 "int8" `510 
f B "rtos_await" 3 647 "void(int8 flag)" `509 
v L "sem" 3 648 "int8" `512 
f B "rtos_wait" 3 648 "void(int8 sem)" `511 
v L "sem" 3 649 "int8" `514 
f B "rtos_signal" 3 649 "void(int8 sem)" `513 
v L "task" 3 650 "int8" `516 
v L "msg" 3 650 "int8" `517 
f B "rtos_msg_send" 3 650 "void(int8 task,int8 msg)" `515 
f B "rtos_msg_read" 3 651 "int8()" `518 
f B "rtos_msg_poll" 3 652 "int8()" `519 
v L "task" 3 653 "int8" `521 
f B "rtos_overrun" 3 653 "int8(int8 task)" `520 
v L "task" 3 654 "int8" `523 
v L "stat" 3 654 "*int8" `524 
f B "rtos_stats" 3 654 "void(int8 task,*int8 stat)" `522  "#use timer() Prototypes:"
f B "get_ticks" 3 657 "int8()" `525 
f G "get_ticks" 3 658 "int16()" `526 
f G "get_ticks" 3 659 "int32()" `527 
v L "stream" 3 660 "int8" `529 
f G "get_ticks" 3 660 "int8(int8 stream)" `528 
v L "stream" 3 661 "int8" `531 
f G "get_ticks" 3 661 "int16(int8 stream)" `530 
v L "stream" 3 662 "int8" `533 
f G "get_ticks" 3 662 "int32(int8 stream)" `532 
v L "value" 3 663 "int8" `535 
f B "set_ticks" 3 663 "void(int8 value)" `534 
v L "value" 3 664 "int16" `537 
f G "set_ticks" 3 664 "void(int16 value)" `536 
v L "value" 3 665 "int32" `539 
f G "set_ticks" 3 665 "void(int32 value)" `538 
v L "stream" 3 666 "int8" `541 
v L "value" 3 666 "int8" `542 
f G "set_ticks" 3 666 "void(int8 stream,int8 value)" `540 
v L "stream" 3 667 "int8" `541 
v L "value" 3 667 "int16" `545 
f G "set_ticks" 3 667 "void(int8 stream,int16 value)" `543 
v L "stream" 3 668 "int8" `541 
v L "value" 3 668 "int32" `548 
f G "set_ticks" 3 668 "void(int8 stream,int32 value)" `546  "#use pwm() Prototypes:"
f B "pwm_on" 3 671 "void()" `549 
v L "stream" 3 672 "int8" `551 
f G "pwm_on" 3 672 "void(int8 stream)" `550 
f B "pwm_off" 3 673 "void()" `552 
v L "stream" 3 674 "int8" `554 
f G "pwm_off" 3 674 "void(int8 stream)" `553 
v L "duty" 3 675 "int16" `556 
f B "pwm_set_duty" 3 675 "void(int16 duty)" `555 
v L "stream" 3 676 "int8" `558 
v L "duty" 3 676 "int16" `559 
f G "pwm_set_duty" 3 676 "void(int8 stream,int16 duty)" `557 
v L "percent" 3 677 "int16" `561 
f B "pwm_set_duty_percent" 3 677 "void(int16 percent)" `560 
v L "stream" 3 678 "int8" `563 
v L "percent" 3 678 "int16" `564 
f G "pwm_set_duty_percent" 3 678 "void(int8 stream,int16 percent)" `562 
v L "frequency" 3 679 "int32" `566 
f B "pwm_set_frequency" 3 679 "void(int32 frequency)" `565 
v L "stream" 3 680 "int8" `568 
v L "frequency" 3 680 "int32" `569 
f G "pwm_set_frequency" 3 680 "void(int8 stream,int32 frequency)" `567  "#use capture() Prototypes:"
f B "get_capture_time" 3 683 "int16()" `570 
v L "stream" 3 684 "int8" `572 
f G "get_capture_time" 3 684 "int16(int8 stream)" `571 
f B "get_capture_event" 3 685 "int8()" `573 
v L "stream" 3 686 "int8" `575 
f G "get_capture_event" 3 686 "int8(int8 stream)" `574  "Enviroment Prototypes:"
c L "get_capture_event" 3 1 2 "FUNCTION"
v L "address" 3 699 "int16" `577 
f B "goto_address" 3 699 "void(int16 address)" `576 
v L "label" 3 700 "int16" `579 
f B "label_address" 3 700 "int16(int16 label)" `578  "Program Memory Prototypes:"
v L "address" 3 703 "int16" `581 
v L "dataptr" 3 703 "*int8" `582 
v L "count" 3 703 "int16" `583 
f B "read_program_memory" 3 703 "void(int16 address,*int8 dataptr,int16 count)" `580 
v L "address" 3 704 "int16" `585 
f B "read_program_eeprom" 3 704 "int16(int16 address)" `584 
v L "address" 3 705 "int16" `587 
f B "erase_program_eeprom" 3 705 "void(int16 address)" `586 
v L "address" 3 706 "int16" `589 
v L "dataptr" 3 706 "*int8" `590 
v L "count" 3 706 "int16" `591 
f B "write_program_memory" 3 706 "void(int16 address,*int8 dataptr,int16 count)" `588 
v L "address" 3 707 "int16" `593 
v L "data" 3 707 "int16" `594 
f B "write_program_eeprom" 3 707 "void(int16 address,int16 data)" `592  "EEPROM Prototypes:"
t G "__EEADDRESS__" 3 712 "int16" `595 
v L "address" 3 717 "__EEADDRESS__" `597 
f B "read_eeprom" 3 717 "int8(__EEADDRESS__ address)" `596 
v L "address" 3 718 "__EEADDRESS__" `599 
v L "value" 3 718 "int8" `600 
f B "write_eeprom" 3 718 "void(__EEADDRESS__ address,int8 value)" `598  "INT"
c L "write_eeprom" 3 1 4 "FUNCTION"
v L "interrupt" 3 725 "int32" `602 
f B "enable_interrupts" 3 725 "void(int32 interrupt)" `601 
v L "interrupt" 3 726 "int32" `604 
f B "disable_interrupts" 3 726 "void(int32 interrupt)" `603 
v L "interrupt" 3 727 "int32" `606 
f B "clear_interrupt" 3 727 "void(int32 interrupt)" `605 
v L "interrupt" 3 728 "int32" `608 
f B "interrupt_active" 3 728 "int8(int32 interrupt)" `607 
v L "interrupt" 3 729 "int32" `610 
f B "interrupt_enabled" 3 729 "int8(int32 interrupt)" `609 
v L "source" 3 730 "int8" `612 
v L "edge" 3 730 "int8" `613 
f B "ext_int_edge" 3 730 "void(int8 source,int8 edge)" `611 
v L "address" 3 731 "int16" `615 
f B "jump_to_irs" 3 731 "void(int16 address)" `614  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 3 733 "0x40"
d G "H_TO_L" 3 734 "0"
d G "GLOBAL" 3 736 "0x0BC0"
d G "PERIPH" 3 737 "0x0B40"
d G "INT_RTCC" 3 738 "0x000B20"
d G "INT_RB" 3 739 "0x01FF0B08"
d G "INT_EXT_L2H" 3 740 "0x50000B10"
d G "INT_EXT_H2L" 3 741 "0x60000B10"
d G "INT_EXT" 3 742 "0x000B10"
d G "INT_AD" 3 743 "0x008C40"
d G "INT_TBE" 3 744 "0x008C10"
d G "INT_RDA" 3 745 "0x008C20"
d G "INT_TIMER1" 3 746 "0x008C01"
d G "INT_TIMER2" 3 747 "0x008C02"
d G "INT_CCP1" 3 748 "0x008C04"
d G "INT_CCP2" 3 749 "0x008D01"
d G "INT_SSP" 3 750 "0x008C08"
d G "INT_BUSCOL" 3 751 "0x008D08"
d G "INT_EEPROM" 3 752 "0x008D10"
d G "INT_TIMER0" 3 753 "0x000B20"
d G "INT_OSC_FAIL" 3 754 "0x008D80"
d G "INT_COMP" 3 755 "0x008D20"
d G "INT_COMP2" 3 756 "0x008D40"
d G "INT_ULPWU" 3 757 "0x008D04"
d G "INT_RB0" 3 758 "0x1010B08"
d G "INT_RB1" 3 759 "0x1020B08"
d G "INT_RB2" 3 760 "0x1040B08"
d G "INT_RB3" 3 761 "0x1080B08"
d G "INT_RB4" 3 762 "0x1100B08"
d G "INT_RB5" 3 763 "0x1200B08"
d G "INT_RB6" 3 764 "0x1400B08"
d G "INT_RB7" 3 765 "0x1800B08"
D G "usi8" 2 9 "unsigned int8"
D G "usi16" 2 10 "unsigned int16"
D G "usi32" 2 11 "unsigned int32"
D G "si8" 2 12 "signed   int8"
D G "si16" 2 13 "signed   int16"
D G "si32" 2 14 "signed   int32"
D G "bool" 2 16 "int1"
D G "enable" 2 18 "1"
D G "disable" 2 19 "0"
D G "on" 2 21 "1"
D G "off" 2 22 "0"
D G "btn0" 2 25 "pin_b"
D G "btn1" 2 29 "pin_b"
D G "btn2" 2 33 "pin_b"
D G "btn3" 2 37 "pin_b"
D G "btn4" 2 41 "pin_b"
D G "btn5" 2 45 "pin_b"
D G "btn_limit_temp_up" 2 48 "btn0"
D G "btn_limit_temp_dw" 2 49 "btn1"
F G "set_up_port" 2 51 "void()" `628 
D G "pcf8574_addr_wr" 4 1 "0x4E" "0b01001110"
D G "pcf8574_addr_rd" 4 2 "0x4F" "0b01001111"
F G "i2c_reset" 4 4 "void()" `629 
F G "i2c_setup_write" 4 9 "void()" `630 
V L "payload" 4 14 "int8" `632 
F G "i2c_write_1byte" 4 14 "void(int8 payload)" `631 
D G "lcd_cols" 5 1 "16"
D G "lcd_rows" 5 2 "2"
D G "LCD_CLEARDISPLAY" 5 5 "0x01"
D G "LCD_RETURNHOME" 5 6 "0x02"
D G "LCD_ENTRYMODESET" 5 7 "0x04"
D G "LCD_DISPLAYCONTROL" 5 8 "0x08"
D G "LCD_CURSORSHIFT" 5 9 "0x10"
D G "LCD_FUNCTIONSET" 5 10 "0x20"
D G "LCD_SETCGRAMADDR" 5 11 "0x40"
D G "LCD_SETDDRAMADDR" 5 12 "0x80"
D G "LCD_ENTRYRIGHT" 5 15 "0x00"
D G "LCD_ENTRYLEFT" 5 16 "0x02"
D G "LCD_ENTRYSHIFTINCREMENT" 5 17 "0x01"
D G "LCD_ENTRYSHIFTDECREMENT" 5 18 "0x00"
D G "LCD_DISPLAYON" 5 21 "0x04"
D G "LCD_DISPLAYOFF" 5 22 "0x00"
D G "LCD_CURSORON" 5 23 "0x02"
D G "LCD_CURSOROFF" 5 24 "0x00"
D G "LCD_BLINKON" 5 25 "0x01"
D G "LCD_BLINKOFF" 5 26 "0x00"
D G "LCD_DISPLAYMOVE" 5 29 "0x08"
D G "LCD_CURSORMOVE" 5 30 "0x00"
D G "LCD_MOVERIGHT" 5 31 "0x04"
D G "LCD_MOVELEFT" 5 32 "0x00"
D G "LCD_8BITMODE" 5 35 "0x10"
D G "LCD_4BITMODE" 5 36 "0x00"
D G "LCD_2LINE" 5 37 "0x08"
D G "LCD_1LINE" 5 38 "0x00"
D G "LCD_5x10DOTS" 5 39 "0x04"
D G "LCD_5x8DOTS" 5 40 "0x00"
D G "LCD_BACKLIGHT" 5 43 "0x08"
D G "LCD_NOBACKLIGHT" 5 44 "0x00"
D G "En" 5 46 "0B00000100" "Enable bit"
D G "Rw" 5 47 "0B00000010" "Read/Write bit"
D G "Rs" 5 48 "0B00000001" "Register select bit"
V L "value" 5 50 "int8" `634 
f G "write4bits" 5 50 "void(int8 value)" `633 
V L "_data" 5 51 "int8" `636 
f G "expanderWrite" 5 51 "void(int8 _data)" `635 
V L "_data" 5 52 "int8" `638 
f G "pulseEnable" 5 52 "void(int8 _data)" `637 
V L "value" 5 53 "int8" `640 
f G "lcd_command" 5 53 "void(int8 value)" `639 
f G "lcd_display" 5 54 "void()" `641 
f G "lcd_clear" 5 55 "void()" `642 
f G "lcd_home" 5 56 "void()" `643 
V L "value" 5 57 "int8" `645 
V L "mode" 5 57 "int8" `646 
f G "lcd_send" 5 57 "void(int8 value,int8 mode)" `644 
V L "value" 5 58 "int8" `648 
f G "lcd_data" 5 58 "void(int8 value)" `647 
V G "_displayfunction" 5 60 "int8" `649 
V G "_displaycontrol" 5 61 "int8" `650 
V G "_displaymode" 5 62 "int8" `651 
V G "_numlines" 5 63 "int8" `652 
V G "_cols" 5 64 "int8" `653 
V G "_rows" 5 65 "int8" `654 
V G "_backlightval" 5 66 "int8" `655 
F G "lcd_init" 5 68 "void()" `656 
C L "lcd_init" 5 4 1 "FUNCTION"
C L "lcd_init" 5 4 1 "FUNCTION"
C L "lcd_init" 5 4 1 "FUNCTION"
C L "lcd_init" 5 4 1 "FUNCTION"
C L "lcd_init" 5 4 7 "FUNCTION"
C L "lcd_init" 5 4 1 "FUNCTION"
F G "lcd_clear" 5 111 "void()" `642 
F G "lcd_home" 5 116 "void()" `643 
V L "col" 5 121 "int8" `658 
V L "row" 5 121 "int8" `659 
F G "lcd_setCursor" 5 121 "void(int8 col,int8 row)" `657 
V L "row_offsets" 5 122 "int8[1]" `660 
F G "lcd_display" 5 129 "void()" `641 
V L "value" 5 134 "int8" `662 
F G "lcd_command" 5 134 "void(int8 value)" `639 
V L "value" 5 138 "int8" `662 
F G "lcd_data" 5 138 "void(int8 value)" `647 
V L "value" 5 142 "int8" `645 
V L "mode" 5 142 "int8" `663 
F G "lcd_send" 5 142 "void(int8 value,int8 mode)" `644 
V L "highnib" 5 143 "int8" `661 
V L "lownib" 5 144 "int8" `662 
V L "value" 5 149 "int8" `664 
F G "write4bits" 5 149 "void(int8 value)" `633 
V L "_data" 5 154 "int8" `664 
F G "expanderWrite" 5 154 "void(int8 _data)" `635 
V L "_data" 5 158 "int8" `664 
F G "pulseEnable" 5 158 "void(int8 _data)" `637 
C L "lcd_log_info" 5 4 1 "FUNCTION"
V L "time_s" 5 166 "int16" `664 
V L "ena_time" 5 166 "int8" `665 
F G "lcd_log_info" 5 166 "void(int16 time_s,int8 ena_time)" `663 
D G "touch_pin" 6 1 "pin_a5"
D G "TOUCH_C" 7 36 ""
D G "TOUCH_PIN_LOW" 7 42 "()    output_drive(TOUCH_PIN); output_low(TOUCH_PIN)"
D G "TOUCH_PIN_HIGH" 7 43 "()    output_drive(TOUCH_PIN); output_high(TOUCH_PIN)"
D G "TOUCH_PIN_FLOAT" 7 44 "()  output_float(TOUCH_PIN)"
D G "TOUCH_PIN_READ" 7 45 "()      input_state(TOUCH_PIN)"
C L "touch_read_bit" 7 2 7 "FUNCTION"
f G "touch_read_bit" 7 59 "int8()" `672  "BYTE touch_read_byte()"
C L "touch_read_bit" 7 2 3 "FUNCTION"
f G "touch_read_byte" 7 67 "int8()" `673  "BOOLEAN touch_write_bit(int1 data)"
C L "touch_read_byte" 7 2 3 "FUNCTION"
V L "data" 7 75 "int8" `675 
f G "touch_write_bit" 7 75 "int8(int8 data)" `674  "BOOLEAN touch_write_byte(BYTE data)"
C L "touch_write_bit" 7 2 3 "FUNCTION"
V L "data" 7 83 "int8" `677 
f G "touch_write_byte" 7 83 "int8(int8 data)" `676  "BOOLEAN touch_present()"
C L "touch_write_byte" 7 2 3 "FUNCTION"
f G "touch_present" 7 91 "int8()" `678  "void reset_pulse()"
C L "touch_present" 7 2 3 "FUNCTION"
f G "reset_pulse" 7 99 "void()" `679  "////"
C L "reset_pulse" 7 2 6 "FUNCTION"
F G "touch_read_bit" 7 114 "int8()" `672 
V L "data" 7 115 "int1" `680 
C L "touch_read_byte" 7 2 4 "FUNCTION"
F G "touch_read_byte" 7 134 "int8()" `673 
V L "i" 7 135 "int8" `681 
V L "data" 7 135 "int8" `682 
C L "touch_write_bit" 7 2 4 "FUNCTION"
V L "data" 7 149 "int8" `684 
F G "touch_write_bit" 7 150 "int8(int8 data)" `674 
C L "touch_write_byte" 7 2 4 "FUNCTION"
V L "data" 7 179 "int8" `684 
F G "touch_write_byte" 7 180 "int8(int8 data)" `676 
V L "i" 7 181 "int8" `683 
C L "touch_present" 7 2 4 "FUNCTION"
F G "touch_present" 7 197 "int8()" `678 
V L "present" 7 198 "int1" `684 
C L "reset_pulse" 7 2 4 "FUNCTION"
F G "reset_pulse" 7 220 "void()" `679 
D G "search_rom" 6 3 "0xf0"
D G "read_rom" 6 4 "0x33"
D G "match_rom" 6 5 "0x55"
D G "skip_rom" 6 6 "0xcc"
D G "alarm_search" 6 7 "0xec"
D G "read_scratchpad" 6 8 "0xbe"
D G "write_scratchpad" 6 9 "0x4e"
D G "copy_scratchpad" 6 10 "0x48"
D G "convert_t" 6 11 "0x44"
V L "x" 6 13 "int8" `686 
V L "y" 6 13 "int8" `687 
F G "ds18b20_no_ds18b" 6 14 "void(int8 x,int8 y)" `685 
F G "ds18b20_khoi_tao" 6 20 "void()" `689 
C L "ds18b20_khoi_tao" 6 26 1 "FUNCTION"
F G "ds18b20_read_temp" 6 34 "int16()" `690 
V L "bl" 6 35 "int8" `691 
V L "bh" 6 35 "int8" `692 
V L "w" 6 36 "int16" `693 
V L "x" 6 49 "int8" `695 
V L "y" 6 49 "int8" `696 
F G "ds18b20_doc_rom" 6 50 "void(int8 x,int8 y)" `694 
V L "rom_code" 6 51 "int8[8]" `697 
V L "xh" 6 52 "int8" `698 
V L "xl" 6 52 "int8" `699 
V L "i" 6 53 "sint8" `700 
F G "MAIN" 0 3 "void()" `701 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep_ulpwu" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
