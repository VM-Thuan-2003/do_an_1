#define touch_pin pin_a2
#include <touch.c>
#define search_rom       0xf0
#define read_rom         0x33
#define match_rom        0x55
#define skip_rom         0xcc
#define alarm_search     0xec
#define read_scratchpad  0xbe
#define write_scratchpad 0x4e
#define copy_scratchpad  0x48
#define convert_t        0x44

void ds18b20_no_ds18b(usi8 x, y)
{
   lcd_setCursor(x, y);
   lcd_data("NO DS18B20");
}

void ds18b20_khoi_tao()
{
   touch_present();
   touch_write_byte(skip_rom);
   touch_write_byte(write_scratchpad);
   touch_write_byte(0x0);
   touch_write_byte(0x0);
   touch_write_byte(0x7f); // 12 bit

   touch_present();
   touch_write_byte(skip_rom);
   touch_write_byte(convert_t);
}

usi16 ds18b20_read_temp()
{
   usi8 bl, bh;
   usi16 w;
   touch_write_byte(skip_rom);
   touch_write_byte(read_scratchpad);
   bl = touch_read_byte();
   bh = touch_read_byte();
   w = make16(bh, bl);
   touch_present();
   touch_write_byte(skip_rom);
   touch_write_byte(convert_t);
   return w;
}

void ds18b20_doc_rom(usi8 time_s)
{
   usi8 rom_code[8];
   usi8 xh, xl;
   si8 i;
   if (touch_present())
   {
      touch_write_byte(read_rom);
      for (i = 0; i < 8; i++)
         rom_code[i] = touch_read_byte();
      lcd_setCursor(0, 0);
      lcd_data("CO DS18B20");
      lcd_setCursor(0, 1);
      for (i = 7; i > -1; i--)
      {
         xh = rom_code[i] / 16;
         if (xh > 9)
            xh = xh + 0x37;
         else
            xh = xh + 0x30;
         xl = rom_code[i] % 16;
         if (xl > 9)
            xl = xl + 0x37;
         else
            xl = xl + 0x30;
         lcd_data(xh);
         lcd_data(xl);
      }
   }
   else
      ds18b20_no_ds18b(0, 0);
   delay_ms(time_s * 1000);
   lcd_clear();
}
void ds18b20_lcd_data(usi16 data, int8 x, int8 y){
   usi8 dt_ng, dt_ngt;
   usi16 dt_tp, dt_tpt;
   usi16 dt_tp_real;
   dt_ng = data>>4;
   dt_tp = data & 0x000f;
   if(dt_ngt != dt_ng){
      dt_ngt = dt_ng;
      lcd_dis_2num_dot(dt_ng, x, y, enable, disable);
   }
   if(dt_tpt != dt_tp){
      dt_tpt = dt_tp;
      dt_tp_real = (dt_tp*625)/10;
      lcd_dis_3num_dot(dt_tp_real, x+2, y, enable, enable);
   }
}

#define DS18B20_PIN pin_a2

bool ds18b20_start(){
   output_low(DS18B20_PIN);
   output_drive(DS18B20_PIN);
   delay_us(500);
   output_float(DS18B20_PIN);
   delay_us(400);
   if(!input(DS18B20_PIN)){
      delay_us(400);
      return true;
   }
   return false;
}

void ds18b20_write_bit(bool value){
   output_low(DS18B20_PIN);
   output_drive(DS18B20_PIN);
   delay_us(2);
   output_bit(DS18B20_PIN, value);
   delay_us(80);
   output_float(DS18B20_PIN);
   delay_us(2);
}

void ds18b20_write_byte(int8 value){
   for(int8 i = 0; i < 8; i++)
      ds18b20_write_bit(bit_test(value,i));
}

bool ds18b20_read_bit(){
   bool value;
   output_low(DS18B20_PIN);
   output_drive(DS18B20_PIN);
   delay_us(2);
   output_float(DS18B20_PIN);
   delay_us(5);
   value = input(DS18B20_PIN);
   delay_us(100);
   return value;
}

int8 ds18b20_read_byte(){
   int8 value;
   for(int8 i = 0; i < 8; i++)
      shift_right(&value,1,ds18b20_read_bit());
   return value;
}

bool ds18b20_read_temp(int16 *raw_temp_value){
   if(!ds18b20_start())
      return false;
   ds18b20_write_byte(skip_rom);
   ds18b20_write_byte(convert_t);
   while(ds18b20_read_byte() == 0);
   if(!ds18b20_start())
      return false;
   ds18b20_write_byte(skip_rom);
}
