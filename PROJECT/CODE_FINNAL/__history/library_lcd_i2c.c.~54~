#define lcd_cols 16
#define lcd_rows 2

// commands
#define LCD_CLEARDISPLAY 0x01
#define LCD_RETURNHOME 0x02
#define LCD_ENTRYMODESET 0x04
#define LCD_DISPLAYCONTROL 0x08
#define LCD_CURSORSHIFT 0x10
#define LCD_FUNCTIONSET 0x20
#define LCD_SETCGRAMADDR 0x40
#define LCD_SETDDRAMADDR 0x80

// flags for display entry mode
#define LCD_ENTRYRIGHT 0x00
#define LCD_ENTRYLEFT 0x02
#define LCD_ENTRYSHIFTINCREMENT 0x01
#define LCD_ENTRYSHIFTDECREMENT 0x00

// flags for display on/off control
#define LCD_DISPLAYON 0x04
#define LCD_DISPLAYOFF 0x00
#define LCD_CURSORON 0x02
#define LCD_CURSOROFF 0x00
#define LCD_BLINKON 0x01
#define LCD_BLINKOFF 0x00

// flags for display/cursor shift
#define LCD_DISPLAYMOVE 0x08
#define LCD_CURSORMOVE 0x00
#define LCD_MOVERIGHT 0x04
#define LCD_MOVELEFT 0x00

// flags for function set
#define LCD_8BITMODE 0x10
#define LCD_4BITMODE 0x00
#define LCD_2LINE 0x08
#define LCD_1LINE 0x00
#define LCD_5x10DOTS 0x04
#define LCD_5x8DOTS 0x00

// flags for backlight control
#define LCD_BACKLIGHT 0x08
#define LCD_NOBACKLIGHT 0x00

#define En 0B00000100  // Enable bit
#define Rw 0B00000010  // Read/Write bit
#define Rs 0B00000001  // Register select bit

void write4bits(usi8 value);
void expanderWrite(usi8 _data);
void pulseEnable(usi8 _data);
void lcd_command(usi8 value);
void lcd_display();
void lcd_clear();
void lcd_home();
void lcd_send(usi8 value, usi8 mode);
void lcd_data(usi8 value);

usi8 _displayfunction;
usi8 _displaycontrol;
usi8 _displaymode;
usi8 _numlines;
usi8 _cols;
usi8 _rows;
usi8 _backlightval;

void lcd_setup(){
   _cols = lcd_cols; // 16
   _rows = lcd_rows; // 2
   _backlightval = LCD_NOBACKLIGHT; // back light is off
   
   i2c_setup_write(); // setup i2c
   _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
   
   _displayfunction |= LCD_2LINE;
   _numlines = _rows; // 2
   
   delay_ms(40);
   
   expanderWrite(_backlightval); // back light is on
   delay_ms(100);
   
   //It is try to set use 4bit in 3 time
   write4bits(0x03 << 4);
   delay_ms(5);
   
   write4bits(0x03 << 4);
   delay_ms(5);
   
   write4bits(0x03 << 4);
   delay_ms(5);
   
   write4bits(0x02 << 4); // set using 4bit for lcd16x2
   
   lcd_command(LCD_FUNCTIONSET | _displayfunction);
   
   _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
   lcd_display();
   
   lcd_clear();
   
   _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
   lcd_command(LCD_ENTRYMODESET | _displaymode);
   
   lcd_home();
}

void lcd_clear(){
   lcd_command(LCD_CLEARDISPLAY);
   delay_ms(20);
}

void lcd_home(){
   lcd_command(LCD_RETURNHOME);
   delay_ms(20);
}

void lcd_setCursor(usi8 col, usi8 row){
   int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
   if ( row > _numlines ) {
      row = _numlines-1;
   }
   lcd_command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}

void lcd_display() {
   _displaycontrol |= LCD_DISPLAYON;
   lcd_command(LCD_DISPLAYCONTROL | _displaycontrol);
}

void lcd_command(usi8 value){
   lcd_send(value,0);
}

void lcd_data(usi8 value){
   lcd_send(value,Rs);
}

void lcd_send(usi8 value, usi8 mode) {
   usi8 highnib=value&0xf0;
   usi8 lownib=(value<<4)&0xf0;
   write4bits((highnib)|mode);
   write4bits((lownib)|mode); 
}

void write4bits(usi8 value) {
   expanderWrite(value);
   pulseEnable(value);
}

void expanderWrite(usi8 _data){
   i2c_write_1byte(_data|_backlightval);
}

void pulseEnable(usi8 _data){
   expanderWrite(_data | En);
   delay_us(1);
   expanderWrite(_data & ~En);
   delay_us(50);
}

void log_lcd_initialize(){
   lcd_setCursor(1,0);
   lcd_data("Do an 1 - HKII");
   lcd_setCursor(3,1);
   lcd_data("SPKT-TPHCM");
   delay_ms(2000);
   lcd_clear();
}

void lcd_dis_xx_yy_zz(usi8 x, usi8 y, usi8 a, usi8 b, usi8 c, bool e3, bool e2, bool e1){
   usi8 a_ch, a_dv, b_ch, b_dv, c_ch, c_dv;
   a_ch = e3 == true ? a/10 + 0x30 : 0x20; a_dv = e3 == true ? a%10 + 0x30 : 0x20;
   b_ch = e2 == true ? b/10 + 0x30 : 0x20; b_dv = e2 == true ? b%10 + 0x30 : 0x20;
   c_ch = e1 == true ? c/10 + 0x30 : 0x20; c_dv = e1 == true ? c%10 + 0x30 : 0x20;
   lcd_setCursor(x, y);
   lcd_data(a_ch); lcd_data(a_dv); lcd_data("-");
   lcd_data(b_ch); lcd_data(b_dv); lcd_data("-");
   lcd_data(c_ch); lcd_data(c_dv);
}

void lcd_dis_2num_dot(usi16 dt, int8 x, int8 y, bool is_xvn, bool is_dot){
   usi8 ch, dv;
   lcd_setCursor(x, y);
   ch = dt/10 + 0x30;
   dv = dt%10 + 0x30;
   if(is_xvn == true) if(ch == 0x30) ch = " ";
   if(is_dot == true) lcd_data(".");
   lcd_data(ch); lcd_data(dv);
}

void lcd_dis_3num_dot(usi16 dt, int8 x, int8 y, bool is_xvn, bool is_dot){
   usi8 tr, ch, dv;
   lcd_setCursor(x, y); //xxx /10 -> xx 
   tr = dt/100 + 0x30; 
   ch = dt/10%10  + 0x30;
   dv = dt%10     + 0x30;
   if(is_xvn == true) if(tr == 0x30){
      tr = " ";
      if(ch == 0x30) ch = " ";
   }
   if(is_dot == true) lcd_data(".");
   lcd_data(tr); lcd_data(ch); lcd_data(dv);
}

void lcd_dis_temperature (int8 x, int8 y, usi16 ng, usi16 th){
   lcd_setCursor(x,y);
   lcd_data("ND: ");
   lcd_dis_2num_dot(ng, x + 4, y, true, false);
   lcd_dis_3num_dot(th, x + 6, y, false, true);
   lcd_data(" oC");
}

void lcd_dis_temperature_limit (int8 x, int8 y, usi16 ng){
   lcd_setCursor(x,y);
   lcd_data("ND-GH: ");
   lcd_dis_2num_dot(ng, x + 4, y, true, false);
   lcd_dis_3num_dot(th, x + 6, y, isxvnTp, true);
   lcd_data(" oC");
}
