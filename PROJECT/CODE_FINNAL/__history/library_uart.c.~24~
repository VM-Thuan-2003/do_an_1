//! library depedences
#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>

#define UART_BUFFER_SIZE 32

typedef struct {
    uint8_t buffer[UART_BUFFER_SIZE];
    volatile uint16_t head;
    volatile uint16_t tail;
} UART_Buffer;

UART_Buffer uart_tx_buffer, uart_rx_buffer;

bool UART_BufferEmpty(UART_Buffer *buffer) {
    return buffer->head == buffer->tail;
}

bool UART_BufferFull(UART_Buffer *buffer) {
    return ((buffer->head + 1) % UART_BUFFER_SIZE) == buffer->tail;
}

void UART_SendByte(uint8_t data) {
    if (!UART_BufferFull(&uart_tx_buffer)) {
        uart_tx_buffer.buffer[uart_tx_buffer.head] = data;
        uart_tx_buffer.head = (uart_tx_buffer.head + 1) % UART_BUFFER_SIZE;
        PIE1bits.TXIE = 1; // Enable UART transmit interrupt
    }
}

void UART_SendString(const char *str) {
    while (*str) {
        UART_SendByte(*str++);
    }
}

bool UART_ReadByte(uint8_t *data) {
    if (!UART_BufferEmpty(&uart_rx_buffer)) {
        *data = uart_rx_buffer.buffer[uart_rx_buffer.tail];
        uart_rx_buffer.tail = (uart_rx_buffer.tail + 1) % UART_BUFFER_SIZE;
        return true;
    }
    return false;
}
