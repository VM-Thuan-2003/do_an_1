#include <library_project.c>

char payload[] = "hello esp";

#define UART_BUFFER_SIZE 16

typedef struct {
    usi8 buffer[UART_BUFFER_SIZE];
    volatile uint16_t head;
    volatile uint16_t tail;
} UART_Buffer;

UART_Buffer uart_tx_buffer, uart_rx_buffer;

bool UART_BufferEmpty(UART_Buffer *buffer) {
    return buffer->head == buffer->tail;
}

bool UART_BufferFull(UART_Buffer *buffer) {
    return ((buffer->head + 1) % UART_BUFFER_SIZE) == buffer->tail;
}

void UART_SendByte(uint8_t data) {
    if (!UART_BufferFull(&uart_tx_buffer)) {
        uart_tx_buffer.buffer[uart_tx_buffer.head] = data;
        uart_tx_buffer.head = (uart_tx_buffer.head + 1) % UART_BUFFER_SIZE;
        enable_interrupts(INT_TBE); // Enable UART transmit interrupt
    }
}

void UART_SendString(char *str) {
    while (*str) {
        UART_SendByte(*str++);
    }
}

bool UART_ReadByte(uint8_t *data) {
    if (!UART_BufferEmpty(&uart_rx_buffer)) {
        *data = uart_rx_buffer.buffer[uart_rx_buffer.tail];
        uart_rx_buffer.tail = (uart_rx_buffer.tail + 1) % UART_BUFFER_SIZE;
        return true;
    }
    return false;
}

void loop(){
//! function to access for change limit temperature, change time for time rtc, change time clock for eat fish, check com with esp, log version sys
   menu();
//!   printf("send data");
//!   puts("ss%d",dd);
}

void main(){

//! setup enviroments
   setup_initialize();
   
//! setup ds1307 rtc
   ds1307_setup();

//! setup lcd display
   lcd_setup();

//! setup servo initialize is 0 degree
   servo_degree_0();

//! display info include: name project and name university
   log_lcd_initialize();
   
   printf("Hello from PIC16F877A!");
   
   while(true){
//! loop function is function suport in process of system
      loop();
   }
}
