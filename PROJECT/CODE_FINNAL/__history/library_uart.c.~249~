#include <string.h>

#include <stdio.h>

//! define buffer size is 16 byte
#define BUFFER_SIZE 16

//! define available for uart buffer
char receivedString[BUFFER_SIZE]="";
char trammitString[BUFFER_SIZE]="";
volatile unsigned int index = 0;
volatile int stringComplete = 0;
volatile unsigned int indexComplete = 0;

#int_rda
void read_uart(){
   if(kbhit()){
//!   Read the received character
      char receivedChar = getch();  
       
       if (receivedChar == '\r' || receivedChar == '\n') {
//!        End of string (carriage return detected)
           receivedString[index] = '\0';  // Null-terminate the string
           indexComplete = index;
           stringComplete = 1;  // Set the flag to indicate string reception complete
       } else {
          // Store the received character
           if (index < BUFFER_SIZE - 1) {
               receivedString[index++] = receivedChar;
           } else {
               // Handle buffer overflow
               index = BUFFER_SIZE - 1;  // Prevent overflow
           }
       }
   }
}

usi8 decToBcd(usi8 val) {
    return ((val / 10 * 16) + (val % 10));
}

void send_ok(){
   printf("ss:ok");
}

void handle_uart(){
   if (stringComplete) {
      stringComplete = 0;
      index = 0;
      indexComplete = 0;
      if(receivedString[0] == 's' && receivedString[1] == 't' && receivedString[2] == ':'){
//!      Header for changing temperature found
//!      frame "st:23"
         limitTemperature = ((receivedString[3] - '0') * 10) + (receivedString[4] - '0');
         send_ok();
      }
      else if(receivedString[0] == 's' && receivedString[1] == 'a' && receivedString[2] == ':'){
//!      Header for changing alarm settings found
//!      frame "sa:gpg:11-11-11"
         if(receivedString[3] == 'g' && receivedString[4] == 'p' && receivedString[5] == 'g'){
            // Address for changing gpg alarm settings found
            eat_hh = decToBcd((receivedString[7] - '0') * 10) + (receivedString[8] - '0');
            eat_pp = decToBcd((receivedString[10] - '0') * 10) + (receivedString[11] - '0');
            eat_ss = decToBcd((receivedString[13] - '0') * 10) + (receivedString[14] - '0');
            send_ok();
         }
      }
      else if(receivedString[0] == 'c' && receivedString[1] == 's' && receivedString[2] == ':'){
//!      Header for controling servo manual
//!      frame "cs:1" -> servo on    
//!      frame "cs:0" -> servo off
         flag_servo = receivedString[3] - '0';
         send_ok();
      }
      else if(receivedString[0] == 'g' && receivedString[1] == 'd' && receivedString[2] == ':'){
//!      Header for get data from pic16f877a send to esp8266
//!      frame "gd:"
         send_ok();
         sprintf(trammitString, "dt:rt:%d", dt_ng);
         putchar(dt_ng/10);;
      }
   }  
}
