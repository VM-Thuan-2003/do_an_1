CCS PCM C Compiler, Version 5.115, 43599               02-Jun-24 11:34

               Filename:   E:\STUDY\HKII-2023-2024\DO_AN_1\PROJECT\CODE_FINNAL\main.lst

               ROM used:   3475 words (42%)
                           Largest free fragment is 2048
               RAM used:   69 (19%) at main() level
                           111 (30%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.0
002A:  GOTO   02D
002B:  BTFSC  0C.0
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   051
.................... #include <library_project.c>
.................... /*
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
....................                        SU PHAM KY THUAT - TP.HCM
....................  DO AN 1 - HIEU CHINH NHIET DO HO CA VA CHO CA AN TU DONG - KET NOI ESP
.................... 
....................    THANH VIEN:
....................       VO MINH THUAN   - 21161366
....................       LE QUANG THUONG - 21161367
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... */
.................... #include <define_pic16f.c>
.................... //! config mode to operation of pic16f877a
.................... #include <16f877a.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
*
0074:  DATA C4,37
0075:  DATA A0,30
0076:  DATA 6E,10
0077:  DATA 31,10
0078:  DATA 2D,10
0079:  DATA C8,25
007A:  DATA C9,24
007B:  DATA 00,00
007C:  DATA 53,28
007D:  DATA 4B,2A
007E:  DATA 2D,2A
007F:  DATA 50,24
0080:  DATA C3,26
0081:  DATA 00,00
0082:  DATA 2D,00
0083:  DATA 2D,00
0084:  DATA 2E,00
0085:  DATA 2E,00
0086:  DATA 4E,22
0087:  DATA 3A,10
0088:  DATA 00,01
0089:  DATA A0,37
008A:  DATA 43,00
008B:  DATA 4E,22
008C:  DATA AD,23
008D:  DATA 48,1D
008E:  DATA 20,00
008F:  DATA A0,37
0090:  DATA 43,00
0091:  DATA 20,27
0092:  DATA 20,00
0093:  DATA 47,28
0094:  DATA 47,00
0095:  DATA 4E,2A
0096:  DATA 4E,00
0097:  DATA 20,2A
0098:  DATA 20,00
0099:  DATA DF,2F
009A:  DATA 00,00
009B:  DATA DF,2F
009C:  DATA 00,00
009D:  DATA E3,30
009E:  DATA 69,10
009F:  DATA E4,30
00A0:  DATA 74,10
00A1:  DATA E4,37
00A2:  DATA EE,33
00A3:  DATA 20,34
00A4:  DATA 6F,00
00A5:  DATA F4,17
00A6:  DATA 67,10
00A7:  DATA 63,34
00A8:  DATA 6F,10
00A9:  DATA E3,30
00AA:  DATA A0,30
00AB:  DATA 6E,00
00AC:  DATA 49,37
00AD:  DATA E6,37
00AE:  DATA F2,36
00AF:  DATA 61,3A
00B0:  DATA E9,37
00B1:  DATA 6E,00
00B2:  DATA D6,32
00B3:  DATA F2,39
00B4:  DATA E9,37
00B5:  DATA 6E,1D
00B6:  DATA 20,2B
00B7:  DATA 31,17
00B8:  DATA 30,17
00B9:  DATA 30,00
*
02F0:  MOVF   0B,W
02F1:  MOVWF  7B
02F2:  BCF    0B.7
02F3:  BSF    03.5
02F4:  BSF    03.6
02F5:  BSF    0C.7
02F6:  BSF    0C.0
02F7:  NOP
02F8:  NOP
02F9:  BTFSS  7B.7
02FA:  GOTO   300
02FB:  BCF    03.5
02FC:  BCF    03.6
02FD:  BSF    0B.7
02FE:  BSF    03.5
02FF:  BSF    03.6
0300:  BCF    03.5
0301:  MOVF   0C,W
0302:  ANDLW  7F
0303:  BTFSC  03.2
0304:  GOTO   33E
0305:  MOVWF  7B
0306:  MOVF   0D,W
0307:  MOVWF  7C
0308:  MOVF   0F,W
0309:  MOVWF  7D
030A:  MOVF   7B,W
030B:  MOVWF  7E
030C:  BCF    03.6
030D:  CALL   2D3
030E:  MOVF   7C,W
030F:  BSF    03.6
0310:  MOVWF  0D
0311:  MOVF   7D,W
0312:  MOVWF  0F
0313:  BCF    03.6
0314:  MOVF   0B,W
0315:  MOVWF  7E
0316:  BCF    0B.7
0317:  BSF    03.5
0318:  BSF    03.6
0319:  BSF    0C.7
031A:  BSF    0C.0
031B:  NOP
031C:  NOP
031D:  BTFSS  7E.7
031E:  GOTO   324
031F:  BCF    03.5
0320:  BCF    03.6
0321:  BSF    0B.7
0322:  BSF    03.5
0323:  BSF    03.6
0324:  BCF    03.5
0325:  RLF    0C,W
0326:  RLF    0E,W
0327:  ANDLW  7F
0328:  BTFSC  03.2
0329:  GOTO   33E
032A:  MOVWF  7B
032B:  MOVF   0D,W
032C:  MOVWF  7C
032D:  MOVF   0F,W
032E:  MOVWF  7D
032F:  MOVF   7B,W
0330:  MOVWF  7E
0331:  BCF    03.6
0332:  CALL   2D3
0333:  MOVF   7C,W
0334:  BSF    03.6
0335:  MOVWF  0D
0336:  MOVF   7D,W
0337:  MOVWF  0F
0338:  INCF   0D,F
0339:  BTFSC  03.2
033A:  INCF   0F,F
033B:  BCF    03.6
033C:  GOTO   2F0
033D:  BSF    03.6
033E:  BCF    03.6
033F:  RETURN
*
0362:  MOVF   62,W
0363:  ANDLW  07
0364:  MOVWF  77
0365:  RRF    62,W
0366:  MOVWF  78
0367:  RRF    78,F
0368:  RRF    78,F
0369:  MOVLW  1F
036A:  ANDWF  78,F
036B:  MOVF   78,W
036C:  ADDWF  64,W
036D:  MOVWF  04
036E:  BCF    03.7
036F:  BTFSC  65.0
0370:  BSF    03.7
0371:  CLRF   78
0372:  INCF   78,F
0373:  INCF   77,F
0374:  GOTO   376
0375:  RLF    78,F
0376:  DECFSZ 77,F
0377:  GOTO   375
0378:  MOVF   63,F
0379:  BTFSC  03.2
037A:  GOTO   37E
037B:  MOVF   78,W
037C:  IORWF  00,F
037D:  GOTO   381
037E:  COMF   78,F
037F:  MOVF   78,W
0380:  ANDWF  00,F
0381:  RETURN
0382:  MOVF   62,W
0383:  ANDLW  07
0384:  MOVWF  77
0385:  RRF    62,W
0386:  MOVWF  78
0387:  RRF    78,F
0388:  RRF    78,F
0389:  MOVLW  1F
038A:  ANDWF  78,F
038B:  MOVF   78,W
038C:  ADDWF  63,W
038D:  MOVWF  04
038E:  BCF    03.7
038F:  BTFSC  64.0
0390:  BSF    03.7
0391:  MOVF   00,W
0392:  MOVWF  78
0393:  INCF   77,F
0394:  GOTO   396
0395:  RRF    78,F
0396:  DECFSZ 77,F
0397:  GOTO   395
0398:  MOVLW  01
0399:  ANDWF  78,F
039A:  RETURN
*
0425:  CLRF   78
0426:  CLRF   79
0427:  CLRF   77
0428:  CLRF   7A
0429:  MOVF   75,W
042A:  BTFSS  03.2
042B:  GOTO   42F
042C:  MOVF   74,W
042D:  BTFSC  03.2
042E:  GOTO   449
042F:  MOVLW  10
0430:  MOVWF  76
0431:  BCF    03.0
0432:  RLF    72,F
0433:  RLF    73,F
0434:  RLF    77,F
0435:  RLF    7A,F
0436:  MOVF   75,W
0437:  SUBWF  7A,W
0438:  BTFSS  03.2
0439:  GOTO   43C
043A:  MOVF   74,W
043B:  SUBWF  77,W
043C:  BTFSS  03.0
043D:  GOTO   445
043E:  MOVF   74,W
043F:  SUBWF  77,F
0440:  BTFSS  03.0
0441:  DECF   7A,F
0442:  MOVF   75,W
0443:  SUBWF  7A,F
0444:  BSF    03.0
0445:  RLF    78,F
0446:  RLF    79,F
0447:  DECFSZ 76,F
0448:  GOTO   431
0449:  RETURN
*
04C2:  MOVLW  10
04C3:  MOVWF  64
04C4:  CLRF   77
04C5:  CLRF   7A
04C6:  RRF    61,F
04C7:  RRF    60,F
04C8:  BTFSS  03.0
04C9:  GOTO   4D0
04CA:  MOVF   62,W
04CB:  ADDWF  77,F
04CC:  BTFSC  03.0
04CD:  INCF   7A,F
04CE:  MOVF   63,W
04CF:  ADDWF  7A,F
04D0:  RRF    7A,F
04D1:  RRF    77,F
04D2:  RRF    79,F
04D3:  RRF    78,F
04D4:  DECFSZ 64,F
04D5:  GOTO   4C6
*
04E9:  CLRF   77
04EA:  CLRF   78
04EB:  MOVF   66,W
04EC:  BCF    03.0
04ED:  BTFSC  67.0
04EE:  ADDWF  77,F
04EF:  RRF    77,F
04F0:  RRF    78,F
04F1:  BTFSC  67.1
04F2:  ADDWF  77,F
04F3:  RRF    77,F
04F4:  RRF    78,F
04F5:  BTFSC  67.2
04F6:  ADDWF  77,F
04F7:  RRF    77,F
04F8:  RRF    78,F
04F9:  BTFSC  67.3
04FA:  ADDWF  77,F
04FB:  RRF    77,F
04FC:  RRF    78,F
04FD:  BTFSC  67.4
04FE:  ADDWF  77,F
04FF:  RRF    77,F
0500:  RRF    78,F
0501:  BTFSC  67.5
0502:  ADDWF  77,F
0503:  RRF    77,F
0504:  RRF    78,F
0505:  BTFSC  67.6
0506:  ADDWF  77,F
0507:  RRF    77,F
0508:  RRF    78,F
0509:  BTFSC  67.7
050A:  ADDWF  77,F
050B:  RRF    77,F
050C:  RRF    78,F
050D:  RETURN
*
051F:  MOVF   75,W
0520:  CLRF   78
0521:  SUBWF  74,W
0522:  BTFSC  03.0
0523:  GOTO   527
0524:  MOVF   74,W
0525:  MOVWF  77
0526:  GOTO   533
0527:  CLRF   77
0528:  MOVLW  08
0529:  MOVWF  76
052A:  RLF    74,F
052B:  RLF    77,F
052C:  MOVF   75,W
052D:  SUBWF  77,W
052E:  BTFSC  03.0
052F:  MOVWF  77
0530:  RLF    78,F
0531:  DECFSZ 76,F
0532:  GOTO   52A
0533:  RETURN
*
0785:  MOVF   60,W
0786:  XORWF  61,W
0787:  ANDLW  80
0788:  MOVWF  63
0789:  BTFSS  60.7
078A:  GOTO   78D
078B:  COMF   60,F
078C:  INCF   60,F
078D:  BTFSS  61.7
078E:  GOTO   791
078F:  COMF   61,F
0790:  INCF   61,F
0791:  MOVF   61,W
0792:  CLRF   78
0793:  SUBWF  60,W
0794:  BTFSC  03.0
0795:  GOTO   799
0796:  MOVF   60,W
0797:  MOVWF  77
0798:  GOTO   7A5
0799:  CLRF   77
079A:  MOVLW  08
079B:  MOVWF  62
079C:  RLF    60,F
079D:  RLF    77,F
079E:  MOVF   61,W
079F:  SUBWF  77,W
07A0:  BTFSC  03.0
07A1:  MOVWF  77
07A2:  RLF    78,F
07A3:  DECFSZ 62,F
07A4:  GOTO   79C
07A5:  BTFSS  63.7
07A6:  GOTO   7A9
07A7:  COMF   78,F
07A8:  INCF   78,F
07A9:  RETURN
.................... 
.................... #list
.................... 
.................... #device  adc=10
.................... #fuses   hs, nowdt, put, noprotect, nolvp
.................... #use     delay(clock=20MHz) 
*
017D:  MOVLW  61
017E:  MOVWF  04
017F:  BCF    03.7
0180:  MOVF   00,W
0181:  BTFSC  03.2
0182:  GOTO   190
0183:  MOVLW  06
0184:  MOVWF  78
0185:  CLRF   77
0186:  DECFSZ 77,F
0187:  GOTO   186
0188:  DECFSZ 78,F
0189:  GOTO   185
018A:  MOVLW  7B
018B:  MOVWF  77
018C:  DECFSZ 77,F
018D:  GOTO   18C
018E:  DECFSZ 00,F
018F:  GOTO   183
0190:  RETURN
*
0288:  MOVLW  03
0289:  SUBWF  63,F
028A:  BTFSS  03.0
028B:  GOTO   296
028C:  MOVLW  63
028D:  MOVWF  04
028E:  BCF    03.7
028F:  MOVF   00,W
0290:  BTFSC  03.2
0291:  GOTO   296
0292:  GOTO   294
0293:  GOTO   294
0294:  DECFSZ 00,F
0295:  GOTO   293
0296:  RETURN
.................... #use     i2c(master,slow,sda=pin_c4,scl=pin_c3)
*
00F1:  BCF    14.7
00F2:  BCF    0C.3
00F3:  BSF    03.5
00F4:  MOVF   2D,W
00F5:  BCF    03.5
00F6:  MOVWF  13
00F7:  MOVLW  02
00F8:  BTFSC  14.7
00F9:  GOTO   101
00FA:  BSF    03.5
00FB:  BTFSC  14.2
00FC:  GOTO   0FB
00FD:  MOVLW  00
00FE:  BTFSC  11.6
00FF:  MOVLW  01
0100:  BCF    03.5
0101:  MOVWF  78
0102:  RETURN
0103:  BCF    14.6
0104:  BSF    03.5
0105:  BSF    11.3
0106:  BTFSC  11.3
0107:  GOTO   106
0108:  BTFSC  77.0
0109:  BCF    11.5
010A:  BTFSS  77.0
010B:  BSF    11.5
010C:  BSF    11.4
010D:  BTFSC  11.4
010E:  GOTO   10D
010F:  BCF    03.5
0110:  MOVF   13,W
0111:  MOVWF  78
0112:  RETURN
.................... #use     rs232(baud=9600, xmit=pin_c6,rcv=pin_c7)
.................... 
.................... //! define name again to user
.................... #define usi8  unsigned int8
.................... #define usi16 unsigned int16
.................... #define usi32 unsigned int32
.................... #define si8   signed   int8
.................... #define si16  signed   int16
.................... #define si32  signed   int32
.................... #define bool int1
.................... 
.................... //! define variables
.................... bool flag_10ms = false;
.................... bool isDs18b20 = false;
.................... 
.................... usi16 limitTemperature = 25;
.................... 
.................... usi16 tick_10ms;
.................... 
.................... usi8 giay_tam, bdn, tt_ht = 0;
.................... si8 gt_mod = 0, tg_chinh = 0;
.................... 
.................... bool e_11, e_22, e_33;
.................... 
.................... usi8 eat_hh, eat_pp, eat_ss;
.................... 
.................... #define maxLevel 5
.................... 
.................... usi8 countLevel = 0;
.................... usi8 countLevelRev = 0;
.................... 
.................... bool flag_servo;
.................... usi8 count_servo = 0;
.................... 
.................... #define tang true
.................... #define giam false
.................... 
.................... //! define button to use
.................... #ifndef bt0
.................... #define bt0    pin_b0
.................... #endif
.................... 
.................... #ifndef bt1
.................... #define bt1    pin_b1
.................... #endif
.................... 
.................... #ifndef bt2
.................... #define bt2    pin_b2
.................... #endif
.................... 
.................... #ifndef bt3
.................... #define bt3    pin_b3
.................... #endif
.................... 
.................... //! define pin sensors
.................... #define pin_ds18b20 pin_a0
.................... 
.................... //! define pin controls
.................... #ifndef pinServo
.................... #define pinServo    pin_c1
.................... #endif
.................... 
.................... #ifndef pinDLCold
.................... #define pinDLCold     pin_d6
.................... #endif
.................... 
.................... #ifndef pinDLHot
.................... #define pinDLHot      pin_d7
.................... 
.................... #ifndef ledTest
.................... #define ledTest      pin_b5
.................... 
.................... #int_timer1
.................... void interrupt_timer1()
.................... {
....................    set_timer1(59286);
*
0051:  CLRF   0E
0052:  MOVLW  E7
0053:  MOVWF  0F
0054:  MOVLW  96
0055:  MOVWF  0E
0056:  NOP
....................    
....................    flag_10ms = !flag_10ms;
0057:  MOVLW  01
0058:  XORWF  2C,F
.................... 
....................    tick_10ms++;
0059:  INCF   2F,F
005A:  BTFSC  03.2
005B:  INCF   30,F
.................... 
.................... //! when tick_10ms >= 10 --> 100ms
....................    if(tick_10ms >= 10){
005C:  MOVF   30,F
005D:  BTFSS  03.2
005E:  GOTO   063
005F:  MOVF   2F,W
0060:  SUBLW  09
0061:  BTFSC  03.0
0062:  GOTO   070
....................       bdn++;
0063:  INCF   32,F
....................       tick_10ms = 0;
0064:  CLRF   30
0065:  CLRF   2F
....................       
.................... //! disable flag servo on --> flag_servo >> false
....................       if(flag_servo == true){
0066:  BTFSS  2C.5
0067:  GOTO   070
....................          if(count_servo < 100) count_servo++; // 10s
0068:  MOVF   3B,W
0069:  SUBLW  63
006A:  BTFSS  03.0
006B:  GOTO   06E
006C:  INCF   3B,F
006D:  GOTO   070
....................          else{
....................             count_servo = 0;
006E:  CLRF   3B
....................             flag_servo = false;
006F:  BCF    2C.5
....................          }
....................       }
....................    }
0070:  BCF    0C.0
0071:  BCF    0A.3
0072:  BCF    0A.4
0073:  GOTO   02D
.................... }
.................... 
.................... void setup_initialize(){
.................... //! set up timer 1 to timer count is 10ms of one cycle
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);
*
00BA:  MOVLW  B5
00BB:  MOVWF  10
....................    set_timer1(59286);
00BC:  CLRF   0E
00BD:  MOVLW  E7
00BE:  MOVWF  0F
00BF:  MOVLW  96
00C0:  MOVWF  0E
00C1:  NOP
.................... 
.................... //! enable interrupt timer 1
....................    enable_interrupts(global);
00C2:  MOVLW  C0
00C3:  IORWF  0B,F
....................    enable_interrupts(int_timer1);
00C4:  BSF    03.5
00C5:  BSF    0C.0
.................... 
.................... //! setup mode for all gpio of pic16f877a
....................    set_tris_a(0xff);
00C6:  MOVLW  FF
00C7:  MOVWF  05
....................    set_tris_b(0xdf);
00C8:  MOVLW  DF
00C9:  MOVWF  06
....................    set_tris_d(0x00); output_d(0x00);
00CA:  MOVLW  00
00CB:  MOVWF  08
00CC:  CLRF   08
00CD:  BCF    03.5
00CE:  CLRF   08
....................    set_tris_e(0x00); output_e(0x00);
00CF:  BSF    03.5
00D0:  BCF    09.0
00D1:  BCF    09.1
00D2:  BCF    09.2
00D3:  BCF    09.0
00D4:  BCF    09.1
00D5:  BCF    09.2
00D6:  BCF    03.5
00D7:  CLRF   09
....................    set_tris_c(0x00); output_c(0x00);
00D8:  BSF    03.5
00D9:  MOVWF  07
00DA:  BCF    03.5
00DB:  MOVWF  2B
00DC:  MOVWF  2B
00DD:  BSF    03.5
00DE:  CLRF   07
00DF:  BCF    03.5
00E0:  CLRF   07
.................... 
.................... //! setup variable initialize
....................    flag_10ms = false;
00E1:  BCF    2C.0
....................    isDs18b20 = false;
00E2:  BCF    2C.1
....................    
....................    limitTemperature = 25;
00E3:  CLRF   2E
00E4:  MOVLW  19
00E5:  MOVWF  2D
....................    
....................    e_11 = true; e_22 = true; e_33 = true;
00E6:  BSF    2C.2
00E7:  BSF    2C.3
00E8:  BSF    2C.4
....................    
....................    eat_hh = 0x16; eat_pp = 0x00; eat_ss = 0x01;
00E9:  MOVLW  16
00EA:  MOVWF  36
00EB:  CLRF   37
00EC:  MOVLW  01
00ED:  MOVWF  38
00EE:  BSF    0A.3
00EF:  BCF    0A.4
00F0:  GOTO   059 (RETURN)
.................... }
.................... 
.................... #include <library_button.c>
.................... //! button place
.................... //! bt3 - bt2 - bt1 - bt0
.................... 
.................... usi8 countPush = 0;
.................... usi8 countTick = 0;
.................... 
.................... bool push_btn(bool isRelease, usi8 pin){
.................... //! isRelease == 0 --> push button is hold
.................... //! isRelease == 1 --> push button is release
....................    if(!input(pin)){
*
0869:  MOVF   61,W
086A:  MOVWF  62
086B:  MOVLW  01
086C:  MOVWF  63
086D:  CLRF   65
086E:  MOVLW  80
086F:  MOVWF  64
0870:  BCF    0A.3
0871:  CALL   362
0872:  BSF    0A.3
0873:  MOVF   61,W
0874:  MOVWF  62
0875:  CLRF   64
0876:  CLRF   63
0877:  BCF    0A.3
0878:  CALL   382
0879:  BSF    0A.3
087A:  BTFSC  78.0
087B:  GOTO   0B6
....................       if(flag_10ms == true) countPush++;
087C:  BTFSS  2C.0
087D:  GOTO   07F
087E:  INCF   3C,F
.................... //! check if countPush == 2 (20ms) --> debound button
....................       if(countPush >= 1){
087F:  MOVF   3C,W
0880:  SUBLW  00
0881:  BTFSC  03.0
0882:  GOTO   0B3
....................          if(!input(pin)){
0883:  MOVF   61,W
0884:  MOVWF  62
0885:  MOVLW  01
0886:  MOVWF  63
0887:  CLRF   65
0888:  MOVLW  80
0889:  MOVWF  64
088A:  BCF    0A.3
088B:  CALL   362
088C:  BSF    0A.3
088D:  MOVF   61,W
088E:  MOVWF  62
088F:  CLRF   64
0890:  CLRF   63
0891:  BCF    0A.3
0892:  CALL   382
0893:  BSF    0A.3
0894:  BTFSC  78.0
0895:  GOTO   0B0
....................             if(isRelease == false) while(!input(pin));
0896:  MOVF   60,F
0897:  BTFSS  03.2
0898:  GOTO   0AC
0899:  MOVF   61,W
089A:  MOVWF  62
089B:  MOVLW  01
089C:  MOVWF  63
089D:  CLRF   65
089E:  MOVLW  80
089F:  MOVWF  64
08A0:  BCF    0A.3
08A1:  CALL   362
08A2:  BSF    0A.3
08A3:  MOVF   61,W
08A4:  MOVWF  62
08A5:  CLRF   64
08A6:  CLRF   63
08A7:  BCF    0A.3
08A8:  CALL   382
08A9:  BSF    0A.3
08AA:  BTFSS  78.0
08AB:  GOTO   099
....................             countPush = 0;
08AC:  CLRF   3C
....................             return true;
08AD:  MOVLW  01
08AE:  MOVWF  78
08AF:  GOTO   0B8
....................          }
....................          return false;
08B0:  MOVLW  00
08B1:  MOVWF  78
08B2:  GOTO   0B8
....................       }
....................       return false;
08B3:  MOVLW  00
08B4:  MOVWF  78
08B5:  GOTO   0B8
....................    }
.................... //!   countPush = 0;
....................    return false;
08B6:  MOVLW  00
08B7:  MOVWF  78
.................... }
.................... 
.................... bool tick_btn(usi8 delay, usi8 pin){
.................... //! dl is time delay that compute with 10ms for dl is 1
....................    if(!input(pin)){
*
0658:  MOVF   61,W
0659:  MOVWF  62
065A:  MOVLW  01
065B:  MOVWF  63
065C:  CLRF   65
065D:  MOVLW  80
065E:  MOVWF  64
065F:  CALL   362
0660:  MOVF   61,W
0661:  MOVWF  62
0662:  CLRF   64
0663:  CLRF   63
0664:  CALL   382
0665:  BTFSC  78.0
0666:  GOTO   674
....................       if(flag_10ms == true) countTick++;
0667:  BTFSC  2C.0
0668:  INCF   3D,F
.................... //! check if countTick >= delay (delay * 10ms) --> time delay wanna to tick rising signal
....................       if(countTick >= delay){
0669:  MOVF   60,W
066A:  SUBWF  3D,W
066B:  BTFSS  03.0
066C:  GOTO   671
....................          countTick = 0;
066D:  CLRF   3D
....................          return true;
066E:  MOVLW  01
066F:  MOVWF  78
0670:  GOTO   676
....................       }
....................       return false;
0671:  MOVLW  00
0672:  MOVWF  78
0673:  GOTO   676
....................    }
.................... //!   countTick = 0;
....................    return false;
0674:  MOVLW  00
0675:  MOVWF  78
0676:  RETURN
.................... }
.................... 
.................... #include <library_i2c.c>
.................... #define pcf8574_addr_wr 0x4E // 0b01001110
.................... #define pcf8574_addr_rd 0x4F // 0b01001111
.................... 
.................... //! i2c reset
.................... void i2c_reset()
.................... {
....................    i2c_start();
....................    i2c_stop();
.................... }
.................... 
.................... //! i2c setup write for pcf8574
.................... void i2c_setup_write()
.................... {
....................    i2c_start();
*
0218:  BSF    03.5
0219:  BSF    11.0
021A:  BTFSC  11.0
021B:  GOTO   21A
....................    i2c_write(pcf8574_addr_wr);
021C:  MOVLW  4E
021D:  MOVWF  2D
021E:  BCF    03.5
021F:  CALL   0F1
.................... }
.................... 
.................... //! i2c write 1byte for pcf8574
.................... void i2c_write_1byte(usi8 payload)
.................... {
....................    i2c_start();
*
019B:  BSF    11.1
019C:  BTFSC  11.1
019D:  GOTO   19C
*
01B9:  BSF    11.1
01BA:  BTFSC  11.1
01BB:  GOTO   1BA
*
01D8:  BSF    11.1
01D9:  BTFSC  11.1
01DA:  GOTO   1D9
*
0231:  BSF    11.1
0232:  BTFSC  11.1
0233:  GOTO   232
....................    i2c_write(pcf8574_addr_wr);
*
019E:  MOVLW  4E
019F:  MOVWF  2D
01A0:  BCF    03.5
01A1:  CALL   0F1
*
01BC:  MOVLW  4E
01BD:  MOVWF  2D
01BE:  BCF    03.5
01BF:  CALL   0F1
*
01DB:  MOVLW  4E
01DC:  MOVWF  2D
01DD:  BCF    03.5
01DE:  CALL   0F1
*
0234:  MOVLW  4E
0235:  MOVWF  2D
0236:  BCF    03.5
0237:  CALL   0F1
....................    i2c_write(payload);
*
01A2:  BSF    03.5
01A3:  MOVF   2C,W
01A4:  MOVWF  2D
01A5:  BCF    03.5
01A6:  CALL   0F1
*
01C0:  BSF    03.5
01C1:  MOVF   2C,W
01C2:  MOVWF  2D
01C3:  BCF    03.5
01C4:  CALL   0F1
*
01DF:  BSF    03.5
01E0:  MOVF   2C,W
01E1:  MOVWF  2D
01E2:  BCF    03.5
01E3:  CALL   0F1
*
0238:  BSF    03.5
0239:  MOVF   2C,W
023A:  MOVWF  2D
023B:  BCF    03.5
023C:  CALL   0F1
....................    i2c_stop();
*
01A7:  BSF    03.5
01A8:  BSF    11.2
01A9:  BTFSC  11.2
01AA:  GOTO   1A9
*
01C5:  BSF    03.5
01C6:  BSF    11.2
01C7:  BTFSC  11.2
01C8:  GOTO   1C7
*
01E4:  BSF    03.5
01E5:  BSF    11.2
01E6:  BTFSC  11.2
01E7:  GOTO   1E6
*
023D:  BSF    03.5
023E:  BSF    11.2
023F:  BTFSC  11.2
0240:  GOTO   23F
.................... }
.................... 
.................... 
.................... #include <library_lcd_i2c.c>
.................... #define lcd_cols 16
.................... #define lcd_rows 2
.................... 
.................... // commands
.................... #define LCD_CLEARDISPLAY 0x01
.................... #define LCD_RETURNHOME 0x02
.................... #define LCD_ENTRYMODESET 0x04
.................... #define LCD_DISPLAYCONTROL 0x08
.................... #define LCD_CURSORSHIFT 0x10
.................... #define LCD_FUNCTIONSET 0x20
.................... #define LCD_SETCGRAMADDR 0x40
.................... #define LCD_SETDDRAMADDR 0x80
.................... 
.................... // flags for display entry mode
.................... #define LCD_ENTRYRIGHT 0x00
.................... #define LCD_ENTRYLEFT 0x02
.................... #define LCD_ENTRYSHIFTINCREMENT 0x01
.................... #define LCD_ENTRYSHIFTDECREMENT 0x00
.................... 
.................... // flags for display on/off control
.................... #define LCD_DISPLAYON 0x04
.................... #define LCD_DISPLAYOFF 0x00
.................... #define LCD_CURSORON 0x02
.................... #define LCD_CURSOROFF 0x00
.................... #define LCD_BLINKON 0x01
.................... #define LCD_BLINKOFF 0x00
.................... 
.................... // flags for display/cursor shift
.................... #define LCD_DISPLAYMOVE 0x08
.................... #define LCD_CURSORMOVE 0x00
.................... #define LCD_MOVERIGHT 0x04
.................... #define LCD_MOVELEFT 0x00
.................... 
.................... // flags for function set
.................... #define LCD_8BITMODE 0x10
.................... #define LCD_4BITMODE 0x00
.................... #define LCD_2LINE 0x08
.................... #define LCD_1LINE 0x00
.................... #define LCD_5x10DOTS 0x04
.................... #define LCD_5x8DOTS 0x00
.................... 
.................... // flags for backlight control
.................... #define LCD_BACKLIGHT 0x08
.................... #define LCD_NOBACKLIGHT 0x00
.................... 
.................... #define En 0B00000100  // Enable bit
.................... #define Rw 0B00000010  // Read/Write bit
.................... #define Rs 0B00000001  // Register select bit
.................... 
.................... void write4bits(usi8 value);
.................... void expanderWrite(usi8 _data);
.................... void pulseEnable(usi8 _data);
.................... void lcd_command(usi8 value);
.................... void lcd_display();
.................... void lcd_clear();
.................... void lcd_home();
.................... void lcd_send(usi8 value, usi8 mode);
.................... void lcd_data(usi8 value);
.................... 
.................... usi8 _displayfunction;
.................... usi8 _displaycontrol;
.................... usi8 _displaymode;
.................... usi8 _numlines;
.................... usi8 _cols;
.................... usi8 _rows;
.................... usi8 _backlightval;
.................... 
.................... void lcd_setup(){
....................    _cols = lcd_cols; // 16
*
0213:  MOVLW  10
0214:  MOVWF  42
....................    _rows = lcd_rows; // 2
0215:  MOVLW  02
0216:  MOVWF  43
....................    _backlightval = LCD_NOBACKLIGHT; // back light is off
0217:  CLRF   44
....................    
....................    i2c_setup_write(); // setup i2c
....................    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
*
0220:  CLRF   3E
....................    
....................    _displayfunction |= LCD_2LINE;
0221:  BSF    3E.3
....................    _numlines = _rows; // 2
0222:  MOVF   43,W
0223:  MOVWF  41
....................    
....................    delay_ms(40);
0224:  MOVLW  28
0225:  MOVWF  61
0226:  CALL   17D
....................    
....................    expanderWrite(_backlightval); // back light is on
0227:  MOVF   44,W
0228:  BSF    03.5
0229:  MOVWF  2A
....................    delay_ms(100);
*
0241:  MOVLW  64
0242:  BCF    03.5
0243:  MOVWF  61
0244:  CALL   17D
....................    
....................    //It is try to set use 4bit in 3 time
....................    write4bits(0x03 << 4);
0245:  MOVLW  30
0246:  BSF    03.5
0247:  MOVWF  27
0248:  BCF    03.5
0249:  CALL   191
....................    delay_ms(5);
024A:  MOVLW  05
024B:  MOVWF  61
024C:  CALL   17D
....................    
....................    write4bits(0x03 << 4);
024D:  MOVLW  30
024E:  BSF    03.5
024F:  MOVWF  27
0250:  BCF    03.5
0251:  CALL   191
....................    delay_ms(5);
0252:  MOVLW  05
0253:  MOVWF  61
0254:  CALL   17D
....................    
....................    write4bits(0x03 << 4);
0255:  MOVLW  30
0256:  BSF    03.5
0257:  MOVWF  27
0258:  BCF    03.5
0259:  CALL   191
....................    delay_ms(5);
025A:  MOVLW  05
025B:  MOVWF  61
025C:  CALL   17D
....................    
....................    write4bits(0x02 << 4); // set using 4bit for lcd16x2
025D:  MOVLW  20
025E:  BSF    03.5
025F:  MOVWF  27
0260:  BCF    03.5
0261:  CALL   191
....................    
....................    lcd_command(LCD_FUNCTIONSET | _displayfunction);
0262:  MOVF   3E,W
0263:  IORLW  20
0264:  MOVWF  60
0265:  BSF    03.5
0266:  MOVWF  21
0267:  BCF    03.5
0268:  CALL   1EE
....................    
....................    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
0269:  MOVLW  04
026A:  MOVWF  3F
....................    lcd_display();
....................    
....................    lcd_clear();
*
0273:  CALL   20A
....................    
....................    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
0274:  MOVLW  02
0275:  MOVWF  40
....................    lcd_command(LCD_ENTRYMODESET | _displaymode);
0276:  MOVF   40,W
0277:  IORLW  04
0278:  MOVWF  60
0279:  BSF    03.5
027A:  MOVWF  21
027B:  BCF    03.5
027C:  CALL   1EE
....................    
....................    lcd_home();
*
0285:  BSF    0A.3
0286:  BCF    0A.4
0287:  GOTO   05F (RETURN)
.................... }
.................... 
.................... void lcd_clear(){
....................    lcd_command(LCD_CLEARDISPLAY);
*
020A:  MOVLW  01
020B:  BSF    03.5
020C:  MOVWF  21
020D:  BCF    03.5
020E:  CALL   1EE
....................    delay_ms(20);
020F:  MOVLW  14
0210:  MOVWF  61
0211:  CALL   17D
0212:  RETURN
.................... }
.................... 
.................... void lcd_home(){
....................    lcd_command(LCD_RETURNHOME);
*
027D:  MOVLW  02
027E:  BSF    03.5
027F:  MOVWF  21
0280:  BCF    03.5
0281:  CALL   1EE
....................    delay_ms(20);
0282:  MOVLW  14
0283:  MOVWF  61
0284:  CALL   17D
.................... }
.................... 
.................... void lcd_setCursor(usi8 col, usi8 row){
....................    int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
*
02B8:  CLRF   7B
02B9:  MOVLW  40
02BA:  MOVWF  7C
02BB:  MOVLW  14
02BC:  MOVWF  7D
02BD:  MOVLW  54
02BE:  MOVWF  7E
....................    if ( row > _numlines ) {
02BF:  MOVF   75,W
02C0:  SUBWF  41,W
02C1:  BTFSC  03.0
02C2:  GOTO   2C6
....................       row = _numlines-1;
02C3:  MOVLW  01
02C4:  SUBWF  41,W
02C5:  MOVWF  75
....................    }
....................    lcd_command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
02C6:  MOVLW  7B
02C7:  ADDWF  75,W
02C8:  MOVWF  04
02C9:  BCF    03.7
02CA:  MOVF   00,W
02CB:  ADDWF  74,W
02CC:  IORLW  80
02CD:  MOVWF  76
02CE:  BSF    03.5
02CF:  MOVWF  21
02D0:  BCF    03.5
02D1:  CALL   1EE
02D2:  RETURN
.................... }
.................... 
.................... void lcd_display() {
....................    _displaycontrol |= LCD_DISPLAYON;
*
026B:  BSF    3F.2
....................    lcd_command(LCD_DISPLAYCONTROL | _displaycontrol);
026C:  MOVF   3F,W
026D:  IORLW  08
026E:  MOVWF  60
026F:  BSF    03.5
0270:  MOVWF  21
0271:  BCF    03.5
0272:  CALL   1EE
.................... }
.................... 
.................... void lcd_command(usi8 value){
....................    lcd_send(value,0);
*
01EE:  BSF    03.5
01EF:  MOVF   21,W
01F0:  MOVWF  22
01F1:  CLRF   23
*
0209:  RETURN
.................... }
.................... 
.................... void lcd_data(usi8 value){
....................    lcd_send(value,Rs);
*
02D3:  MOVF   7E,W
02D4:  BSF    03.5
02D5:  MOVWF  22
02D6:  MOVLW  01
02D7:  MOVWF  23
*
02EF:  RETURN
.................... }
.................... 
.................... void lcd_send(usi8 value, usi8 mode) {
*
01F2:  MOVF   22,W
01F3:  ANDLW  F0
01F4:  MOVWF  24
01F5:  SWAPF  22,W
01F6:  MOVWF  77
01F7:  MOVLW  F0
01F8:  ANDWF  77,F
01F9:  MOVF   77,W
01FA:  ANDLW  F0
01FB:  MOVWF  25
*
02D8:  MOVF   22,W
02D9:  ANDLW  F0
02DA:  MOVWF  24
02DB:  SWAPF  22,W
02DC:  MOVWF  77
02DD:  MOVLW  F0
02DE:  ANDWF  77,F
02DF:  MOVF   77,W
02E0:  ANDLW  F0
02E1:  MOVWF  25
....................    usi8 highnib=value&0xf0;
....................    usi8 lownib=(value<<4)&0xf0;
....................    write4bits((highnib)|mode);
*
01FC:  MOVF   24,W
01FD:  IORWF  23,W
01FE:  MOVWF  26
01FF:  MOVWF  27
0200:  BCF    03.5
0201:  CALL   191
*
02E2:  MOVF   24,W
02E3:  IORWF  23,W
02E4:  MOVWF  26
02E5:  MOVWF  27
02E6:  BCF    03.5
02E7:  CALL   191
....................    write4bits((lownib)|mode); 
*
0202:  BSF    03.5
0203:  MOVF   25,W
0204:  IORWF  23,W
0205:  MOVWF  26
0206:  MOVWF  27
0207:  BCF    03.5
0208:  CALL   191
*
02E8:  BSF    03.5
02E9:  MOVF   25,W
02EA:  IORWF  23,W
02EB:  MOVWF  26
02EC:  MOVWF  27
02ED:  BCF    03.5
02EE:  CALL   191
.................... }
.................... 
.................... void write4bits(usi8 value) {
....................    expanderWrite(value);
*
0191:  BSF    03.5
0192:  MOVF   27,W
0193:  MOVWF  2A
....................    pulseEnable(value);
*
01AB:  MOVF   27,W
01AC:  MOVWF  28
*
01EC:  BCF    03.5
01ED:  RETURN
.................... }
.................... 
.................... void expanderWrite(usi8 _data){
....................    i2c_write_1byte(_data|_backlightval);
*
0194:  MOVF   2A,W
0195:  BCF    03.5
0196:  IORWF  44,W
0197:  BSF    03.5
0198:  MOVWF  2B
0199:  MOVF   2B,W
019A:  MOVWF  2C
*
01B2:  MOVF   2A,W
01B3:  BCF    03.5
01B4:  IORWF  44,W
01B5:  BSF    03.5
01B6:  MOVWF  2B
01B7:  MOVF   2B,W
01B8:  MOVWF  2C
*
01D1:  MOVF   2A,W
01D2:  BCF    03.5
01D3:  IORWF  44,W
01D4:  BSF    03.5
01D5:  MOVWF  2B
01D6:  MOVF   2B,W
01D7:  MOVWF  2C
*
022A:  MOVF   2A,W
022B:  BCF    03.5
022C:  IORWF  44,W
022D:  BSF    03.5
022E:  MOVWF  2B
022F:  MOVF   2B,W
0230:  MOVWF  2C
.................... }
.................... 
.................... void pulseEnable(usi8 _data){
....................    expanderWrite(_data | En);
*
01AD:  MOVF   28,W
01AE:  IORLW  04
01AF:  MOVWF  29
01B0:  MOVF   29,W
01B1:  MOVWF  2A
....................    delay_us(1);
*
01C9:  GOTO   1CA
01CA:  GOTO   1CB
01CB:  NOP
....................    expanderWrite(_data & ~En);
01CC:  MOVF   28,W
01CD:  ANDLW  FB
01CE:  MOVWF  29
01CF:  MOVF   29,W
01D0:  MOVWF  2A
....................    delay_us(50);
*
01E8:  MOVLW  53
01E9:  MOVWF  77
01EA:  DECFSZ 77,F
01EB:  GOTO   1EA
.................... }
.................... 
.................... void log_lcd_initialize(){
....................    lcd_setCursor(1,0);
*
0340:  MOVLW  01
0341:  MOVWF  74
0342:  CLRF   75
0343:  CALL   2B8
....................    lcd_data("Do an 1 - HKII");
0344:  MOVLW  74
0345:  BSF    03.6
0346:  MOVWF  0D
0347:  MOVLW  00
0348:  MOVWF  0F
0349:  BCF    03.6
034A:  CALL   2F0
....................    lcd_setCursor(3,1);
034B:  MOVLW  03
034C:  MOVWF  74
034D:  MOVLW  01
034E:  MOVWF  75
034F:  CALL   2B8
....................    lcd_data("SPKT-TPHCM");
0350:  MOVLW  7C
0351:  BSF    03.6
0352:  MOVWF  0D
0353:  MOVLW  00
0354:  MOVWF  0F
0355:  BCF    03.6
0356:  CALL   2F0
....................    delay_ms(2000);
0357:  MOVLW  08
0358:  MOVWF  60
0359:  MOVLW  FA
035A:  MOVWF  61
035B:  CALL   17D
035C:  DECFSZ 60,F
035D:  GOTO   359
....................    lcd_clear();
035E:  CALL   20A
035F:  BSF    0A.3
0360:  BCF    0A.4
0361:  GOTO   065 (RETURN)
.................... }
.................... 
.................... void lcd_dis_xx_yy_zz(usi8 x, usi8 y, usi8 a, usi8 b, usi8 c, bool e3, bool e2, bool e1){
....................    usi8 a_ch, a_dv, b_ch, b_dv, c_ch, c_dv;
....................    a_ch = e3 == true ? a/10 + 0x30 : 0x20; a_dv = e3 == true ? a%10 + 0x30 : 0x20;
*
0534:  DECFSZ 6B,W
0535:  GOTO   53E
0536:  MOVF   68,W
0537:  MOVWF  74
0538:  MOVLW  0A
0539:  MOVWF  75
053A:  CALL   51F
053B:  MOVLW  30
053C:  ADDWF  78,W
053D:  GOTO   53F
053E:  MOVLW  20
053F:  MOVWF  6E
0540:  DECFSZ 6B,W
0541:  GOTO   54A
0542:  MOVF   68,W
0543:  MOVWF  74
0544:  MOVLW  0A
0545:  MOVWF  75
0546:  CALL   51F
0547:  MOVLW  30
0548:  ADDWF  77,W
0549:  GOTO   54B
054A:  MOVLW  20
054B:  MOVWF  6F
....................    b_ch = e2 == true ? b/10 + 0x30 : 0x20; b_dv = e2 == true ? b%10 + 0x30 : 0x20;
054C:  DECFSZ 6C,W
054D:  GOTO   556
054E:  MOVF   69,W
054F:  MOVWF  74
0550:  MOVLW  0A
0551:  MOVWF  75
0552:  CALL   51F
0553:  MOVLW  30
0554:  ADDWF  78,W
0555:  GOTO   557
0556:  MOVLW  20
0557:  MOVWF  70
0558:  DECFSZ 6C,W
0559:  GOTO   562
055A:  MOVF   69,W
055B:  MOVWF  74
055C:  MOVLW  0A
055D:  MOVWF  75
055E:  CALL   51F
055F:  MOVLW  30
0560:  ADDWF  77,W
0561:  GOTO   563
0562:  MOVLW  20
0563:  MOVWF  71
....................    c_ch = e1 == true ? c/10 + 0x30 : 0x20; c_dv = e1 == true ? c%10 + 0x30 : 0x20;
0564:  DECFSZ 6D,W
0565:  GOTO   56E
0566:  MOVF   6A,W
0567:  MOVWF  74
0568:  MOVLW  0A
0569:  MOVWF  75
056A:  CALL   51F
056B:  MOVLW  30
056C:  ADDWF  78,W
056D:  GOTO   56F
056E:  MOVLW  20
056F:  MOVWF  72
0570:  DECFSZ 6D,W
0571:  GOTO   57A
0572:  MOVF   6A,W
0573:  MOVWF  74
0574:  MOVLW  0A
0575:  MOVWF  75
0576:  CALL   51F
0577:  MOVLW  30
0578:  ADDWF  77,W
0579:  GOTO   57B
057A:  MOVLW  20
057B:  MOVWF  73
....................    lcd_setCursor(x, y);
057C:  MOVF   66,W
057D:  MOVWF  74
057E:  MOVF   67,W
057F:  MOVWF  75
0580:  CALL   2B8
....................    lcd_data(a_ch); lcd_data(a_dv); lcd_data("-");
0581:  MOVF   6E,W
0582:  MOVWF  7E
0583:  CALL   2D3
0584:  MOVF   6F,W
0585:  MOVWF  7E
0586:  CALL   2D3
0587:  MOVLW  82
0588:  BSF    03.6
0589:  MOVWF  0D
058A:  MOVLW  00
058B:  MOVWF  0F
058C:  BCF    03.6
058D:  CALL   2F0
....................    lcd_data(b_ch); lcd_data(b_dv); lcd_data("-");
058E:  MOVF   70,W
058F:  MOVWF  7E
0590:  CALL   2D3
0591:  MOVF   71,W
0592:  MOVWF  7E
0593:  CALL   2D3
0594:  MOVLW  83
0595:  BSF    03.6
0596:  MOVWF  0D
0597:  MOVLW  00
0598:  MOVWF  0F
0599:  BCF    03.6
059A:  CALL   2F0
....................    lcd_data(c_ch); lcd_data(c_dv);
059B:  MOVF   72,W
059C:  MOVWF  7E
059D:  CALL   2D3
059E:  MOVF   73,W
059F:  MOVWF  7E
05A0:  CALL   2D3
05A1:  RETURN
.................... }
.................... 
.................... void lcd_dis_2num_dot(usi16 dt, int8 x, int8 y, bool is_xvn, bool is_dot){
....................    usi8 ch, dv;
....................    lcd_setCursor(x, y);
05A2:  MOVF   69,W
05A3:  MOVWF  74
05A4:  MOVF   6A,W
05A5:  MOVWF  75
05A6:  CALL   2B8
....................    ch = dt/10 + 0x30;
05A7:  MOVF   68,W
05A8:  MOVWF  73
05A9:  MOVF   67,W
05AA:  MOVWF  72
05AB:  CLRF   75
05AC:  MOVLW  0A
05AD:  MOVWF  74
05AE:  CALL   425
05AF:  MOVLW  30
05B0:  ADDWF  78,W
05B1:  MOVWF  6D
....................    dv = dt%10 + 0x30;
05B2:  MOVF   68,W
05B3:  MOVWF  73
05B4:  MOVF   67,W
05B5:  MOVWF  72
05B6:  CLRF   75
05B7:  MOVLW  0A
05B8:  MOVWF  74
05B9:  CALL   425
05BA:  MOVLW  30
05BB:  ADDWF  77,W
05BC:  MOVWF  6E
....................    if(is_xvn == true) if(ch == 0x30) ch = " ";
05BD:  DECFSZ 6B,W
05BE:  GOTO   5C5
05BF:  MOVF   6D,W
05C0:  SUBLW  30
05C1:  BTFSS  03.2
05C2:  GOTO   5C5
05C3:  MOVLW  20
05C4:  MOVWF  6D
....................    if(is_dot == true) lcd_data(".");
05C5:  DECFSZ 6C,W
05C6:  GOTO   5CE
05C7:  MOVLW  84
05C8:  BSF    03.6
05C9:  MOVWF  0D
05CA:  MOVLW  00
05CB:  MOVWF  0F
05CC:  BCF    03.6
05CD:  CALL   2F0
....................    lcd_data(ch); lcd_data(dv);
05CE:  MOVF   6D,W
05CF:  MOVWF  7E
05D0:  CALL   2D3
05D1:  MOVF   6E,W
05D2:  MOVWF  7E
05D3:  CALL   2D3
05D4:  RETURN
.................... }
.................... 
.................... void lcd_dis_3num_dot(usi16 dt, int8 x, int8 y, bool is_xvn, bool is_dot){
....................    usi8 tr, ch, dv;
....................    lcd_setCursor(x, y); //xxx /10 -> xx 
*
05FE:  MOVF   69,W
05FF:  MOVWF  74
0600:  MOVF   6A,W
0601:  MOVWF  75
0602:  CALL   2B8
....................    tr = dt/100 + 0x30; 
0603:  MOVF   68,W
0604:  MOVWF  73
0605:  MOVF   67,W
0606:  MOVWF  72
0607:  CLRF   75
0608:  MOVLW  64
0609:  MOVWF  74
060A:  CALL   425
060B:  MOVLW  30
060C:  ADDWF  78,W
060D:  MOVWF  6D
....................    ch = dt/10%10  + 0x30;
060E:  MOVF   68,W
060F:  MOVWF  73
0610:  MOVF   67,W
0611:  MOVWF  72
0612:  CLRF   75
0613:  MOVLW  0A
0614:  MOVWF  74
0615:  CALL   425
0616:  MOVF   79,W
0617:  MOVWF  71
0618:  MOVF   78,W
0619:  MOVWF  70
061A:  MOVF   79,W
061B:  MOVWF  73
061C:  MOVF   78,W
061D:  MOVWF  72
061E:  CLRF   75
061F:  MOVLW  0A
0620:  MOVWF  74
0621:  CALL   425
0622:  MOVLW  30
0623:  ADDWF  77,W
0624:  MOVWF  6E
....................    dv = dt%10     + 0x30;
0625:  MOVF   68,W
0626:  MOVWF  73
0627:  MOVF   67,W
0628:  MOVWF  72
0629:  CLRF   75
062A:  MOVLW  0A
062B:  MOVWF  74
062C:  CALL   425
062D:  MOVLW  30
062E:  ADDWF  77,W
062F:  MOVWF  6F
....................    if(is_xvn == true) if(tr == 0x30){
0630:  DECFSZ 6B,W
0631:  GOTO   63E
0632:  MOVF   6D,W
0633:  SUBLW  30
0634:  BTFSS  03.2
0635:  GOTO   63E
....................       tr = " ";
0636:  MOVLW  20
0637:  MOVWF  6D
....................       if(ch == 0x30) ch = " ";
0638:  MOVF   6E,W
0639:  SUBLW  30
063A:  BTFSS  03.2
063B:  GOTO   63E
063C:  MOVLW  20
063D:  MOVWF  6E
....................    }
....................    if(is_dot == true) lcd_data(".");
063E:  DECFSZ 6C,W
063F:  GOTO   647
0640:  MOVLW  85
0641:  BSF    03.6
0642:  MOVWF  0D
0643:  MOVLW  00
0644:  MOVWF  0F
0645:  BCF    03.6
0646:  CALL   2F0
....................    lcd_data(tr); lcd_data(ch); lcd_data(dv);
0647:  MOVF   6D,W
0648:  MOVWF  7E
0649:  CALL   2D3
064A:  MOVF   6E,W
064B:  MOVWF  7E
064C:  CALL   2D3
064D:  MOVF   6F,W
064E:  MOVWF  7E
064F:  CALL   2D3
.................... }
.................... 
.................... void lcd_dis_temperature (int8 x, int8 y, usi16 ng, usi16 th){
....................    lcd_setCursor(x,y);
*
05D5:  MOVF   60,W
05D6:  MOVWF  74
05D7:  MOVF   61,W
05D8:  MOVWF  75
05D9:  CALL   2B8
....................    lcd_data("ND: ");
05DA:  MOVLW  86
05DB:  BSF    03.6
05DC:  MOVWF  0D
05DD:  MOVLW  00
05DE:  MOVWF  0F
05DF:  BCF    03.6
05E0:  CALL   2F0
....................    lcd_dis_2num_dot(ng, x + 4, y, true, false);
05E1:  MOVLW  04
05E2:  ADDWF  60,W
05E3:  MOVWF  66
05E4:  MOVF   63,W
05E5:  MOVWF  68
05E6:  MOVF   62,W
05E7:  MOVWF  67
05E8:  MOVF   66,W
05E9:  MOVWF  69
05EA:  MOVF   61,W
05EB:  MOVWF  6A
05EC:  MOVLW  01
05ED:  MOVWF  6B
05EE:  CLRF   6C
05EF:  CALL   5A2
....................    lcd_dis_3num_dot(th, x + 6, y, false, true);
05F0:  MOVLW  06
05F1:  ADDWF  60,W
05F2:  MOVWF  66
05F3:  MOVF   65,W
05F4:  MOVWF  68
05F5:  MOVF   64,W
05F6:  MOVWF  67
05F7:  MOVF   66,W
05F8:  MOVWF  69
05F9:  MOVF   61,W
05FA:  MOVWF  6A
05FB:  CLRF   6B
05FC:  MOVLW  01
05FD:  MOVWF  6C
....................    lcd_data(" oC");
*
0650:  MOVLW  89
0651:  BSF    03.6
0652:  MOVWF  0D
0653:  MOVLW  00
0654:  MOVWF  0F
0655:  BCF    03.6
0656:  CALL   2F0
0657:  RETURN
.................... }
.................... 
.................... void lcd_dis_temperature_limit (int8 x, int8 y, usi16 ng){
....................    lcd_setCursor(x,y);
*
09C5:  MOVF   60,W
09C6:  MOVWF  74
09C7:  MOVF   61,W
09C8:  MOVWF  75
09C9:  BCF    0A.3
09CA:  CALL   2B8
09CB:  BSF    0A.3
....................    lcd_data("ND-GH: ");
09CC:  MOVLW  8B
09CD:  BSF    03.6
09CE:  MOVWF  0D
09CF:  MOVLW  00
09D0:  MOVWF  0F
09D1:  BCF    0A.3
09D2:  BCF    03.6
09D3:  CALL   2F0
09D4:  BSF    0A.3
....................    lcd_dis_2num_dot(ng, x + 7, y, true, false);
09D5:  MOVLW  07
09D6:  ADDWF  60,W
09D7:  MOVWF  64
09D8:  MOVF   63,W
09D9:  MOVWF  68
09DA:  MOVF   62,W
09DB:  MOVWF  67
09DC:  MOVF   64,W
09DD:  MOVWF  69
09DE:  MOVF   61,W
09DF:  MOVWF  6A
09E0:  MOVLW  01
09E1:  MOVWF  6B
09E2:  CLRF   6C
09E3:  BCF    0A.3
09E4:  CALL   5A2
09E5:  BSF    0A.3
....................    lcd_data(" oC");
09E6:  MOVLW  8F
09E7:  BSF    03.6
09E8:  MOVWF  0D
09E9:  MOVLW  00
09EA:  MOVWF  0F
09EB:  BCF    0A.3
09EC:  BCF    03.6
09ED:  CALL   2F0
09EE:  BSF    0A.3
.................... }
.................... 
.................... #include <library_ds1307_i2c.c>
.................... #define ds13_addr_wr 0xd0
.................... #define ds13_addr_rd 0xd1
.................... 
.................... //cap nhat time: giay-phut-gio-thu-ngay-thang-nam-madk_msds
.................... usi8 time_w[9]={0x31,0x15,0x15,0x04,0x25,0x10,0x23,0x90,0x91};
*
0834:  MOVLW  31
0835:  BCF    03.5
0836:  MOVWF  47
0837:  MOVLW  15
0838:  MOVWF  48
0839:  MOVWF  49
083A:  MOVLW  04
083B:  MOVWF  4A
083C:  MOVLW  25
083D:  MOVWF  4B
083E:  MOVLW  10
083F:  MOVWF  4C
0840:  MOVLW  23
0841:  MOVWF  4D
0842:  MOVLW  90
0843:  MOVWF  4E
0844:  MOVLW  91
0845:  MOVWF  4F
.................... usi8 time_r[9]={0x30,0x30,0x10,0x08,0x20,0x02,0x20,0x90,0x91};
0846:  MOVLW  30
0847:  MOVWF  50
0848:  MOVWF  51
0849:  MOVLW  10
084A:  MOVWF  52
084B:  MOVLW  08
084C:  MOVWF  53
084D:  MOVLW  20
084E:  MOVWF  54
084F:  MOVLW  02
0850:  MOVWF  55
0851:  MOVLW  20
0852:  MOVWF  56
0853:  MOVLW  90
0854:  MOVWF  57
0855:  MOVLW  91
0856:  MOVWF  58
.................... 
.................... #define dec_giay_eat  ds1307_bcdToDec(eat_ss)
.................... #define dec_phut_eat  ds1307_bcdToDec(eat_pp)
.................... #define dec_gio_eat   ds1307_bcdToDec(eat_hh)
.................... 
.................... #define dec_giay_ds  ds1307_bcdToDec(time_r[0])
.................... #define dec_phut_ds  ds1307_bcdToDec(time_r[1])
.................... #define dec_gio_ds   ds1307_bcdToDec(time_r[2])
.................... #define dec_thu_ds   ds1307_bcdToDec(time_r[3])
.................... #define dec_ngay_ds  ds1307_bcdToDec(time_r[4])
.................... #define dec_thang_ds ds1307_bcdToDec(time_r[5])
.................... #define dec_nam_ds   ds1307_bcdToDec(time_r[6])
.................... 
.................... #define giay_ds  time_r[0]
.................... #define phut_ds  time_r[1]
.................... #define gio_ds   time_r[2]
.................... #define thu_ds   time_r[3]
.................... #define ngay_ds  time_r[4]
.................... #define thang_ds time_r[5]
.................... #define nam_ds   time_r[6]
.................... 
.................... #define ma_qd   time_w[8]
.................... #define ma_ds   time_r[8]
.................... 
.................... usi8 ds1307_decToBcd(usi8 val) {
....................     return ((val / 10 * 16) + (val % 10));
.................... }
.................... 
.................... usi8 ds1307_bcdToDec(usi8 val) {
....................     return ((val / 16 * 10) + (val % 16));
*
050E:  SWAPF  62,W
050F:  MOVWF  77
0510:  MOVLW  0F
0511:  ANDWF  77,F
0512:  MOVF   77,W
0513:  MOVWF  64
0514:  MOVWF  66
0515:  MOVLW  0A
0516:  MOVWF  67
0517:  CALL   4E9
0518:  MOVF   78,W
0519:  MOVWF  63
051A:  MOVF   62,W
051B:  ANDLW  0F
051C:  ADDWF  78,W
051D:  MOVWF  78
051E:  RETURN
.................... }
.................... 
.................... void ds1307_read_time(usi8 j)     
.................... {   
....................    usi8 i; 
....................    i2c_start();
*
0113:  BSF    03.5
0114:  BSF    11.0
0115:  BTFSC  11.0
0116:  GOTO   115
....................    i2c_write(ds13_addr_wr);
0117:  MOVLW  D0
0118:  MOVWF  2D
0119:  BCF    03.5
011A:  CALL   0F1
....................    i2c_write(0x00);                     
011B:  BSF    03.5
011C:  CLRF   2D
011D:  BCF    03.5
011E:  CALL   0F1
....................    i2c_start();               
011F:  BSF    03.5
0120:  BSF    11.1
0121:  BTFSC  11.1
0122:  GOTO   121
....................    i2c_write(ds13_addr_rd);                              
0123:  MOVLW  D1
0124:  MOVWF  2D
0125:  BCF    03.5
0126:  CALL   0F1
....................    for(i=0;i<j;i++) time_r[i]=i2c_read();
0127:  CLRF   61
0128:  MOVF   60,W
0129:  SUBWF  61,W
012A:  BTFSC  03.0
012B:  GOTO   137
012C:  MOVLW  50
012D:  ADDWF  61,W
012E:  MOVWF  04
012F:  BCF    03.7
0130:  MOVLW  01
0131:  MOVWF  77
0132:  CALL   103
0133:  MOVF   78,W
0134:  MOVWF  00
0135:  INCF   61,F
0136:  GOTO   128
....................                                  
....................    i = i2c_read(0); //not ack, don't care i  
0137:  CLRF   77
0138:  CALL   103
0139:  MOVF   78,W
013A:  MOVWF  61
....................    i2c_stop();
013B:  BSF    03.5
013C:  BSF    11.2
013D:  BTFSC  11.2
013E:  GOTO   13D
013F:  BCF    03.5
0140:  RETURN
.................... }
.................... 
.................... void ds1307_update_time(int1 sel)                 
.................... {         
....................    usi8 i;
....................    i2c_start();
*
014A:  BSF    03.5
014B:  BSF    11.0
014C:  BTFSC  11.0
014D:  GOTO   14C
....................    i2c_write(ds13_addr_wr);
014E:  MOVLW  D0
014F:  MOVWF  2D
0150:  BCF    03.5
0151:  CALL   0F1
....................    i2c_write(0x00);
0152:  BSF    03.5
0153:  CLRF   2D
0154:  BCF    03.5
0155:  CALL   0F1
....................    for(i=0;i<9;i++)                          
0156:  CLRF   61
0157:  MOVF   61,W
0158:  SUBLW  08
0159:  BTFSS  03.0
015A:  GOTO   175
....................    {  
....................       if(sel)  i2c_write(time_w[i]);
015B:  MOVF   60,F
015C:  BTFSC  03.2
015D:  GOTO   169
015E:  MOVLW  47
015F:  ADDWF  61,W
0160:  MOVWF  04
0161:  BCF    03.7
0162:  MOVF   00,W
0163:  MOVWF  62
0164:  BSF    03.5
0165:  MOVWF  2D
0166:  BCF    03.5
0167:  CALL   0F1
0168:  GOTO   173
....................       else     i2c_write(time_r[i]);
0169:  MOVLW  50
016A:  ADDWF  61,W
016B:  MOVWF  04
016C:  BCF    03.7
016D:  MOVF   00,W
016E:  MOVWF  62
016F:  BSF    03.5
0170:  MOVWF  2D
0171:  BCF    03.5
0172:  CALL   0F1
0173:  INCF   61,F
0174:  GOTO   157
....................    }                                 
....................    i2c_stop();        
0175:  BSF    03.5
0176:  BSF    11.2
0177:  BTFSC  11.2
0178:  GOTO   177
0179:  BCF    03.5
.................... }  
.................... 
.................... void ds1307_setup()
.................... {                                              
....................    ds1307_read_time(9);          
*
0141:  MOVLW  09
0142:  MOVWF  60
0143:  CALL   113
....................    if(ma_qd!=ma_ds)
0144:  MOVF   58,W
0145:  SUBWF  4F,W
0146:  BTFSC  03.2
0147:  GOTO   17A
....................    {
....................       ds1307_update_time(1);
0148:  MOVLW  01
0149:  MOVWF  60
....................    }
*
017A:  BSF    0A.3
017B:  BCF    0A.4
017C:  GOTO   05C (RETURN)
.................... }
.................... 
.................... void ds1307_save_ds(usi8 dcdt,dt)                 
.................... {           
....................    i2c_start();
*
076D:  BSF    03.5
076E:  BSF    11.0
076F:  BTFSC  11.0
0770:  GOTO   76F
....................    i2c_write(ds13_addr_wr);        
0771:  MOVLW  D0
0772:  MOVWF  2D
0773:  BCF    03.5
0774:  CALL   0F1
....................    i2c_write(dcdt);    
0775:  MOVF   60,W
0776:  BSF    03.5
0777:  MOVWF  2D
0778:  BCF    03.5
0779:  CALL   0F1
....................    i2c_write(dt);
077A:  MOVF   61,W
077B:  BSF    03.5
077C:  MOVWF  2D
077D:  BCF    03.5
077E:  CALL   0F1
....................    i2c_stop();
077F:  BSF    03.5
0780:  BSF    11.2
0781:  BTFSC  11.2
0782:  GOTO   781
0783:  BCF    03.5
0784:  RETURN
.................... }
.................... 
.................... #include <library_ds18b20.c>
.................... #include <touch.c>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                        Dallas Touch Driver                        ////
.................... ////                                                                   ////
.................... ////                                                                   ////
.................... ////  data = touch_read_bit()     Reads one bit from a touch device    ////
.................... ////                                                                   ////
.................... ////  data = touch_read_BYTE()    Reads one byte from a touch device.  ////
.................... ////                                                                   ////
.................... ////  ok = touch_write_bit(data)  Writes one bit to a touch device     ////
.................... ////                              and returns true if all went ok.     ////
.................... ////                              A false indicates a collision with   ////
.................... ////                              another device.                      ////
.................... ////                                                                   ////
.................... ////  ok = touch_write_byte(data) Writes one byte to a touch device    ////
.................... ////                              and returns true if all went ok.     ////
.................... ////                              A false indicates a collision with   ////
.................... ////                              another device.                      ////
.................... ////                                                                   ////
.................... ////  present = touch_present()   Issues a reset and returns true      ////
.................... ////                              if the touch device is there.        ////
.................... ////                                                                   ////
.................... ////  reset_pulse()               Issues a reset and waits for a       ////
.................... ////                              present pulse.                       ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef  TOUCH_C
.................... #define  TOUCH_C
.................... 
.................... #ifndef TOUCH_PIN
....................    #define TOUCH_PIN  PIN_B0
.................... #endif
.................... 
.................... #define TOUCH_PIN_LOW()    output_drive(TOUCH_PIN); output_low(TOUCH_PIN)
.................... #define TOUCH_PIN_HIGH()    output_drive(TOUCH_PIN); output_high(TOUCH_PIN)
.................... #define TOUCH_PIN_FLOAT()  output_float(TOUCH_PIN)
.................... #define TOUCH_PIN_READ()      input_state(TOUCH_PIN)
.................... 
.................... /////////////////////////////
.................... ////                     ////
.................... //// Function Prototypes ////
.................... ////                     ////
.................... /////////////////////////////
.................... 
.................... /*
.................... int1 touch_read_bit()
.................... This will read back a bit from the DS1993
.................... PARAMS: none
.................... RETURNS: A bit from the DS1993
.................... */
.................... int1 touch_read_bit();
.................... 
.................... /*
.................... BYTE touch_read_byte()
.................... This will read back a byte from the DS1993
.................... PARAMS: none
.................... RETURNS: A byte from the DS1993
.................... */
.................... BYTE touch_read_byte();
.................... 
.................... /*
.................... BOOLEAN touch_write_bit(int1 data)
.................... This will write a bit to the DS1993
.................... PARAMS: The bit to write
.................... RETURNS: True if completed successfully, false if otherwise
.................... */
.................... BOOLEAN touch_write_bit(int1 data);
.................... 
.................... /*
.................... BOOLEAN touch_write_byte(BYTE data)
.................... This will write a byte to the DS1993
.................... PARAMS: The byte to write
.................... RETURNS: True if completed successfully, false if otherwise
.................... */
.................... BOOLEAN touch_write_byte(BYTE data);
.................... 
.................... /*
.................... BOOLEAN touch_present()
.................... This will evaluate whether or not there is a touch present on the DS1993
.................... PARAMS: none
.................... RETURNS: True if a touch is present, false if otherwise
.................... */
.................... BOOLEAN touch_present();
.................... 
.................... /*
.................... void reset_pulse()
.................... This will send the DS1993 a reset pulse
.................... PARAMS: none
.................... RETURNS: none
.................... */
.................... void reset_pulse();
.................... 
.................... //////////////////////////////////
.................... ////                          ////
.................... //// Function Implementations ////
.................... ////                          ////
.................... //////////////////////////////////
.................... 
.................... /*
.................... int1 touch_read_bit()
.................... This will read back a bit from the DS1993
.................... PARAMS: none
.................... RETURNS: A bit from the DS1993
.................... */
.................... int1 touch_read_bit()
.................... {
....................    int1 data;
.................... 
....................    TOUCH_PIN_LOW();
....................    delay_us(14);
....................    TOUCH_PIN_FLOAT();
....................    delay_us(5);
....................    data = TOUCH_PIN_READ();
....................    delay_us(100);
.................... 
....................    return data;
.................... }
.................... 
.................... /*
.................... BYTE touch_read_byte()
.................... This will read back a byte from the DS1993
.................... PARAMS: none
.................... RETURNS: A byte from the DS1993
.................... */
.................... BYTE touch_read_byte()
.................... {
....................    BYTE i,data;
.................... 
....................    for(i=1; i <= 8; ++i)
....................       shift_right(&data, 1, touch_read_bit());
.................... 
....................    return data;
.................... }
.................... 
.................... /*
.................... BOOLEAN touch_write_bit(int1 data)
.................... This will write a bit to the DS1993
.................... PARAMS: The bit to write
.................... RETURNS: True if completed successfully, false if otherwise
.................... */
.................... BOOLEAN touch_write_bit(int1 data)
.................... {
....................    TOUCH_PIN_LOW();
....................    delay_us(10);
....................    if(data)
....................    {
....................       TOUCH_PIN_HIGH();
....................       delay_us(10);
....................       if(!TOUCH_PIN_READ())
....................          return FALSE;
....................    }
....................    else
....................    {
....................       TOUCH_PIN_LOW();
....................       delay_us(10);
....................       if(TOUCH_PIN_READ())
....................          return FALSE;
....................    }
....................    delay_us(50);
....................    TOUCH_PIN_HIGH();
....................    delay_us(50);
....................    return TRUE;
.................... }
.................... 
.................... /*
.................... BOOLEAN touch_write_byte(BYTE data)
.................... This will write a byte to the DS1993
.................... PARAMS: The byte to write
.................... RETURNS: True if completed successfully, false if otherwise
.................... */
.................... BOOLEAN touch_write_byte(BYTE data)
.................... {
....................    BYTE i;
.................... 
....................    for(i=1; i<=8; ++i)
....................       if(!touch_write_bit(shift_right(&data, 1, 0)))
....................          return FALSE;
.................... 
....................    return TRUE;
.................... }
.................... 
.................... /*
.................... BOOLEAN touch_present()
.................... This will evaluate whether or not there is a touch present on the DS1993
.................... PARAMS: none
.................... RETURNS: True if a touch is present, false if otherwise
.................... */
.................... BOOLEAN touch_present()
.................... {
....................    BOOLEAN present;
....................    TOUCH_PIN_LOW();
....................    delay_us(500);
....................    TOUCH_PIN_FLOAT();
....................    delay_us(5);
.................... 
....................    if(!TOUCH_PIN_READ())
....................       return FALSE;
.................... 
....................    delay_us(65);
....................    present = !TOUCH_PIN_READ();
....................    delay_us(240);
....................    return present;
.................... }
.................... 
.................... /*
.................... void reset_pulse()
.................... This will send the DS1993 a reset pulse
.................... PARAMS: none
.................... RETURNS: none
.................... */
.................... void reset_pulse()
.................... {
....................    TOUCH_PIN_LOW();
....................    delay_us(500);
....................    TOUCH_PIN_FLOAT();
....................    delay_us(5);
....................    while(!touch_present());
.................... }
.................... 
.................... 
.................... #endif
.................... 
.................... #define search_rom       0xf0
.................... #define read_rom         0x33
.................... #define match_rom        0x55
.................... #define skip_rom         0xcc
.................... #define alarm_search     0xec
.................... #define read_scratchpad  0xbe
.................... #define write_scratchpad 0x4e
.................... #define copy_scratchpad  0x48
.................... #define convert_t        0x44
.................... 
.................... si16 temperature;
.................... usi8 dt_ng;
.................... usi16 dt_tp;
.................... usi16 tt;
.................... 
.................... bool ds18b20_start(){
....................    output_low(pin_ds18b20);
*
039B:  BSF    03.5
039C:  BCF    05.0
039D:  BCF    03.5
039E:  BCF    05.0
....................    output_drive(pin_ds18b20);
039F:  BSF    03.5
03A0:  BCF    05.0
....................    delay_us(500);
03A1:  MOVLW  02
03A2:  BCF    03.5
03A3:  MOVWF  62
03A4:  MOVLW  F9
03A5:  MOVWF  63
03A6:  CALL   288
03A7:  DECFSZ 62,F
03A8:  GOTO   3A4
....................    output_float(pin_ds18b20);
03A9:  BSF    03.5
03AA:  BSF    05.0
....................    delay_us(100);
03AB:  MOVLW  A6
03AC:  MOVWF  77
03AD:  DECFSZ 77,F
03AE:  GOTO   3AD
03AF:  NOP
....................    if(!input(pin_ds18b20)){
03B0:  BSF    05.0
03B1:  BCF    03.5
03B2:  BTFSC  05.0
03B3:  GOTO   3BE
....................       delay_us(400);
03B4:  MOVLW  02
03B5:  MOVWF  62
03B6:  MOVLW  C7
03B7:  MOVWF  63
03B8:  CALL   288
03B9:  DECFSZ 62,F
03BA:  GOTO   3B6
....................       return true;
03BB:  MOVLW  01
03BC:  MOVWF  78
03BD:  GOTO   3C0
....................    }
....................    return false;
03BE:  MOVLW  00
03BF:  MOVWF  78
03C0:  RETURN
.................... }
.................... 
.................... void ds18b20_write_bit(bool value){
....................    output_low(pin_ds18b20);
*
03D6:  BSF    03.5
03D7:  BCF    05.0
03D8:  BCF    03.5
03D9:  BCF    05.0
....................    output_drive(pin_ds18b20);
03DA:  BSF    03.5
03DB:  BCF    05.0
....................    delay_us(2);
03DC:  MOVLW  03
03DD:  MOVWF  77
03DE:  DECFSZ 77,F
03DF:  GOTO   3DE
....................    output_bit(pin_ds18b20, value);
03E0:  BCF    03.5
03E1:  MOVF   65,F
03E2:  BTFSS  03.2
03E3:  GOTO   3E6
03E4:  BCF    05.0
03E5:  GOTO   3E7
03E6:  BSF    05.0
03E7:  BSF    03.5
03E8:  BCF    05.0
....................    delay_us(80);
03E9:  MOVLW  85
03EA:  MOVWF  77
03EB:  DECFSZ 77,F
03EC:  GOTO   3EB
....................    output_float(pin_ds18b20);
03ED:  BSF    05.0
....................    delay_us(2);
03EE:  MOVLW  03
03EF:  MOVWF  77
03F0:  DECFSZ 77,F
03F1:  GOTO   3F0
.................... }
.................... 
.................... void ds18b20_write_byte(int8 value){
....................    for(int8 i = 0; i < 8; i++)
*
03C1:  CLRF   63
03C2:  MOVF   63,W
03C3:  SUBLW  07
03C4:  BTFSS  03.0
03C5:  GOTO   3F5
....................       ds18b20_write_bit(bit_test(value,i));
03C6:  MOVF   62,W
03C7:  MOVWF  77
03C8:  MOVF   63,W
03C9:  MOVWF  78
03CA:  BTFSC  03.2
03CB:  GOTO   3D0
03CC:  BCF    03.0
03CD:  RRF    77,F
03CE:  DECFSZ 78,F
03CF:  GOTO   3CC
03D0:  MOVLW  00
03D1:  BTFSC  77.0
03D2:  MOVLW  01
03D3:  MOVWF  64
03D4:  MOVF   64,W
03D5:  MOVWF  65
*
03F2:  BCF    03.5
03F3:  INCF   63,F
03F4:  GOTO   3C2
03F5:  RETURN
.................... }
.................... 
.................... bool ds18b20_read_bit(){
....................    bool value;
....................    output_low(pin_ds18b20);
*
03FC:  BSF    03.5
03FD:  BCF    05.0
03FE:  BCF    03.5
03FF:  BCF    05.0
....................    output_drive(pin_ds18b20);
0400:  BSF    03.5
0401:  BCF    05.0
....................    delay_us(2);
0402:  MOVLW  03
0403:  MOVWF  77
0404:  DECFSZ 77,F
0405:  GOTO   404
....................    output_float(pin_ds18b20);
0406:  BSF    05.0
....................    delay_us(5);
0407:  MOVLW  08
0408:  MOVWF  77
0409:  DECFSZ 77,F
040A:  GOTO   409
....................    value = input(pin_ds18b20);
040B:  BSF    05.0
040C:  BCF    03.5
040D:  BCF    68.0
040E:  BTFSC  05.0
040F:  BSF    68.0
....................    delay_us(100);
0410:  MOVLW  A6
0411:  MOVWF  77
0412:  DECFSZ 77,F
0413:  GOTO   412
0414:  NOP
....................    return value;
0415:  MOVLW  00
0416:  BTFSC  68.0
0417:  MOVLW  01
0418:  MOVWF  78
.................... }
.................... 
.................... int8 ds18b20_read_byte(){
*
03F6:  CLRF   66
....................    int8 value = 0;
....................    for(int8 i = 0; i < 8; i++)
03F7:  CLRF   67
03F8:  MOVF   67,W
03F9:  SUBLW  07
03FA:  BTFSS  03.0
03FB:  GOTO   422
....................       shift_right(&value,1,ds18b20_read_bit());
*
0419:  MOVF   78,F
041A:  BTFSS  03.2
041B:  GOTO   41E
041C:  BCF    03.0
041D:  GOTO   41F
041E:  BSF    03.0
041F:  RRF    66,F
0420:  INCF   67,F
0421:  GOTO   3F8
....................    return value;
0422:  MOVF   66,W
0423:  MOVWF  78
0424:  RETURN
.................... }
.................... 
.................... bool ds18b20_read_temp_c2(int16 *raw_temp_value){
....................    if(!ds18b20_start())
*
044D:  CALL   39B
044E:  MOVF   78,F
044F:  BTFSS  03.2
0450:  GOTO   454
....................       return false;
0451:  MOVLW  00
0452:  MOVWF  78
0453:  GOTO   4A2
....................    ds18b20_write_byte(skip_rom);
0454:  MOVLW  CC
0455:  MOVWF  62
0456:  CALL   3C1
....................    ds18b20_write_byte(convert_t);
0457:  MOVLW  44
0458:  MOVWF  62
0459:  CALL   3C1
....................    while(ds18b20_read_byte() == 0);
045A:  CALL   3F6
045B:  MOVF   78,F
045C:  BTFSC  03.2
045D:  GOTO   45A
....................    if(!ds18b20_start())
045E:  CALL   39B
045F:  MOVF   78,F
0460:  BTFSS  03.2
0461:  GOTO   465
....................       return false;
0462:  MOVLW  00
0463:  MOVWF  78
0464:  GOTO   4A2
....................    ds18b20_write_byte(skip_rom);
0465:  MOVLW  CC
0466:  MOVWF  62
0467:  CALL   3C1
....................    ds18b20_write_byte(read_scratchpad);
0468:  MOVLW  BE
0469:  MOVWF  62
046A:  CALL   3C1
....................    *raw_temp_value = ds18b20_read_byte();
046B:  MOVF   61,W
046C:  MOVWF  7A
046D:  MOVF   60,W
046E:  MOVWF  62
046F:  MOVF   61,W
0470:  MOVWF  63
0471:  CALL   3F6
0472:  MOVF   62,W
0473:  MOVWF  04
0474:  BCF    03.7
0475:  BTFSC  63.0
0476:  BSF    03.7
0477:  INCF   04,F
0478:  CLRF   00
0479:  DECF   04,F
047A:  MOVF   78,W
047B:  MOVWF  00
....................    *raw_temp_value |= (int16)(ds18b20_read_byte()) << 8;
047C:  MOVF   61,W
047D:  MOVWF  7A
047E:  MOVF   60,W
047F:  MOVWF  62
0480:  MOVF   61,W
0481:  MOVWF  63
0482:  MOVF   60,W
0483:  MOVWF  04
0484:  BCF    03.7
0485:  BTFSC  61.0
0486:  BSF    03.7
0487:  INCF   04,F
0488:  MOVF   00,W
0489:  MOVWF  65
048A:  DECF   04,F
048B:  MOVF   00,W
048C:  MOVWF  64
048D:  CALL   3F6
048E:  CLRF   67
048F:  MOVLW  00
0490:  IORWF  64,W
0491:  MOVWF  77
0492:  MOVF   78,W
0493:  IORWF  65,W
0494:  MOVWF  7A
0495:  MOVF   62,W
0496:  MOVWF  04
0497:  BCF    03.7
0498:  BTFSC  63.0
0499:  BSF    03.7
049A:  INCF   04,F
049B:  MOVF   7A,W
049C:  MOVWF  00
049D:  DECF   04,F
049E:  MOVF   77,W
049F:  MOVWF  00
....................    return true;
04A0:  MOVLW  01
04A1:  MOVWF  78
.................... }
.................... 
.................... void ds18b20_read_temp(){
....................    if(ds18b20_read_temp_c2(&temperature)){
*
044A:  CLRF   61
044B:  MOVLW  59
044C:  MOVWF  60
*
04A2:  MOVF   78,F
04A3:  BTFSC  03.2
04A4:  GOTO   4E7
....................       isDs18b20 = true;
04A5:  BSF    2C.1
....................       dt_ng = temperature>>4;
04A6:  RRF    5A,W
04A7:  MOVWF  7A
04A8:  RRF    59,W
04A9:  MOVWF  79
04AA:  RRF    7A,F
04AB:  RRF    79,F
04AC:  RRF    7A,F
04AD:  RRF    79,F
04AE:  RRF    7A,F
04AF:  RRF    79,F
04B0:  MOVF   79,W
04B1:  MOVWF  5B
....................       tt = temperature & 0x000f;
04B2:  MOVF   59,W
04B3:  ANDLW  0F
04B4:  MOVWF  77
04B5:  CLRF   7A
04B6:  MOVF   77,W
04B7:  MOVWF  5E
04B8:  MOVF   7A,W
04B9:  MOVWF  5F
....................       dt_tp = (tt*625)/10;
04BA:  MOVF   5F,W
04BB:  MOVWF  61
04BC:  MOVF   5E,W
04BD:  MOVWF  60
04BE:  MOVLW  02
04BF:  MOVWF  63
04C0:  MOVLW  71
04C1:  MOVWF  62
*
04D6:  MOVF   79,W
04D7:  MOVWF  61
04D8:  MOVF   78,W
04D9:  MOVWF  60
04DA:  MOVF   79,W
04DB:  MOVWF  73
04DC:  MOVF   78,W
04DD:  MOVWF  72
04DE:  CLRF   75
04DF:  MOVLW  0A
04E0:  MOVWF  74
04E1:  CALL   425
04E2:  MOVF   79,W
04E3:  MOVWF  5D
04E4:  MOVF   78,W
04E5:  MOVWF  5C
....................    }
04E6:  GOTO   4E8
....................    else isDs18b20 = false;
04E7:  BCF    2C.1
04E8:  RETURN
.................... }
.................... 
.................... #include <library_change_rtc.c>
.................... 
.................... usi8 tang_or_giam_bcd(unsigned int8 x, int1 sel){
....................    usi8 y, dv, ch, v;
....................    ch = (x>>4);
*
0740:  SWAPF  60,W
0741:  MOVWF  64
0742:  MOVLW  0F
0743:  ANDWF  64,F
....................    dv = x& 0x0f;
0744:  MOVF   60,W
0745:  ANDLW  0F
0746:  MOVWF  63
....................    y = ch*10 + dv;
0747:  MOVF   64,W
0748:  MOVWF  66
0749:  MOVLW  0A
074A:  MOVWF  67
074B:  CALL   4E9
074C:  MOVF   63,W
074D:  ADDWF  78,W
074E:  MOVWF  62
....................    if(sel == 0) y++;
074F:  MOVF   61,F
0750:  BTFSS  03.2
0751:  GOTO   754
0752:  INCF   62,F
0753:  GOTO   755
....................    else         y--;
0754:  DECF   62,F
....................    ch = y/10; dv = y%10;
0755:  MOVF   62,W
0756:  MOVWF  74
0757:  MOVLW  0A
0758:  MOVWF  75
0759:  CALL   51F
075A:  MOVF   78,W
075B:  MOVWF  64
075C:  MOVF   62,W
075D:  MOVWF  74
075E:  MOVLW  0A
075F:  MOVWF  75
0760:  CALL   51F
0761:  MOVF   77,W
0762:  MOVWF  63
....................    v = (ch<<4)|dv;
0763:  SWAPF  64,W
0764:  MOVWF  77
0765:  MOVLW  F0
0766:  ANDWF  77,F
0767:  MOVF   77,W
0768:  IORWF  63,W
0769:  MOVWF  65
....................    return v;
076A:  MOVF   65,W
076B:  MOVWF  78
076C:  RETURN
.................... }
.................... 
.................... void tat_bat_2led_chinh(){
....................    if(gt_mod == 1 || gt_mod == 4) { e_11 = ~e_11; e_22 = true; e_33 = true;}
*
067A:  DECFSZ 34,W
067B:  GOTO   67D
067C:  GOTO   681
067D:  MOVF   34,W
067E:  SUBLW  04
067F:  BTFSS  03.2
0680:  GOTO   686
0681:  MOVLW  04
0682:  XORWF  2C,F
0683:  BSF    2C.3
0684:  BSF    2C.4
0685:  GOTO   6A3
....................    else if(gt_mod == 2 || gt_mod == 5) { e_11 = true; e_22 = ~e_22; e_33 = true;}
0686:  MOVF   34,W
0687:  SUBLW  02
0688:  BTFSC  03.2
0689:  GOTO   68E
068A:  MOVF   34,W
068B:  SUBLW  05
068C:  BTFSS  03.2
068D:  GOTO   693
068E:  BSF    2C.2
068F:  MOVLW  08
0690:  XORWF  2C,F
0691:  BSF    2C.4
0692:  GOTO   6A3
....................    else if(gt_mod == 3 || gt_mod == 6) { e_11 = true; e_22 = true; e_33 = ~e_33;}
0693:  MOVF   34,W
0694:  SUBLW  03
0695:  BTFSC  03.2
0696:  GOTO   69B
0697:  MOVF   34,W
0698:  SUBLW  06
0699:  BTFSS  03.2
069A:  GOTO   6A0
069B:  BSF    2C.2
069C:  BSF    2C.3
069D:  MOVLW  10
069E:  XORWF  2C,F
069F:  GOTO   6A3
....................    else { e_11 = true; e_22 = true; e_33 = true;}
06A0:  BSF    2C.2
06A1:  BSF    2C.3
06A2:  BSF    2C.4
.................... }
.................... 
.................... void giai_ma_gpg_lcd(){
....................    lcd_dis_xx_yy_zz(4,1,dec_gio_ds,dec_phut_ds,dec_giay_ds,e_33, e_22, e_11);
*
06A8:  MOVF   52,W
06A9:  MOVWF  62
06AA:  CALL   50E
06AB:  MOVF   78,W
06AC:  MOVWF  60
06AD:  MOVF   51,W
06AE:  MOVWF  62
06AF:  CALL   50E
06B0:  MOVF   78,W
06B1:  MOVWF  61
06B2:  MOVF   50,W
06B3:  MOVWF  62
06B4:  CALL   50E
06B5:  MOVF   78,W
06B6:  MOVWF  62
06B7:  MOVLW  00
06B8:  BTFSC  2C.4
06B9:  MOVLW  01
06BA:  MOVWF  63
06BB:  MOVLW  00
06BC:  BTFSC  2C.3
06BD:  MOVLW  01
06BE:  MOVWF  64
06BF:  MOVLW  00
06C0:  BTFSC  2C.2
06C1:  MOVLW  01
06C2:  MOVWF  65
06C3:  MOVLW  04
06C4:  MOVWF  66
06C5:  MOVLW  01
06C6:  MOVWF  67
06C7:  MOVF   60,W
06C8:  MOVWF  68
06C9:  MOVF   61,W
06CA:  MOVWF  69
06CB:  MOVF   78,W
06CC:  MOVWF  6A
06CD:  MOVF   63,W
06CE:  MOVWF  6B
06CF:  MOVF   64,W
06D0:  MOVWF  6C
06D1:  MOVF   65,W
06D2:  MOVWF  6D
06D3:  CALL   534
06D4:  RETURN
.................... }
.................... 
.................... void giai_ma_ntn_lcd(){
....................    lcd_dis_xx_yy_zz(4,1,dec_ngay_ds,dec_thang_ds,dec_nam_ds,e_33, e_22, e_11);
06D5:  MOVF   54,W
06D6:  MOVWF  62
06D7:  CALL   50E
06D8:  MOVF   78,W
06D9:  MOVWF  60
06DA:  MOVF   55,W
06DB:  MOVWF  62
06DC:  CALL   50E
06DD:  MOVF   78,W
06DE:  MOVWF  61
06DF:  MOVF   56,W
06E0:  MOVWF  62
06E1:  CALL   50E
06E2:  MOVF   78,W
06E3:  MOVWF  62
06E4:  MOVLW  00
06E5:  BTFSC  2C.4
06E6:  MOVLW  01
06E7:  MOVWF  63
06E8:  MOVLW  00
06E9:  BTFSC  2C.3
06EA:  MOVLW  01
06EB:  MOVWF  64
06EC:  MOVLW  00
06ED:  BTFSC  2C.2
06EE:  MOVLW  01
06EF:  MOVWF  65
06F0:  MOVLW  04
06F1:  MOVWF  66
06F2:  MOVLW  01
06F3:  MOVWF  67
06F4:  MOVF   60,W
06F5:  MOVWF  68
06F6:  MOVF   61,W
06F7:  MOVWF  69
06F8:  MOVF   78,W
06F9:  MOVWF  6A
06FA:  MOVF   63,W
06FB:  MOVWF  6B
06FC:  MOVF   64,W
06FD:  MOVWF  6C
06FE:  MOVF   65,W
06FF:  MOVWF  6D
0700:  CALL   534
0701:  RETURN
.................... }
.................... 
.................... void giai_ma_thu_lcd(){
....................    lcd_dis_xx_yy_zz(4,1,0x00,dec_thu_ds,0x00,0, e_22, 0);
0702:  MOVF   53,W
0703:  MOVWF  62
0704:  CALL   50E
0705:  MOVF   78,W
0706:  MOVWF  60
0707:  MOVLW  00
0708:  BTFSC  2C.3
0709:  MOVLW  01
070A:  MOVWF  61
070B:  MOVLW  04
070C:  MOVWF  66
070D:  MOVLW  01
070E:  MOVWF  67
070F:  CLRF   68
0710:  MOVF   78,W
0711:  MOVWF  69
0712:  CLRF   6A
0713:  CLRF   6B
0714:  MOVF   61,W
0715:  MOVWF  6C
0716:  CLRF   6D
0717:  CALL   534
0718:  RETURN
.................... }
.................... 
.................... void giai_ma_gpg_ntn_thu_lcd(){
....................    if(gt_mod == 0){
0719:  MOVF   34,F
071A:  BTFSS  03.2
071B:  GOTO   72B
....................       if(tt_ht == 0 || tt_ht == 1) giai_ma_gpg_lcd();
071C:  MOVF   33,F
071D:  BTFSC  03.2
071E:  GOTO   721
071F:  DECFSZ 33,W
0720:  GOTO   722
0721:  CALL   6A8
....................       if(tt_ht == 2) giai_ma_ntn_lcd();
0722:  MOVF   33,W
0723:  SUBLW  02
0724:  BTFSC  03.2
0725:  CALL   6D5
....................       if(tt_ht == 3) giai_ma_thu_lcd();
0726:  MOVF   33,W
0727:  SUBLW  03
0728:  BTFSC  03.2
0729:  CALL   702
....................    }
072A:  GOTO   73F
....................    else{
....................       if(gt_mod < 4)       giai_ma_gpg_lcd();
072B:  BTFSC  34.7
072C:  GOTO   731
072D:  MOVF   34,W
072E:  SUBLW  03
072F:  BTFSS  03.0
0730:  GOTO   733
0731:  CALL   6A8
0732:  GOTO   73F
....................       else if(gt_mod < 7)  giai_ma_ntn_lcd();
0733:  BTFSC  34.7
0734:  GOTO   739
0735:  MOVF   34,W
0736:  SUBLW  06
0737:  BTFSS  03.0
0738:  GOTO   73B
0739:  CALL   6D5
073A:  GOTO   73F
....................       else if(gt_mod == 7) giai_ma_thu_lcd();
073B:  MOVF   34,W
073C:  SUBLW  07
073D:  BTFSC  03.2
073E:  CALL   702
....................    }
073F:  RETURN
.................... }
.................... 
.................... void xu_ly_choptat(){
....................    if(gt_mod != 0){
*
0677:  MOVF   34,F
0678:  BTFSC  03.2
0679:  GOTO   6A4
....................       tat_bat_2led_chinh();
....................    }
*
06A3:  GOTO   6A7
....................    else { e_11 = true; e_22 = true; e_33 = true;}
06A4:  BSF    2C.2
06A5:  BSF    2C.3
06A6:  BSF    2C.4
06A7:  RETURN
....................    
.................... }
.................... 
.................... void phim_chon_hthi_mode(){
....................    if(tick_btn(2, bt3)){
*
0A19:  MOVLW  02
0A1A:  MOVWF  60
0A1B:  MOVLW  33
0A1C:  MOVWF  61
0A1D:  BCF    0A.3
0A1E:  CALL   658
0A1F:  BSF    0A.3
0A20:  MOVF   78,F
0A21:  BTFSC  03.2
0A22:  GOTO   248
....................       tt_ht = 1;
0A23:  MOVLW  01
0A24:  MOVWF  33
....................       if(tt_ht == 1){
0A25:  DECFSZ 33,W
0A26:  GOTO   244
....................          gt_mod++;
0A27:  INCF   34,F
....................          if(gt_mod < 4) tt_ht = 1;
0A28:  BTFSC  34.7
0A29:  GOTO   22E
0A2A:  MOVF   34,W
0A2B:  SUBLW  03
0A2C:  BTFSS  03.0
0A2D:  GOTO   231
0A2E:  MOVLW  01
0A2F:  MOVWF  33
0A30:  GOTO   244
....................          else if(gt_mod < 7) tt_ht = 2;
0A31:  BTFSC  34.7
0A32:  GOTO   237
0A33:  MOVF   34,W
0A34:  SUBLW  06
0A35:  BTFSS  03.0
0A36:  GOTO   23A
0A37:  MOVLW  02
0A38:  MOVWF  33
0A39:  GOTO   244
....................          else if(gt_mod == 7) tt_ht = 3;
0A3A:  MOVF   34,W
0A3B:  SUBLW  07
0A3C:  BTFSS  03.2
0A3D:  GOTO   241
0A3E:  MOVLW  03
0A3F:  MOVWF  33
0A40:  GOTO   244
....................          else{
....................             gt_mod = 0;
0A41:  CLRF   34
....................             tt_ht = 0;
0A42:  CLRF   33
....................             countLevel = 0;
0A43:  CLRF   39
....................          }
....................       }
....................       tg_chinh = 0;
0A44:  CLRF   35
....................       giai_ma_gpg_ntn_thu_lcd();
0A45:  BCF    0A.3
0A46:  CALL   719
0A47:  BSF    0A.3
....................    }
.................... }
.................... void tang_giay(){
....................    if(giay_ds >= 0x59) giay_ds = 0;
*
0A64:  MOVF   50,W
0A65:  SUBLW  58
0A66:  BTFSC  03.0
0A67:  GOTO   26A
0A68:  CLRF   50
0A69:  GOTO   273
....................    else giay_ds = tang_or_giam_bcd(giay_ds, tang);
0A6A:  MOVF   50,W
0A6B:  MOVWF  60
0A6C:  MOVLW  01
0A6D:  MOVWF  61
0A6E:  BCF    0A.3
0A6F:  CALL   740
0A70:  BSF    0A.3
0A71:  MOVF   78,W
0A72:  MOVWF  50
....................    ds1307_save_ds(0,giay_ds);
0A73:  CLRF   60
0A74:  MOVF   50,W
0A75:  MOVWF  61
0A76:  BCF    0A.3
0A77:  CALL   76D
0A78:  BSF    0A.3
.................... }
.................... void tang_phut(){
....................    if(phut_ds >= 0x59) phut_ds = 0;
*
0A7A:  MOVF   51,W
0A7B:  SUBLW  58
0A7C:  BTFSC  03.0
0A7D:  GOTO   280
0A7E:  CLRF   51
0A7F:  GOTO   289
....................    else phut_ds = tang_or_giam_bcd(phut_ds, tang);
0A80:  MOVF   51,W
0A81:  MOVWF  60
0A82:  MOVLW  01
0A83:  MOVWF  61
0A84:  BCF    0A.3
0A85:  CALL   740
0A86:  BSF    0A.3
0A87:  MOVF   78,W
0A88:  MOVWF  51
....................    ds1307_save_ds(1,phut_ds);
0A89:  MOVLW  01
0A8A:  MOVWF  60
0A8B:  MOVF   51,W
0A8C:  MOVWF  61
0A8D:  BCF    0A.3
0A8E:  CALL   76D
0A8F:  BSF    0A.3
.................... }
.................... void tang_gio(){
....................    if(gio_ds >= 0x23) gio_ds = 0;
*
0A91:  MOVF   52,W
0A92:  SUBLW  22
0A93:  BTFSC  03.0
0A94:  GOTO   297
0A95:  CLRF   52
0A96:  GOTO   2A0
....................    else gio_ds = tang_or_giam_bcd(gio_ds, tang);
0A97:  MOVF   52,W
0A98:  MOVWF  60
0A99:  MOVLW  01
0A9A:  MOVWF  61
0A9B:  BCF    0A.3
0A9C:  CALL   740
0A9D:  BSF    0A.3
0A9E:  MOVF   78,W
0A9F:  MOVWF  52
....................    ds1307_save_ds(2,gio_ds);
0AA0:  MOVLW  02
0AA1:  MOVWF  60
0AA2:  MOVF   52,W
0AA3:  MOVWF  61
0AA4:  BCF    0A.3
0AA5:  CALL   76D
0AA6:  BSF    0A.3
.................... }
.................... void chinh_tang_gpg(){
....................    switch(gt_mod){
*
0A59:  MOVF   34,W
0A5A:  XORLW  01
0A5B:  BTFSC  03.2
0A5C:  GOTO   264
0A5D:  XORLW  03
0A5E:  BTFSC  03.2
0A5F:  GOTO   27A
0A60:  XORLW  01
0A61:  BTFSC  03.2
0A62:  GOTO   291
0A63:  GOTO   2A8
....................       case 1:
....................          tang_giay();
....................          break;
*
0A79:  GOTO   2A9
....................       case 2:
....................          tang_phut();
....................          break;
*
0A90:  GOTO   2A9
....................       case 3:
....................          tang_gio();
....................          break;
*
0AA7:  GOTO   2A9
....................       default: break;
0AA8:  GOTO   2A9
....................    }
.................... }
.................... void tang_nam(){
....................    if(nam_ds >= 0x99) nam_ds = 0;
*
0ABB:  MOVF   56,W
0ABC:  SUBLW  98
0ABD:  BTFSC  03.0
0ABE:  GOTO   2C1
0ABF:  CLRF   56
0AC0:  GOTO   2CA
....................    else nam_ds = tang_or_giam_bcd(nam_ds, tang);
0AC1:  MOVF   56,W
0AC2:  MOVWF  60
0AC3:  MOVLW  01
0AC4:  MOVWF  61
0AC5:  BCF    0A.3
0AC6:  CALL   740
0AC7:  BSF    0A.3
0AC8:  MOVF   78,W
0AC9:  MOVWF  56
....................    ds1307_save_ds(6,nam_ds);
0ACA:  MOVLW  06
0ACB:  MOVWF  60
0ACC:  MOVF   56,W
0ACD:  MOVWF  61
0ACE:  BCF    0A.3
0ACF:  CALL   76D
0AD0:  BSF    0A.3
.................... }
.................... void tang_thang(){
....................    if(thang_ds >= 0x12) thang_ds = 1;
*
0AD2:  MOVF   55,W
0AD3:  SUBLW  11
0AD4:  BTFSC  03.0
0AD5:  GOTO   2D9
0AD6:  MOVLW  01
0AD7:  MOVWF  55
0AD8:  GOTO   2E2
....................    else thang_ds = tang_or_giam_bcd(thang_ds, tang);
0AD9:  MOVF   55,W
0ADA:  MOVWF  60
0ADB:  MOVLW  01
0ADC:  MOVWF  61
0ADD:  BCF    0A.3
0ADE:  CALL   740
0ADF:  BSF    0A.3
0AE0:  MOVF   78,W
0AE1:  MOVWF  55
....................    ds1307_save_ds(5,thang_ds);
0AE2:  MOVLW  05
0AE3:  MOVWF  60
0AE4:  MOVF   55,W
0AE5:  MOVWF  61
0AE6:  BCF    0A.3
0AE7:  CALL   76D
0AE8:  BSF    0A.3
.................... }
.................... void tang_ngay(){
....................    if(ngay_ds >= 0x31) ngay_ds = 1;
*
0AEA:  MOVF   54,W
0AEB:  SUBLW  30
0AEC:  BTFSC  03.0
0AED:  GOTO   2F1
0AEE:  MOVLW  01
0AEF:  MOVWF  54
0AF0:  GOTO   2FA
....................    else ngay_ds = tang_or_giam_bcd(ngay_ds, tang);
0AF1:  MOVF   54,W
0AF2:  MOVWF  60
0AF3:  MOVLW  01
0AF4:  MOVWF  61
0AF5:  BCF    0A.3
0AF6:  CALL   740
0AF7:  BSF    0A.3
0AF8:  MOVF   78,W
0AF9:  MOVWF  54
....................    ds1307_save_ds(4,ngay_ds);
0AFA:  MOVLW  04
0AFB:  MOVWF  60
0AFC:  MOVF   54,W
0AFD:  MOVWF  61
0AFE:  BCF    0A.3
0AFF:  CALL   76D
0B00:  BSF    0A.3
.................... }
.................... void chinh_tang_ntn(){
....................    switch(gt_mod){
*
0AB0:  MOVF   34,W
0AB1:  XORLW  04
0AB2:  BTFSC  03.2
0AB3:  GOTO   2BB
0AB4:  XORLW  01
0AB5:  BTFSC  03.2
0AB6:  GOTO   2D2
0AB7:  XORLW  03
0AB8:  BTFSC  03.2
0AB9:  GOTO   2EA
0ABA:  GOTO   302
....................       case 4:
....................          tang_nam();
....................          break;
*
0AD1:  GOTO   303
....................       case 5:
....................          tang_thang();
....................          break;
*
0AE9:  GOTO   303
....................       case 6:
....................          tang_ngay();
....................          break;
*
0B01:  GOTO   303
....................       default: break;
0B02:  GOTO   303
....................    }
.................... }
.................... void chinh_tang_thu(){
....................    if(thu_ds == 8) thu_ds = 2;
*
0B08:  MOVF   53,W
0B09:  SUBLW  08
0B0A:  BTFSS  03.2
0B0B:  GOTO   30F
0B0C:  MOVLW  02
0B0D:  MOVWF  53
0B0E:  GOTO   310
....................    else thu_ds++;
0B0F:  INCF   53,F
....................    ds1307_save_ds(3,thu_ds);
0B10:  MOVLW  03
0B11:  MOVWF  60
0B12:  MOVF   53,W
0B13:  MOVWF  61
0B14:  BCF    0A.3
0B15:  CALL   76D
0B16:  BSF    0A.3
.................... }
.................... 
.................... void phim_up(){
....................    if(tick_btn(2, bt1)){
*
0A48:  MOVLW  02
0A49:  MOVWF  60
0A4A:  MOVLW  31
0A4B:  MOVWF  61
0A4C:  BCF    0A.3
0A4D:  CALL   658
0A4E:  BSF    0A.3
0A4F:  MOVF   78,F
0A50:  BTFSC  03.2
0A51:  GOTO   31D
....................       tg_chinh = 0;
0A52:  CLRF   35
....................       if(gt_mod<4) chinh_tang_gpg();
0A53:  BTFSC  34.7
0A54:  GOTO   259
0A55:  MOVF   34,W
0A56:  SUBLW  03
0A57:  BTFSS  03.0
0A58:  GOTO   2AA
*
0AA9:  GOTO   317
....................       else if(gt_mod<7) chinh_tang_ntn();
0AAA:  BTFSC  34.7
0AAB:  GOTO   2B0
0AAC:  MOVF   34,W
0AAD:  SUBLW  06
0AAE:  BTFSS  03.0
0AAF:  GOTO   304
*
0B03:  GOTO   317
....................       else if(gt_mod==7) chinh_tang_thu();
0B04:  MOVF   34,W
0B05:  SUBLW  07
0B06:  BTFSS  03.2
0B07:  GOTO   317
....................       e_11 = true; e_22 = true; e_33 = true;
*
0B17:  BSF    2C.2
0B18:  BSF    2C.3
0B19:  BSF    2C.4
....................       giai_ma_gpg_ntn_thu_lcd();
0B1A:  BCF    0A.3
0B1B:  CALL   719
0B1C:  BSF    0A.3
....................    }
.................... }
.................... void giam_giay(){
....................    if(giay_ds <= 0) giay_ds = 0x59;
*
0B39:  MOVF   50,F
0B3A:  BTFSS  03.2
0B3B:  GOTO   33F
0B3C:  MOVLW  59
0B3D:  MOVWF  50
0B3E:  GOTO   347
....................    else giay_ds = tang_or_giam_bcd(giay_ds,giam);
0B3F:  MOVF   50,W
0B40:  MOVWF  60
0B41:  CLRF   61
0B42:  BCF    0A.3
0B43:  CALL   740
0B44:  BSF    0A.3
0B45:  MOVF   78,W
0B46:  MOVWF  50
....................    ds1307_save_ds(0,giay_ds);
0B47:  CLRF   60
0B48:  MOVF   50,W
0B49:  MOVWF  61
0B4A:  BCF    0A.3
0B4B:  CALL   76D
0B4C:  BSF    0A.3
.................... }
.................... void giam_phut(){
....................    if(phut_ds <= 0) phut_ds = 0x59;
*
0B4E:  MOVF   51,F
0B4F:  BTFSS  03.2
0B50:  GOTO   354
0B51:  MOVLW  59
0B52:  MOVWF  51
0B53:  GOTO   35C
....................    else phut_ds = tang_or_giam_bcd(phut_ds,giam);
0B54:  MOVF   51,W
0B55:  MOVWF  60
0B56:  CLRF   61
0B57:  BCF    0A.3
0B58:  CALL   740
0B59:  BSF    0A.3
0B5A:  MOVF   78,W
0B5B:  MOVWF  51
....................    ds1307_save_ds(1,phut_ds);
0B5C:  MOVLW  01
0B5D:  MOVWF  60
0B5E:  MOVF   51,W
0B5F:  MOVWF  61
0B60:  BCF    0A.3
0B61:  CALL   76D
0B62:  BSF    0A.3
.................... }
.................... void giam_gio(){
....................    if(gio_ds <= 0) gio_ds = 0x23;
*
0B64:  MOVF   52,F
0B65:  BTFSS  03.2
0B66:  GOTO   36A
0B67:  MOVLW  23
0B68:  MOVWF  52
0B69:  GOTO   372
....................    else gio_ds = tang_or_giam_bcd(gio_ds,giam);
0B6A:  MOVF   52,W
0B6B:  MOVWF  60
0B6C:  CLRF   61
0B6D:  BCF    0A.3
0B6E:  CALL   740
0B6F:  BSF    0A.3
0B70:  MOVF   78,W
0B71:  MOVWF  52
....................    ds1307_save_ds(2,gio_ds);
0B72:  MOVLW  02
0B73:  MOVWF  60
0B74:  MOVF   52,W
0B75:  MOVWF  61
0B76:  BCF    0A.3
0B77:  CALL   76D
0B78:  BSF    0A.3
.................... }
.................... void chinh_giam_gpg(){
....................    switch(gt_mod){
*
0B2E:  MOVF   34,W
0B2F:  XORLW  01
0B30:  BTFSC  03.2
0B31:  GOTO   339
0B32:  XORLW  03
0B33:  BTFSC  03.2
0B34:  GOTO   34E
0B35:  XORLW  01
0B36:  BTFSC  03.2
0B37:  GOTO   364
0B38:  GOTO   37A
....................       case 1:
....................          giam_giay();
....................          break;
*
0B4D:  GOTO   37B
....................       case 2:
....................          giam_phut();
....................          break;
*
0B63:  GOTO   37B
....................       case 3:
....................          giam_gio();
....................          break;
*
0B79:  GOTO   37B
....................       default: break;
0B7A:  GOTO   37B
....................    }
.................... }
.................... void giam_nam(){
....................    if(nam_ds <= 0x0) nam_ds = 0x99;
*
0B8D:  MOVF   56,F
0B8E:  BTFSS  03.2
0B8F:  GOTO   393
0B90:  MOVLW  99
0B91:  MOVWF  56
0B92:  GOTO   39B
....................    else nam_ds = tang_or_giam_bcd(nam_ds, giam);
0B93:  MOVF   56,W
0B94:  MOVWF  60
0B95:  CLRF   61
0B96:  BCF    0A.3
0B97:  CALL   740
0B98:  BSF    0A.3
0B99:  MOVF   78,W
0B9A:  MOVWF  56
....................    ds1307_save_ds(6,nam_ds);
0B9B:  MOVLW  06
0B9C:  MOVWF  60
0B9D:  MOVF   56,W
0B9E:  MOVWF  61
0B9F:  BCF    0A.3
0BA0:  CALL   76D
0BA1:  BSF    0A.3
.................... }
.................... void giam_thang(){
....................    if(thang_ds <= 0x1) thang_ds = 12;
*
0BA3:  MOVF   55,W
0BA4:  SUBLW  01
0BA5:  BTFSS  03.0
0BA6:  GOTO   3AA
0BA7:  MOVLW  0C
0BA8:  MOVWF  55
0BA9:  GOTO   3B2
....................    else thang_ds = tang_or_giam_bcd(thang_ds, giam);
0BAA:  MOVF   55,W
0BAB:  MOVWF  60
0BAC:  CLRF   61
0BAD:  BCF    0A.3
0BAE:  CALL   740
0BAF:  BSF    0A.3
0BB0:  MOVF   78,W
0BB1:  MOVWF  55
....................    ds1307_save_ds(5,thang_ds);
0BB2:  MOVLW  05
0BB3:  MOVWF  60
0BB4:  MOVF   55,W
0BB5:  MOVWF  61
0BB6:  BCF    0A.3
0BB7:  CALL   76D
0BB8:  BSF    0A.3
.................... }
.................... void giam_ngay(){
....................    if(ngay_ds <= 0x1) ngay_ds = 21;
*
0BBA:  MOVF   54,W
0BBB:  SUBLW  01
0BBC:  BTFSS  03.0
0BBD:  GOTO   3C1
0BBE:  MOVLW  15
0BBF:  MOVWF  54
0BC0:  GOTO   3C9
....................    else ngay_ds = tang_or_giam_bcd(ngay_ds, giam);
0BC1:  MOVF   54,W
0BC2:  MOVWF  60
0BC3:  CLRF   61
0BC4:  BCF    0A.3
0BC5:  CALL   740
0BC6:  BSF    0A.3
0BC7:  MOVF   78,W
0BC8:  MOVWF  54
....................    ds1307_save_ds(4,ngay_ds);
0BC9:  MOVLW  04
0BCA:  MOVWF  60
0BCB:  MOVF   54,W
0BCC:  MOVWF  61
0BCD:  BCF    0A.3
0BCE:  CALL   76D
0BCF:  BSF    0A.3
.................... }
.................... void chinh_giam_ntn(){
....................    switch(gt_mod){
*
0B82:  MOVF   34,W
0B83:  XORLW  01
0B84:  BTFSC  03.2
0B85:  GOTO   38D
0B86:  XORLW  03
0B87:  BTFSC  03.2
0B88:  GOTO   3A3
0B89:  XORLW  01
0B8A:  BTFSC  03.2
0B8B:  GOTO   3BA
0B8C:  GOTO   3D1
....................       case 1:
....................          giam_nam();
....................          break;
*
0BA2:  GOTO   3D2
....................       case 2:
....................          giam_thang();
....................          break;
*
0BB9:  GOTO   3D2
....................       case 3:
....................          giam_ngay();
....................          break;
*
0BD0:  GOTO   3D2
....................       default: break;
0BD1:  GOTO   3D2
....................    }
.................... }
.................... void chinh_giam_thu(){
....................    if(thu_ds == 2) thu_ds = 8;
*
0BD7:  MOVF   53,W
0BD8:  SUBLW  02
0BD9:  BTFSS  03.2
0BDA:  GOTO   3DE
0BDB:  MOVLW  08
0BDC:  MOVWF  53
0BDD:  GOTO   3DF
....................    else thu_ds--;
0BDE:  DECF   53,F
....................    ds1307_save_ds(3,thu_ds);
0BDF:  MOVLW  03
0BE0:  MOVWF  60
0BE1:  MOVF   53,W
0BE2:  MOVWF  61
0BE3:  BCF    0A.3
0BE4:  CALL   76D
0BE5:  BSF    0A.3
.................... }
.................... void phim_dw(){
....................    if(tick_btn(2, bt2)){
*
0B1D:  MOVLW  02
0B1E:  MOVWF  60
0B1F:  MOVLW  32
0B20:  MOVWF  61
0B21:  BCF    0A.3
0B22:  CALL   658
0B23:  BSF    0A.3
0B24:  MOVF   78,F
0B25:  BTFSC  03.2
0B26:  GOTO   3EC
....................       tg_chinh = 0;
0B27:  CLRF   35
....................       if(gt_mod<4) chinh_giam_gpg();
0B28:  BTFSC  34.7
0B29:  GOTO   32E
0B2A:  MOVF   34,W
0B2B:  SUBLW  03
0B2C:  BTFSS  03.0
0B2D:  GOTO   37C
*
0B7B:  GOTO   3E6
....................       else if(gt_mod<7) chinh_giam_ntn();
0B7C:  BTFSC  34.7
0B7D:  GOTO   382
0B7E:  MOVF   34,W
0B7F:  SUBLW  06
0B80:  BTFSS  03.0
0B81:  GOTO   3D3
*
0BD2:  GOTO   3E6
....................       else if(gt_mod==7) chinh_giam_thu();
0BD3:  MOVF   34,W
0BD4:  SUBLW  07
0BD5:  BTFSS  03.2
0BD6:  GOTO   3E6
....................       e_11 = true; e_22 = true; e_33 = true;
*
0BE6:  BSF    2C.2
0BE7:  BSF    2C.3
0BE8:  BSF    2C.4
....................       giai_ma_gpg_ntn_thu_lcd();
0BE9:  BCF    0A.3
0BEA:  CALL   719
0BEB:  BSF    0A.3
....................    }
.................... }
.................... void log_mode(){
....................    lcd_setCursor(0, 1);
*
0C08:  CLRF   74
0C09:  MOVLW  01
0C0A:  MOVWF  75
0C0B:  BCF    0A.3
0C0C:  CALL   2B8
0C0D:  BSF    0A.3
....................    if(tt_ht == 0) lcd_data(" N ");
0C0E:  MOVF   33,F
0C0F:  BTFSS  03.2
0C10:  GOTO   41B
0C11:  MOVLW  91
0C12:  BSF    03.6
0C13:  MOVWF  0D
0C14:  MOVLW  00
0C15:  MOVWF  0F
0C16:  BCF    0A.3
0C17:  BCF    03.6
0C18:  CALL   2F0
0C19:  BSF    0A.3
0C1A:  GOTO   442
....................    else if(tt_ht == 1) lcd_data("GPG");
0C1B:  DECFSZ 33,W
0C1C:  GOTO   427
0C1D:  MOVLW  93
0C1E:  BSF    03.6
0C1F:  MOVWF  0D
0C20:  MOVLW  00
0C21:  MOVWF  0F
0C22:  BCF    0A.3
0C23:  BCF    03.6
0C24:  CALL   2F0
0C25:  BSF    0A.3
0C26:  GOTO   442
....................    else if(tt_ht == 2) lcd_data("NTN");
0C27:  MOVF   33,W
0C28:  SUBLW  02
0C29:  BTFSS  03.2
0C2A:  GOTO   435
0C2B:  MOVLW  95
0C2C:  BSF    03.6
0C2D:  MOVWF  0D
0C2E:  MOVLW  00
0C2F:  MOVWF  0F
0C30:  BCF    0A.3
0C31:  BCF    03.6
0C32:  CALL   2F0
0C33:  BSF    0A.3
0C34:  GOTO   442
....................    else if(tt_ht == 3) lcd_data(" T ");
0C35:  MOVF   33,W
0C36:  SUBLW  03
0C37:  BTFSS  03.2
0C38:  GOTO   442
0C39:  MOVLW  97
0C3A:  BSF    03.6
0C3B:  MOVWF  0D
0C3C:  MOVLW  00
0C3D:  MOVWF  0F
0C3E:  BCF    0A.3
0C3F:  BCF    03.6
0C40:  CALL   2F0
0C41:  BSF    0A.3
....................    lcd_setCursor(13, 1);
0C42:  MOVLW  0D
0C43:  MOVWF  74
0C44:  MOVLW  01
0C45:  MOVWF  75
0C46:  BCF    0A.3
0C47:  CALL   2B8
0C48:  BSF    0A.3
....................    lcd_data(gt_mod + 0x30);
0C49:  MOVLW  30
0C4A:  ADDWF  34,W
0C4B:  MOVWF  60
0C4C:  MOVWF  7E
0C4D:  BCF    0A.3
0C4E:  CALL   2D3
0C4F:  BSF    0A.3
....................    if(gt_mod != 0){
0C50:  MOVF   34,F
0C51:  BTFSC  03.2
0C52:  GOTO   470
....................       lcd_data(tg_chinh/10 + 0x30); lcd_data(tg_chinh%10 + 0x30);
0C53:  MOVF   35,W
0C54:  MOVWF  60
0C55:  MOVLW  0A
0C56:  MOVWF  61
0C57:  BCF    0A.3
0C58:  CALL   785
0C59:  BSF    0A.3
0C5A:  MOVLW  30
0C5B:  ADDWF  78,W
0C5C:  MOVWF  60
0C5D:  MOVWF  7E
0C5E:  BCF    0A.3
0C5F:  CALL   2D3
0C60:  BSF    0A.3
0C61:  MOVF   35,W
0C62:  MOVWF  60
0C63:  MOVLW  0A
0C64:  MOVWF  61
0C65:  BCF    0A.3
0C66:  CALL   785
0C67:  BSF    0A.3
0C68:  MOVLW  30
0C69:  ADDWF  77,W
0C6A:  MOVWF  60
0C6B:  MOVWF  7E
0C6C:  BCF    0A.3
0C6D:  CALL   2D3
0C6E:  BSF    0A.3
....................    }
0C6F:  GOTO   479
....................    else
....................       lcd_data("__");
0C70:  MOVLW  99
0C71:  BSF    03.6
0C72:  MOVWF  0D
0C73:  MOVLW  00
0C74:  MOVWF  0F
0C75:  BCF    0A.3
0C76:  BCF    03.6
0C77:  CALL   2F0
0C78:  BSF    0A.3
.................... }
.................... 
.................... 
.................... #include <library_change_alarm_eat.c>
.................... void giai_ma_gpg_alarm_lcd(){
....................    lcd_dis_xx_yy_zz(4,1,dec_gio_eat,dec_phut_eat,dec_giay_eat,e_33, e_22, e_11);
*
07AA:  MOVF   36,W
07AB:  MOVWF  62
07AC:  CALL   50E
07AD:  MOVF   78,W
07AE:  MOVWF  60
07AF:  MOVF   37,W
07B0:  MOVWF  62
07B1:  CALL   50E
07B2:  MOVF   78,W
07B3:  MOVWF  61
07B4:  MOVF   38,W
07B5:  MOVWF  62
07B6:  CALL   50E
07B7:  MOVF   78,W
07B8:  MOVWF  62
07B9:  MOVLW  00
07BA:  BTFSC  2C.4
07BB:  MOVLW  01
07BC:  MOVWF  63
07BD:  MOVLW  00
07BE:  BTFSC  2C.3
07BF:  MOVLW  01
07C0:  MOVWF  64
07C1:  MOVLW  00
07C2:  BTFSC  2C.2
07C3:  MOVLW  01
07C4:  MOVWF  65
07C5:  MOVLW  04
07C6:  MOVWF  66
07C7:  MOVLW  01
07C8:  MOVWF  67
07C9:  MOVF   60,W
07CA:  MOVWF  68
07CB:  MOVF   61,W
07CC:  MOVWF  69
07CD:  MOVF   78,W
07CE:  MOVWF  6A
07CF:  MOVF   63,W
07D0:  MOVWF  6B
07D1:  MOVF   64,W
07D2:  MOVWF  6C
07D3:  MOVF   65,W
07D4:  MOVWF  6D
07D5:  CALL   534
07D6:  RETURN
.................... }
.................... void phim_chon_mode_alarm(){
....................    if(tick_btn(1, bt3)){
*
0C93:  MOVLW  01
0C94:  MOVWF  60
0C95:  MOVLW  33
0C96:  MOVWF  61
0C97:  BCF    0A.3
0C98:  CALL   658
0C99:  BSF    0A.3
0C9A:  MOVF   78,F
0C9B:  BTFSC  03.2
0C9C:  GOTO   4AB
....................       if(gt_mod < 3) gt_mod++;
0C9D:  BTFSC  34.7
0C9E:  GOTO   4A3
0C9F:  MOVF   34,W
0CA0:  SUBLW  02
0CA1:  BTFSS  03.0
0CA2:  GOTO   4A5
0CA3:  INCF   34,F
0CA4:  GOTO   4A7
....................       else{
....................          gt_mod = 0;
0CA5:  CLRF   34
....................          countLevel = 0;
0CA6:  CLRF   39
....................       }
....................       tg_chinh = 0;
0CA7:  CLRF   35
....................       giai_ma_gpg_alarm_lcd();
0CA8:  BCF    0A.3
0CA9:  CALL   7AA
0CAA:  BSF    0A.3
....................    }
.................... }
.................... void tang_giay_eat(){
....................    if(eat_ss >= 0x59) eat_ss = 0;
*
0CC1:  MOVF   38,W
0CC2:  SUBLW  58
0CC3:  BTFSC  03.0
0CC4:  GOTO   4C7
0CC5:  CLRF   38
0CC6:  GOTO   4D0
....................    else eat_ss = tang_or_giam_bcd(eat_ss, tang);
0CC7:  MOVF   38,W
0CC8:  MOVWF  60
0CC9:  MOVLW  01
0CCA:  MOVWF  61
0CCB:  BCF    0A.3
0CCC:  CALL   740
0CCD:  BSF    0A.3
0CCE:  MOVF   78,W
0CCF:  MOVWF  38
.................... }
.................... void tang_phut_eat(){
....................    if(eat_pp >= 0x59) eat_pp = 0;
*
0CD1:  MOVF   37,W
0CD2:  SUBLW  58
0CD3:  BTFSC  03.0
0CD4:  GOTO   4D7
0CD5:  CLRF   37
0CD6:  GOTO   4E0
....................    else eat_pp = tang_or_giam_bcd(eat_pp, tang);
0CD7:  MOVF   37,W
0CD8:  MOVWF  60
0CD9:  MOVLW  01
0CDA:  MOVWF  61
0CDB:  BCF    0A.3
0CDC:  CALL   740
0CDD:  BSF    0A.3
0CDE:  MOVF   78,W
0CDF:  MOVWF  37
.................... }
.................... void tang_gio_eat(){
....................    if(eat_hh >= 0x23) eat_hh = 0;
*
0CE1:  MOVF   36,W
0CE2:  SUBLW  22
0CE3:  BTFSC  03.0
0CE4:  GOTO   4E7
0CE5:  CLRF   36
0CE6:  GOTO   4F0
....................    else eat_hh = tang_or_giam_bcd(eat_hh, tang);
0CE7:  MOVF   36,W
0CE8:  MOVWF  60
0CE9:  MOVLW  01
0CEA:  MOVWF  61
0CEB:  BCF    0A.3
0CEC:  CALL   740
0CED:  BSF    0A.3
0CEE:  MOVF   78,W
0CEF:  MOVWF  36
.................... }
.................... void chinh_tang_gpg_eat(){
....................    switch(gt_mod){
*
0CB6:  MOVF   34,W
0CB7:  XORLW  01
0CB8:  BTFSC  03.2
0CB9:  GOTO   4C1
0CBA:  XORLW  03
0CBB:  BTFSC  03.2
0CBC:  GOTO   4D1
0CBD:  XORLW  01
0CBE:  BTFSC  03.2
0CBF:  GOTO   4E1
0CC0:  GOTO   4F1
....................       case 1:
....................          tang_giay_eat();
....................          break;
*
0CD0:  GOTO   4F2
....................       case 2:
....................          tang_phut_eat();
....................          break;
*
0CE0:  GOTO   4F2
....................       case 3:
....................          tang_gio_eat();
....................          break;
*
0CF0:  GOTO   4F2
....................       default: break;
0CF1:  GOTO   4F2
....................    }
.................... }
.................... 
.................... void phim_up_eat(){
....................    if(tick_btn(1, bt1)){
*
0CAB:  MOVLW  01
0CAC:  MOVWF  60
0CAD:  MOVLW  31
0CAE:  MOVWF  61
0CAF:  BCF    0A.3
0CB0:  CALL   658
0CB1:  BSF    0A.3
0CB2:  MOVF   78,F
0CB3:  BTFSC  03.2
0CB4:  GOTO   4F8
....................       tg_chinh = 0;
0CB5:  CLRF   35
....................       chinh_tang_gpg_eat();
....................       e_11 = true; e_22 = true; e_33 = true;
*
0CF2:  BSF    2C.2
0CF3:  BSF    2C.3
0CF4:  BSF    2C.4
....................       giai_ma_gpg_alarm_lcd();
0CF5:  BCF    0A.3
0CF6:  CALL   7AA
0CF7:  BSF    0A.3
....................    }
.................... }
.................... void giam_giay_eat(){
....................    if(eat_ss <= 0) eat_ss = 0x59;
*
0D0E:  MOVF   38,F
0D0F:  BTFSS  03.2
0D10:  GOTO   514
0D11:  MOVLW  59
0D12:  MOVWF  38
0D13:  GOTO   51C
....................    else eat_ss = tang_or_giam_bcd(eat_ss,giam);
0D14:  MOVF   38,W
0D15:  MOVWF  60
0D16:  CLRF   61
0D17:  BCF    0A.3
0D18:  CALL   740
0D19:  BSF    0A.3
0D1A:  MOVF   78,W
0D1B:  MOVWF  38
.................... }
.................... void giam_phut_eat(){
....................    if(eat_pp <= 0) eat_pp = 0x59;
*
0D1D:  MOVF   37,F
0D1E:  BTFSS  03.2
0D1F:  GOTO   523
0D20:  MOVLW  59
0D21:  MOVWF  37
0D22:  GOTO   52B
....................    else eat_pp = tang_or_giam_bcd(eat_pp,giam);
0D23:  MOVF   37,W
0D24:  MOVWF  60
0D25:  CLRF   61
0D26:  BCF    0A.3
0D27:  CALL   740
0D28:  BSF    0A.3
0D29:  MOVF   78,W
0D2A:  MOVWF  37
.................... }
.................... void giam_gio_eat(){
....................    if(eat_hh <= 0) eat_hh = 0x23;
*
0D2C:  MOVF   36,F
0D2D:  BTFSS  03.2
0D2E:  GOTO   532
0D2F:  MOVLW  23
0D30:  MOVWF  36
0D31:  GOTO   53A
....................    else eat_hh = tang_or_giam_bcd(eat_hh,giam);
0D32:  MOVF   36,W
0D33:  MOVWF  60
0D34:  CLRF   61
0D35:  BCF    0A.3
0D36:  CALL   740
0D37:  BSF    0A.3
0D38:  MOVF   78,W
0D39:  MOVWF  36
.................... }
.................... void chinh_giam_gpg_eat(){
....................    switch(gt_mod){
*
0D03:  MOVF   34,W
0D04:  XORLW  01
0D05:  BTFSC  03.2
0D06:  GOTO   50E
0D07:  XORLW  03
0D08:  BTFSC  03.2
0D09:  GOTO   51D
0D0A:  XORLW  01
0D0B:  BTFSC  03.2
0D0C:  GOTO   52C
0D0D:  GOTO   53B
....................       case 1:
....................          giam_giay_eat();
....................          break;
*
0D1C:  GOTO   53C
....................       case 2:
....................          giam_phut_eat();
....................          break;
*
0D2B:  GOTO   53C
....................       case 3:
....................          giam_gio_eat();
....................          break;
*
0D3A:  GOTO   53C
....................       default: break;
0D3B:  GOTO   53C
....................    }
.................... }
.................... void phim_dw_eat(){
....................    if(tick_btn(1, bt2)){
*
0CF8:  MOVLW  01
0CF9:  MOVWF  60
0CFA:  MOVLW  32
0CFB:  MOVWF  61
0CFC:  BCF    0A.3
0CFD:  CALL   658
0CFE:  BSF    0A.3
0CFF:  MOVF   78,F
0D00:  BTFSC  03.2
0D01:  GOTO   542
....................       tg_chinh = 0;
0D02:  CLRF   35
....................       chinh_giam_gpg_eat();
....................       e_11 = true; e_22 = true; e_33 = true;
*
0D3C:  BSF    2C.2
0D3D:  BSF    2C.3
0D3E:  BSF    2C.4
....................       giai_ma_gpg_alarm_lcd();
0D3F:  BCF    0A.3
0D40:  CALL   7AA
0D41:  BSF    0A.3
....................    }
.................... }
.................... void log_mode_alarm(){
....................    lcd_setCursor(13, 1);
*
0D57:  MOVLW  0D
0D58:  MOVWF  74
0D59:  MOVLW  01
0D5A:  MOVWF  75
0D5B:  BCF    0A.3
0D5C:  CALL   2B8
0D5D:  BSF    0A.3
....................    lcd_data(gt_mod + 0x30);
0D5E:  MOVLW  30
0D5F:  ADDWF  34,W
0D60:  MOVWF  60
0D61:  MOVWF  7E
0D62:  BCF    0A.3
0D63:  CALL   2D3
0D64:  BSF    0A.3
....................    if(gt_mod != 0){
0D65:  MOVF   34,F
0D66:  BTFSC  03.2
0D67:  GOTO   585
....................       lcd_data(tg_chinh/10 + 0x30); lcd_data(tg_chinh%10 + 0x30);
0D68:  MOVF   35,W
0D69:  MOVWF  60
0D6A:  MOVLW  0A
0D6B:  MOVWF  61
0D6C:  BCF    0A.3
0D6D:  CALL   785
0D6E:  BSF    0A.3
0D6F:  MOVLW  30
0D70:  ADDWF  78,W
0D71:  MOVWF  60
0D72:  MOVWF  7E
0D73:  BCF    0A.3
0D74:  CALL   2D3
0D75:  BSF    0A.3
0D76:  MOVF   35,W
0D77:  MOVWF  60
0D78:  MOVLW  0A
0D79:  MOVWF  61
0D7A:  BCF    0A.3
0D7B:  CALL   785
0D7C:  BSF    0A.3
0D7D:  MOVLW  30
0D7E:  ADDWF  77,W
0D7F:  MOVWF  60
0D80:  MOVWF  7E
0D81:  BCF    0A.3
0D82:  CALL   2D3
0D83:  BSF    0A.3
....................    }
0D84:  GOTO   58E
....................    else
....................       lcd_data("__");
0D85:  MOVLW  9B
0D86:  BSF    03.6
0D87:  MOVWF  0D
0D88:  MOVLW  00
0D89:  MOVWF  0F
0D8A:  BCF    0A.3
0D8B:  BCF    03.6
0D8C:  CALL   2F0
0D8D:  BSF    0A.3
.................... }
.................... 
.................... 
.................... #include <library_uart.c>
.................... #include <library_control_chiller.c>
.................... #include <library_menu.c>
.................... void control_temperature(int8 nd_ss, int8 gh){
....................    if(nd_ss > gh){
*
0919:  MOVF   60,W
091A:  SUBWF  61,W
091B:  BTFSC  03.0
091C:  GOTO   126
....................    // water is hot
....................       output_bit(pinDLCold, 1);
091D:  BSF    08.6
091E:  BSF    03.5
091F:  BCF    08.6
....................       output_bit(pinDLHot,  0);
0920:  BCF    03.5
0921:  BCF    08.7
0922:  BSF    03.5
0923:  BCF    08.7
....................    }
0924:  GOTO   12D
0925:  BCF    03.5
....................    else{
....................    // water is cold
....................       output_bit(pinDLCold, 0);
0926:  BCF    08.6
0927:  BSF    03.5
0928:  BCF    08.6
....................       output_bit(pinDLHot,  1);
0929:  BCF    03.5
092A:  BSF    08.7
092B:  BSF    03.5
092C:  BCF    08.7
....................    }
.................... }
.................... 
.................... void servo_degree_0(){
....................    unsigned int i;
....................    for(i = 0; i < 50; i++){
*
0297:  CLRF   60
0298:  MOVF   60,W
0299:  SUBLW  31
029A:  BTFSS  03.0
029B:  GOTO   2B7
....................       output_bit(pinServo, 1);
029C:  BSF    07.1
029D:  BCF    2B.1
029E:  MOVF   2B,W
029F:  BSF    03.5
02A0:  MOVWF  07
....................       Delay_us(800); // pulse of 800us
02A1:  MOVLW  04
02A2:  BCF    03.5
02A3:  MOVWF  61
02A4:  MOVLW  C7
02A5:  MOVWF  63
02A6:  CALL   288
02A7:  DECFSZ 61,F
02A8:  GOTO   2A4
....................       output_bit(pinServo, 0);
02A9:  BCF    07.1
02AA:  BCF    2B.1
02AB:  MOVF   2B,W
02AC:  BSF    03.5
02AD:  MOVWF  07
....................       Delay_us(19200);
02AE:  MOVLW  13
02AF:  BCF    03.5
02B0:  MOVWF  61
02B1:  CALL   17D
02B2:  MOVLW  C8
02B3:  MOVWF  63
02B4:  CALL   288
02B5:  INCF   60,F
02B6:  GOTO   298
....................    }
02B7:  RETURN
.................... }
.................... 
.................... void servo_degree_90(){
....................    unsigned int i;
....................    for(i = 0; i < 50; i++){
*
0961:  CLRF   60
0962:  MOVF   60,W
0963:  SUBLW  31
0964:  BTFSS  03.0
0965:  GOTO   190
....................       output_bit(pinServo, 1);
0966:  BSF    07.1
0967:  BCF    2B.1
0968:  MOVF   2B,W
0969:  BSF    03.5
096A:  MOVWF  07
....................       Delay_us(1500); // pulse of 1500us
096B:  MOVLW  01
096C:  BCF    03.5
096D:  MOVWF  61
096E:  BCF    0A.3
096F:  CALL   17D
0970:  BSF    0A.3
0971:  MOVLW  02
0972:  MOVWF  61
0973:  MOVLW  F9
0974:  MOVWF  63
0975:  BCF    0A.3
0976:  CALL   288
0977:  BSF    0A.3
0978:  DECFSZ 61,F
0979:  GOTO   173
....................       output_bit(pinServo, 0);
097A:  BCF    07.1
097B:  BCF    2B.1
097C:  MOVF   2B,W
097D:  BSF    03.5
097E:  MOVWF  07
....................       Delay_us(18500);
097F:  MOVLW  12
0980:  BCF    03.5
0981:  MOVWF  61
0982:  BCF    0A.3
0983:  CALL   17D
0984:  BSF    0A.3
0985:  MOVLW  02
0986:  MOVWF  61
0987:  MOVLW  F9
0988:  MOVWF  63
0989:  BCF    0A.3
098A:  CALL   288
098B:  BSF    0A.3
098C:  DECFSZ 61,F
098D:  GOTO   187
098E:  INCF   60,F
098F:  GOTO   162
....................    }
.................... }
.................... 
.................... void servo_degree_180(){
....................    unsigned int i;
....................    for(i = 0; i < 50; i++){
....................       output_bit(pinServo, 1);
....................       Delay_us(2200); // pulse of 2200us
....................       output_bit(pinServo, 0);
....................       Delay_us(17800);
....................    }
.................... }
.................... 
.................... void control_servo(){
....................    if(dec_gio_ds == dec_gio_eat && dec_phut_ds == dec_phut_eat && dec_giay_ds == dec_giay_eat){
*
092D:  BCF    03.5
092E:  MOVF   52,W
092F:  MOVWF  62
0930:  BCF    0A.3
0931:  CALL   50E
0932:  BSF    0A.3
0933:  MOVF   78,W
0934:  MOVWF  60
0935:  MOVF   36,W
0936:  MOVWF  62
0937:  BCF    0A.3
0938:  CALL   50E
0939:  BSF    0A.3
093A:  MOVF   78,W
093B:  SUBWF  60,W
093C:  BTFSS  03.2
093D:  GOTO   15F
093E:  MOVF   51,W
093F:  MOVWF  62
0940:  BCF    0A.3
0941:  CALL   50E
0942:  BSF    0A.3
0943:  MOVF   78,W
0944:  MOVWF  60
0945:  MOVF   37,W
0946:  MOVWF  62
0947:  BCF    0A.3
0948:  CALL   50E
0949:  BSF    0A.3
094A:  MOVF   78,W
094B:  SUBWF  60,W
094C:  BTFSS  03.2
094D:  GOTO   15F
094E:  MOVF   50,W
094F:  MOVWF  62
0950:  BCF    0A.3
0951:  CALL   50E
0952:  BSF    0A.3
0953:  MOVF   78,W
0954:  MOVWF  60
0955:  MOVF   38,W
0956:  MOVWF  62
0957:  BCF    0A.3
0958:  CALL   50E
0959:  BSF    0A.3
095A:  MOVF   78,W
095B:  SUBWF  60,W
095C:  BTFSS  03.2
095D:  GOTO   15F
....................       flag_servo = true;
095E:  BSF    2C.5
....................    }
....................    if(flag_servo){
095F:  BTFSS  2C.5
0960:  GOTO   191
....................       servo_degree_90();
....................    }
*
0990:  GOTO   194
....................    else{
....................       servo_degree_0();
0991:  BCF    0A.3
0992:  CALL   297
0993:  BSF    0A.3
....................    }
.................... }
.................... 
.................... 
.................... 
.................... 
.................... void menu(){
....................    if (push_btn(false,bt0)) countLevel++;
*
0866:  CLRF   60
0867:  MOVLW  30
0868:  MOVWF  61
*
08B8:  MOVF   78,F
08B9:  BTFSC  03.2
08BA:  GOTO   0BC
08BB:  INCF   39,F
.................... 
....................    if (countLevel >= maxLevel) countLevel = 0;
08BC:  MOVF   39,W
08BD:  SUBLW  04
08BE:  BTFSC  03.0
08BF:  GOTO   0C1
08C0:  CLRF   39
....................    
....................    if(countLevel != countLevelRev){
08C1:  MOVF   3A,W
08C2:  SUBWF  39,W
08C3:  BTFSC  03.2
08C4:  GOTO   0CA
....................       countLevelRev = countLevel;
08C5:  MOVF   39,W
08C6:  MOVWF  3A
....................       lcd_clear();
08C7:  BCF    0A.3
08C8:  CALL   20A
08C9:  BSF    0A.3
....................    }
....................    
....................    switch(countLevel){
08CA:  MOVF   39,W
08CB:  BTFSC  03.2
08CC:  GOTO   0DA
08CD:  XORLW  01
08CE:  BTFSC  03.2
08CF:  GOTO   195
08D0:  XORLW  03
08D1:  BTFSC  03.2
08D2:  GOTO   1FB
08D3:  XORLW  01
08D4:  BTFSC  03.2
08D5:  GOTO   47A
08D6:  XORLW  07
08D7:  BTFSC  03.2
08D8:  GOTO   58F
08D9:  GOTO   590
....................       case 0:
.................... //! function to read time rtc from ds1307 sensor
....................          ds1307_read_time(8);
08DA:  MOVLW  08
08DB:  MOVWF  60
08DC:  BCF    0A.3
08DD:  CALL   113
08DE:  BSF    0A.3
.................... 
.................... //! function to read temperature from ds18b20 sensor
....................          ds18b20_read_temp();
08DF:  BCF    0A.3
08E0:  CALL   44A
08E1:  BSF    0A.3
.................... 
.................... //! display info rtc and temperature for user
....................          lcd_dis_xx_yy_zz(4,0,dec_gio_ds,dec_phut_ds,dec_giay_ds,1,1,1);
08E2:  MOVF   52,W
08E3:  MOVWF  62
08E4:  BCF    0A.3
08E5:  CALL   50E
08E6:  BSF    0A.3
08E7:  MOVF   78,W
08E8:  MOVWF  60
08E9:  MOVF   51,W
08EA:  MOVWF  62
08EB:  BCF    0A.3
08EC:  CALL   50E
08ED:  BSF    0A.3
08EE:  MOVF   78,W
08EF:  MOVWF  61
08F0:  MOVF   50,W
08F1:  MOVWF  62
08F2:  BCF    0A.3
08F3:  CALL   50E
08F4:  BSF    0A.3
08F5:  MOVF   78,W
08F6:  MOVWF  62
08F7:  MOVLW  04
08F8:  MOVWF  66
08F9:  CLRF   67
08FA:  MOVF   60,W
08FB:  MOVWF  68
08FC:  MOVF   61,W
08FD:  MOVWF  69
08FE:  MOVF   78,W
08FF:  MOVWF  6A
0900:  MOVLW  01
0901:  MOVWF  6B
0902:  MOVWF  6C
0903:  MOVWF  6D
0904:  BCF    0A.3
0905:  CALL   534
0906:  BSF    0A.3
....................          lcd_dis_temperature(2,1,dt_ng,dt_tp);
0907:  MOVLW  02
0908:  MOVWF  60
0909:  MOVLW  01
090A:  MOVWF  61
090B:  CLRF   63
090C:  MOVF   5B,W
090D:  MOVWF  62
090E:  MOVF   5D,W
090F:  MOVWF  65
0910:  MOVF   5C,W
0911:  MOVWF  64
0912:  BCF    0A.3
0913:  CALL   5D5
0914:  BSF    0A.3
.................... 
.................... //! control delay and servo
....................          control_temperature(dt_ng,limitTemperature);
0915:  MOVF   5B,W
0916:  MOVWF  60
0917:  MOVF   2D,W
0918:  MOVWF  61
....................          control_servo();
....................          break;
*
0994:  GOTO   5BA
....................       case 1:
.................... //! function to read temperature from ds18b20 sensor
....................          ds18b20_read_temp();
0995:  BCF    0A.3
0996:  CALL   44A
0997:  BSF    0A.3
.................... 
.................... //! change limit temperature
....................          limitTemperature += tick_btn(1,bt2);
0998:  MOVLW  01
0999:  MOVWF  60
099A:  MOVLW  32
099B:  MOVWF  61
099C:  BCF    0A.3
099D:  CALL   658
099E:  BSF    0A.3
099F:  MOVF   78,W
09A0:  ADDWF  2D,F
09A1:  BTFSC  03.0
09A2:  INCF   2E,F
....................          limitTemperature -= tick_btn(1,bt1);
09A3:  MOVLW  01
09A4:  MOVWF  60
09A5:  MOVLW  31
09A6:  MOVWF  61
09A7:  BCF    0A.3
09A8:  CALL   658
09A9:  BSF    0A.3
09AA:  MOVF   78,W
09AB:  SUBWF  2D,F
09AC:  MOVLW  00
09AD:  BTFSS  03.0
09AE:  MOVLW  01
09AF:  SUBWF  2E,F
.................... 
.................... //! display info temperature limit and sensor
....................          lcd_dis_temperature(2,0,dt_ng,dt_tp);
09B0:  MOVLW  02
09B1:  MOVWF  60
09B2:  CLRF   61
09B3:  CLRF   63
09B4:  MOVF   5B,W
09B5:  MOVWF  62
09B6:  MOVF   5D,W
09B7:  MOVWF  65
09B8:  MOVF   5C,W
09B9:  MOVWF  64
09BA:  BCF    0A.3
09BB:  CALL   5D5
09BC:  BSF    0A.3
....................          lcd_dis_temperature_limit(2,1,limitTemperature);
09BD:  MOVLW  02
09BE:  MOVWF  60
09BF:  MOVLW  01
09C0:  MOVWF  61
09C1:  MOVF   2E,W
09C2:  MOVWF  63
09C3:  MOVF   2D,W
09C4:  MOVWF  62
.................... 
.................... //! when button 3 is true --> return menu 0
....................          if(tick_btn(1,bt3)) countLevel = 0;
*
09EF:  MOVLW  01
09F0:  MOVWF  60
09F1:  MOVLW  33
09F2:  MOVWF  61
09F3:  BCF    0A.3
09F4:  CALL   658
09F5:  BSF    0A.3
09F6:  MOVF   78,F
09F7:  BTFSC  03.2
09F8:  GOTO   1FA
09F9:  CLRF   39
....................          
....................          break;
09FA:  GOTO   5BA
....................       case 2:
.................... //! function to read time rtc from ds1307 sensor
....................          ds1307_read_time(8);
09FB:  MOVLW  08
09FC:  MOVWF  60
09FD:  BCF    0A.3
09FE:  CALL   113
09FF:  BSF    0A.3
.................... 
.................... //!
....................          lcd_setCursor(1,0);
0A00:  MOVLW  01
0A01:  MOVWF  74
0A02:  CLRF   75
0A03:  BCF    0A.3
0A04:  CALL   2B8
0A05:  BSF    0A.3
....................          lcd_data("cai dat dong ho");
0A06:  MOVLW  9D
0A07:  BSF    03.6
0A08:  MOVWF  0D
0A09:  MOVLW  00
0A0A:  MOVWF  0F
0A0B:  BCF    0A.3
0A0C:  BCF    03.6
0A0D:  CALL   2F0
0A0E:  BSF    0A.3
....................          if(bdn < 5){
0A0F:  MOVF   32,W
0A10:  SUBLW  04
0A11:  BTFSS  03.0
0A12:  GOTO   3ED
....................             if(gt_mod != 0) xu_ly_choptat();
0A13:  MOVF   34,F
0A14:  BTFSC  03.2
0A15:  GOTO   219
0A16:  BCF    0A.3
0A17:  CALL   677
0A18:  BSF    0A.3
....................             phim_chon_hthi_mode();
....................             phim_up();
....................             phim_dw();
....................          }
*
0BEC:  GOTO   405
....................          else if(bdn >= 10){
0BED:  MOVF   32,W
0BEE:  SUBLW  09
0BEF:  BTFSC  03.0
0BF0:  GOTO   405
....................             bdn = 0;
0BF1:  CLRF   32
....................             if(tg_chinh < 20) tg_chinh++;
0BF2:  BTFSC  35.7
0BF3:  GOTO   3F8
0BF4:  MOVF   35,W
0BF5:  SUBLW  13
0BF6:  BTFSS  03.0
0BF7:  GOTO   3FA
0BF8:  INCF   35,F
0BF9:  GOTO   3FF
....................             else{
....................                gt_mod = 0; tt_ht = 0;
0BFA:  CLRF   34
0BFB:  CLRF   33
....................                e_11 = true; e_22 = true; e_33 = true;
0BFC:  BSF    2C.2
0BFD:  BSF    2C.3
0BFE:  BSF    2C.4
....................             }
....................             if(giay_tam!=giay_ds){
0BFF:  MOVF   50,W
0C00:  SUBWF  31,W
0C01:  BTFSC  03.2
0C02:  GOTO   405
....................                giay_tam = giay_ds;
0C03:  MOVF   50,W
0C04:  MOVWF  31
....................             }
....................          }
....................          giai_ma_gpg_ntn_thu_lcd();
0C05:  BCF    0A.3
0C06:  CALL   719
0C07:  BSF    0A.3
....................          log_mode();
....................          break;
*
0C79:  GOTO   5BA
....................       case 3:
....................          lcd_setCursor(1,0);
0C7A:  MOVLW  01
0C7B:  MOVWF  74
0C7C:  CLRF   75
0C7D:  BCF    0A.3
0C7E:  CALL   2B8
0C7F:  BSF    0A.3
....................          lcd_data("t/g cho ca an");
0C80:  MOVLW  A5
0C81:  BSF    03.6
0C82:  MOVWF  0D
0C83:  MOVLW  00
0C84:  MOVWF  0F
0C85:  BCF    0A.3
0C86:  BCF    03.6
0C87:  CALL   2F0
0C88:  BSF    0A.3
....................          if(bdn < 5){
0C89:  MOVF   32,W
0C8A:  SUBLW  04
0C8B:  BTFSS  03.0
0C8C:  GOTO   543
....................             if(gt_mod != 0) xu_ly_choptat();
0C8D:  MOVF   34,F
0C8E:  BTFSC  03.2
0C8F:  GOTO   493
0C90:  BCF    0A.3
0C91:  CALL   677
0C92:  BSF    0A.3
....................             phim_chon_mode_alarm();
....................             phim_up_eat();
....................             phim_dw_eat();
....................          }
*
0D42:  GOTO   554
....................          else if(bdn >= 10){
0D43:  MOVF   32,W
0D44:  SUBLW  09
0D45:  BTFSC  03.0
0D46:  GOTO   554
....................             bdn = 0;
0D47:  CLRF   32
....................             if(tg_chinh < 20) tg_chinh++;
0D48:  BTFSC  35.7
0D49:  GOTO   54E
0D4A:  MOVF   35,W
0D4B:  SUBLW  13
0D4C:  BTFSS  03.0
0D4D:  GOTO   550
0D4E:  INCF   35,F
0D4F:  GOTO   554
....................             else{
....................                gt_mod = 0;
0D50:  CLRF   34
....................                e_11 = true; e_22 = true; e_33 = true;
0D51:  BSF    2C.2
0D52:  BSF    2C.3
0D53:  BSF    2C.4
....................             }
....................          }
....................          giai_ma_gpg_alarm_lcd();
0D54:  BCF    0A.3
0D55:  CALL   7AA
0D56:  BSF    0A.3
....................          log_mode_alarm();
....................          break;
*
0D8E:  GOTO   5BA
....................       case 4:
....................       
....................          break;
0D8F:  GOTO   5BA
....................       default:
....................          lcd_setCursor(2,0);
0D90:  MOVLW  02
0D91:  MOVWF  74
0D92:  CLRF   75
0D93:  BCF    0A.3
0D94:  CALL   2B8
0D95:  BSF    0A.3
....................          lcd_data("Information");
0D96:  MOVLW  AC
0D97:  BSF    03.6
0D98:  MOVWF  0D
0D99:  MOVLW  00
0D9A:  MOVWF  0F
0D9B:  BCF    0A.3
0D9C:  BCF    03.6
0D9D:  CALL   2F0
0D9E:  BSF    0A.3
....................          lcd_setCursor(0,1);
0D9F:  CLRF   74
0DA0:  MOVLW  01
0DA1:  MOVWF  75
0DA2:  BCF    0A.3
0DA3:  CALL   2B8
0DA4:  BSF    0A.3
....................          lcd_data("Version: V1.0.0");
0DA5:  MOVLW  B2
0DA6:  BSF    03.6
0DA7:  MOVWF  0D
0DA8:  MOVLW  00
0DA9:  MOVWF  0F
0DAA:  BCF    0A.3
0DAB:  BCF    03.6
0DAC:  CALL   2F0
0DAD:  BSF    0A.3
.................... 
.................... //! when button 3 is true --> return menu 0
....................          if(tick_btn(1,bt3)) countLevel = 0;
0DAE:  MOVLW  01
0DAF:  MOVWF  60
0DB0:  MOVLW  33
0DB1:  MOVWF  61
0DB2:  BCF    0A.3
0DB3:  CALL   658
0DB4:  BSF    0A.3
0DB5:  MOVF   78,F
0DB6:  BTFSC  03.2
0DB7:  GOTO   5B9
0DB8:  CLRF   39
....................          break;
0DB9:  GOTO   5BA
....................    }
.................... }
.................... 
.................... 
.................... 
.................... 
.................... void loop(){
.................... //! function to access for change limit temperature, change time for time rtc, change time clock for eat fish, check com with esp, log version sys
....................    menu();
.................... }
.................... 
.................... void main(){
*
0800:  MOVF   03,W
0801:  ANDLW  1F
0802:  MOVWF  03
0803:  MOVLW  FF
0804:  MOVWF  2B
0805:  BSF    2B.3
0806:  MOVF   2B,W
0807:  BSF    03.5
0808:  MOVWF  07
0809:  BCF    03.5
080A:  BSF    2B.4
080B:  MOVF   2B,W
080C:  BSF    03.5
080D:  MOVWF  07
080E:  MOVLW  31
080F:  MOVWF  13
0810:  MOVLW  28
0811:  BCF    03.5
0812:  MOVWF  14
0813:  BSF    03.5
0814:  BSF    14.7
0815:  BCF    14.6
0816:  MOVLW  81
0817:  MOVWF  19
0818:  MOVLW  A6
0819:  MOVWF  18
081A:  MOVLW  90
081B:  BCF    03.5
081C:  MOVWF  18
081D:  BCF    2C.0
081E:  BCF    2C.1
081F:  CLRF   2E
0820:  MOVLW  19
0821:  MOVWF  2D
0822:  CLRF   33
0823:  CLRF   34
0824:  CLRF   35
0825:  CLRF   39
0826:  CLRF   3A
0827:  CLRF   3B
0828:  CLRF   3C
0829:  CLRF   3D
082A:  CLRF   46
082B:  CLRF   45
082C:  BSF    03.5
082D:  BSF    1F.0
082E:  BSF    1F.1
082F:  BSF    1F.2
0830:  BCF    1F.3
0831:  MOVLW  07
0832:  MOVWF  1C
0833:  BCF    03.7
.................... 
.................... //! setup enviroments
....................    setup_initialize();
*
0857:  BCF    0A.3
0858:  GOTO   0BA
0859:  BSF    0A.3
.................... 
.................... //! setup ds1307 rtc
....................    ds1307_setup();
085A:  BCF    0A.3
085B:  GOTO   141
085C:  BSF    0A.3
.................... 
.................... //! setup lcd display
....................    lcd_setup();
085D:  BCF    0A.3
085E:  GOTO   213
085F:  BSF    0A.3
.................... 
.................... //! setup servo initialize is 0 degree
....................    servo_degree_0();
0860:  BCF    0A.3
0861:  CALL   297
0862:  BSF    0A.3
.................... 
.................... //! display info include: name project and name university
....................    log_lcd_initialize();
0863:  BCF    0A.3
0864:  GOTO   340
0865:  BSF    0A.3
.................... 
....................    while(true){
.................... 
.................... //! loop function is function suport in process of system
....................       loop();
*
0DBA:  GOTO   066
....................    }
.................... }
0DBB:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
