CCS PCM C Compiler, Version 5.115, 43599               09-Jun-24 10:01

               Filename:   E:\STUDY\HKII-2023-2024\DO_AN_1\PROJECT\CODE_FINNAL\main.lst

               ROM used:   710 words (9%)
                           Largest free fragment is 2048
               RAM used:   70 (19%) at main() level
                           91 (25%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   260
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.5
002A:  GOTO   02D
002B:  BTFSC  0C.5
002C:  GOTO   054
002D:  MOVLW  8C
002E:  MOVWF  04
002F:  BTFSS  00.0
0030:  GOTO   033
0031:  BTFSC  0C.0
0032:  GOTO   057
0033:  MOVF   22,W
0034:  MOVWF  04
0035:  MOVF   23,W
0036:  MOVWF  77
0037:  MOVF   24,W
0038:  MOVWF  78
0039:  MOVF   25,W
003A:  MOVWF  79
003B:  MOVF   26,W
003C:  MOVWF  7A
003D:  MOVF   27,W
003E:  BSF    03.6
003F:  MOVWF  0D
0040:  BCF    03.6
0041:  MOVF   28,W
0042:  BSF    03.6
0043:  MOVWF  0F
0044:  BCF    03.6
0045:  MOVF   29,W
0046:  BSF    03.6
0047:  MOVWF  0C
0048:  BCF    03.6
0049:  MOVF   2A,W
004A:  BSF    03.6
004B:  MOVWF  0E
004C:  BCF    03.6
004D:  MOVF   20,W
004E:  MOVWF  0A
004F:  SWAPF  21,W
0050:  MOVWF  03
0051:  SWAPF  7F,F
0052:  SWAPF  7F,W
0053:  RETFIE
0054:  BCF    0A.3
0055:  BCF    0A.4
0056:  GOTO   07D
0057:  BCF    0A.3
0058:  BCF    0A.4
0059:  GOTO   05A
.................... #include <library_project.c>
.................... /*
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
....................                        SU PHAM KY THUAT - TP.HCM
....................  DO AN 1 - HIEU CHINH NHIET DO HO CA VA CHO CA AN TU DONG - KET NOI ESP
.................... 
....................    THANH VIEN:
....................       VO MINH THUAN   - 21161366
....................       LE QUANG THUONG - 21161367
.................... xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... */
.................... #include <define_pic16f.c>
.................... //! config mode to operation of pic16f877a
.................... #include <16f877a.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
*
0090:  DATA C4,37
0091:  DATA A0,30
0092:  DATA 6E,10
0093:  DATA 31,10
0094:  DATA 2D,10
0095:  DATA C8,25
0096:  DATA C9,24
0097:  DATA 00,00
0098:  DATA 53,28
0099:  DATA 4B,2A
009A:  DATA 2D,2A
009B:  DATA 50,24
009C:  DATA C3,26
009D:  DATA 00,00
009E:  DATA 2D,00
009F:  DATA 2D,00
00A0:  DATA 2E,00
00A1:  DATA 2E,00
00A2:  DATA 4E,22
00A3:  DATA 3A,10
00A4:  DATA 00,01
00A5:  DATA A0,37
00A6:  DATA 43,00
00A7:  DATA 4E,22
00A8:  DATA AD,23
00A9:  DATA 48,1D
00AA:  DATA 20,00
00AB:  DATA A0,37
00AC:  DATA 43,00
00AD:  DATA 20,27
00AE:  DATA 20,00
00AF:  DATA 47,28
00B0:  DATA 47,00
00B1:  DATA 4E,2A
00B2:  DATA 4E,00
00B3:  DATA 20,2A
00B4:  DATA 20,00
00B5:  DATA DF,2F
00B6:  DATA 00,00
00B7:  DATA DF,2F
00B8:  DATA 00,00
00B9:  DATA E3,30
00BA:  DATA 69,10
00BB:  DATA E4,30
00BC:  DATA 74,10
00BD:  DATA E4,37
00BE:  DATA EE,33
00BF:  DATA 20,34
00C0:  DATA 6F,00
00C1:  DATA F4,17
00C2:  DATA 67,10
00C3:  DATA 63,34
00C4:  DATA 6F,10
00C5:  DATA E3,30
00C6:  DATA A0,30
00C7:  DATA 6E,00
00C8:  DATA 63,34
00C9:  DATA E5,31
00CA:  DATA 6B,10
00CB:  DATA E3,37
00CC:  DATA 6D,10
00CD:  DATA E5,39
00CE:  DATA 70,00
00CF:  DATA 49,37
00D0:  DATA E6,37
00D1:  DATA F2,36
00D2:  DATA 61,3A
00D3:  DATA E9,37
00D4:  DATA 6E,00
00D5:  DATA D6,32
00D6:  DATA F2,39
00D7:  DATA E9,37
00D8:  DATA 6E,1D
00D9:  DATA 20,2B
00DA:  DATA 31,17
00DB:  DATA 30,17
00DC:  DATA 30,00
00DD:  DATA E8,32
00DE:  DATA 6C,36
00DF:  DATA 6F,00
*
01E8:  MOVF   0B,W
01E9:  MOVWF  61
01EA:  BCF    0B.7
01EB:  BSF    03.5
01EC:  BSF    03.6
01ED:  BSF    0C.7
01EE:  BSF    0C.0
01EF:  NOP
01F0:  NOP
01F1:  BCF    03.5
01F2:  BCF    03.6
01F3:  BTFSC  61.7
01F4:  BSF    0B.7
01F5:  BSF    03.6
01F6:  MOVF   0C,W
01F7:  ANDLW  7F
01F8:  BTFSC  03.2
01F9:  GOTO   23C
01FA:  BCF    03.6
01FB:  MOVWF  61
01FC:  BSF    03.6
01FD:  MOVF   0D,W
01FE:  BCF    03.6
01FF:  MOVWF  62
0200:  BSF    03.6
0201:  MOVF   0F,W
0202:  BCF    03.6
0203:  MOVWF  63
0204:  MOVF   61,W
0205:  MOVWF  64
0206:  CALL   1E2
0207:  MOVF   62,W
0208:  BSF    03.6
0209:  MOVWF  0D
020A:  BCF    03.6
020B:  MOVF   63,W
020C:  BSF    03.6
020D:  MOVWF  0F
020E:  BCF    03.6
020F:  MOVF   0B,W
0210:  MOVWF  64
0211:  BCF    0B.7
0212:  BSF    03.5
0213:  BSF    03.6
0214:  BSF    0C.7
0215:  BSF    0C.0
0216:  NOP
0217:  NOP
0218:  BCF    03.5
0219:  BCF    03.6
021A:  BTFSC  64.7
021B:  BSF    0B.7
021C:  BSF    03.6
021D:  RLF    0C,W
021E:  RLF    0E,W
021F:  ANDLW  7F
0220:  BTFSC  03.2
0221:  GOTO   23C
0222:  BCF    03.6
0223:  MOVWF  61
0224:  BSF    03.6
0225:  MOVF   0D,W
0226:  BCF    03.6
0227:  MOVWF  62
0228:  BSF    03.6
0229:  MOVF   0F,W
022A:  BCF    03.6
022B:  MOVWF  63
022C:  MOVF   61,W
022D:  MOVWF  64
022E:  CALL   1E2
022F:  MOVF   62,W
0230:  BSF    03.6
0231:  MOVWF  0D
0232:  BCF    03.6
0233:  MOVF   63,W
0234:  BSF    03.6
0235:  MOVWF  0F
0236:  INCF   0D,F
0237:  BTFSC  03.2
0238:  INCF   0F,F
0239:  BCF    03.6
023A:  GOTO   1E8
023B:  BSF    03.6
023C:  BCF    03.6
023D:  RETURN
.................... 
.................... #list
.................... 
.................... #device  adc=10
.................... #fuses   hs, nowdt, put, noprotect, nolvp
.................... #use     delay(clock=20MHz) 
*
011A:  MOVLW  62
011B:  MOVWF  04
011C:  BCF    03.7
011D:  MOVF   00,W
011E:  BTFSC  03.2
011F:  GOTO   12D
0120:  MOVLW  06
0121:  MOVWF  78
0122:  CLRF   77
0123:  DECFSZ 77,F
0124:  GOTO   123
0125:  DECFSZ 78,F
0126:  GOTO   122
0127:  MOVLW  7B
0128:  MOVWF  77
0129:  DECFSZ 77,F
012A:  GOTO   129
012B:  DECFSZ 00,F
012C:  GOTO   120
012D:  RETURN
.................... #use     i2c(master,slow,sda=pin_c4,scl=pin_c3)
*
010A:  BCF    14.7
010B:  BCF    0C.3
010C:  MOVF   74,W
010D:  MOVWF  13
010E:  MOVLW  02
010F:  BTFSC  14.7
0110:  GOTO   118
0111:  BSF    03.5
0112:  BTFSC  14.2
0113:  GOTO   112
0114:  MOVLW  00
0115:  BTFSC  11.6
0116:  MOVLW  01
0117:  BCF    03.5
0118:  MOVWF  78
0119:  RETURN
.................... #use     rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7,)
.................... 
.................... //!#include <library_uart.c>
.................... 
.................... //! define name again to user
.................... #define usi8  unsigned int8
.................... #define usi16 unsigned int16
.................... #define usi32 unsigned int32
.................... #define si8   signed   int8
.................... #define si16  signed   int16
.................... #define si32  signed   int32
.................... #define bool int1
.................... 
.................... //! define variables
.................... bool flag_10ms = false;
.................... bool isDs18b20 = false;
.................... 
.................... usi16 limitTemperature = 25;
.................... 
.................... usi16 tick_10ms;
.................... 
.................... usi8 giay_tam, bdn, tt_ht = 0;
.................... si8 gt_mod = 0, tg_chinh = 0;
.................... 
.................... bool e_11, e_22, e_33;
.................... 
.................... usi8 eat_hh, eat_pp, eat_ss;
.................... 
.................... #define maxLevel 6
.................... 
.................... usi8 countLevel = 0;
.................... usi8 countLevelRev = 0;
.................... 
.................... bool flag_servo;
.................... usi8 count_servo = 0;
.................... 
.................... #define tang false
.................... #define giam true
.................... 
.................... //! define button to use
.................... #ifndef bt0
.................... #define bt0    pin_b0
.................... #endif
.................... 
.................... #ifndef bt1
.................... #define bt1    pin_b1
.................... #endif
.................... 
.................... #ifndef bt2
.................... #define bt2    pin_b2
.................... #endif
.................... 
.................... #ifndef bt3
.................... #define bt3    pin_b3
.................... #endif
.................... 
.................... //! define pin sensors
.................... #define pin_ds18b20 pin_a0
.................... 
.................... //! define pin controls
.................... #ifndef pinServo
.................... #define pinServo    pin_c1
.................... #endif
.................... 
.................... #ifndef pinDLCold
.................... #define pinDLCold     pin_d6
.................... #endif
.................... 
.................... #ifndef pinDLHot
.................... #define pinDLHot      pin_d7
.................... 
.................... #ifndef ledTest
.................... #define ledTest      pin_b5
.................... 
.................... usi8 rdata;
.................... 
.................... #int_timer1
.................... void interrupt_timer1()
.................... {
....................    set_timer1(59286);
*
005A:  CLRF   0E
005B:  MOVLW  E7
005C:  MOVWF  0F
005D:  MOVLW  96
005E:  MOVWF  0E
005F:  NOP
....................    
....................    flag_10ms = !flag_10ms;
0060:  MOVLW  01
0061:  XORWF  2C,F
.................... 
....................    tick_10ms++;
0062:  INCF   2F,F
0063:  BTFSC  03.2
0064:  INCF   30,F
.................... 
.................... //! when tick_10ms >= 10 --> 100ms
....................    if(tick_10ms >= 10){
0065:  MOVF   30,F
0066:  BTFSS  03.2
0067:  GOTO   06C
0068:  MOVF   2F,W
0069:  SUBLW  09
006A:  BTFSC  03.0
006B:  GOTO   079
....................       bdn++;
006C:  INCF   32,F
....................       tick_10ms = 0;
006D:  CLRF   30
006E:  CLRF   2F
....................       
.................... //! disable flag servo on --> flag_servo >> false
....................       if(flag_servo == true){
006F:  BTFSS  2C.5
0070:  GOTO   079
....................          if(count_servo < 100) count_servo++; // 10s
0071:  MOVF   3B,W
0072:  SUBLW  63
0073:  BTFSS  03.0
0074:  GOTO   077
0075:  INCF   3B,F
0076:  GOTO   079
....................          else{
....................             count_servo = 0;
0077:  CLRF   3B
....................             flag_servo = false;
0078:  BCF    2C.5
....................          }
....................       }
....................    }
.................... }
.................... 
0079:  BCF    0C.0
007A:  BCF    0A.3
007B:  BCF    0A.4
007C:  GOTO   033
.................... #int_rda
.................... void interrupt_uart(){
....................    if (kbhit()){
007D:  BTFSS  0C.5
007E:  GOTO   088
....................       rdata = getch();
007F:  BTFSS  0C.5
0080:  GOTO   07F
0081:  MOVF   1A,W
0082:  MOVWF  3C
....................       output_bit(ledTest,1);
0083:  BSF    06.5
0084:  BSF    03.5
0085:  BCF    06.5
....................    }
0086:  GOTO   08B
0087:  BCF    03.5
....................    else output_bit(ledTest,0);
0088:  BCF    06.5
0089:  BSF    03.5
008A:  BCF    06.5
008B:  BCF    03.5
008C:  BCF    0C.5
008D:  BCF    0A.3
008E:  BCF    0A.4
008F:  GOTO   033
.................... }
.................... 
.................... void setup_initialize(){
.................... //! set up timer 1 to timer count is 10ms of one cycle
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);
*
00E0:  MOVLW  B5
00E1:  MOVWF  10
....................    set_timer1(59286);
00E2:  CLRF   0E
00E3:  MOVLW  E7
00E4:  MOVWF  0F
00E5:  MOVLW  96
00E6:  MOVWF  0E
00E7:  NOP
.................... 
.................... //! enable interrupt timer 1 and read data uart
....................    enable_interrupts(global);
00E8:  MOVLW  C0
00E9:  IORWF  0B,F
....................    enable_interrupts(int_timer1);
00EA:  BSF    03.5
00EB:  BSF    0C.0
....................    enable_interrupts(int_rda);
00EC:  BSF    0C.5
.................... 
.................... 
.................... //! setup mode for all gpio of pic16f877a
....................    set_tris_a(0xff);
00ED:  MOVLW  FF
00EE:  MOVWF  05
....................    set_tris_b(0xdf);
00EF:  MOVLW  DF
00F0:  MOVWF  06
....................    set_tris_d(0x00);
00F1:  MOVLW  00
00F2:  MOVWF  08
....................    set_tris_e(0x00);
00F3:  BCF    09.0
00F4:  BCF    09.1
00F5:  BCF    09.2
....................    set_tris_c(0x40);
00F6:  MOVLW  40
00F7:  MOVWF  07
00F8:  BCF    03.5
00F9:  MOVWF  2B
.................... 
.................... //! setup variable initialize
....................    flag_10ms = false;
00FA:  BCF    2C.0
....................    isDs18b20 = false;
00FB:  BCF    2C.1
....................    
....................    limitTemperature = 25;
00FC:  CLRF   2E
00FD:  MOVLW  19
00FE:  MOVWF  2D
....................    
....................    e_11 = true; e_22 = true; e_33 = true;
00FF:  BSF    2C.2
0100:  BSF    2C.3
0101:  BSF    2C.4
....................    
....................    eat_hh = 0x09; eat_pp = 0x30; eat_ss = 0x30;
0102:  MOVLW  09
0103:  MOVWF  36
0104:  MOVLW  30
0105:  MOVWF  37
0106:  MOVWF  38
0107:  BCF    0A.3
0108:  BCF    0A.4
0109:  GOTO   2B8 (RETURN)
.................... }
.................... 
.................... #include <library_button.c>
.................... //! button place
.................... //! bt3 - bt2 - bt1 - bt0
.................... 
.................... usi8 countPush = 0;
.................... usi8 countTick = 0;
.................... 
.................... bool push_btn(bool isRelease, usi8 pin){
.................... //! isRelease == 0 --> push button is hold
.................... //! isRelease == 1 --> push button is release
....................    if(!input(pin)){
....................       if(flag_10ms == true) countPush++;
.................... //! check if countPush == 2 (20ms) --> debound button
....................       if(countPush >= 1){
....................          if(!input(pin)){
....................             if(isRelease == false) while(!input(pin));
....................             countPush = 0;
....................             return true;
....................          }
....................          return false;
....................       }
....................       return false;
....................    }
.................... //!   countPush = 0;
....................    return false;
.................... }
.................... 
.................... bool tick_btn(usi8 delay, usi8 pin){
.................... //! dl is time delay that compute with 10ms for dl is 1
....................    if(!input(pin)){
....................       if(flag_10ms == true) countTick++;
.................... //! check if countTick >= delay (delay * 10ms) --> time delay wanna to tick rising signal
....................       if(countTick >= delay){
....................          countTick = 0;
....................          return true;
....................       }
....................       return false;
....................    }
.................... //!   countTick = 0;
....................    return false;
.................... }
.................... 
.................... #include <library_i2c.c>
.................... #define pcf8574_addr_wr 0x4E // 0b01001110
.................... #define pcf8574_addr_rd 0x4F // 0b01001111
.................... 
.................... //! i2c reset
.................... void i2c_reset()
.................... {
....................    i2c_start();
....................    i2c_stop();
.................... }
.................... 
.................... //! i2c setup write for pcf8574
.................... void i2c_setup_write()
.................... {
....................    i2c_start();
*
0181:  BSF    03.5
0182:  BSF    11.0
0183:  BTFSC  11.0
0184:  GOTO   183
....................    i2c_write(pcf8574_addr_wr);
0185:  MOVLW  4E
0186:  MOVWF  74
0187:  BCF    03.5
0188:  CALL   10A
.................... }
.................... 
.................... //! i2c write 1byte for pcf8574
.................... void i2c_write_1byte(usi8 payload)
.................... {
....................    i2c_start();
*
0133:  BSF    03.5
0134:  BSF    11.1
0135:  BTFSC  11.1
0136:  GOTO   135
....................    i2c_write(pcf8574_addr_wr);
0137:  MOVLW  4E
0138:  MOVWF  74
0139:  BCF    03.5
013A:  CALL   10A
....................    i2c_write(payload);
013B:  MOVF   73,W
013C:  MOVWF  74
013D:  CALL   10A
....................    i2c_stop();
013E:  BSF    03.5
013F:  BSF    11.2
0140:  BTFSC  11.2
0141:  GOTO   140
.................... }
.................... 
.................... 
.................... #include <library_lcd_i2c.c>
.................... #define lcd_cols 16
.................... #define lcd_rows 2
.................... 
.................... // commands
.................... #define LCD_CLEARDISPLAY 0x01
.................... #define LCD_RETURNHOME 0x02
.................... #define LCD_ENTRYMODESET 0x04
.................... #define LCD_DISPLAYCONTROL 0x08
.................... #define LCD_CURSORSHIFT 0x10
.................... #define LCD_FUNCTIONSET 0x20
.................... #define LCD_SETCGRAMADDR 0x40
.................... #define LCD_SETDDRAMADDR 0x80
.................... 
.................... // flags for display entry mode
.................... #define LCD_ENTRYRIGHT 0x00
.................... #define LCD_ENTRYLEFT 0x02
.................... #define LCD_ENTRYSHIFTINCREMENT 0x01
.................... #define LCD_ENTRYSHIFTDECREMENT 0x00
.................... 
.................... // flags for display on/off control
.................... #define LCD_DISPLAYON 0x04
.................... #define LCD_DISPLAYOFF 0x00
.................... #define LCD_CURSORON 0x02
.................... #define LCD_CURSOROFF 0x00
.................... #define LCD_BLINKON 0x01
.................... #define LCD_BLINKOFF 0x00
.................... 
.................... // flags for display/cursor shift
.................... #define LCD_DISPLAYMOVE 0x08
.................... #define LCD_CURSORMOVE 0x00
.................... #define LCD_MOVERIGHT 0x04
.................... #define LCD_MOVELEFT 0x00
.................... 
.................... // flags for function set
.................... #define LCD_8BITMODE 0x10
.................... #define LCD_4BITMODE 0x00
.................... #define LCD_2LINE 0x08
.................... #define LCD_1LINE 0x00
.................... #define LCD_5x10DOTS 0x04
.................... #define LCD_5x8DOTS 0x00
.................... 
.................... // flags for backlight control
.................... #define LCD_BACKLIGHT 0x08
.................... #define LCD_NOBACKLIGHT 0x00
.................... 
.................... #define En 0B00000100  // Enable bit
.................... #define Rw 0B00000010  // Read/Write bit
.................... #define Rs 0B00000001  // Register select bit
.................... 
.................... void write4bits(usi8 value);
.................... void expanderWrite(usi8 _data);
.................... void pulseEnable(usi8 _data);
.................... void lcd_command(usi8 value);
.................... void lcd_display();
.................... void lcd_clear();
.................... void lcd_home();
.................... void lcd_send(usi8 value, usi8 mode);
.................... void lcd_data(usi8 value);
.................... 
.................... usi8 _displayfunction;
.................... usi8 _displaycontrol;
.................... usi8 _displaymode;
.................... usi8 _numlines;
.................... usi8 _cols;
.................... usi8 _rows;
.................... usi8 _backlightval;
.................... 
.................... void lcd_setup(){
....................    _cols = lcd_cols; // 16
*
017C:  MOVLW  10
017D:  MOVWF  43
....................    _rows = lcd_rows; // 2
017E:  MOVLW  02
017F:  MOVWF  44
....................    _backlightval = LCD_NOBACKLIGHT; // back light is off
0180:  CLRF   45
....................    
....................    i2c_setup_write(); // setup i2c
....................    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
*
0189:  CLRF   3F
....................    
....................    _displayfunction |= LCD_2LINE;
018A:  BSF    3F.3
....................    _numlines = _rows; // 2
018B:  MOVF   44,W
018C:  MOVWF  42
....................    
....................    delay_ms(40);
018D:  MOVLW  28
018E:  MOVWF  62
018F:  CALL   11A
....................    
....................    expanderWrite(_backlightval); // back light is on
0190:  MOVF   45,W
0191:  MOVWF  71
0192:  CALL   12E
....................    delay_ms(100);
0193:  MOVLW  64
0194:  MOVWF  62
0195:  CALL   11A
....................    
....................    //It is try to set use 4bit in 3 time
....................    write4bits(0x03 << 4);
0196:  MOVLW  30
0197:  MOVWF  6E
0198:  CALL   144
....................    delay_ms(5);
0199:  MOVLW  05
019A:  MOVWF  62
019B:  CALL   11A
....................    
....................    write4bits(0x03 << 4);
019C:  MOVLW  30
019D:  MOVWF  6E
019E:  CALL   144
....................    delay_ms(5);
019F:  MOVLW  05
01A0:  MOVWF  62
01A1:  CALL   11A
....................    
....................    write4bits(0x03 << 4);
01A2:  MOVLW  30
01A3:  MOVWF  6E
01A4:  CALL   144
....................    delay_ms(5);
01A5:  MOVLW  05
01A6:  MOVWF  62
01A7:  CALL   11A
....................    
....................    write4bits(0x02 << 4); // set using 4bit for lcd16x2
01A8:  MOVLW  20
01A9:  MOVWF  6E
01AA:  CALL   144
....................    
....................    lcd_command(LCD_FUNCTIONSET | _displayfunction);
01AB:  MOVF   3F,W
01AC:  IORLW  20
01AD:  MOVWF  61
01AE:  MOVWF  68
01AF:  CALL   170
....................    
....................    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
01B0:  MOVLW  04
01B1:  MOVWF  40
....................    lcd_display();
....................    
....................    lcd_clear();
*
01B8:  CALL   175
....................    
....................    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
01B9:  MOVLW  02
01BA:  MOVWF  41
....................    lcd_command(LCD_ENTRYMODESET | _displaymode);
01BB:  MOVF   41,W
01BC:  IORLW  04
01BD:  MOVWF  61
01BE:  MOVWF  68
01BF:  CALL   170
....................    
....................    lcd_home();
*
01C6:  BCF    0A.3
01C7:  BCF    0A.4
01C8:  GOTO   2B9 (RETURN)
.................... }
.................... 
.................... void lcd_clear(){
....................    lcd_command(LCD_CLEARDISPLAY);
*
0175:  MOVLW  01
0176:  MOVWF  68
0177:  CALL   170
....................    delay_ms(20);
0178:  MOVLW  14
0179:  MOVWF  62
017A:  CALL   11A
017B:  RETURN
.................... }
.................... 
.................... void lcd_home(){
....................    lcd_command(LCD_RETURNHOME);
*
01C0:  MOVLW  02
01C1:  MOVWF  68
01C2:  CALL   170
....................    delay_ms(20);
01C3:  MOVLW  14
01C4:  MOVWF  62
01C5:  CALL   11A
.................... }
.................... 
.................... void lcd_setCursor(usi8 col, usi8 row){
....................    int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
*
01C9:  CLRF   63
01CA:  MOVLW  40
01CB:  MOVWF  64
01CC:  MOVLW  14
01CD:  MOVWF  65
01CE:  MOVLW  54
01CF:  MOVWF  66
....................    if ( row > _numlines ) {
01D0:  MOVF   62,W
01D1:  SUBWF  42,W
01D2:  BTFSC  03.0
01D3:  GOTO   1D7
....................       row = _numlines-1;
01D4:  MOVLW  01
01D5:  SUBWF  42,W
01D6:  MOVWF  62
....................    }
....................    lcd_command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
01D7:  MOVLW  63
01D8:  ADDWF  62,W
01D9:  MOVWF  04
01DA:  BCF    03.7
01DB:  MOVF   00,W
01DC:  ADDWF  61,W
01DD:  IORLW  80
01DE:  MOVWF  67
01DF:  MOVWF  68
01E0:  CALL   170
01E1:  RETURN
.................... }
.................... 
.................... void lcd_display() {
....................    _displaycontrol |= LCD_DISPLAYON;
*
01B2:  BSF    40.2
....................    lcd_command(LCD_DISPLAYCONTROL | _displaycontrol);
01B3:  MOVF   40,W
01B4:  IORLW  08
01B5:  MOVWF  61
01B6:  MOVWF  68
01B7:  CALL   170
.................... }
.................... 
.................... void lcd_command(usi8 value){
....................    lcd_send(value,0);
*
0170:  MOVF   68,W
0171:  MOVWF  69
0172:  CLRF   6A
0173:  CALL   15B
0174:  RETURN
.................... }
.................... 
.................... void lcd_data(usi8 value){
....................    lcd_send(value,Rs);
*
01E2:  MOVF   64,W
01E3:  MOVWF  69
01E4:  MOVLW  01
01E5:  MOVWF  6A
01E6:  CALL   15B
01E7:  RETURN
.................... }
.................... 
.................... void lcd_send(usi8 value, usi8 mode) {
*
015B:  MOVF   69,W
015C:  ANDLW  F0
015D:  MOVWF  6B
015E:  SWAPF  69,W
015F:  MOVWF  77
0160:  MOVLW  F0
0161:  ANDWF  77,F
0162:  MOVF   77,W
0163:  ANDLW  F0
0164:  MOVWF  6C
....................    usi8 highnib=value&0xf0;
....................    usi8 lownib=(value<<4)&0xf0;
....................    write4bits((highnib)|mode);
0165:  MOVF   6B,W
0166:  IORWF  6A,W
0167:  MOVWF  6D
0168:  MOVWF  6E
0169:  CALL   144
....................    write4bits((lownib)|mode); 
016A:  MOVF   6C,W
016B:  IORWF  6A,W
016C:  MOVWF  6D
016D:  MOVWF  6E
016E:  CALL   144
016F:  RETURN
.................... }
.................... 
.................... void write4bits(usi8 value) {
....................    expanderWrite(value);
*
0144:  MOVF   6E,W
0145:  MOVWF  71
0146:  CALL   12E
....................    pulseEnable(value);
0147:  MOVF   6E,W
0148:  MOVWF  6F
*
015A:  RETURN
.................... }
.................... 
.................... void expanderWrite(usi8 _data){
....................    i2c_write_1byte(_data|_backlightval);
*
012E:  MOVF   71,W
012F:  IORWF  45,W
0130:  MOVWF  72
0131:  MOVF   72,W
0132:  MOVWF  73
*
0142:  BCF    03.5
0143:  RETURN
.................... }
.................... 
.................... void pulseEnable(usi8 _data){
....................    expanderWrite(_data | En);
*
0149:  MOVF   6F,W
014A:  IORLW  04
014B:  MOVWF  70
014C:  MOVWF  71
014D:  CALL   12E
....................    delay_us(1);
014E:  GOTO   14F
014F:  GOTO   150
0150:  NOP
....................    expanderWrite(_data & ~En);
0151:  MOVF   6F,W
0152:  ANDLW  FB
0153:  MOVWF  70
0154:  MOVWF  71
0155:  CALL   12E
....................    delay_us(50);
0156:  MOVLW  53
0157:  MOVWF  77
0158:  DECFSZ 77,F
0159:  GOTO   158
.................... }
.................... 
.................... void log_lcd_initialize(){
....................    lcd_setCursor(1,0);
*
023E:  MOVLW  01
023F:  MOVWF  61
0240:  CLRF   62
0241:  CALL   1C9
....................    lcd_data("Do an 1 - HKII");
0242:  MOVLW  90
0243:  BSF    03.6
0244:  MOVWF  0D
0245:  MOVLW  00
0246:  MOVWF  0F
0247:  BCF    03.6
0248:  CALL   1E8
....................    lcd_setCursor(3,1);
0249:  MOVLW  03
024A:  MOVWF  61
024B:  MOVLW  01
024C:  MOVWF  62
024D:  CALL   1C9
....................    lcd_data("SPKT-TPHCM");
024E:  MOVLW  98
024F:  BSF    03.6
0250:  MOVWF  0D
0251:  MOVLW  00
0252:  MOVWF  0F
0253:  BCF    03.6
0254:  CALL   1E8
....................    delay_ms(2000);
0255:  MOVLW  08
0256:  MOVWF  61
0257:  MOVLW  FA
0258:  MOVWF  62
0259:  CALL   11A
025A:  DECFSZ 61,F
025B:  GOTO   257
....................    lcd_clear();
025C:  CALL   175
025D:  BCF    0A.3
025E:  BCF    0A.4
025F:  GOTO   2BA (RETURN)
.................... }
.................... 
.................... void lcd_dis_xx_yy_zz(usi8 x, usi8 y, usi8 a, usi8 b, usi8 c, bool e3, bool e2, bool e1){
....................    usi8 a_ch, a_dv, b_ch, b_dv, c_ch, c_dv;
....................    a_ch = e3 == true ? a/10 + 0x30 : 0x20; a_dv = e3 == true ? a%10 + 0x30 : 0x20;
....................    b_ch = e2 == true ? b/10 + 0x30 : 0x20; b_dv = e2 == true ? b%10 + 0x30 : 0x20;
....................    c_ch = e1 == true ? c/10 + 0x30 : 0x20; c_dv = e1 == true ? c%10 + 0x30 : 0x20;
....................    lcd_setCursor(x, y);
....................    lcd_data(a_ch); lcd_data(a_dv); lcd_data("-");
....................    lcd_data(b_ch); lcd_data(b_dv); lcd_data("-");
....................    lcd_data(c_ch); lcd_data(c_dv);
.................... }
.................... 
.................... void lcd_dis_2num_dot(usi16 dt, int8 x, int8 y, bool is_xvn, bool is_dot){
....................    usi8 ch, dv;
....................    lcd_setCursor(x, y);
....................    ch = dt/10 + 0x30;
....................    dv = dt%10 + 0x30;
....................    if(is_xvn == true) if(ch == 0x30) ch = " ";
....................    if(is_dot == true) lcd_data(".");
....................    lcd_data(ch); lcd_data(dv);
.................... }
.................... 
.................... void lcd_dis_3num_dot(usi16 dt, int8 x, int8 y, bool is_xvn, bool is_dot){
....................    usi8 tr, ch, dv;
....................    lcd_setCursor(x, y); //xxx /10 -> xx 
....................    tr = dt/100 + 0x30; 
....................    ch = dt/10%10  + 0x30;
....................    dv = dt%10     + 0x30;
....................    if(is_xvn == true) if(tr == 0x30){
....................       tr = " ";
....................       if(ch == 0x30) ch = " ";
....................    }
....................    if(is_dot == true) lcd_data(".");
....................    lcd_data(tr); lcd_data(ch); lcd_data(dv);
.................... }
.................... 
.................... void lcd_dis_temperature (int8 x, int8 y, usi16 ng, usi16 th){
....................    lcd_setCursor(x,y);
....................    lcd_data("ND: ");
....................    lcd_dis_2num_dot(ng, x + 4, y, true, false);
....................    lcd_dis_3num_dot(th, x + 6, y, false, true);
....................    lcd_data(" oC");
.................... }
.................... 
.................... void lcd_dis_temperature_limit (int8 x, int8 y, usi16 ng){
....................    lcd_setCursor(x,y);
....................    lcd_data("ND-GH: ");
....................    lcd_dis_2num_dot(ng, x + 7, y, true, false);
....................    lcd_data(" oC");
.................... }
.................... 
.................... #include <library_ds1307_i2c.c>
.................... #define ds13_addr_wr 0xd0
.................... #define ds13_addr_rd 0xd1
.................... 
.................... //cap nhat time: giay-phut-gio-thu-ngay-thang-nam-madk_msds
.................... usi8 time_w[9]={0x31,0x15,0x15,0x04,0x25,0x10,0x23,0x90,0x91};
*
0294:  MOVLW  31
0295:  BCF    03.5
0296:  MOVWF  48
0297:  MOVLW  15
0298:  MOVWF  49
0299:  MOVWF  4A
029A:  MOVLW  04
029B:  MOVWF  4B
029C:  MOVLW  25
029D:  MOVWF  4C
029E:  MOVLW  10
029F:  MOVWF  4D
02A0:  MOVLW  23
02A1:  MOVWF  4E
02A2:  MOVLW  90
02A3:  MOVWF  4F
02A4:  MOVLW  91
02A5:  MOVWF  50
.................... usi8 time_r[9]={0x30,0x30,0x10,0x08,0x20,0x02,0x20,0x90,0x91};
02A6:  MOVLW  30
02A7:  MOVWF  51
02A8:  MOVWF  52
02A9:  MOVLW  10
02AA:  MOVWF  53
02AB:  MOVLW  08
02AC:  MOVWF  54
02AD:  MOVLW  20
02AE:  MOVWF  55
02AF:  MOVLW  02
02B0:  MOVWF  56
02B1:  MOVLW  20
02B2:  MOVWF  57
02B3:  MOVLW  90
02B4:  MOVWF  58
02B5:  MOVLW  91
02B6:  MOVWF  59
.................... 
.................... #define dec_giay_eat  ds1307_bcdToDec(eat_ss)
.................... #define dec_phut_eat  ds1307_bcdToDec(eat_pp)
.................... #define dec_gio_eat   ds1307_bcdToDec(eat_hh)
.................... 
.................... #define dec_giay_ds  ds1307_bcdToDec(time_r[0])
.................... #define dec_phut_ds  ds1307_bcdToDec(time_r[1])
.................... #define dec_gio_ds   ds1307_bcdToDec(time_r[2])
.................... #define dec_thu_ds   ds1307_bcdToDec(time_r[3])
.................... #define dec_ngay_ds  ds1307_bcdToDec(time_r[4])
.................... #define dec_thang_ds ds1307_bcdToDec(time_r[5])
.................... #define dec_nam_ds   ds1307_bcdToDec(time_r[6])
.................... 
.................... #define giay_ds  time_r[0]
.................... #define phut_ds  time_r[1]
.................... #define gio_ds   time_r[2]
.................... #define thu_ds   time_r[3]
.................... #define ngay_ds  time_r[4]
.................... #define thang_ds time_r[5]
.................... #define nam_ds   time_r[6]
.................... 
.................... #define ma_qd   time_w[8]
.................... #define ma_ds   time_r[8]
.................... 
.................... usi8 ds1307_decToBcd(usi8 val) {
....................     return ((val / 10 * 16) + (val % 10));
.................... }
.................... 
.................... usi8 ds1307_bcdToDec(usi8 val) {
....................     return ((val / 16 * 10) + (val % 16));
.................... }
.................... 
.................... void ds1307_read_time(usi8 j)     
.................... {   
....................    usi8 i; 
....................    i2c_start();
....................    i2c_write(ds13_addr_wr);
....................    i2c_write(0x00);                     
....................    i2c_start();               
....................    i2c_write(ds13_addr_rd);                              
....................    for(i=0;i<j;i++) time_r[i]=i2c_read();
....................                                  
....................    i = i2c_read(0); //not ack, don't care i  
....................    i2c_stop();
.................... }
.................... 
.................... void ds1307_update_time(int1 sel)                 
.................... {         
....................    usi8 i;
....................    i2c_start();
....................    i2c_write(ds13_addr_wr);
....................    i2c_write(0x00);
....................    for(i=0;i<9;i++)                          
....................    {  
....................       if(sel)  i2c_write(time_w[i]);
....................       else     i2c_write(time_r[i]);
....................    }                                 
....................    i2c_stop();        
.................... }  
.................... 
.................... void ds1307_setup()
.................... {                                              
....................    ds1307_read_time(9);          
....................    if(ma_qd!=ma_ds)
....................    {
....................       ds1307_update_time(1);
....................    }
.................... }
.................... 
.................... void ds1307_save_ds(usi8 dcdt,dt)                 
.................... {           
....................    i2c_start();
....................    i2c_write(ds13_addr_wr);        
....................    i2c_write(dcdt);    
....................    i2c_write(dt);
....................    i2c_stop();
.................... }
.................... 
.................... #include <library_ds18b20.c>
.................... #include <touch.c>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                        Dallas Touch Driver                        ////
.................... ////                                                                   ////
.................... ////                                                                   ////
.................... ////  data = touch_read_bit()     Reads one bit from a touch device    ////
.................... ////                                                                   ////
.................... ////  data = touch_read_BYTE()    Reads one byte from a touch device.  ////
.................... ////                                                                   ////
.................... ////  ok = touch_write_bit(data)  Writes one bit to a touch device     ////
.................... ////                              and returns true if all went ok.     ////
.................... ////                              A false indicates a collision with   ////
.................... ////                              another device.                      ////
.................... ////                                                                   ////
.................... ////  ok = touch_write_byte(data) Writes one byte to a touch device    ////
.................... ////                              and returns true if all went ok.     ////
.................... ////                              A false indicates a collision with   ////
.................... ////                              another device.                      ////
.................... ////                                                                   ////
.................... ////  present = touch_present()   Issues a reset and returns true      ////
.................... ////                              if the touch device is there.        ////
.................... ////                                                                   ////
.................... ////  reset_pulse()               Issues a reset and waits for a       ////
.................... ////                              present pulse.                       ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef  TOUCH_C
.................... #define  TOUCH_C
.................... 
.................... #ifndef TOUCH_PIN
....................    #define TOUCH_PIN  PIN_B0
.................... #endif
.................... 
.................... #define TOUCH_PIN_LOW()    output_drive(TOUCH_PIN); output_low(TOUCH_PIN)
.................... #define TOUCH_PIN_HIGH()    output_drive(TOUCH_PIN); output_high(TOUCH_PIN)
.................... #define TOUCH_PIN_FLOAT()  output_float(TOUCH_PIN)
.................... #define TOUCH_PIN_READ()      input_state(TOUCH_PIN)
.................... 
.................... /////////////////////////////
.................... ////                     ////
.................... //// Function Prototypes ////
.................... ////                     ////
.................... /////////////////////////////
.................... 
.................... /*
.................... int1 touch_read_bit()
.................... This will read back a bit from the DS1993
.................... PARAMS: none
.................... RETURNS: A bit from the DS1993
.................... */
.................... int1 touch_read_bit();
.................... 
.................... /*
.................... BYTE touch_read_byte()
.................... This will read back a byte from the DS1993
.................... PARAMS: none
.................... RETURNS: A byte from the DS1993
.................... */
.................... BYTE touch_read_byte();
.................... 
.................... /*
.................... BOOLEAN touch_write_bit(int1 data)
.................... This will write a bit to the DS1993
.................... PARAMS: The bit to write
.................... RETURNS: True if completed successfully, false if otherwise
.................... */
.................... BOOLEAN touch_write_bit(int1 data);
.................... 
.................... /*
.................... BOOLEAN touch_write_byte(BYTE data)
.................... This will write a byte to the DS1993
.................... PARAMS: The byte to write
.................... RETURNS: True if completed successfully, false if otherwise
.................... */
.................... BOOLEAN touch_write_byte(BYTE data);
.................... 
.................... /*
.................... BOOLEAN touch_present()
.................... This will evaluate whether or not there is a touch present on the DS1993
.................... PARAMS: none
.................... RETURNS: True if a touch is present, false if otherwise
.................... */
.................... BOOLEAN touch_present();
.................... 
.................... /*
.................... void reset_pulse()
.................... This will send the DS1993 a reset pulse
.................... PARAMS: none
.................... RETURNS: none
.................... */
.................... void reset_pulse();
.................... 
.................... //////////////////////////////////
.................... ////                          ////
.................... //// Function Implementations ////
.................... ////                          ////
.................... //////////////////////////////////
.................... 
.................... /*
.................... int1 touch_read_bit()
.................... This will read back a bit from the DS1993
.................... PARAMS: none
.................... RETURNS: A bit from the DS1993
.................... */
.................... int1 touch_read_bit()
.................... {
....................    int1 data;
.................... 
....................    TOUCH_PIN_LOW();
....................    delay_us(14);
....................    TOUCH_PIN_FLOAT();
....................    delay_us(5);
....................    data = TOUCH_PIN_READ();
....................    delay_us(100);
.................... 
....................    return data;
.................... }
.................... 
.................... /*
.................... BYTE touch_read_byte()
.................... This will read back a byte from the DS1993
.................... PARAMS: none
.................... RETURNS: A byte from the DS1993
.................... */
.................... BYTE touch_read_byte()
.................... {
....................    BYTE i,data;
.................... 
....................    for(i=1; i <= 8; ++i)
....................       shift_right(&data, 1, touch_read_bit());
.................... 
....................    return data;
.................... }
.................... 
.................... /*
.................... BOOLEAN touch_write_bit(int1 data)
.................... This will write a bit to the DS1993
.................... PARAMS: The bit to write
.................... RETURNS: True if completed successfully, false if otherwise
.................... */
.................... BOOLEAN touch_write_bit(int1 data)
.................... {
....................    TOUCH_PIN_LOW();
....................    delay_us(10);
....................    if(data)
....................    {
....................       TOUCH_PIN_HIGH();
....................       delay_us(10);
....................       if(!TOUCH_PIN_READ())
....................          return FALSE;
....................    }
....................    else
....................    {
....................       TOUCH_PIN_LOW();
....................       delay_us(10);
....................       if(TOUCH_PIN_READ())
....................          return FALSE;
....................    }
....................    delay_us(50);
....................    TOUCH_PIN_HIGH();
....................    delay_us(50);
....................    return TRUE;
.................... }
.................... 
.................... /*
.................... BOOLEAN touch_write_byte(BYTE data)
.................... This will write a byte to the DS1993
.................... PARAMS: The byte to write
.................... RETURNS: True if completed successfully, false if otherwise
.................... */
.................... BOOLEAN touch_write_byte(BYTE data)
.................... {
....................    BYTE i;
.................... 
....................    for(i=1; i<=8; ++i)
....................       if(!touch_write_bit(shift_right(&data, 1, 0)))
....................          return FALSE;
.................... 
....................    return TRUE;
.................... }
.................... 
.................... /*
.................... BOOLEAN touch_present()
.................... This will evaluate whether or not there is a touch present on the DS1993
.................... PARAMS: none
.................... RETURNS: True if a touch is present, false if otherwise
.................... */
.................... BOOLEAN touch_present()
.................... {
....................    BOOLEAN present;
....................    TOUCH_PIN_LOW();
....................    delay_us(500);
....................    TOUCH_PIN_FLOAT();
....................    delay_us(5);
.................... 
....................    if(!TOUCH_PIN_READ())
....................       return FALSE;
.................... 
....................    delay_us(65);
....................    present = !TOUCH_PIN_READ();
....................    delay_us(240);
....................    return present;
.................... }
.................... 
.................... /*
.................... void reset_pulse()
.................... This will send the DS1993 a reset pulse
.................... PARAMS: none
.................... RETURNS: none
.................... */
.................... void reset_pulse()
.................... {
....................    TOUCH_PIN_LOW();
....................    delay_us(500);
....................    TOUCH_PIN_FLOAT();
....................    delay_us(5);
....................    while(!touch_present());
.................... }
.................... 
.................... 
.................... #endif
.................... 
.................... #define search_rom       0xf0
.................... #define read_rom         0x33
.................... #define match_rom        0x55
.................... #define skip_rom         0xcc
.................... #define alarm_search     0xec
.................... #define read_scratchpad  0xbe
.................... #define write_scratchpad 0x4e
.................... #define copy_scratchpad  0x48
.................... #define convert_t        0x44
.................... 
.................... si16 temperature;
.................... usi8 dt_ng;
.................... usi16 dt_tp;
.................... usi16 tt;
.................... 
.................... bool ds18b20_start(){
....................    output_low(pin_ds18b20);
....................    output_drive(pin_ds18b20);
....................    delay_us(500);
....................    output_float(pin_ds18b20);
....................    delay_us(100);
....................    if(!input(pin_ds18b20)){
....................       delay_us(400);
....................       return true;
....................    }
....................    return false;
.................... }
.................... 
.................... void ds18b20_write_bit(bool value){
....................    output_low(pin_ds18b20);
....................    output_drive(pin_ds18b20);
....................    delay_us(2);
....................    output_bit(pin_ds18b20, value);
....................    delay_us(80);
....................    output_float(pin_ds18b20);
....................    delay_us(2);
.................... }
.................... 
.................... void ds18b20_write_byte(int8 value){
....................    for(int8 i = 0; i < 8; i++)
....................       ds18b20_write_bit(bit_test(value,i));
.................... }
.................... 
.................... bool ds18b20_read_bit(){
....................    bool value;
....................    output_low(pin_ds18b20);
....................    output_drive(pin_ds18b20);
....................    delay_us(2);
....................    output_float(pin_ds18b20);
....................    delay_us(5);
....................    value = input(pin_ds18b20);
....................    delay_us(100);
....................    return value;
.................... }
.................... 
.................... int8 ds18b20_read_byte(){
....................    int8 value = 0;
....................    for(int8 i = 0; i < 8; i++)
....................       shift_right(&value,1,ds18b20_read_bit());
....................    return value;
.................... }
.................... 
.................... bool ds18b20_read_temp_c2(int16 *raw_temp_value){
....................    if(!ds18b20_start())
....................       return false;
....................    ds18b20_write_byte(skip_rom);
....................    ds18b20_write_byte(convert_t);
....................    while(ds18b20_read_byte() == 0);
....................    if(!ds18b20_start())
....................       return false;
....................    ds18b20_write_byte(skip_rom);
....................    ds18b20_write_byte(read_scratchpad);
....................    *raw_temp_value = ds18b20_read_byte();
....................    *raw_temp_value |= (int16)(ds18b20_read_byte()) << 8;
....................    return true;
.................... }
.................... 
.................... void ds18b20_read_temp(){
....................    if(ds18b20_read_temp_c2(&temperature)){
....................       isDs18b20 = true;
....................       dt_ng = temperature>>4;
....................       tt = temperature & 0x000f;
....................       dt_tp = (tt*625)/10;
....................    }
....................    else isDs18b20 = false;
.................... }
.................... 
.................... #include <library_change_rtc.c>
.................... 
.................... usi8 tang_or_giam_bcd(unsigned int8 x, int1 sel){
....................    usi8 y, dv, ch, v;
....................    ch = (x>>4);
....................    dv = x& 0x0f;
....................    y = ch*10 + dv;
....................    if(sel == 0) y++;
....................    else         y--;
....................    ch = y/10; dv = y%10;
....................    v = (ch<<4)|dv;
....................    return v;
.................... }
.................... 
.................... void tat_bat_2led_chinh(){
....................    if(gt_mod == 1 || gt_mod == 4) { e_11 = ~e_11; e_22 = true; e_33 = true;}
....................    else if(gt_mod == 2 || gt_mod == 5) { e_11 = true; e_22 = ~e_22; e_33 = true;}
....................    else if(gt_mod == 3 || gt_mod == 6) { e_11 = true; e_22 = true; e_33 = ~e_33;}
....................    else { e_11 = true; e_22 = true; e_33 = true;}
.................... }
.................... 
.................... void giai_ma_gpg_lcd(){
....................    lcd_dis_xx_yy_zz(4,1,dec_gio_ds,dec_phut_ds,dec_giay_ds,e_33, e_22, e_11);
.................... }
.................... 
.................... void giai_ma_ntn_lcd(){
....................    lcd_dis_xx_yy_zz(4,1,dec_ngay_ds,dec_thang_ds,dec_nam_ds,e_33, e_22, e_11);
.................... }
.................... 
.................... void giai_ma_thu_lcd(){
....................    lcd_dis_xx_yy_zz(4,1,0x00,dec_thu_ds,0x00,0, e_22, 0);
.................... }
.................... 
.................... void giai_ma_gpg_ntn_thu_lcd(){
....................    if(gt_mod == 0){
....................       if(tt_ht == 0 || tt_ht == 1) giai_ma_gpg_lcd();
....................       if(tt_ht == 2) giai_ma_ntn_lcd();
....................       if(tt_ht == 3) giai_ma_thu_lcd();
....................    }
....................    else{
....................       if(gt_mod < 4)       giai_ma_gpg_lcd();
....................       else if(gt_mod < 7)  giai_ma_ntn_lcd();
....................       else if(gt_mod == 7) giai_ma_thu_lcd();
....................    }
.................... }
.................... 
.................... void xu_ly_choptat(){
....................    if(gt_mod != 0){
....................       tat_bat_2led_chinh();
....................    }
....................    else { e_11 = true; e_22 = true; e_33 = true;}
....................    
.................... }
.................... 
.................... void phim_chon_hthi_mode(){
....................    if(tick_btn(2, bt3)){
....................       tt_ht = 1;
....................       if(tt_ht == 1){
....................          gt_mod++;
....................          if(gt_mod < 4) tt_ht = 1;
....................          else if(gt_mod < 7) tt_ht = 2;
....................          else if(gt_mod == 7) tt_ht = 3;
....................          else{
....................             gt_mod = 0;
....................             tt_ht = 0;
....................             countLevel = 0;
....................          }
....................       }
....................       tg_chinh = 0;
....................       giai_ma_gpg_ntn_thu_lcd();
....................    }
.................... }
.................... void tang_giay(){
....................    if(giay_ds == 0x59) giay_ds = 0;
....................    else giay_ds = tang_or_giam_bcd(giay_ds, tang);
....................    ds1307_save_ds(0,giay_ds);
.................... }
.................... void tang_phut(){
....................    if(phut_ds == 0x59) phut_ds = 0;
....................    else phut_ds = tang_or_giam_bcd(phut_ds, tang);
....................    ds1307_save_ds(1,phut_ds);
.................... }
.................... void tang_gio(){
....................    if(gio_ds == 0x23) gio_ds = 0;
....................    else gio_ds = tang_or_giam_bcd(gio_ds, tang);
....................    ds1307_save_ds(2,gio_ds);
.................... }
.................... void chinh_tang_gpg(){
....................    switch(gt_mod){
....................       case 1:
....................          tang_giay();
....................          break;
....................       case 2:
....................          tang_phut();
....................          break;
....................       case 3:
....................          tang_gio();
....................          break;
....................       default: break;
....................    }
.................... }
.................... void tang_nam(){
....................    if(nam_ds == 0x99) nam_ds = 0;
....................    else nam_ds = tang_or_giam_bcd(nam_ds, tang);
....................    ds1307_save_ds(6,nam_ds);
.................... }
.................... void tang_thang(){
....................    if(thang_ds == 0x12) thang_ds = 1;
....................    else thang_ds = tang_or_giam_bcd(thang_ds, tang);
....................    ds1307_save_ds(5,thang_ds);
.................... }
.................... void tang_ngay(){
....................    if(ngay_ds == 0x31) ngay_ds = 1;
....................    else ngay_ds = tang_or_giam_bcd(ngay_ds, tang);
....................    ds1307_save_ds(4,ngay_ds);
.................... }
.................... void chinh_tang_ntn(){
....................    switch(gt_mod){
....................       case 4:
....................          tang_nam();
....................          break;
....................       case 5:
....................          tang_thang();
....................          break;
....................       case 6:
....................          tang_ngay();
....................          break;
....................       default: break;
....................    }
.................... }
.................... void chinh_tang_thu(){
....................    if(thu_ds == 8) thu_ds = 2;
....................    else thu_ds++;
....................    ds1307_save_ds(3,thu_ds);
.................... }
.................... 
.................... void phim_up(){
....................    if(tick_btn(1, bt1)){
....................       tg_chinh = 0;
....................       if(gt_mod<4) chinh_tang_gpg();
....................       else if(gt_mod<7) chinh_tang_ntn();
....................       else if(gt_mod==7) chinh_tang_thu();
....................       e_11 = true; e_22 = true; e_33 = true;
....................       giai_ma_gpg_ntn_thu_lcd();
....................    }
.................... }
.................... void giam_giay(){
....................    if(giay_ds == 0) giay_ds = 0x59;
....................    else giay_ds = tang_or_giam_bcd(giay_ds,giam);
....................    ds1307_save_ds(0,giay_ds);
.................... }
.................... void giam_phut(){
....................    if(phut_ds == 0) phut_ds = 0x59;
....................    else phut_ds = tang_or_giam_bcd(phut_ds,giam);
....................    ds1307_save_ds(1,phut_ds);
.................... }
.................... void giam_gio(){
....................    if(gio_ds == 0) gio_ds = 0x23;
....................    else gio_ds = tang_or_giam_bcd(gio_ds,giam);
....................    ds1307_save_ds(2,gio_ds);
.................... }
.................... void chinh_giam_gpg(){
....................    switch(gt_mod){
....................       case 1:
....................          giam_giay();
....................          break;
....................       case 2:
....................          giam_phut();
....................          break;
....................       case 3:
....................          giam_gio();
....................          break;
....................       default: break;
....................    }
.................... }
.................... void giam_nam(){
....................    if(nam_ds == 0x0) nam_ds = 0x99;
....................    else nam_ds = tang_or_giam_bcd(nam_ds, giam);
....................    ds1307_save_ds(6,nam_ds);
.................... }
.................... void giam_thang(){
....................    if(thang_ds == 0x1) thang_ds = 12;
....................    else thang_ds = tang_or_giam_bcd(thang_ds, giam);
....................    ds1307_save_ds(5,thang_ds);
.................... }
.................... void giam_ngay(){
....................    if(ngay_ds == 0x1) ngay_ds = 21;
....................    else ngay_ds = tang_or_giam_bcd(ngay_ds, giam);
....................    ds1307_save_ds(4,ngay_ds);
.................... }
.................... void chinh_giam_ntn(){
....................    switch(gt_mod){
....................       case 1:
....................          giam_nam();
....................          break;
....................       case 2:
....................          giam_thang();
....................          break;
....................       case 3:
....................          giam_ngay();
....................          break;
....................       default: break;
....................    }
.................... }
.................... void chinh_giam_thu(){
....................    if(thu_ds == 2) thu_ds = 8;
....................    else thu_ds--;
....................    ds1307_save_ds(3,thu_ds);
.................... }
.................... void phim_dw(){
....................    if(tick_btn(1, bt2)){
....................       tg_chinh = 0;
....................       if(gt_mod<4) chinh_giam_gpg();
....................       else if(gt_mod<7) chinh_giam_ntn();
....................       else if(gt_mod==7) chinh_giam_thu();
....................       e_11 = true; e_22 = true; e_33 = true;
....................       giai_ma_gpg_ntn_thu_lcd();
....................    }
.................... }
.................... void log_mode(){
....................    lcd_setCursor(0, 1);
....................    if(tt_ht == 0) lcd_data(" N ");
....................    else if(tt_ht == 1) lcd_data("GPG");
....................    else if(tt_ht == 2) lcd_data("NTN");
....................    else if(tt_ht == 3) lcd_data(" T ");
....................    lcd_setCursor(13, 1);
....................    lcd_data(gt_mod + 0x30);
....................    if(gt_mod != 0){
....................       lcd_data(tg_chinh/10 + 0x30); lcd_data(tg_chinh%10 + 0x30);
....................    }
....................    else
....................       lcd_data("__");
.................... }
.................... 
.................... 
.................... #include <library_change_alarm_eat.c>
.................... void giai_ma_gpg_alarm_lcd(){
....................    lcd_dis_xx_yy_zz(4,1,dec_gio_eat,dec_phut_eat,dec_giay_eat,e_33, e_22, e_11);
.................... }
.................... void phim_chon_mode_alarm(){
....................    if(tick_btn(2, bt3)){
....................       if(gt_mod < 3) gt_mod++;
....................       else{
....................          gt_mod = 0;
....................          countLevel = 0;
....................       }
....................       tg_chinh = 0;
....................       giai_ma_gpg_alarm_lcd();
....................    }
.................... }
.................... void tang_giay_eat(){
....................    if(eat_ss == 0x59) eat_ss = 0x00;
....................    else eat_ss = tang_or_giam_bcd(eat_ss, tang);
.................... }
.................... void tang_phut_eat(){
....................    if(eat_pp == 0x59) eat_pp = 0x00;
....................    else eat_pp = tang_or_giam_bcd(eat_pp, tang);
.................... }
.................... void tang_gio_eat(){
....................    if(eat_hh == 0x23) eat_hh = 0x00;
....................    else eat_hh = tang_or_giam_bcd(eat_hh, tang);
.................... }
.................... void chinh_tang_gpg_eat(){
....................    switch(gt_mod){
....................       case 1:
....................          tang_giay_eat();
....................          break;
....................       case 2:
....................          tang_phut_eat();
....................          break;
....................       case 3:
....................          tang_gio_eat();
....................          break;
....................       default: break;
....................    }
.................... }
.................... 
.................... void phim_up_eat(){
....................    if(tick_btn(1, bt1)){
....................       tg_chinh = 0;
....................       chinh_tang_gpg_eat();
....................       e_11 = true; e_22 = true; e_33 = true;
....................       giai_ma_gpg_alarm_lcd();
....................    }
.................... }
.................... 
.................... void giam_giay_eat(){
....................    if(eat_ss == 0) eat_ss = 0x59;
....................    else eat_ss = tang_or_giam_bcd(eat_ss,giam);
.................... }
.................... void giam_phut_eat(){
....................    if(eat_pp == 0) eat_pp = 0x59;
....................    else eat_pp = tang_or_giam_bcd(eat_pp,giam);
.................... }
.................... void giam_gio_eat(){
....................    if(eat_hh == 0) eat_hh = 0x23;
....................    else eat_hh = tang_or_giam_bcd(eat_hh,giam);
.................... }
.................... void chinh_giam_gpg_eat(){
....................    switch(gt_mod){
....................       case 1:
....................          giam_giay_eat();
....................          break;
....................       case 2:
....................          giam_phut_eat();
....................          break;
....................       case 3:
....................          giam_gio_eat();
....................          break;
....................       default: break;
....................    }
.................... }
.................... void phim_dw_eat(){
....................    if(tick_btn(1, bt2)){
....................       tg_chinh = 0;
....................       chinh_giam_gpg_eat();
....................       e_11 = true; e_22 = true; e_33 = true;
....................       giai_ma_gpg_alarm_lcd();
....................    }
.................... }
.................... void log_mode_alarm(){
....................    lcd_setCursor(13, 1);
....................    lcd_data(gt_mod + 0x30);
....................    if(gt_mod != 0){
....................       lcd_data(tg_chinh/10 + 0x30); lcd_data(tg_chinh%10 + 0x30);
....................    }
....................    else
....................       lcd_data("__");
.................... }
.................... 
.................... 
.................... #include <library_control_chiller.c>
.................... void control_temperature(int8 nd_ss, int8 gh){
....................    if(nd_ss > gh){
....................    // water is hot
....................       output_bit(pinDLCold, 1);
....................       output_bit(pinDLHot,  0);
....................    }
....................    else{
....................    // water is cold
....................       output_bit(pinDLCold, 0);
....................       output_bit(pinDLHot,  1);
....................    }
.................... }
.................... 
.................... void servo_degree_0(){
....................    unsigned int i;
....................    for(i = 0; i < 50; i++){
....................       output_bit(pinServo, 1);
....................       Delay_us(800); // pulse of 800us
....................       output_bit(pinServo, 0);
....................       Delay_us(19200);
....................    }
.................... }
.................... 
.................... void servo_degree_90(){
....................    unsigned int i;
....................    for(i = 0; i < 50; i++){
....................       output_bit(pinServo, 1);
....................       Delay_us(1500); // pulse of 1500us
....................       output_bit(pinServo, 0);
....................       Delay_us(18500);
....................    }
.................... }
.................... 
.................... void servo_degree_180(){
....................    unsigned int i;
....................    for(i = 0; i < 50; i++){
....................       output_bit(pinServo, 1);
....................       Delay_us(2200); // pulse of 2200us
....................       output_bit(pinServo, 0);
....................       Delay_us(17800);
....................    }
.................... }
.................... 
.................... void control_servo(){
....................    if(dec_gio_ds == dec_gio_eat && dec_phut_ds == dec_phut_eat && dec_giay_ds == dec_giay_eat){
....................       flag_servo = true;
....................    }
....................    if(flag_servo){
....................       servo_degree_90();
....................    }
....................    else{
....................       servo_degree_0();
....................    }
.................... }
.................... 
.................... 
.................... #include <library_menu.c>
.................... 
.................... void menu(){
....................    if (push_btn(false,bt0)) countLevel++;
.................... 
....................    if (countLevel >= maxLevel) countLevel = 0;
....................    
....................    if(countLevel != countLevelRev){
....................       countLevelRev = countLevel;
....................       lcd_clear();
....................    }
....................    
....................    switch(countLevel){
....................       case 0:
.................... //! function to read time rtc from ds1307 sensor
....................          ds1307_read_time(8);
.................... 
.................... //! function to read temperature from ds18b20 sensor
....................          ds18b20_read_temp();
.................... 
.................... //! display info rtc and temperature for user
....................          lcd_dis_xx_yy_zz(4,0,dec_gio_ds,dec_phut_ds,dec_giay_ds,1,1,1);
....................          lcd_dis_temperature(2,1,dt_ng,dt_tp);
.................... 
.................... //! control delay and servo
....................          control_temperature(dt_ng,limitTemperature);
....................          control_servo();
....................          break;
....................       case 1:
.................... //! function to read temperature from ds18b20 sensor
....................          ds18b20_read_temp();
.................... 
.................... //! change limit temperature
....................          limitTemperature += tick_btn(1,bt2);
....................          limitTemperature -= tick_btn(1,bt1);
.................... 
.................... //! display info temperature limit and sensor
....................          lcd_dis_temperature(2,0,dt_ng,dt_tp);
....................          lcd_dis_temperature_limit(2,1,limitTemperature);
.................... 
.................... //! when button 3 is true --> return menu 0
....................          if(tick_btn(1,bt3)) countLevel = 0;
....................          
....................          break;
....................       case 2:
.................... //! function to read time rtc from ds1307 sensor
....................          ds1307_read_time(8);
.................... 
.................... //!
....................          lcd_setCursor(1,0);
....................          lcd_data("cai dat dong ho");
....................          if(bdn < 5){
....................             if(gt_mod != 0) xu_ly_choptat();
....................             phim_chon_hthi_mode();
....................             phim_up();
....................             phim_dw();
....................          }
....................          else if(bdn >= 10){
....................             bdn = 0;
....................             if(tg_chinh < 20) tg_chinh++;
....................             else{
....................                gt_mod = 0; tt_ht = 0;
....................                e_11 = true; e_22 = true; e_33 = true;
....................             }
....................             if(giay_tam!=giay_ds){
....................                giay_tam = giay_ds;
....................             }
....................          }
....................          giai_ma_gpg_ntn_thu_lcd();
....................          log_mode();
....................          break;
....................       case 3:
....................          lcd_setCursor(1,0);
....................          lcd_data("t/g cho ca an");
....................          if(bdn < 5){
....................             if(gt_mod != 0) xu_ly_choptat();
....................             phim_chon_mode_alarm();
....................             phim_up_eat();
....................             phim_dw_eat();
....................          }
....................          else if(bdn >= 10){
....................             bdn = 0;
....................             if(tg_chinh < 20) tg_chinh++;
....................             else{
....................                gt_mod = 0;
....................                e_11 = true; e_22 = true; e_33 = true;
....................             }
....................          }
....................          giai_ma_gpg_alarm_lcd();
....................          log_mode_alarm();
....................          break;
....................       case 4:
....................          lcd_setCursor(1,0);
....................          lcd_data("check com esp");
....................          lcd_setCursor(1,1);
.................... //!         lcd_data(ccsc);
....................          if(tick_btn(1,bt3)) countLevel = 0;
....................          break;
....................       default:
....................          lcd_setCursor(2,0);
....................          lcd_data("Information");
....................          lcd_setCursor(0,1);
....................          lcd_data("Version: V1.0.0");
.................... 
.................... //! when button 3 is true --> return menu 0
....................          if(tick_btn(1,bt3)) countLevel = 0;
....................          break;
....................    }
.................... }
.................... 
.................... 
.................... 
.................... 
.................... void loop(){
.................... //! function to access for change limit temperature, change time for time rtc, change time clock for eat fish, check com with esp, log version sys
....................    menu();
.................... }
.................... 
.................... void main(){
*
0260:  MOVF   03,W
0261:  ANDLW  1F
0262:  MOVWF  03
0263:  MOVLW  FF
0264:  MOVWF  2B
0265:  BSF    2B.3
0266:  MOVF   2B,W
0267:  BSF    03.5
0268:  MOVWF  07
0269:  BCF    03.5
026A:  BSF    2B.4
026B:  MOVF   2B,W
026C:  BSF    03.5
026D:  MOVWF  07
026E:  MOVLW  31
026F:  MOVWF  13
0270:  MOVLW  28
0271:  BCF    03.5
0272:  MOVWF  14
0273:  BSF    03.5
0274:  BSF    14.7
0275:  BCF    14.6
0276:  MOVLW  81
0277:  MOVWF  19
0278:  MOVLW  A6
0279:  MOVWF  18
027A:  MOVLW  90
027B:  BCF    03.5
027C:  MOVWF  18
027D:  BCF    2C.0
027E:  BCF    2C.1
027F:  CLRF   2E
0280:  MOVLW  19
0281:  MOVWF  2D
0282:  CLRF   33
0283:  CLRF   34
0284:  CLRF   35
0285:  CLRF   39
0286:  CLRF   3A
0287:  CLRF   3B
0288:  CLRF   3D
0289:  CLRF   3E
028A:  CLRF   47
028B:  CLRF   46
028C:  BSF    03.5
028D:  BSF    1F.0
028E:  BSF    1F.1
028F:  BSF    1F.2
0290:  BCF    1F.3
0291:  MOVLW  07
0292:  MOVWF  1C
0293:  BCF    03.7
.................... 
.................... //! setup enviroments
....................    setup_initialize();
*
02B7:  GOTO   0E0
....................    
.................... //! setup ds1307 rtc
.................... //!   ds1307_setup();
.................... 
.................... //! setup lcd display
....................    lcd_setup();
02B8:  GOTO   17C
.................... 
.................... //! setup servo initialize is 0 degree
.................... //!   servo_degree_0();
.................... 
.................... //! display info include: name project and name university
....................    log_lcd_initialize();
02B9:  GOTO   23E
....................    
.................... //!   UART_SendString(payload);
.................... //!   printf("Hello from PIC16F877A!\r\n");
....................    while(true){
.................... //! loop function is function suport in process of system
.................... //!      loop();
.................... //!   lcd_setCursor(0,0);
.................... //!   lcd_data(rdata);
.................... //!   
.................... //!   dataa++;
.................... //!   puts("hiiiii");
.................... //!   delay_ms(1000);
.................... 
....................    lcd_setCursor(0,0);
02BA:  CLRF   61
02BB:  CLRF   62
02BC:  CALL   1C9
....................    lcd_data("hello");
02BD:  MOVLW  DD
02BE:  BSF    03.6
02BF:  MOVWF  0D
02C0:  MOVLW  00
02C1:  MOVWF  0F
02C2:  BCF    03.6
02C3:  CALL   1E8
02C4:  GOTO   2BA
.................... 
.................... 
....................    }
.................... }
02C5:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
