F N "MAIN" 0 15 ""
D G "__PCM__" 0 36 ""5.115""
D G "__DEVICE__" 0 36 "877"
D G "__DATE__" 0 36 ""02-Jun-24""
D G "__TIME__" 0 36 ""02:05:14""
D G "_UNICODE" 0 36 ""?""
D G "__EVAL" 0 36 ""?"" "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
c L "set_tris_a" 3 1 6 "FUNCTION"
F N "set_tris_a" 3 37 ""
V L "value" 3 37 "int8" `55 
F B "set_tris_a" 3 37 "void(int8 value)" `54 
F N "set_tris_b" 3 38 ""
V L "value" 3 38 "int8" `57 
F B "set_tris_b" 3 38 "void(int8 value)" `56 
F N "set_tris_c" 3 39 ""
V L "value" 3 39 "int8" `59 
F B "set_tris_c" 3 39 "void(int8 value)" `58 
F N "set_tris_d" 3 40 ""
V L "value" 3 40 "int8" `61 
F B "set_tris_d" 3 40 "void(int8 value)" `60 
F N "set_tris_e" 3 41 ""
V L "value" 3 41 "int8" `63 
F B "set_tris_e" 3 41 "void(int8 value)" `62 
F N "get_tris_a" 3 42 ""
F B "get_tris_a" 3 42 "int8()" `64 
F N "get_tris_b" 3 43 ""
F B "get_tris_b" 3 43 "int8()" `65 
F N "get_tris_c" 3 44 ""
F B "get_tris_c" 3 44 "int8()" `66 
F N "get_tris_d" 3 45 ""
F B "get_tris_d" 3 45 "int8()" `67 
F N "get_tris_e" 3 46 ""
F B "get_tris_e" 3 46 "int8()" `68 
F N "output_a" 3 47 ""
V L "value" 3 47 "int8" `70 
F B "output_a" 3 47 "void(int8 value)" `69 
F N "output_b" 3 48 ""
V L "value" 3 48 "int8" `72 
F B "output_b" 3 48 "void(int8 value)" `71 
F N "output_c" 3 49 ""
V L "value" 3 49 "int8" `74 
F B "output_c" 3 49 "void(int8 value)" `73 
F N "output_d" 3 50 ""
V L "value" 3 50 "int8" `76 
F B "output_d" 3 50 "void(int8 value)" `75 
F N "output_e" 3 51 ""
V L "value" 3 51 "int8" `78 
F B "output_e" 3 51 "void(int8 value)" `77 
F N "input_a" 3 52 ""
F B "input_a" 3 52 "int8()" `79 
F N "input_b" 3 53 ""
F B "input_b" 3 53 "int8()" `80 
F N "input_c" 3 54 ""
F B "input_c" 3 54 "int8()" `81 
F N "input_d" 3 55 ""
F B "input_d" 3 55 "int8()" `82 
F N "input_e" 3 56 ""
F B "input_e" 3 56 "int8()" `83 
F N "input_change_a" 3 57 ""
F B "input_change_a" 3 57 "int8()" `84 
F N "input_change_b" 3 58 ""
F B "input_change_b" 3 58 "int8()" `85 
F N "input_change_c" 3 59 ""
F B "input_change_c" 3 59 "int8()" `86 
F N "input_change_d" 3 60 ""
F B "input_change_d" 3 60 "int8()" `87 
F N "input_change_e" 3 61 ""
F B "input_change_e" 3 61 "int8()" `88 
F N "port_b_pullups" 3 62 ""
V L "value" 3 62 "int8" `90 
F B "port_b_pullups" 3 62 "void(int8 value)" `89 
F N "input" 3 63 ""
V L "pin" 3 63 "int16" `92 
F B "input" 3 63 "int8(int16 pin)" `91 
F N "input_state" 3 64 ""
V L "pin" 3 64 "int16" `94 
F B "input_state" 3 64 "int8(int16 pin)" `93 
F N "output_low" 3 65 ""
V L "pin" 3 65 "int16" `96 
F B "output_low" 3 65 "void(int16 pin)" `95 
F N "output_high" 3 66 ""
V L "pin" 3 66 "int16" `98 
F B "output_high" 3 66 "void(int16 pin)" `97 
F N "output_toggle" 3 67 ""
V L "pin" 3 67 "int16" `100 
F B "output_toggle" 3 67 "void(int16 pin)" `99 
F N "output_bit" 3 68 ""
V L "pin" 3 68 "int16" `102 
V L "level" 3 68 "int8" `103 
F B "output_bit" 3 68 "void(int16 pin,int8 level)" `101 
F N "output_float" 3 69 ""
V L "pin" 3 69 "int16" `105 
F B "output_float" 3 69 "void(int16 pin)" `104 
F N "output_drive" 3 70 ""
V L "pin" 3 70 "int16" `107 
F B "output_drive" 3 70 "void(int16 pin)" `106  "Constants used to identify pins in the above are:"
D G "PIN_A0" 3 74 "40"
D G "PIN_A1" 3 75 "41"
D G "PIN_A2" 3 76 "42"
D G "PIN_A3" 3 77 "43"
D G "PIN_A4" 3 78 "44"
D G "PIN_A5" 3 79 "45"
D G "PIN_B0" 3 81 "48"
D G "PIN_B1" 3 82 "49"
D G "PIN_B2" 3 83 "50"
D G "PIN_B3" 3 84 "51"
D G "PIN_B4" 3 85 "52"
D G "PIN_B5" 3 86 "53"
D G "PIN_B6" 3 87 "54"
D G "PIN_B7" 3 88 "55"
D G "PIN_C0" 3 90 "56"
D G "PIN_C1" 3 91 "57"
D G "PIN_C2" 3 92 "58"
D G "PIN_C3" 3 93 "59"
D G "PIN_C4" 3 94 "60"
D G "PIN_C5" 3 95 "61"
D G "PIN_C6" 3 96 "62"
D G "PIN_C7" 3 97 "63"
D G "PIN_D0" 3 99 "64"
D G "PIN_D1" 3 100 "65"
D G "PIN_D2" 3 101 "66"
D G "PIN_D3" 3 102 "67"
D G "PIN_D4" 3 103 "68"
D G "PIN_D5" 3 104 "69"
D G "PIN_D6" 3 105 "70"
D G "PIN_D7" 3 106 "71"
D G "PIN_E0" 3 108 "72"
D G "PIN_E1" 3 109 "73"
D G "PIN_E2" 3 110 "74"
D G "FALSE" 3 113 "0"
D G "TRUE" 3 114 "1"
D G "BYTE" 3 116 "int8"
D G "BOOLEAN" 3 117 "int1"
D G "getc" 3 119 "getch"
D G "fgetc" 3 120 "getch"
D G "getchar" 3 121 "getch"
D G "putc" 3 122 "putchar"
D G "fputc" 3 123 "putchar"
D G "fgets" 3 124 "gets"
D G "fputs" 3 125 "puts"
c L "output_drive" 3 1 3 "FUNCTION"
F N "restart_cause" 3 130 ""
F B "restart_cause" 3 130 "int8()" `108 
F N "reset_cpu" 3 131 ""
F B "reset_cpu" 3 131 "void()" `109 
F N "sleep" 3 132 ""
F B "sleep" 3 132 "void()" `110  "Constants returned from RESTART_CAUSE() are:"
D G "WDT_FROM_SLEEP" 3 134 "3"
D G "WDT_TIMEOUT" 3 135 "11"
D G "MCLR_FROM_SLEEP" 3 136 "19"
D G "MCLR_FROM_RUN" 3 137 "27"
D G "NORMAL_POWER_UP" 3 138 "25"
D G "BROWNOUT_RESTART" 3 139 "26"
c L "sleep" 3 1 5 "FUNCTION"
F N "setup_timer_0" 3 146 ""
V L "mode" 3 146 "int8" `112 
F B "setup_timer_0" 3 146 "void(int8 mode)" `111 
F N "set_timer0" 3 147 ""
V L "value" 3 147 "int8" `114 
F B "set_timer0" 3 147 "void(int8 value)" `113 
F N "get_timer0" 3 148 ""
F B "get_timer0" 3 148 "int8()" `115 
F N "setup_counters" 3 149 ""
V L "mode" 3 149 "int8" `117 
V L "prescaler" 3 149 "int8" `118 
F B "setup_counters" 3 149 "void(int8 mode,int8 prescaler)" `116 
F N "set_rtcc" 3 150 ""
V L "value" 3 150 "int8" `120 
F B "set_rtcc" 3 150 "void(int8 value)" `119 
F N "get_rtcc" 3 151 ""
F B "get_rtcc" 3 151 "int8()" `121  "Constants used for SETUP_TIMER_0() are:"
D G "T0_INTERNAL" 3 153 "0"
D G "T0_EXT_L_TO_H" 3 154 "32"
D G "T0_EXT_H_TO_L" 3 155 "48"
D G "T0_DIV_1" 3 157 "8"
D G "T0_DIV_2" 3 158 "0"
D G "T0_DIV_4" 3 159 "1"
D G "T0_DIV_8" 3 160 "2"
D G "T0_DIV_16" 3 161 "3"
D G "T0_DIV_32" 3 162 "4"
D G "T0_DIV_64" 3 163 "5"
D G "T0_DIV_128" 3 164 "6"
D G "T0_DIV_256" 3 165 "7"
D G "T0_8_BIT" 3 168 "0"
D G "RTCC_INTERNAL" 3 172 "0"
D G "RTCC_EXT_L_TO_H" 3 173 "32"
D G "RTCC_EXT_H_TO_L" 3 174 "48"
D G "RTCC_DIV_1" 3 175 "8"
D G "RTCC_DIV_2" 3 176 "0"
D G "RTCC_DIV_4" 3 177 "1"
D G "RTCC_DIV_8" 3 178 "2"
D G "RTCC_DIV_16" 3 179 "3"
D G "RTCC_DIV_32" 3 180 "4"
D G "RTCC_DIV_64" 3 181 "5"
D G "RTCC_DIV_128" 3 182 "6"
D G "RTCC_DIV_256" 3 183 "7"
D G "RTCC_8_BIT" 3 184 "0"
c L "get_rtcc" 3 1 8 "FUNCTION"
F N "setup_wdt" 3 195 ""
V L "mode" 3 195 "int16" `123 
F B "setup_wdt" 3 195 "void(int16 mode)" `122 
F N "restart_wdt" 3 196 ""
F B "restart_wdt" 3 196 "void()" `124  "Constants used for SETUP_WDT() are:"
D G "WDT_18MS" 3 199 "8"
D G "WDT_36MS" 3 200 "9"
D G "WDT_72MS" 3 201 "10"
D G "WDT_144MS" 3 202 "11"
D G "WDT_288MS" 3 203 "12"
D G "WDT_576MS" 3 204 "13"
D G "WDT_1152MS" 3 205 "14"
D G "WDT_2304MS" 3 206 "15"
c L "restart_wdt" 3 1 3 "FUNCTION"
F N "setup_timer_1" 3 212 ""
V L "mode" 3 212 "int16" `126 
F B "setup_timer_1" 3 212 "void(int16 mode)" `125 
F N "get_timer1" 3 213 ""
F B "get_timer1" 3 213 "int16()" `127 
F N "set_timer1" 3 214 ""
V L "value" 3 214 "int16" `129 
F B "set_timer1" 3 214 "void(int16 value)" `128  "Constants used for SETUP_TIMER_1() are:"
D G "T1_DISABLED" 3 217 "0"
D G "T1_INTERNAL" 3 218 "0x85"
D G "T1_EXTERNAL" 3 219 "0x87"
D G "T1_EXTERNAL_SYNC" 3 220 "0x83"
D G "T1_CLK_OUT" 3 222 "8"
D G "T1_DIV_BY_1" 3 224 "0"
D G "T1_DIV_BY_2" 3 225 "0x10"
D G "T1_DIV_BY_4" 3 226 "0x20"
D G "T1_DIV_BY_8" 3 227 "0x30"
c L "set_timer1" 3 1 3 "FUNCTION"
F N "setup_timer_2" 3 232 ""
V L "mode" 3 232 "int8" `131 
V L "period" 3 232 "int8" `132 
V L "postscale" 3 232 "int8" `133 
F B "setup_timer_2" 3 232 "void(int8 mode,int8 period,int8 postscale)" `130 
F N "get_timer2" 3 233 ""
F B "get_timer2" 3 233 "int8()" `134 
F N "set_timer2" 3 234 ""
V L "value" 3 234 "int8" `136 
F B "set_timer2" 3 234 "void(int8 value)" `135  "Constants used for SETUP_TIMER_2() are:"
D G "T2_DISABLED" 3 236 "0"
D G "T2_DIV_BY_1" 3 237 "4"
D G "T2_DIV_BY_4" 3 238 "5"
D G "T2_DIV_BY_16" 3 239 "6"
c L "set_timer2" 3 1 4 "FUNCTION"
F N "setup_ccp1" 3 245 ""
V L "mode" 3 245 "int32" `138 
F B "setup_ccp1" 3 245 "void(int32 mode)" `137 
F N "setup_ccp1" 3 246 ""
V L "mode" 3 246 "int32" `140 
V L "pwm" 3 246 "int8" `141 
F B "setup_ccp1" 3 246 "void(int32 mode,int8 pwm)" `139 
F N "set_pwm1_duty" 3 247 ""
V L "value" 3 247 "int8" `143 
F B "set_pwm1_duty" 3 247 "void(int8 value)" `142 
F N "set_pwm1_duty" 3 248 ""
V L "value" 3 248 "int16" `145 
F B "set_pwm1_duty" 3 248 "void(int16 value)" `144  "Constants used for SETUP_CCPx() are:"
D G "CCP_OFF" 3 250 "0"
D G "CCP_CAPTURE_FE" 3 251 "0x04"
D G "CCP_CAPTURE_RE" 3 252 "0x05"
D G "CCP_CAPTURE_DIV_4" 3 253 "0x06"
D G "CCP_CAPTURE_DIV_16" 3 254 "0x07"
D G "CCP_COMPARE_SET_ON_MATCH" 3 255 "0x08"
D G "CCP_COMPARE_CLR_ON_MATCH" 3 256 "0x09"
D G "CCP_COMPARE_INT" 3 257 "0x0A"
D G "CCP_COMPARE_RESET_TIMER" 3 258 "0x0B"
D G "CCP_PWM" 3 259 "0x0C"
D G "CCP_PWM_PLUS_1" 3 260 "0x1c"
D G "CCP_PWM_PLUS_2" 3 261 "0x2c"
D G "CCP_PWM_PLUS_3" 3 262 "0x3c"
c L "set_pwm1_duty" 3 1 1 "FUNCTION"
F N "setup_ccp2" 3 269 ""
V L "mode" 3 269 "int32" `150 
F B "setup_ccp2" 3 269 "void(int32 mode)" `149 
F N "setup_ccp2" 3 270 ""
V L "mode" 3 270 "int32" `152 
V L "pwm" 3 270 "int8" `153 
F B "setup_ccp2" 3 270 "void(int32 mode,int8 pwm)" `151 
F N "set_pwm2_duty" 3 271 ""
V L "value" 3 271 "int8" `155 
F B "set_pwm2_duty" 3 271 "void(int8 value)" `154 
F N "set_pwm2_duty" 3 272 ""
V L "value" 3 272 "int16" `157 
F B "set_pwm2_duty" 3 272 "void(int16 value)" `156 
c L "set_pwm2_duty" 3 1 5 "FUNCTION"
F N "setup_psp" 3 282 ""
V L "mode" 3 282 "int8" `162 
F B "setup_psp" 3 282 "void(int8 mode)" `161 
F N "psp_output_full" 3 283 ""
F B "psp_output_full" 3 283 "int8()" `163 
F N "psp_input_full" 3 284 ""
F B "psp_input_full" 3 284 "int8()" `164 
F N "psp_overflow" 3 285 ""
F B "psp_overflow" 3 285 "int8()" `165  "Constants used in SETUP_PSP() are:"
D G "PSP_ENABLED" 3 287 "0x10"
D G "PSP_DISABLED" 3 288 "0"
c L "psp_overflow" 3 1 3 "FUNCTION"
F N "setup_spi" 3 295 ""
V L "mode" 3 295 "int32" `168 
F B "setup_spi" 3 295 "void(int32 mode)" `167 
F N "spi_write" 3 296 ""
V L "value" 3 296 "int8" `170 
F B "spi_write" 3 296 "void(int8 value)" `169 
F N "spi_write" 3 297 ""
V L "wait" 3 297 "int8" `172 
V L "value" 3 297 "int8" `173 
F B "spi_write" 3 297 "void(int8 wait,int8 value)" `171 
F N "spi_read" 3 298 ""
F B "spi_read" 3 298 "int8()" `174 
F N "spi_read" 3 299 ""
V L "value" 3 299 "int8" `176 
F B "spi_read" 3 299 "int8(int8 value)" `175 
F N "spi_data_is_in" 3 300 ""
F B "spi_data_is_in" 3 300 "int8()" `177  "Constants used in SETUP_SPI() are:"
D G "SPI_DISABLED" 3 302 "0x00"
D G "SPI_MASTER" 3 303 "0x20"
D G "SPI_SLAVE" 3 304 "0x24"
D G "SPI_SCK_IDLE_HIGH" 3 305 "0x10"
D G "SPI_SCK_IDLE_LOW" 3 306 "0x00"
D G "SPI_CLK_DIV_4" 3 307 "0x00"
D G "SPI_CLK_DIV_16" 3 308 "0x01"
D G "SPI_CLK_DIV_64" 3 309 "0x02"
D G "SPI_CLK_T2" 3 310 "0x03"
D G "SPI_SS_DISABLED" 3 311 "0x01"
D G "SPI_XMIT_L_TO_H" 3 313 "0x4000"
D G "SPI_XMIT_H_TO_L" 3 314 "0x0000"
D G "SPI_SAMPLE_AT_MIDDLE" 3 316 "0x0000"
D G "SPI_SAMPLE_AT_END" 3 317 "0x8000"
D G "SPI_L_TO_H" 3 320 "SPI_SCK_IDLE_LOW"
D G "SPI_H_TO_L" 3 321 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 3 1 2 "FUNCTION"
F N "setup_uart" 3 325 ""
V L "baud" 3 325 "int32" `179 
F B "setup_uart" 3 325 "void(int32 baud)" `178 
F N "setup_uart" 3 326 ""
V L "baud" 3 326 "int32" `181 
V L "stream" 3 326 "int8" `182 
F B "setup_uart" 3 326 "void(int32 baud,int8 stream)" `180 
F N "setup_uart" 3 327 ""
V L "baud" 3 327 "int32" `184 
V L "stream" 3 327 "int8" `185 
V L "clock" 3 327 "int32" `186 
F B "setup_uart" 3 327 "void(int32 baud,int8 stream,int32 clock)" `183 
F N "set_uart_speed" 3 328 ""
V L "baud" 3 328 "int32" `188 
F B "set_uart_speed" 3 328 "void(int32 baud)" `187 
F N "set_uart_speed" 3 329 ""
V L "baud" 3 329 "int32" `190 
V L "stream" 3 329 "int8" `191 
F B "set_uart_speed" 3 329 "void(int32 baud,int8 stream)" `189 
F N "set_uart_speed" 3 330 ""
V L "baud" 3 330 "int32" `193 
V L "stream" 3 330 "int8" `194 
V L "clock" 3 330 "int32" `195 
F B "set_uart_speed" 3 330 "void(int32 baud,int8 stream,int32 clock)" `192  "Constants used in setup_uart() are:"
D G "UART_ADDRESS" 3 334 "2"
D G "UART_DATA" 3 335 "4"
c L "set_uart_speed" 3 1 3 "FUNCTION"
F N "setup_comparator" 3 339 ""
V L "mode" 3 339 "int32" `197 
F B "setup_comparator" 3 339 "void(int32 mode)" `196  "Constants used in setup_comparator() are:"
D G "A0_A3_A1_A3" 3 341 "0xfff04"
D G "A0_A3_A1_A2_OUT_ON_A4_A5" 3 342 "0xfcf03"
D G "A0_A3_A1_A3_OUT_ON_A4_A5" 3 343 "0xbcf05"
D G "NC_NC_NC_NC" 3 344 "0x0ff07"
D G "A0_A3_A1_A2" 3 345 "0xfff02"
D G "A0_A3_NC_NC_OUT_ON_A4" 3 346 "0x9ef01"
D G "A0_VR_A1_VR" 3 347 "0x3ff06"
D G "A3_VR_A2_VR" 3 348 "0xcff0e"
D G "CP1_INVERT" 3 349 "0x0000010"
D G "CP2_INVERT" 3 350 "0x0000020"
c L "setup_comparator" 3 1 2 "FUNCTION"
F N "setup_vref" 3 357 ""
V L "mode" 3 357 "int8" `201 
F B "setup_vref" 3 357 "void(int8 mode)" `200  "Constants used in setup_vref() are:"
D G "VREF_LOW" 3 359 "0xa0"
D G "VREF_HIGH" 3 360 "0x80"
D G "VREF_A2" 3 362 "0x40"
c L "setup_vref" 3 1 4 "FUNCTION"
F N "setup_adc" 3 370 ""
V L "mode" 3 370 "int32" `203 
F B "setup_adc" 3 370 "void(int32 mode)" `202 
F N "read_adc" 3 371 ""
F B "read_adc" 3 371 "int8()" `204 
F N "read_adc" 3 372 ""
V L "mode" 3 372 "int8" `206 
F B "read_adc" 3 372 "int8(int8 mode)" `205 
F N "read_adc" 3 373 ""
f G "read_adc" 3 373 "int16()" `207 
F N "read_adc" 3 374 ""
V L "mode" 3 374 "int8" `208 
f G "read_adc" 3 374 "int16(int8 mode,int8 setting)" `207 
F N "adc_done" 3 375 ""
F B "adc_done" 3 375 "int8(int8 mode,int8 setting)" `207  "Constants used for SETUP_ADC() are:"
D G "ADC_OFF" 3 377 "0" "ADC Off"
D G "ADC_CLOCK_DIV_2" 3 378 "0x10000"
D G "ADC_CLOCK_DIV_4" 3 379 "0x4000"
D G "ADC_CLOCK_DIV_8" 3 380 "0x0040"
D G "ADC_CLOCK_DIV_16" 3 381 "0x4040"
D G "ADC_CLOCK_DIV_32" 3 382 "0x0080"
D G "ADC_CLOCK_DIV_64" 3 383 "0x4080"
D G "ADC_CLOCK_INTERNAL" 3 384 "0x00c0" "Internal 2-6us"
c L "adc_done" 3 1 1 "FUNCTION"
F N "setup_adc_ports" 3 387 ""
V L "setting" 3 387 "int8" `209 
F B "setup_adc_ports" 3 387 "void(int8 setting)" `208 
F N "set_analog_pins" 3 388 ""
V L "setting" 3 388 "int8" `211 
F B "set_analog_pins" 3 388 "void(int8 setting)" `210 
F N "set_adc_channel" 3 389 ""
V L "channel" 3 389 "int8" `213 
F B "set_adc_channel" 3 389 "void(int8 channel)" `212  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
D G "NO_ANALOGS" 3 391 "7" "None"
D G "ALL_ANALOG" 3 392 "0" "A0 A1 A2 A3 A5 E0 E1 E2"
D G "AN0_AN1_AN2_AN4_AN5_AN6_AN7_VSS_VREF" 3 393 "1" "A0 A1 A2 A5 E0 E1 E2 VRefh=A3"
D G "AN0_AN1_AN2_AN3_AN4" 3 394 "2" "A0 A1 A2 A3 A5"
D G "AN0_AN1_AN2_AN4_VSS_VREF" 3 395 "3" "A0 A1 A2 A4 VRefh=A3"
D G "AN0_AN1_AN3" 3 396 "4" "A0 A1 A3"
D G "AN0_AN1_VSS_VREF" 3 397 "5" "A0 A1 VRefh=A3"
D G "AN0_AN1_AN4_AN5_AN6_AN7_VREF_VREF" 3 398 "0x08" "A0 A1 A5 E0 E1 E2 VRefh=A3 VRefl=A2"
D G "AN0_AN1_AN2_AN3_AN4_AN5" 3 399 "0x09" "A0 A1 A2 A3 A5 E0"
D G "AN0_AN1_AN2_AN4_AN5_VSS_VREF" 3 400 "0x0A" "A0 A1 A2 A5 E0 VRefh=A3"
D G "AN0_AN1_AN4_AN5_VREF_VREF" 3 401 "0x0B" "A0 A1 A5 E0 VRefh=A3 VRefl=A2"
D G "AN0_AN1_AN4_VREF_VREF" 3 402 "0x0C" "A0 A1 A4 VRefh=A3 VRefl=A2"
D G "AN0_AN1_VREF_VREF" 3 403 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
D G "AN0" 3 404 "0x0E" "A0"
D G "AN0_VREF_VREF" 3 405 "0x0F" "A0 VRefh=A3 VRefl=A2"
D G "ANALOG_RA3_REF" 3 406 "0x1" "!old only provided for compatibility"
D G "A_ANALOG" 3 407 "0x2" "!old only provided for compatibility"
D G "A_ANALOG_RA3_REF" 3 408 "0x3" "!old only provided for compatibility"
D G "RA0_RA1_RA3_ANALOG" 3 409 "0x4" "!old only provided for compatibility"
D G "RA0_RA1_ANALOG_RA3_REF" 3 410 "0x5" "!old only provided for compatibility"
D G "ANALOG_RA3_RA2_REF" 3 411 "0x8" "!old only provided for compatibility"
D G "ANALOG_NOT_RE1_RE2" 3 412 "0x9" "!old only provided for compatibility"
D G "ANALOG_NOT_RE1_RE2_REF_RA3" 3 413 "0xA" "!old only provided for compatibility"
D G "ANALOG_NOT_RE1_RE2_REF_RA3_RA2" 3 414 "0xB" "!old only provided for compatibility"
D G "A_ANALOG_RA3_RA2_REF" 3 415 "0xC" "!old only provided for compatibility"
D G "RA0_RA1_ANALOG_RA3_RA2_REF" 3 416 "0xD" "!old only provided for compatibility"
D G "RA0_ANALOG" 3 417 "0xE" "!old only provided for compatibility"
D G "RA0_ANALOG_RA3_RA2_REF" 3 418 "0xF" "!old only provided for compatibility"
D G "ADC_START_AND_READ" 3 421 "7" "This is the default if nothing is specified"
D G "ADC_START_ONLY" 3 422 "1"
D G "ADC_READ_ONLY" 3 423 "6"
c L "set_adc_channel" 3 1 3 "FUNCTION"
F N "abs" 3 429 ""
V L "x" 3 429 "sint8" `215 
F B "abs" 3 429 "sint8(sint8 x)" `214 
F N "abs" 3 430 ""
V L "x" 3 430 "sint16" `217 
F B "abs" 3 430 "sint16(sint16 x)" `216 
F N "abs" 3 431 ""
V L "x" 3 431 "sint32" `219 
F B "abs" 3 431 "sint32(sint32 x)" `218 
F N "abs" 3 432 ""
V L "x" 3 432 "float" `221 
F B "abs" 3 432 "float(float x)" `220 
F N "_mul" 3 433 ""
V L "??65535" 3 433 "int8" `223 
V L "??65535" 3 433 "int8" `224 
F B "_mul" 3 433 "int16(int8 ,int8 )" `222 
F N "_mul" 3 434 ""
V L "??65535" 3 434 "sint8" `226 
V L "??65535" 3 434 "sint8" `227 
F B "_mul" 3 434 "sint16(sint8 ,sint8 )" `225 
F N "_mul" 3 435 ""
V L "??65535" 3 435 "int16" `229 
V L "??65535" 3 435 "int16" `230 
F B "_mul" 3 435 "int32(int16 ,int16 )" `228 
F N "_mul" 3 436 ""
V L "??65535" 3 436 "sint16" `232 
V L "??65535" 3 436 "sint16" `233 
F B "_mul" 3 436 "sint32(sint16 ,sint16 )" `231  "Memory Manipulation Prototypes:"
F N "read_bank" 3 439 ""
V L "bank" 3 439 "int8" `235 
V L "offset" 3 439 "int8" `236 
F B "read_bank" 3 439 "int8(int8 bank,int8 offset)" `234 
F N "write_bank" 3 440 ""
V L "bank" 3 440 "int8" `238 
V L "offset" 3 440 "int8" `239 
V L "value" 3 440 "int8" `240 
F B "write_bank" 3 440 "void(int8 bank,int8 offset,int8 value)" `237 
F N "strcpy" 3 441 ""
V L "dest" 3 441 "*int8" `242 
V L "src" 3 441 "*int8" `243 
F B "strcpy" 3 441 "void(*int8 dest,*int8 src)" `241 
F N "memset" 3 442 ""
V L "destination" 3 442 "*int8" `245 
V L "value" 3 442 "int8" `246 
V L "num" 3 442 "int16" `247 
F B "memset" 3 442 "void(*int8 destination,int8 value,int16 num)" `244 
F N "memcpy" 3 443 ""
V L "destination" 3 443 "*int8" `249 
V L "source" 3 443 "*int8" `250 
V L "num" 3 443 "int16" `251 
F B "memcpy" 3 443 "void(*int8 destination,*int8 source,int16 num)" `248  "String Prototypes:"
F N "toupper" 3 446 ""
V L "cvalue" 3 446 "int8" `253 
F B "toupper" 3 446 "int8(int8 cvalue)" `252 
F N "tolower" 3 447 ""
V L "cvalue" 3 447 "int8" `255 
F B "tolower" 3 447 "int8(int8 cvalue)" `254 
F N "sprintf" 3 448 ""
V L "string" 3 448 "*int8" `257 
V L "cstring" 3 448 "*int8" `258 
F B "sprintf" 3 448 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `256  "Data Manipulators Prototypes:"
F N "shift_left" 3 451 ""
V L "address" 3 451 "*int8" `261 
V L "bytes" 3 451 "int8" `262 
V L "value" 3 451 "int8" `263 
F B "shift_left" 3 451 "int8(*int8 address,int8 bytes,int8 value)" `260 
F N "shift_right" 3 452 ""
V L "address" 3 452 "*int8" `265 
V L "bytes" 3 452 "int8" `266 
V L "value" 3 452 "int8" `267 
F B "shift_right" 3 452 "int8(*int8 address,int8 bytes,int8 value)" `264 
F N "rotate_left" 3 453 ""
V L "address" 3 453 "*int8" `269 
V L "bytes" 3 453 "int8" `270 
F B "rotate_left" 3 453 "void(*int8 address,int8 bytes)" `268 
F N "rotate_right" 3 454 ""
V L "address" 3 454 "*int8" `272 
V L "bytes" 3 454 "int8" `273 
F B "rotate_right" 3 454 "void(*int8 address,int8 bytes)" `271 
F N "swap" 3 455 ""
V L "value" 3 455 "int8" `275 
F B "swap" 3 455 "void(int8 value)" `274 
F N "make8" 3 456 ""
V L "var" 3 456 "int16" `277 
V L "offset" 3 456 "int8" `278 
F B "make8" 3 456 "int8(int16 var,int8 offset)" `276 
F N "make8" 3 457 ""
V L "var" 3 457 "int32" `280 
V L "offset" 3 457 "int8" `281 
F B "make8" 3 457 "int8(int32 var,int8 offset)" `279 
F N "make16" 3 458 ""
V L "varhigh" 3 458 "int8" `283 
V L "varlow" 3 458 "int8" `284 
F B "make16" 3 458 "int16(int8 varhigh,int8 varlow)" `282 
F N "make32" 3 459 ""
V L "var1" 3 459 "int16" `286 
F B "make32" 3 459 "int32(int16 var1)" `285 
F N "make32" 3 460 ""
V L "var1" 3 460 "int16" `288 
V L "var2" 3 460 "int16" `289 
F B "make32" 3 460 "int32(int16 var1,int16 var2)" `287 
F N "make32" 3 461 ""
V L "var1" 3 461 "int16" `291 
V L "var2" 3 461 "int8" `292 
F B "make32" 3 461 "int32(int16 var1,int8 var2)" `290 
F N "make32" 3 462 ""
V L "var1" 3 462 "int16" `294 
V L "var2" 3 462 "int8" `295 
V L "var3" 3 462 "int8" `296 
F B "make32" 3 462 "int32(int16 var1,int8 var2,int8 var3)" `293 
F N "make32" 3 463 ""
V L "var1" 3 463 "int8" `298 
F B "make32" 3 463 "int32(int8 var1)" `297 
F N "make32" 3 464 ""
V L "var1" 3 464 "int8" `300 
V L "var2" 3 464 "int8" `301 
F B "make32" 3 464 "int32(int8 var1,int8 var2)" `299 
F N "make32" 3 465 ""
V L "var1" 3 465 "int8" `303 
V L "var2" 3 465 "int8" `304 
V L "var3" 3 465 "int8" `305 
F B "make32" 3 465 "int32(int8 var1,int8 var2,int8 var3)" `302 
F N "make32" 3 466 ""
V L "var1" 3 466 "int8" `307 
V L "var2" 3 466 "int8" `308 
V L "var3" 3 466 "int8" `309 
V L "var4" 3 466 "int8" `310 
F B "make32" 3 466 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `306 
F N "make32" 3 467 ""
V L "var1" 3 467 "int8" `312 
V L "var2" 3 467 "int16" `313 
F B "make32" 3 467 "int32(int8 var1,int16 var2)" `311 
F N "make32" 3 468 ""
V L "var1" 3 468 "int8" `315 
V L "var2" 3 468 "int16" `316 
V L "var3" 3 468 "int8" `317 
F B "make32" 3 468 "int32(int8 var1,int16 var2,int8 var3)" `314 
F N "make32" 3 469 ""
V L "var1" 3 469 "int8" `319 
V L "var2" 3 469 "int8" `320 
V L "var3" 3 469 "int16" `321 
F B "make32" 3 469 "int32(int8 var1,int8 var2,int16 var3)" `318 
F N "bit_set" 3 470 ""
V L "var" 3 470 "int8" `323 
V L "bit" 3 470 "int8" `324 
F B "bit_set" 3 470 "void(int8 var,int8 bit)" `322 
F N "bit_set" 3 471 ""
V L "var" 3 471 "int16" `326 
V L "bit" 3 471 "int8" `327 
F B "bit_set" 3 471 "void(int16 var,int8 bit)" `325 
F N "bit_set" 3 472 ""
V L "var" 3 472 "int32" `329 
V L "bit" 3 472 "int8" `330 
F B "bit_set" 3 472 "void(int32 var,int8 bit)" `328 
F N "bit_clear" 3 473 ""
V L "var" 3 473 "int8" `332 
V L "bit" 3 473 "int8" `333 
F B "bit_clear" 3 473 "void(int8 var,int8 bit)" `331 
F N "bit_clear" 3 474 ""
V L "var" 3 474 "int16" `335 
V L "bit" 3 474 "int8" `336 
F B "bit_clear" 3 474 "void(int16 var,int8 bit)" `334 
F N "bit_clear" 3 475 ""
V L "var" 3 475 "int32" `338 
V L "bit" 3 475 "int8" `339 
F B "bit_clear" 3 475 "void(int32 var,int8 bit)" `337 
F N "bit_test" 3 476 ""
V L "var" 3 476 "int8" `341 
V L "bit" 3 476 "int8" `342 
F B "bit_test" 3 476 "int8(int8 var,int8 bit)" `340 
F N "bit_test" 3 477 ""
V L "var" 3 477 "int16" `344 
V L "bit" 3 477 "int8" `345 
F B "bit_test" 3 477 "int8(int16 var,int8 bit)" `343 
F N "bit_test" 3 478 ""
V L "var" 3 478 "int32" `347 
V L "bit" 3 478 "int8" `348 
F B "bit_test" 3 478 "int8(int32 var,int8 bit)" `346  "#use delay() Prototypes:"
F N "delay_cycles" 3 481 ""
V L "count" 3 481 "int8" `350 
F B "delay_cycles" 3 481 "void(int8 count)" `349 
F N "delay_ms" 3 482 ""
V L "time" 3 482 "int16" `352 
F B "delay_ms" 3 482 "void(int16 time)" `351 
F N "delay_us" 3 483 ""
V L "time" 3 483 "int16" `354 
F B "delay_us" 3 483 "void(int16 time)" `353  "#use rs232() Prototypes:"
F N "putchar" 3 486 ""
V L "cdata" 3 486 "int8" `356 
F B "putchar" 3 486 "void(int8 cdata)" `355 
F N "putchar" 3 487 ""
V L "cdata" 3 487 "int8" `358 
V L "stream" 3 487 "int8" `359 
F B "putchar" 3 487 "void(int8 cdata,int8 stream)" `357 
F N "puts" 3 488 ""
V L "string" 3 488 "*int8" `361 
F B "puts" 3 488 "void(*int8 string)" `360 
F N "puts" 3 489 ""
V L "string" 3 489 "*int8" `363 
V L "stream" 3 489 "int8" `364 
F B "puts" 3 489 "void(*int8 string,int8 stream)" `362 
F N "getch" 3 490 ""
F B "getch" 3 490 "int8()" `365 
F N "getch" 3 491 ""
V L "stream" 3 491 "int8" `367 
F B "getch" 3 491 "int8(int8 stream)" `366 
F N "gets" 3 492 ""
V L "string" 3 492 "*int8" `369 
F B "gets" 3 492 "void(*int8 string)" `368 
F N "gets" 3 493 ""
V L "string" 3 493 "*int8" `371 
V L "stream" 3 493 "int8" `372 
F B "gets" 3 493 "void(*int8 string,int8 stream)" `370 
F N "kbhit" 3 494 ""
F B "kbhit" 3 494 "int8()" `373 
F N "kbhit" 3 495 ""
V L "stream" 3 495 "int8" `375 
F B "kbhit" 3 495 "int8(int8 stream)" `374 
F N "printf" 3 496 ""
V L "string" 3 496 "*int8" `377 
F B "printf" 3 496 "void(*int8 string,*int8 _VA_LIST)" `376 
F N "fprintf" 3 497 ""
V L "stream" 3 497 "int8" `380 
V L "string" 3 497 "*int8" `381 
F B "fprintf" 3 497 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `379 
F N "putc_send" 3 498 ""
F B "putc_send" 3 498 "void()" `383 
F N "fputc_send" 3 499 ""
V L "stream" 3 499 "int8" `385 
F B "fputc_send" 3 499 "void(int8 stream)" `384 
F N "rcv_buffer_full" 3 500 ""
F B "rcv_buffer_full" 3 500 "int8()" `386 
F N "rcv_buffer_full" 3 501 ""
V L "stream" 3 501 "int8" `388 
F B "rcv_buffer_full" 3 501 "int8(int8 stream)" `387 
F N "rcv_buffer_bytes" 3 502 ""
F B "rcv_buffer_bytes" 3 502 "int16()" `389 
F N "rcv_buffer_bytes" 3 503 ""
V L "stream" 3 503 "int8" `391 
F B "rcv_buffer_bytes" 3 503 "int16(int8 stream)" `390 
F N "tx_buffer_full" 3 504 ""
F B "tx_buffer_full" 3 504 "int8()" `392 
F N "tx_buffer_full" 3 505 ""
V L "stream" 3 505 "int8" `394 
F B "tx_buffer_full" 3 505 "int8(int8 stream)" `393 
F N "tx_buffer_bytes" 3 506 ""
F B "tx_buffer_bytes" 3 506 "int16()" `395 
F N "tx_buffer_bytes" 3 507 ""
V L "stream" 3 507 "int8" `397 
F B "tx_buffer_bytes" 3 507 "int16(int8 stream)" `396 
F N "linbus_header" 3 508 ""
V L "identifier" 3 508 "int8" `399 
F B "linbus_header" 3 508 "int8(int8 identifier)" `398 
F N "linbus_header" 3 509 ""
V L "stream" 3 509 "int8" `401 
V L "identifier" 3 509 "int8" `402 
F B "linbus_header" 3 509 "int8(int8 stream,int8 identifier)" `400 
F N "linbus_header_hit" 3 510 ""
F B "linbus_header_hit" 3 510 "int8()" `403 
F N "linbus_header_hit" 3 511 ""
V L "stream" 3 511 "int8" `405 
F B "linbus_header_hit" 3 511 "int8(int8 stream)" `404 
F N "linbus_header_get" 3 512 ""
F B "linbus_header_get" 3 512 "int8()" `406 
F N "linbus_header_get" 3 513 ""
V L "stream" 3 513 "int8" `408 
F B "linbus_header_get" 3 513 "int8(int8 stream)" `407 
F N "linbus_rx_response" 3 514 ""
V L "DataPtr" 3 514 "*int8" `410 
V L "count" 3 514 "int8" `411 
F B "linbus_rx_response" 3 514 "int8(*int8 DataPtr,int8 count)" `409 
F N "linbus_rx_response" 3 515 ""
V L "stream" 3 515 "int8" `413 
V L "DataPtr" 3 515 "*int8" `414 
V L "count" 3 515 "int8" `415 
F B "linbus_rx_response" 3 515 "int8(int8 stream,*int8 DataPtr,int8 count)" `412 
F N "linbus_tx_response" 3 516 ""
V L "DataPtr" 3 516 "*int8" `417 
V L "count" 3 516 "int8" `418 
F B "linbus_tx_response" 3 516 "void(*int8 DataPtr,int8 count)" `416 
F N "linbus_tx_response" 3 517 ""
V L "stream" 3 517 "int8" `420 
V L "DataPtr" 3 517 "*int8" `421 
V L "count" 3 517 "int8" `422 
F B "linbus_tx_response" 3 517 "void(int8 stream,*int8 DataPtr,int8 count)" `419 
F N "linbus_checksum_type" 3 518 ""
V L "type" 3 518 "int8" `424 
F B "linbus_checksum_type" 3 518 "void(int8 type)" `423 
F N "linbus_checksum_type" 3 519 ""
V L "stream" 3 519 "int8" `426 
V L "type" 3 519 "int8" `427 
F B "linbus_checksum_type" 3 519 "void(int8 stream,int8 type)" `425  "#use i2c() Prototypes:"
F N "i2c_read" 3 522 ""
F B "i2c_read" 3 522 "int8()" `428 
F N "i2c_read" 3 523 ""
V L "ack" 3 523 "int8" `430 
F B "i2c_read" 3 523 "int8(int8 ack)" `429 
F N "i2c_read" 3 524 ""
V L "stream" 3 524 "int8" `432 
V L "ack" 3 524 "int8" `433 
F B "i2c_read" 3 524 "int8(int8 stream,int8 ack)" `431 
F N "i2c_write" 3 525 ""
V L "data" 3 525 "int8" `435 
F B "i2c_write" 3 525 "int8(int8 data)" `434 
F N "i2c_write" 3 526 ""
V L "stream" 3 526 "int8" `437 
V L "data" 3 526 "int8" `438 
F B "i2c_write" 3 526 "int8(int8 stream,int8 data)" `436 
F N "i2c_start" 3 527 ""
F B "i2c_start" 3 527 "void()" `439 
F N "i2c_start" 3 528 ""
V L "stream" 3 528 "int8" `441 
F B "i2c_start" 3 528 "void(int8 stream)" `440 
F N "i2c_start" 3 529 ""
V L "stream" 3 529 "int8" `443 
V L "restart" 3 529 "int8" `444 
F B "i2c_start" 3 529 "void(int8 stream,int8 restart)" `442 
F N "i2c_stop" 3 530 ""
F B "i2c_stop" 3 530 "void()" `445 
F N "i2c_stop" 3 531 ""
V L "stream" 3 531 "int8" `447 
F B "i2c_stop" 3 531 "void(int8 stream)" `446 
F N "i2c_isr_state" 3 532 ""
F B "i2c_isr_state" 3 532 "int8()" `448 
F N "i2c_slaveaddr" 3 533 ""
V L "addr" 3 533 "int8" `450 
F B "i2c_slaveaddr" 3 533 "void(int8 addr)" `449 
F N "i2c_slaveaddr" 3 534 ""
V L "stream" 3 534 "int8" `452 
V L "addr" 3 534 "int8" `453 
F B "i2c_slaveaddr" 3 534 "void(int8 stream,int8 addr)" `451 
F N "i2c_poll" 3 535 ""
F B "i2c_poll" 3 535 "int8()" `454 
F N "i2c_poll" 3 536 ""
V L "stream" 3 536 "int8" `456 
F B "i2c_poll" 3 536 "int8(int8 stream)" `455 
F N "i2c_init" 3 537 ""
V L "baud" 3 537 "int32" `458 
F B "i2c_init" 3 537 "void(int32 baud)" `457 
F N "i2c_init" 3 538 ""
V L "stream" 3 538 "int8" `460 
V L "baud" 3 538 "int32" `461 
F B "i2c_init" 3 538 "void(int8 stream,int32 baud)" `459 
F N "i2c_transfer" 3 539 ""
V L "address" 3 539 "int8" `463 
V L "wData" 3 539 "*int8" `464 
V L "wCount" 3 539 "int8" `465 
F B "i2c_transfer" 3 539 "int8(int8 address,*int8 wData,int8 wCount)" `462 
F N "i2c_transfer" 3 540 ""
V L "address" 3 540 "int8" `467 
V L "wData" 3 540 "*int8" `468 
V L "wCount" 3 540 "int8" `469 
V L "rData" 3 540 "*int8" `470 
V L "rCount" 3 540 "*int8" `471 
F B "i2c_transfer" 3 540 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `466 
F N "i2c_transfer" 3 541 ""
V L "stream" 3 541 "int8" `473 
V L "address" 3 541 "int8" `474 
V L "wData" 3 541 "*int8" `475 
V L "wCount" 3 541 "int8" `476 
F B "i2c_transfer" 3 541 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `472 
F N "i2c_transfer" 3 542 ""
V L "stream" 3 542 "int8" `478 
V L "address" 3 542 "int8" `479 
V L "wData" 3 542 "*int8" `480 
V L "wCount" 3 542 "int8" `481 
V L "rData" 3 542 "*int8" `482 
V L "rCount" 3 542 "*int8" `483 
F B "i2c_transfer" 3 542 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `477 
F N "i2c_transfer_out" 3 543 ""
V L "address" 3 543 "int8" `485 
V L "wData" 3 543 "*int8" `486 
V L "wCount" 3 543 "int8" `487 
F B "i2c_transfer_out" 3 543 "int8(int8 address,*int8 wData,int8 wCount)" `484 
F N "i2c_transfer_out" 3 544 ""
V L "stream" 3 544 "int8" `489 
V L "address" 3 544 "int8" `490 
V L "wData" 3 544 "*int8" `491 
V L "wCount" 3 544 "int8" `492 
F B "i2c_transfer_out" 3 544 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `488 
F N "i2c_transfer_in" 3 545 ""
V L "address" 3 545 "int8" `494 
V L "rData" 3 545 "*int8" `495 
V L "rCount" 3 545 "int8" `496 
F B "i2c_transfer_in" 3 545 "int8(int8 address,*int8 rData,int8 rCount)" `493 
F N "i2c_transfer_in" 3 546 ""
V L "stream" 3 546 "int8" `498 
V L "address" 3 546 "int8" `499 
V L "rData" 3 546 "*int8" `500 
V L "rCount" 3 546 "int8" `501 
F B "i2c_transfer_in" 3 546 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `497  "#use spi() Prototypes:"
F N "spi_xfer" 3 549 ""
F B "spi_xfer" 3 549 "int8()" `502 
F N "spi_xfer" 3 550 ""
f G "spi_xfer" 3 550 "int16(int8 data)" `503 
F N "spi_xfer" 3 551 ""
f G "spi_xfer" 3 551 "int32(int8 data)" `503 
F N "spi_xfer" 3 552 ""
V L "data" 3 552 "int8" `504 
F B "spi_xfer" 3 552 "int8(int8 data)" `503 
F N "spi_xfer" 3 553 ""
V L "data" 3 553 "int16" `506 
F B "spi_xfer" 3 553 "int16(int16 data)" `505 
F N "spi_xfer" 3 554 ""
V L "data" 3 554 "int32" `508 
F B "spi_xfer" 3 554 "int32(int32 data)" `507 
F N "spi_xfer" 3 555 ""
V L "stream" 3 555 "int8" `510 
V L "data" 3 555 "int8" `511 
F B "spi_xfer" 3 555 "int8(int8 stream,int8 data)" `509 
F N "spi_xfer" 3 556 ""
V L "stream" 3 556 "int8" `513 
V L "data" 3 556 "int16" `514 
F B "spi_xfer" 3 556 "int16(int8 stream,int16 data)" `512 
F N "spi_xfer" 3 557 ""
V L "stream" 3 557 "int8" `516 
V L "data" 3 557 "int32" `517 
F B "spi_xfer" 3 557 "int32(int8 stream,int32 data)" `515 
F N "spi_xfer" 3 558 ""
V L "stream" 3 558 "int8" `519 
V L "data" 3 558 "int8" `520 
V L "bits" 3 558 "int8" `521 
F B "spi_xfer" 3 558 "int8(int8 stream,int8 data,int8 bits)" `518 
F N "spi_xfer" 3 559 ""
V L "stream" 3 559 "int8" `523 
V L "data" 3 559 "int16" `524 
V L "bits" 3 559 "int8" `525 
F B "spi_xfer" 3 559 "int16(int8 stream,int16 data,int8 bits)" `522 
F N "spi_xfer" 3 560 ""
V L "stream" 3 560 "int8" `527 
V L "data" 3 560 "int32" `528 
V L "bits" 3 560 "int8" `529 
F B "spi_xfer" 3 560 "int32(int8 stream,int32 data,int8 bits)" `526 
F N "spi_init" 3 561 ""
V L "baud" 3 561 "int32" `531 
F B "spi_init" 3 561 "void(int32 baud)" `530 
F N "spi_init" 3 562 ""
V L "stream" 3 562 "int8" `533 
V L "baud" 3 562 "int32" `534 
F B "spi_init" 3 562 "void(int8 stream,int32 baud)" `532 
F N "spi_speed" 3 563 ""
V L "baud" 3 563 "int32" `536 
F B "spi_speed" 3 563 "void(int32 baud)" `535 
F N "spi_speed" 3 564 ""
V L "stream" 3 564 "int8" `538 
V L "baud" 3 564 "int32" `539 
F B "spi_speed" 3 564 "void(int8 stream,int32 baud)" `537 
F N "spi_speed" 3 565 ""
V L "stream" 3 565 "int8" `541 
V L "baud" 3 565 "int32" `542 
V L "clock" 3 565 "int32" `543 
F B "spi_speed" 3 565 "void(int8 stream,int32 baud,int32 clock)" `540 
F N "spi_prewrite" 3 566 ""
V L "data" 3 566 "int8" `545 
F B "spi_prewrite" 3 566 "void(int8 data)" `544 
F N "spi_prewrite" 3 567 ""
V L "data" 3 567 "int16" `547 
F B "spi_prewrite" 3 567 "void(int16 data)" `546 
F N "spi_prewrite" 3 568 ""
V L "data" 3 568 "int32" `549 
F B "spi_prewrite" 3 568 "void(int32 data)" `548 
F N "spi_prewrite" 3 569 ""
V L "??65535" 3 569 "int8" `551 
V L "data" 3 569 "int8" `552 
F B "spi_prewrite" 3 569 "void(int8 ,int8 data)" `550 
F N "spi_prewrite" 3 570 ""
V L "??65535" 3 570 "int8" `554 
V L "data" 3 570 "int16" `555 
F B "spi_prewrite" 3 570 "void(int8 ,int16 data)" `553 
F N "spi_prewrite" 3 571 ""
V L "??65535" 3 571 "int8" `557 
V L "data" 3 571 "int32" `558 
F B "spi_prewrite" 3 571 "void(int8 ,int32 data)" `556 
F N "spi_xfer_in" 3 572 ""
F B "spi_xfer_in" 3 572 "int8()" `559 
F N "spi_xfer_in" 3 573 ""
f G "spi_xfer_in" 3 573 "int16(int8 bits)" `560 
F N "spi_xfer_in" 3 574 ""
f G "spi_xfer_in" 3 574 "int32(int8 bits)" `560 
F N "spi_xfer_in" 3 575 ""
V L "bits" 3 575 "int8" `561 
F B "spi_xfer_in" 3 575 "int8(int8 bits)" `560 
F N "spi_xfer_in" 3 576 ""
V L "bits" 3 576 "int8" `563 
f G "spi_xfer_in" 3 576 "int16(int8 bits,int8 bits)" `562 
F N "spi_xfer_in" 3 577 ""
V L "bits" 3 577 "int8" `563 
f G "spi_xfer_in" 3 577 "int32(int8 bits,int8 bits)" `562 
F N "spi_xfer_in" 3 578 ""
V L "stream" 3 578 "int8" `563 
V L "bits" 3 578 "int8" `564 
F B "spi_xfer_in" 3 578 "int8(int8 stream,int8 bits)" `562 
F N "spi_xfer_in" 3 579 ""
V L "stream" 3 579 "int8" `563 
V L "bits" 3 579 "int8" `567 
f G "spi_xfer_in" 3 579 "int16(int8 stream,int8 bits,int16 count)" `565 
F N "spi_xfer_in" 3 580 ""
V L "stream" 3 580 "int8" `563 
V L "bits" 3 580 "int8" `567 
f G "spi_xfer_in" 3 580 "int32(int8 stream,int8 bits,int16 count)" `565 
F N "spi_transfer" 3 581 ""
V L "wData" 3 581 "*int8" `566 
V L "rData" 3 581 "*int8" `567 
V L "count" 3 581 "int16" `568 
F B "spi_transfer" 3 581 "void(*int8 wData,*int8 rData,int16 count)" `565 
F N "spi_transfer" 3 582 ""
V L "stream" 3 582 "int8" `570 
V L "wData" 3 582 "*int8" `571 
V L "rData" 3 582 "*int8" `572 
V L "count" 3 582 "int16" `573 
F B "spi_transfer" 3 582 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `569 
F N "spi_transfer_write" 3 583 ""
V L "wData" 3 583 "*int8" `575 
V L "count" 3 583 "int16" `576 
F B "spi_transfer_write" 3 583 "void(*int8 wData,int16 count)" `574 
F N "spi_transfer_write" 3 584 ""
V L "stream" 3 584 "int8" `578 
V L "wData" 3 584 "*int8" `579 
V L "count" 3 584 "int16" `580 
F B "spi_transfer_write" 3 584 "void(int8 stream,*int8 wData,int16 count)" `577 
F N "spi_transfer_read" 3 585 ""
V L "rData" 3 585 "*int8" `582 
V L "count" 3 585 "int16" `583 
F B "spi_transfer_read" 3 585 "void(*int8 rData,int16 count)" `581 
F N "spi_transfer_read" 3 586 ""
V L "stream" 3 586 "int8" `585 
V L "rData" 3 586 "*int8" `586 
V L "count" 3 586 "int16" `587 
F B "spi_transfer_read" 3 586 "void(int8 stream,*int8 rData,int16 count)" `584  "#use rtos() Prototypes:"
F N "rtos_run" 3 589 ""
F B "rtos_run" 3 589 "void()" `588 
F N "rtos_yield" 3 590 ""
F B "rtos_yield" 3 590 "void()" `589 
F N "rtos_enable" 3 591 ""
V L "task" 3 591 "int8" `591 
F B "rtos_enable" 3 591 "void(int8 task)" `590 
F N "rtos_disable" 3 592 ""
V L "task" 3 592 "int8" `593 
F B "rtos_disable" 3 592 "void(int8 task)" `592 
F N "rtos_terminate" 3 593 ""
F B "rtos_terminate" 3 593 "void()" `594 
F N "rtos_await" 3 594 ""
V L "flag" 3 594 "int8" `596 
F B "rtos_await" 3 594 "void(int8 flag)" `595 
F N "rtos_wait" 3 595 ""
V L "sem" 3 595 "int8" `598 
F B "rtos_wait" 3 595 "void(int8 sem)" `597 
F N "rtos_signal" 3 596 ""
V L "sem" 3 596 "int8" `600 
F B "rtos_signal" 3 596 "void(int8 sem)" `599 
F N "rtos_msg_send" 3 597 ""
V L "task" 3 597 "int8" `602 
V L "msg" 3 597 "int8" `603 
F B "rtos_msg_send" 3 597 "void(int8 task,int8 msg)" `601 
F N "rtos_msg_read" 3 598 ""
F B "rtos_msg_read" 3 598 "int8()" `604 
F N "rtos_msg_poll" 3 599 ""
F B "rtos_msg_poll" 3 599 "int8()" `605 
F N "rtos_overrun" 3 600 ""
V L "task" 3 600 "int8" `607 
F B "rtos_overrun" 3 600 "int8(int8 task)" `606 
F N "rtos_stats" 3 601 ""
V L "task" 3 601 "int8" `609 
V L "stat" 3 601 "*int8" `610 
F B "rtos_stats" 3 601 "void(int8 task,*int8 stat)" `608  "#use timer() Prototypes:"
F N "get_ticks" 3 604 ""
F B "get_ticks" 3 604 "int8()" `611 
F N "get_ticks" 3 605 ""
f G "get_ticks" 3 605 "int16(int8 stream)" `612 
F N "get_ticks" 3 606 ""
f G "get_ticks" 3 606 "int32(int8 stream)" `612 
F N "get_ticks" 3 607 ""
V L "stream" 3 607 "int8" `613 
F B "get_ticks" 3 607 "int8(int8 stream)" `612 
F N "get_ticks" 3 608 ""
V L "stream" 3 608 "int8" `615 
f G "get_ticks" 3 608 "int16(int8 stream)" `614 
F N "get_ticks" 3 609 ""
V L "stream" 3 609 "int8" `615 
f G "get_ticks" 3 609 "int32(int8 stream)" `614 
F N "set_ticks" 3 610 ""
V L "value" 3 610 "int8" `615 
F B "set_ticks" 3 610 "void(int8 value)" `614 
F N "set_ticks" 3 611 ""
V L "value" 3 611 "int16" `617 
F B "set_ticks" 3 611 "void(int16 value)" `616 
F N "set_ticks" 3 612 ""
V L "value" 3 612 "int32" `619 
F B "set_ticks" 3 612 "void(int32 value)" `618 
F N "set_ticks" 3 613 ""
V L "stream" 3 613 "int8" `621 
V L "value" 3 613 "int8" `622 
F B "set_ticks" 3 613 "void(int8 stream,int8 value)" `620 
F N "set_ticks" 3 614 ""
V L "stream" 3 614 "int8" `624 
V L "value" 3 614 "int16" `625 
F B "set_ticks" 3 614 "void(int8 stream,int16 value)" `623 
F N "set_ticks" 3 615 ""
V L "stream" 3 615 "int8" `627 
V L "value" 3 615 "int32" `628 
F B "set_ticks" 3 615 "void(int8 stream,int32 value)" `626  "#use pwm() Prototypes:"
F N "pwm_on" 3 618 ""
F B "pwm_on" 3 618 "void()" `629 
F N "pwm_on" 3 619 ""
V L "stream" 3 619 "int8" `631 
F B "pwm_on" 3 619 "void(int8 stream)" `630 
F N "pwm_off" 3 620 ""
F B "pwm_off" 3 620 "void()" `632 
F N "pwm_off" 3 621 ""
V L "stream" 3 621 "int8" `634 
F B "pwm_off" 3 621 "void(int8 stream)" `633 
F N "pwm_set_duty" 3 622 ""
V L "duty" 3 622 "int16" `636 
F B "pwm_set_duty" 3 622 "void(int16 duty)" `635 
F N "pwm_set_duty" 3 623 ""
V L "stream" 3 623 "int8" `638 
V L "duty" 3 623 "int16" `639 
F B "pwm_set_duty" 3 623 "void(int8 stream,int16 duty)" `637 
F N "pwm_set_duty_percent" 3 624 ""
V L "percent" 3 624 "int16" `641 
F B "pwm_set_duty_percent" 3 624 "void(int16 percent)" `640 
F N "pwm_set_duty_percent" 3 625 ""
V L "stream" 3 625 "int8" `643 
V L "percent" 3 625 "int16" `644 
F B "pwm_set_duty_percent" 3 625 "void(int8 stream,int16 percent)" `642 
F N "pwm_set_frequency" 3 626 ""
V L "frequency" 3 626 "int32" `646 
F B "pwm_set_frequency" 3 626 "void(int32 frequency)" `645 
F N "pwm_set_frequency" 3 627 ""
V L "stream" 3 627 "int8" `648 
V L "frequency" 3 627 "int32" `649 
F B "pwm_set_frequency" 3 627 "void(int8 stream,int32 frequency)" `647 
F N "pwm_get_duty_period" 3 628 ""
F B "pwm_get_duty_period" 3 628 "int16()" `650 
F N "pwm_get_duty_period" 3 629 ""
V L "stream" 3 629 "int8" `652 
F B "pwm_get_duty_period" 3 629 "int16(int8 stream)" `651  "#use capture() Prototypes:"
F N "get_capture_time" 3 632 ""
F B "get_capture_time" 3 632 "int16()" `653 
F N "get_capture_time" 3 633 ""
V L "stream" 3 633 "int8" `655 
F B "get_capture_time" 3 633 "int16(int8 stream)" `654 
F N "get_capture_event" 3 634 ""
F B "get_capture_event" 3 634 "int8()" `656 
F N "get_capture_event" 3 635 ""
V L "stream" 3 635 "int8" `658 
F B "get_capture_event" 3 635 "int8(int8 stream)" `657  "Enviroment Prototypes:"
c L "get_capture_event" 3 1 2 "FUNCTION"
F N "goto_address" 3 648 ""
V L "address" 3 648 "int16" `660 
F B "goto_address" 3 648 "void(int16 address)" `659 
F N "label_address" 3 649 ""
V L "label" 3 649 "int16" `662 
F B "label_address" 3 649 "int16(int16 label)" `661  "Program Memory Read Prototypes:"
F N "read_program_memory" 3 652 ""
V L "address" 3 652 "int16" `664 
V L "DataPtr" 3 652 "*int8" `665 
V L "count" 3 652 "int16" `666 
F B "read_program_memory" 3 652 "void(int16 address,*int8 DataPtr,int16 count)" `663 
F N "read_program_eeprom" 3 653 ""
V L "address" 3 653 "int16" `668 
F B "read_program_eeprom" 3 653 "int16(int16 address)" `667  "Program Memory Write Prototypes:"
F N "write_program_memory" 3 656 ""
V L "address" 3 656 "int16" `670 
V L "DataPtr" 3 656 "*int8" `671 
V L "count" 3 656 "int16" `672 
F B "write_program_memory" 3 656 "void(int16 address,*int8 DataPtr,int16 count)" `669 
F N "write_program_eeprom" 3 657 ""
V L "address" 3 657 "int16" `674 
V L "data" 3 657 "int16" `675 
F B "write_program_eeprom" 3 657 "void(int16 address,int16 data)" `673  "EEPROM Prototypes:"
D G "__EEADDRESS__" 3 664 "unsigned int8"
F N "read_eeprom" 3 667 ""
V L "address" 3 667 "int8" `677 
F B "read_eeprom" 3 667 "int8(int8 address)" `676 
F N "write_eeprom" 3 668 ""
V L "address" 3 668 "int8" `679 
V L "value" 3 668 "int8" `680 
F B "write_eeprom" 3 668 "void(int8 address,int8 value)" `678  "INT"
c L "write_eeprom" 3 1 4 "FUNCTION"
F N "enable_interrupts" 3 675 ""
V L "interrupt" 3 675 "int32" `682 
F B "enable_interrupts" 3 675 "void(int32 interrupt)" `681 
F N "disable_interrupts" 3 676 ""
V L "interrupt" 3 676 "int32" `684 
F B "disable_interrupts" 3 676 "void(int32 interrupt)" `683 
F N "clear_interrupt" 3 677 ""
V L "interrupt" 3 677 "int32" `686 
F B "clear_interrupt" 3 677 "void(int32 interrupt)" `685 
F N "interrupt_active" 3 678 ""
V L "interrupt" 3 678 "int32" `688 
F B "interrupt_active" 3 678 "int8(int32 interrupt)" `687 
F N "interrupt_enabled" 3 679 ""
V L "interrupt" 3 679 "int32" `690 
F B "interrupt_enabled" 3 679 "int8(int32 interrupt)" `689 
F N "ext_int_edge" 3 680 ""
V L "source" 3 680 "int8" `692 
V L "edge" 3 680 "int8" `693 
F B "ext_int_edge" 3 680 "void(int8 source,int8 edge)" `691 
F N "jump_to_isr" 3 681 ""
V L "address" 3 681 "int16" `695 
F B "jump_to_isr" 3 681 "void(int16 address)" `694  "Constants used in EXT_INT_EDGE() are:"
D G "L_TO_H" 3 683 "0x40"
D G "H_TO_L" 3 684 "0"
D G "GLOBAL" 3 686 "0x0BC0"
D G "PERIPH" 3 687 "0x0B40"
D G "INT_RTCC" 3 688 "0x000B20"
D G "INT_RB" 3 689 "0x00FF0B08"
D G "INT_EXT_L2H" 3 690 "0x50000B10"
D G "INT_EXT_H2L" 3 691 "0x60000B10"
D G "INT_EXT" 3 692 "0x000B10"
D G "INT_AD" 3 693 "0x008C40"
D G "INT_TBE" 3 694 "0x008C10"
D G "INT_RDA" 3 695 "0x008C20"
D G "INT_TIMER1" 3 696 "0x008C01"
D G "INT_TIMER2" 3 697 "0x008C02"
D G "INT_CCP1" 3 698 "0x008C04"
D G "INT_CCP2" 3 699 "0x008D01"
D G "INT_SSP" 3 700 "0x008C08"
D G "INT_PSP" 3 701 "0x008C80"
D G "INT_BUSCOL" 3 702 "0x008D08"
D G "INT_EEPROM" 3 703 "0x008D10"
D G "INT_TIMER0" 3 704 "0x000B20"
D G "INT_COMP" 3 705 "0x008D40"
D G "usi8" 2 10 "unsigned int8"
D G "usi16" 2 11 "unsigned int16"
D G "usi32" 2 12 "unsigned int32"
D G "si8" 2 13 "signed   int8"
D G "si16" 2 14 "signed   int16"
D G "si32" 2 15 "signed   int32"
D G "bool" 2 16 "int1"
C L "jump_to_isr" 2 9 1 "FUNCTION"
V G "flag_10ms" 2 19 "int1" `708 
V G "isDs18b20" 2 20 "int1" `709 
D G "bt0" 2 24 "pin_b0"
D G "bt1" 2 28 "pin_b1"
D G "bt2" 2 32 "pin_b2"
D G "bt3" 2 36 "pin_b3"
D G "pin_ds18b20" 2 40 "pin_a0"
D G "pinServo" 2 44 "pin_c1"
D G "pinDLCold" 2 48 "pin_d6"
D G "pinDLHot" 2 52 "pin_d7"
D G "ledTest" 2 55 "pin_b5"
F N "interrupt_timer1" 2 58 ""
F G "interrupt_timer1" 2 59 "void()" `710 
F N "setup_initialize" 2 64 ""
F G "setup_initialize" 2 64 "void()" `711  "! set up timer 1 to timer count is 10ms of one cycle"
C L "setup_initialize" 2 9 1 "FUNCTION"
C L "setup_initialize" 2 9 1 "FUNCTION"
C L "setup_initialize" 2 9 1 "FUNCTION"
V G "countPush" 4 1 "int8" `712 
V G "countTick" 4 2 "int8" `713 
F N "push_btn" 4 4 ""
V L "isRelease" 4 4 "int8" `715 
V L "pin" 4 4 "int8" `716 
F G "push_btn" 4 4 "int8(int8 isRelease,int8 pin)" `714  "! isRelease == 0 --> push button is hold"
C L "push_btn" 4 6 1 "FUNCTION"
C L "push_btn" 4 6 1 "FUNCTION"
F N "tick_btn" 4 24 ""
V L "delay" 4 24 "int8" `725 
V L "pin" 4 24 "int8" `726 
F G "tick_btn" 4 24 "int8(int8 delay,int8 pin)" `724  "! dl is time delay that compute with 10ms for dl is 1"
C L "tick_btn" 4 6 1 "FUNCTION"
D G "pcf8574_addr_wr" 5 1 "0x4E" "0b01001110"
D G "pcf8574_addr_rd" 5 2 "0x4F" "0b01001111"
C L "i2c_reset" 5 4 1 "FUNCTION"
F N "i2c_reset" 5 5 ""
F G "i2c_reset" 5 6 "void()" `727 
C L "i2c_setup_write" 5 4 1 "FUNCTION"
F N "i2c_setup_write" 5 12 ""
F G "i2c_setup_write" 5 13 "void()" `728 
C L "i2c_write_1byte" 5 4 1 "FUNCTION"
F N "i2c_write_1byte" 5 19 ""
V L "payload" 5 19 "int8" `730 
F G "i2c_write_1byte" 5 20 "void(int8 payload)" `729 
D G "lcd_cols" 6 1 "16"
D G "lcd_rows" 6 2 "2"
D G "LCD_CLEARDISPLAY" 6 5 "0x01"
D G "LCD_RETURNHOME" 6 6 "0x02"
D G "LCD_ENTRYMODESET" 6 7 "0x04"
D G "LCD_DISPLAYCONTROL" 6 8 "0x08"
D G "LCD_CURSORSHIFT" 6 9 "0x10"
D G "LCD_FUNCTIONSET" 6 10 "0x20"
D G "LCD_SETCGRAMADDR" 6 11 "0x40"
D G "LCD_SETDDRAMADDR" 6 12 "0x80"
D G "LCD_ENTRYRIGHT" 6 15 "0x00"
D G "LCD_ENTRYLEFT" 6 16 "0x02"
D G "LCD_ENTRYSHIFTINCREMENT" 6 17 "0x01"
D G "LCD_ENTRYSHIFTDECREMENT" 6 18 "0x00"
D G "LCD_DISPLAYON" 6 21 "0x04"
D G "LCD_DISPLAYOFF" 6 22 "0x00"
D G "LCD_CURSORON" 6 23 "0x02"
D G "LCD_CURSOROFF" 6 24 "0x00"
D G "LCD_BLINKON" 6 25 "0x01"
D G "LCD_BLINKOFF" 6 26 "0x00"
D G "LCD_DISPLAYMOVE" 6 29 "0x08"
D G "LCD_CURSORMOVE" 6 30 "0x00"
D G "LCD_MOVERIGHT" 6 31 "0x04"
D G "LCD_MOVELEFT" 6 32 "0x00"
D G "LCD_8BITMODE" 6 35 "0x10"
D G "LCD_4BITMODE" 6 36 "0x00"
D G "LCD_2LINE" 6 37 "0x08"
D G "LCD_1LINE" 6 38 "0x00"
D G "LCD_5x10DOTS" 6 39 "0x04"
D G "LCD_5x8DOTS" 6 40 "0x00"
D G "LCD_BACKLIGHT" 6 43 "0x08"
D G "LCD_NOBACKLIGHT" 6 44 "0x00"
D G "En" 6 46 "0B00000100" "Enable bit"
D G "Rw" 6 47 "0B00000010" "Read/Write bit"
D G "Rs" 6 48 "0B00000001" "Register select bit"
F N "write4bits" 6 50 ""
V L "value" 6 50 "int8" `732 
f G "write4bits" 6 50 "void(int8 value)" `731 
F N "expanderWrite" 6 51 ""
V L "_data" 6 51 "int8" `734 
f G "expanderWrite" 6 51 "void(int8 _data)" `733 
F N "pulseEnable" 6 52 ""
V L "_data" 6 52 "int8" `736 
f G "pulseEnable" 6 52 "void(int8 _data)" `735 
F N "lcd_command" 6 53 ""
V L "value" 6 53 "int8" `738 
f G "lcd_command" 6 53 "void(int8 value)" `737 
F N "lcd_display" 6 54 ""
f G "lcd_display" 6 54 "void()" `739 
F N "lcd_clear" 6 55 ""
f G "lcd_clear" 6 55 "void()" `740 
F N "lcd_home" 6 56 ""
f G "lcd_home" 6 56 "void()" `741 
F N "lcd_send" 6 57 ""
V L "value" 6 57 "int8" `743 
V L "mode" 6 57 "int8" `744 
f G "lcd_send" 6 57 "void(int8 value,int8 mode)" `742 
F N "lcd_data" 6 58 ""
V L "value" 6 58 "int8" `746 
f G "lcd_data" 6 58 "void(int8 value)" `745 
V G "_displayfunction" 6 60 "int8" `747 
V G "_displaycontrol" 6 61 "int8" `748 
V G "_displaymode" 6 62 "int8" `749 
V G "_numlines" 6 63 "int8" `750 
V G "_cols" 6 64 "int8" `751 
V G "_rows" 6 65 "int8" `752 
V G "_backlightval" 6 66 "int8" `753 
F N "lcd_setup" 6 68 ""
F G "lcd_setup" 6 68 "void()" `754 
C L "lcd_setup" 6 4 1 "FUNCTION"
C L "lcd_setup" 6 4 1 "FUNCTION"
C L "lcd_setup" 6 4 1 "FUNCTION"
C L "lcd_setup" 6 4 1 "FUNCTION"
C L "lcd_setup" 6 4 1 "FUNCTION"
C L "lcd_setup" 6 4 1 "FUNCTION"
F N "lcd_clear" 6 109 ""
F G "lcd_clear" 6 109 "void()" `740 
F N "lcd_home" 6 114 ""
F G "lcd_home" 6 114 "void()" `741 
F N "lcd_setCursor" 6 119 ""
V L "col" 6 119 "int8" `756 
V L "row" 6 119 "int8" `757 
F G "lcd_setCursor" 6 119 "void(int8 col,int8 row)" `755 
V L "row_offsets" 6 120 "int8[1]" `758 
F N "lcd_display" 6 127 ""
F G "lcd_display" 6 127 "void()" `739 
F N "lcd_command" 6 132 ""
V L "value" 6 132 "int8" `760 
F G "lcd_command" 6 132 "void(int8 value)" `737 
F N "lcd_data" 6 136 ""
V L "value" 6 136 "int8" `760 
F G "lcd_data" 6 136 "void(int8 value)" `745 
F N "lcd_send" 6 140 ""
V L "value" 6 140 "int8" `743 
V L "mode" 6 140 "int8" `761 
F G "lcd_send" 6 140 "void(int8 value,int8 mode)" `742 
V L "highnib" 6 141 "int8" `759 
V L "lownib" 6 142 "int8" `760 
F N "write4bits" 6 147 ""
V L "value" 6 147 "int8" `762 
F G "write4bits" 6 147 "void(int8 value)" `731 
F N "expanderWrite" 6 152 ""
V L "_data" 6 152 "int8" `762 
F G "expanderWrite" 6 152 "void(int8 _data)" `733 
F N "pulseEnable" 6 156 ""
V L "_data" 6 156 "int8" `762 
F G "pulseEnable" 6 156 "void(int8 _data)" `735 
F N "log_lcd_initialize" 6 163 ""
F G "log_lcd_initialize" 6 163 "void(int8 _data)" `761 
F N "lcd_dis_xx_yy_zz" 6 172 ""
V L "x" 6 172 "int8" `769 
V L "y" 6 172 "int8" `770 
V L "a" 6 172 "int8" `771 
V L "b" 6 172 "int8" `772 
V L "c" 6 172 "int8" `773 
V L "e3" 6 172 "int8" `774 
V L "e2" 6 172 "int8" `775 
V L "e1" 6 172 "int8" `776 
F G "lcd_dis_xx_yy_zz" 6 172 "void(int8 x,int8 y,int8 a,int8 b,int8 c,int8 e3,int8 e2,int8 e1)" `768 
V L "a_ch" 6 173 "int8" `777 
V L "a_dv" 6 173 "int8" `778 
V L "b_ch" 6 173 "int8" `779 
V L "b_dv" 6 173 "int8" `780 
V L "c_ch" 6 173 "int8" `781 
V L "c_dv" 6 173 "int8" `782 
D G "ds13_addr_wr" 7 1 "0xd0"
D G "ds13_addr_rd" 7 2 "0xd1"
V G "time_w" 7 5 "int8[9]" `788 
V G "time_r" 7 6 "int8[9]" `789 
D G "dec_giay_ds" 7 12 "ds1307_bcdToDec(time_r[0])"
D G "dec_phut_ds" 7 13 "ds1307_bcdToDec(time_r[1])"
D G "dec_gio_ds" 7 14 "ds1307_bcdToDec(time_r[2])"
D G "dec_thu_ds" 7 15 "ds1307_bcdToDec(time_r[3])"
D G "dec_ngay_ds" 7 16 "ds1307_bcdToDec(time_r[4])"
D G "dec_thang_ds" 7 17 "ds1307_bcdToDec(time_r[5])"
D G "dec_nam_ds" 7 18 "ds1307_bcdToDec(time_r[6])"
D G "giay_ds" 7 20 "time_r[0]"
D G "phut_ds" 7 21 "time_r[1]"
D G "gio_ds" 7 22 "time_r[2]"
D G "thu_ds" 7 23 "time_r[3]"
D G "ngay_ds" 7 24 "time_r[4]"
D G "thang_ds" 7 25 "time_r[5]"
D G "nam_ds" 7 26 "time_r[6]"
D G "ma_qd" 7 28 "time_w[8]"
D G "ma_ds" 7 29 "time_r[8]"
F N "ds1307_decToBcd" 7 31 ""
V L "val" 7 31 "int8" `791 
F G "ds1307_decToBcd" 7 31 "int8(int8 val)" `790 
F N "ds1307_bcdToDec" 7 35 ""
V L "val" 7 35 "int8" `793 
F G "ds1307_bcdToDec" 7 35 "int8(int8 val)" `792 
F N "ds1307_read_time" 7 39 ""
V L "j" 7 39 "int8" `798 
F G "ds1307_read_time" 7 40 "void(int8 j)" `797 
V L "i" 7 41 "int8" `799 
C L "ds1307_read_time" 7 4 1 "FUNCTION"
F N "ds1307_update_time" 7 53 ""
V L "sel" 7 53 "int8" `801 
F G "ds1307_update_time" 7 54 "void(int8 sel)" `800 
V L "i" 7 55 "int8" `802 
F N "ds1307_setup" 7 67 ""
F G "ds1307_setup" 7 68 "void()" `803 
F N "ds1307_save_ds" 7 76 ""
V L "dcdt" 7 76 "int8" `805 
V L "dt" 7 76 "int8" `806 
F G "ds1307_save_ds" 7 77 "void(int8 dcdt,int8 dt)" `804 
D G "TOUCH_C" 9 36 ""
D G "TOUCH_PIN" 9 39 "PIN_B0"
D G "TOUCH_PIN_LOW" 9 42 "()    output_drive(TOUCH_PIN); output_low(TOUCH_PIN)"
D G "TOUCH_PIN_HIGH" 9 43 "()    output_drive(TOUCH_PIN); output_high(TOUCH_PIN)"
D G "TOUCH_PIN_FLOAT" 9 44 "()  output_float(TOUCH_PIN)"
D G "TOUCH_PIN_READ" 9 45 "()      input_state(TOUCH_PIN)"
C L "touch_read_bit" 9 2 7 "FUNCTION"
F N "touch_read_bit" 9 59 ""
f G "touch_read_bit" 9 59 "int8()" `807  "BYTE touch_read_byte()"
C L "touch_read_bit" 9 2 3 "FUNCTION"
F N "touch_read_byte" 9 67 ""
f G "touch_read_byte" 9 67 "int8()" `808  "BOOLEAN touch_write_bit(int1 data)"
C L "touch_read_byte" 9 2 3 "FUNCTION"
F N "touch_write_bit" 9 75 ""
V L "data" 9 75 "int8" `810 
f G "touch_write_bit" 9 75 "int8(int8 data,int8 value)" `809  "BOOLEAN touch_write_byte(BYTE data)"
C L "touch_write_bit" 9 2 3 "FUNCTION"
F N "touch_write_byte" 9 83 ""
V L "data" 9 83 "int8" `812 
f G "touch_write_byte" 9 83 "int8(int8 data,int8 value)" `811  "BOOLEAN touch_present()"
C L "touch_write_byte" 9 2 3 "FUNCTION"
F N "touch_present" 9 91 ""
f G "touch_present" 9 91 "int8()" `813  "void reset_pulse()"
C L "touch_present" 9 2 3 "FUNCTION"
F N "reset_pulse" 9 99 ""
f G "reset_pulse" 9 99 "void()" `814  "////"
C L "reset_pulse" 9 2 6 "FUNCTION"
F N "touch_read_bit" 9 113 ""
F G "touch_read_bit" 9 114 "int8()" `807 
V L "data" 9 115 "int1" `815 
C L "touch_read_byte" 9 2 4 "FUNCTION"
F N "touch_read_byte" 9 133 ""
F G "touch_read_byte" 9 134 "int8()" `808 
V L "i" 9 135 "int8" `816 
V L "data" 9 135 "int8" `817 
C L "touch_write_bit" 9 2 4 "FUNCTION"
F N "touch_write_bit" 9 149 ""
V L "data" 9 149 "int8" `819 
F G "touch_write_bit" 9 150 "int8(int8 data)" `809 
C L "touch_write_byte" 9 2 4 "FUNCTION"
F N "touch_write_byte" 9 179 ""
V L "data" 9 179 "int8" `819 
F G "touch_write_byte" 9 180 "int8(int8 data)" `811 
V L "i" 9 181 "int8" `818 
C L "touch_present" 9 2 4 "FUNCTION"
F N "touch_present" 9 196 ""
F G "touch_present" 9 197 "int8()" `813 
V L "present" 9 198 "int1" `819 
C L "reset_pulse" 9 2 4 "FUNCTION"
F N "reset_pulse" 9 219 ""
F G "reset_pulse" 9 220 "void()" `814 
D G "search_rom" 8 2 "0xf0"
D G "read_rom" 8 3 "0x33"
D G "match_rom" 8 4 "0x55"
D G "skip_rom" 8 5 "0xcc"
D G "alarm_search" 8 6 "0xec"
D G "read_scratchpad" 8 7 "0xbe"
D G "write_scratchpad" 8 8 "0x4e"
D G "copy_scratchpad" 8 9 "0x48"
D G "convert_t" 8 10 "0x44"
V G "temperature" 8 12 "sint16" `820 
V G "dt_ng" 8 13 "int8" `821 
V G "dt_ngt" 8 13 "int8" `822 
V G "dt_tp" 8 14 "int16" `823 
V G "dt_tpt" 8 14 "int16" `824 
V G "tt" 8 15 "int16" `825 
F N "ds18b20_start" 8 17 ""
F G "ds18b20_start" 8 17 "int8(int16 ,int16 )" `826 
F N "ds18b20_write_bit" 8 30 ""
V L "value" 8 30 "int8" `828 
F G "ds18b20_write_bit" 8 30 "void(int8 value)" `827 
F N "ds18b20_write_byte" 8 40 ""
V L "value" 8 40 "int8" `830 
F G "ds18b20_write_byte" 8 40 "void(int8 value)" `829 
V L "i" 8 41 "int8" `831 
F N "ds18b20_read_bit" 8 45 ""
F G "ds18b20_read_bit" 8 45 "int8()" `832 
V L "value" 8 46 "int1" `833 
F N "ds18b20_read_byte" 8 57 ""
F G "ds18b20_read_byte" 8 57 "int8()" `834 
V L "value" 8 58 "int8" `835 
V L "i" 8 59 "int8" `836 
F N "ds18b20_read_temp_c2" 8 64 ""
V L "raw_temp_value" 8 64 "*int16" `838 
F G "ds18b20_read_temp_c2" 8 64 "int8(*int16 raw_temp_value)" `837 
F N "ds18b20_read_temp" 8 79 ""
F G "ds18b20_read_temp" 8 79 "void(int16 raw_temp_value,int8 pin)" `839 
D G "maxLevel" 10 1 "5"
V G "countLevel" 10 3 "int8" `846 
V G "countLevelRev" 10 4 "int8" `847 
F N "menu" 10 5 ""
F G "menu" 10 5 "void()" `848 
F N "loop" 0 3 ""
F G "loop" 0 3 "void(int8 maxLevel,int8 pin)" `849  "! function to read time rtc from ds1307 sensor"
C L "loop" 0 7 1 "FUNCTION"
C L "loop" 0 7 1 "FUNCTION"
F N "MAIN" 0 15 ""
F G "MAIN" 0 15 "void(int8 pin)" `850  "! setup enviroments"
C L "MAIN" 0 7 1 "FUNCTION"
C L "MAIN" 0 7 1 "FUNCTION"
C L "MAIN" 0 7 1 "FUNCTION"
C L "MAIN" 0 7 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_write_slave" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "i2c_transfer" 3 6
F B "i2c_transfer_out" 3 4
F B "i2c_transfer_in" 3 4
F B "i2c_init" 1 2
F B "i2c_poll" 0 1
F B "i2c_speed" 1 2
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
